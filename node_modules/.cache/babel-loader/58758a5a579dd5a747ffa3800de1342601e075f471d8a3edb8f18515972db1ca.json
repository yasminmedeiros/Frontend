{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nmodule.exports = {\n  // some constants to help with marching squares algorithm\n  // where does the path start for each index?\n  BOTTOMSTART: [1, 9, 13, 104, 713],\n  TOPSTART: [4, 6, 7, 104, 713],\n  LEFTSTART: [8, 12, 14, 208, 1114],\n  RIGHTSTART: [2, 3, 11, 208, 1114],\n  // which way [dx,dy] do we leave a given index?\n  // saddles are already disambiguated\n  NEWDELTA: [null, [-1, 0], [0, -1], [-1, 0], [1, 0], null, [0, -1], [-1, 0], [0, 1], [0, 1], null, [0, 1], [1, 0], [1, 0], [0, -1]],\n  // for each saddle, the first index here is used\n  // for dx||dy<0, the second for dx||dy>0\n  CHOOSESADDLE: {\n    104: [4, 1],\n    208: [2, 8],\n    713: [7, 13],\n    1114: [11, 14]\n  },\n  // after one index has been used for a saddle, which do we\n  // substitute to be used up later?\n  SADDLEREMAINDER: {\n    1: 4,\n    2: 8,\n    4: 1,\n    7: 13,\n    8: 2,\n    11: 14,\n    13: 7,\n    14: 11\n  },\n  // length of a contour, as a multiple of the plot area diagonal, per label\n  LABELDISTANCE: 2,\n  // number of contour levels after which we start increasing the number of\n  // labels we draw. Many contours means they will generally be close\n  // together, so it will be harder to follow a long way to find a label\n  LABELINCREASE: 10,\n  // minimum length of a contour line, as a multiple of the label length,\n  // at which we draw *any* labels\n  LABELMIN: 3,\n  // max number of labels to draw on a single contour path, no matter how long\n  LABELMAX: 10,\n  // constants for the label position cost function\n  LABELOPTIMIZER: {\n    // weight given to edge proximity\n    EDGECOST: 1,\n    // weight given to the angle off horizontal\n    ANGLECOST: 1,\n    // weight given to distance from already-placed labels\n    NEIGHBORCOST: 5,\n    // cost multiplier for labels on the same level\n    SAMELEVELFACTOR: 10,\n    // minimum distance (as a multiple of the label length)\n    // for labels on the same level\n    SAMELEVELDISTANCE: 5,\n    // maximum cost before we won't even place the label\n    MAXCOST: 100,\n    // number of evenly spaced points to look at in the first\n    // iteration of the search\n    INITIALSEARCHPOINTS: 10,\n    // number of binary search iterations after the initial wide search\n    ITERATIONS: 5\n  }\n};","map":{"version":3,"names":["module","exports","BOTTOMSTART","TOPSTART","LEFTSTART","RIGHTSTART","NEWDELTA","CHOOSESADDLE","SADDLEREMAINDER","LABELDISTANCE","LABELINCREASE","LABELMIN","LABELMAX","LABELOPTIMIZER","EDGECOST","ANGLECOST","NEIGHBORCOST","SAMELEVELFACTOR","SAMELEVELDISTANCE","MAXCOST","INITIALSEARCHPOINTS","ITERATIONS"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/contour/constants.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\nmodule.exports = {\n    // some constants to help with marching squares algorithm\n    // where does the path start for each index?\n    BOTTOMSTART: [1, 9, 13, 104, 713],\n    TOPSTART: [4, 6, 7, 104, 713],\n    LEFTSTART: [8, 12, 14, 208, 1114],\n    RIGHTSTART: [2, 3, 11, 208, 1114],\n\n    // which way [dx,dy] do we leave a given index?\n    // saddles are already disambiguated\n    NEWDELTA: [\n        null, [-1, 0], [0, -1], [-1, 0],\n        [1, 0], null, [0, -1], [-1, 0],\n        [0, 1], [0, 1], null, [0, 1],\n        [1, 0], [1, 0], [0, -1]\n    ],\n\n    // for each saddle, the first index here is used\n    // for dx||dy<0, the second for dx||dy>0\n    CHOOSESADDLE: {\n        104: [4, 1],\n        208: [2, 8],\n        713: [7, 13],\n        1114: [11, 14]\n    },\n\n    // after one index has been used for a saddle, which do we\n    // substitute to be used up later?\n    SADDLEREMAINDER: {1: 4, 2: 8, 4: 1, 7: 13, 8: 2, 11: 14, 13: 7, 14: 11},\n\n    // length of a contour, as a multiple of the plot area diagonal, per label\n    LABELDISTANCE: 2,\n\n    // number of contour levels after which we start increasing the number of\n    // labels we draw. Many contours means they will generally be close\n    // together, so it will be harder to follow a long way to find a label\n    LABELINCREASE: 10,\n\n    // minimum length of a contour line, as a multiple of the label length,\n    // at which we draw *any* labels\n    LABELMIN: 3,\n\n    // max number of labels to draw on a single contour path, no matter how long\n    LABELMAX: 10,\n\n    // constants for the label position cost function\n    LABELOPTIMIZER: {\n        // weight given to edge proximity\n        EDGECOST: 1,\n        // weight given to the angle off horizontal\n        ANGLECOST: 1,\n        // weight given to distance from already-placed labels\n        NEIGHBORCOST: 5,\n        // cost multiplier for labels on the same level\n        SAMELEVELFACTOR: 10,\n        // minimum distance (as a multiple of the label length)\n        // for labels on the same level\n        SAMELEVELDISTANCE: 5,\n        // maximum cost before we won't even place the label\n        MAXCOST: 100,\n        // number of evenly spaced points to look at in the first\n        // iteration of the search\n        INITIALSEARCHPOINTS: 10,\n        // number of binary search iterations after the initial wide search\n        ITERATIONS: 5\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AACZA,MAAM,CAACC,OAAO,GAAG;EACb;EACA;EACAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;EACjCC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;EAC7BC,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC;EACjCC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC;EAEjC;EACA;EACAC,QAAQ,EAAE,CACN,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAC/B,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAC9B,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAC5B,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAC1B;EAED;EACA;EACAC,YAAY,EAAE;IACV,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACX,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACX,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACZ,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE;EACjB,CAAC;EAED;EACA;EACAC,eAAe,EAAE;IAAC,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE,CAAC;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE;EAAE,CAAC;EAEvE;EACAC,aAAa,EAAE,CAAC;EAEhB;EACA;EACA;EACAC,aAAa,EAAE,EAAE;EAEjB;EACA;EACAC,QAAQ,EAAE,CAAC;EAEX;EACAC,QAAQ,EAAE,EAAE;EAEZ;EACAC,cAAc,EAAE;IACZ;IACAC,QAAQ,EAAE,CAAC;IACX;IACAC,SAAS,EAAE,CAAC;IACZ;IACAC,YAAY,EAAE,CAAC;IACf;IACAC,eAAe,EAAE,EAAE;IACnB;IACA;IACAC,iBAAiB,EAAE,CAAC;IACpB;IACAC,OAAO,EAAE,GAAG;IACZ;IACA;IACAC,mBAAmB,EAAE,EAAE;IACvB;IACAC,UAAU,EAAE;EAChB;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
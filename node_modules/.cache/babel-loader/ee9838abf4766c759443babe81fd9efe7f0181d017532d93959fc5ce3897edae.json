{"ast":null,"code":"module.exports = slerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n\n  var ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3],\n    bx = b[0],\n    by = b[1],\n    bz = b[2],\n    bw = b[3];\n  var omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  }\n  // calculate coefficients\n  if (1.0 - cosom > 0.000001) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}","map":{"version":3,"names":["module","exports","slerp","out","a","b","t","ax","ay","az","aw","bx","by","bz","bw","omega","cosom","sinom","scale0","scale1","Math","acos","sin"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/gl-quat/slerp.js"],"sourcesContent":["module.exports = slerp\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nfunction slerp (out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n\n  var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n    bx = b[0], by = b[1], bz = b[2], bw = b[3]\n\n  var omega, cosom, sinom, scale0, scale1\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw\n  // adjust signs (if necessary)\n  if (cosom < 0.0) {\n    cosom = -cosom\n    bx = -bx\n    by = -by\n    bz = -bz\n    bw = -bw\n  }\n  // calculate coefficients\n  if ((1.0 - cosom) > 0.000001) {\n    // standard case (slerp)\n    omega = Math.acos(cosom)\n    sinom = Math.sin(omega)\n    scale0 = Math.sin((1.0 - t) * omega) / sinom\n    scale1 = Math.sin(t * omega) / sinom\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t\n    scale1 = t\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx\n  out[1] = scale0 * ay + scale1 * by\n  out[2] = scale0 * az + scale1 * bz\n  out[3] = scale0 * aw + scale1 * bw\n\n  return out\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,KAAK;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAK,CAAEC,GAAG,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EAC5B;EACA;;EAEA,IAAIC,EAAE,GAAGH,CAAC,CAAC,CAAC,CAAC;IAAEI,EAAE,GAAGJ,CAAC,CAAC,CAAC,CAAC;IAAEK,EAAE,GAAGL,CAAC,CAAC,CAAC,CAAC;IAAEM,EAAE,GAAGN,CAAC,CAAC,CAAC,CAAC;IAC5CO,EAAE,GAAGN,CAAC,CAAC,CAAC,CAAC;IAAEO,EAAE,GAAGP,CAAC,CAAC,CAAC,CAAC;IAAEQ,EAAE,GAAGR,CAAC,CAAC,CAAC,CAAC;IAAES,EAAE,GAAGT,CAAC,CAAC,CAAC,CAAC;EAE5C,IAAIU,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM;;EAEvC;EACAH,KAAK,GAAGT,EAAE,GAAGI,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGH,EAAE,GAAGI,EAAE;EAC7C;EACA,IAAIE,KAAK,GAAG,GAAG,EAAE;IACfA,KAAK,GAAG,CAACA,KAAK;IACdL,EAAE,GAAG,CAACA,EAAE;IACRC,EAAE,GAAG,CAACA,EAAE;IACRC,EAAE,GAAG,CAACA,EAAE;IACRC,EAAE,GAAG,CAACA,EAAE;EACV;EACA;EACA,IAAK,GAAG,GAAGE,KAAK,GAAI,QAAQ,EAAE;IAC5B;IACAD,KAAK,GAAGK,IAAI,CAACC,IAAI,CAACL,KAAK,CAAC;IACxBC,KAAK,GAAGG,IAAI,CAACE,GAAG,CAACP,KAAK,CAAC;IACvBG,MAAM,GAAGE,IAAI,CAACE,GAAG,CAAC,CAAC,GAAG,GAAGhB,CAAC,IAAIS,KAAK,CAAC,GAAGE,KAAK;IAC5CE,MAAM,GAAGC,IAAI,CAACE,GAAG,CAAChB,CAAC,GAAGS,KAAK,CAAC,GAAGE,KAAK;EACtC,CAAC,MAAM;IACL;IACA;IACAC,MAAM,GAAG,GAAG,GAAGZ,CAAC;IAChBa,MAAM,GAAGb,CAAC;EACZ;EACA;EACAH,GAAG,CAAC,CAAC,CAAC,GAAGe,MAAM,GAAGX,EAAE,GAAGY,MAAM,GAAGR,EAAE;EAClCR,GAAG,CAAC,CAAC,CAAC,GAAGe,MAAM,GAAGV,EAAE,GAAGW,MAAM,GAAGP,EAAE;EAClCT,GAAG,CAAC,CAAC,CAAC,GAAGe,MAAM,GAAGT,EAAE,GAAGU,MAAM,GAAGN,EAAE;EAClCV,GAAG,CAAC,CAAC,CAAC,GAAGe,MAAM,GAAGR,EAAE,GAAGS,MAAM,GAAGL,EAAE;EAElC,OAAOX,GAAG;AACZ"},"metadata":{},"sourceType":"script","externalDependencies":[]}
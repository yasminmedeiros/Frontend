{"ast":null,"code":"/**\n * inspired by is-number <https://github.com/jonschlinkert/is-number>\n * but significantly simplified and sped up by ignoring number and string constructors\n * ie these return false:\n *   new Number(1)\n *   new String('1')\n */\n\n'use strict';\n\nvar allBlankCharCodes = require('is-string-blank');\nmodule.exports = function (n) {\n  var type = typeof n;\n  if (type === 'string') {\n    var original = n;\n    n = +n;\n    // whitespace strings cast to zero - filter them out\n    if (n === 0 && allBlankCharCodes(original)) return false;\n  } else if (type !== 'number') return false;\n  return n - n < 1;\n};","map":{"version":3,"names":["allBlankCharCodes","require","module","exports","n","type","original"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/fast-isnumeric/index.js"],"sourcesContent":["/**\n * inspired by is-number <https://github.com/jonschlinkert/is-number>\n * but significantly simplified and sped up by ignoring number and string constructors\n * ie these return false:\n *   new Number(1)\n *   new String('1')\n */\n\n'use strict';\n\nvar allBlankCharCodes = require('is-string-blank');\n\nmodule.exports = function(n) {\n    var type = typeof n;\n    if(type === 'string') {\n        var original = n;\n        n = +n;\n        // whitespace strings cast to zero - filter them out\n        if(n===0 && allBlankCharCodes(original)) return false;\n    }\n    else if(type !== 'number') return false;\n\n    return n - n < 1;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAElDC,MAAM,CAACC,OAAO,GAAG,UAASC,CAAC,EAAE;EACzB,IAAIC,IAAI,GAAG,OAAOD,CAAC;EACnB,IAAGC,IAAI,KAAK,QAAQ,EAAE;IAClB,IAAIC,QAAQ,GAAGF,CAAC;IAChBA,CAAC,GAAG,CAACA,CAAC;IACN;IACA,IAAGA,CAAC,KAAG,CAAC,IAAIJ,iBAAiB,CAACM,QAAQ,CAAC,EAAE,OAAO,KAAK;EACzD,CAAC,MACI,IAAGD,IAAI,KAAK,QAAQ,EAAE,OAAO,KAAK;EAEvC,OAAOD,CAAC,GAAGA,CAAC,GAAG,CAAC;AACpB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\nvar clamp = require('clamp');\nmodule.exports = calcSDF;\nvar INF = 1e20;\nfunction calcSDF(src, options) {\n  if (!options) options = {};\n  var cutoff = options.cutoff == null ? 0.25 : options.cutoff;\n  var radius = options.radius == null ? 8 : options.radius;\n  var channel = options.channel || 0;\n  var w, h, size, data, intData, stride, ctx, canvas, imgData, i, l;\n\n  // handle image container\n  if (ArrayBuffer.isView(src) || Array.isArray(src)) {\n    if (!options.width || !options.height) throw Error('For raw data width and height should be provided by options');\n    w = options.width, h = options.height;\n    data = src;\n    if (!options.stride) stride = Math.floor(src.length / w / h);else stride = options.stride;\n  } else {\n    if (window.HTMLCanvasElement && src instanceof window.HTMLCanvasElement) {\n      canvas = src;\n      ctx = canvas.getContext('2d');\n      w = canvas.width, h = canvas.height;\n      imgData = ctx.getImageData(0, 0, w, h);\n      data = imgData.data;\n      stride = 4;\n    } else if (window.CanvasRenderingContext2D && src instanceof window.CanvasRenderingContext2D) {\n      canvas = src.canvas;\n      ctx = src;\n      w = canvas.width, h = canvas.height;\n      imgData = ctx.getImageData(0, 0, w, h);\n      data = imgData.data;\n      stride = 4;\n    } else if (window.ImageData && src instanceof window.ImageData) {\n      imgData = src;\n      w = src.width, h = src.height;\n      data = imgData.data;\n      stride = 4;\n    }\n  }\n  size = Math.max(w, h);\n\n  //convert int data to floats\n  if (window.Uint8ClampedArray && data instanceof window.Uint8ClampedArray || window.Uint8Array && data instanceof window.Uint8Array) {\n    intData = data;\n    data = Array(w * h);\n    for (i = 0, l = intData.length; i < l; i++) {\n      data[i] = intData[i * stride + channel] / 255;\n    }\n  } else {\n    if (stride !== 1) throw Error('Raw data can have only 1 value per pixel');\n  }\n\n  // temporary arrays for the distance transform\n  var gridOuter = Array(w * h);\n  var gridInner = Array(w * h);\n  var f = Array(size);\n  var d = Array(size);\n  var z = Array(size + 1);\n  var v = Array(size);\n  for (i = 0, l = w * h; i < l; i++) {\n    var a = data[i];\n    gridOuter[i] = a === 1 ? 0 : a === 0 ? INF : Math.pow(Math.max(0, 0.5 - a), 2);\n    gridInner[i] = a === 1 ? INF : a === 0 ? 0 : Math.pow(Math.max(0, a - 0.5), 2);\n  }\n  edt(gridOuter, w, h, f, d, v, z);\n  edt(gridInner, w, h, f, d, v, z);\n  var dist = window.Float32Array ? new Float32Array(w * h) : new Array(w * h);\n  for (i = 0, l = w * h; i < l; i++) {\n    dist[i] = clamp(1 - ((gridOuter[i] - gridInner[i]) / radius + cutoff), 0, 1);\n  }\n  return dist;\n}\n\n// 2D Euclidean distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/dt/\nfunction edt(data, width, height, f, d, v, z) {\n  for (var x = 0; x < width; x++) {\n    for (var y = 0; y < height; y++) {\n      f[y] = data[y * width + x];\n    }\n    edt1d(f, d, v, z, height);\n    for (y = 0; y < height; y++) {\n      data[y * width + x] = d[y];\n    }\n  }\n  for (y = 0; y < height; y++) {\n    for (x = 0; x < width; x++) {\n      f[x] = data[y * width + x];\n    }\n    edt1d(f, d, v, z, width);\n    for (x = 0; x < width; x++) {\n      data[y * width + x] = Math.sqrt(d[x]);\n    }\n  }\n}\n\n// 1D squared distance transform\nfunction edt1d(f, d, v, z, n) {\n  v[0] = 0;\n  z[0] = -INF;\n  z[1] = +INF;\n  for (var q = 1, k = 0; q < n; q++) {\n    var s = (f[q] + q * q - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);\n    while (s <= z[k]) {\n      k--;\n      s = (f[q] + q * q - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);\n    }\n    k++;\n    v[k] = q;\n    z[k] = s;\n    z[k + 1] = +INF;\n  }\n  for (q = 0, k = 0; q < n; q++) {\n    while (z[k + 1] < q) {\n      k++;\n    }\n    d[q] = (q - v[k]) * (q - v[k]) + f[v[k]];\n  }\n}","map":{"version":3,"names":["clamp","require","module","exports","calcSDF","INF","src","options","cutoff","radius","channel","w","h","size","data","intData","stride","ctx","canvas","imgData","i","l","ArrayBuffer","isView","Array","isArray","width","height","Error","Math","floor","length","window","HTMLCanvasElement","getContext","getImageData","CanvasRenderingContext2D","ImageData","max","Uint8ClampedArray","Uint8Array","gridOuter","gridInner","f","d","z","v","a","pow","edt","dist","Float32Array","x","y","edt1d","sqrt","n","q","k","s"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/bitmap-sdf/index.js"],"sourcesContent":["'use strict'\r\n\r\nvar clamp = require('clamp')\r\n\r\nmodule.exports = calcSDF\r\n\r\nvar INF = 1e20;\r\n\r\nfunction calcSDF(src, options) {\r\n    if (!options) options = {}\r\n\r\n    var cutoff = options.cutoff == null ? 0.25 : options.cutoff\r\n    var radius = options.radius == null ? 8 : options.radius\r\n    var channel = options.channel || 0\r\n    var w, h, size, data, intData, stride, ctx, canvas, imgData, i, l\r\n\r\n    // handle image container\r\n    if (ArrayBuffer.isView(src) || Array.isArray(src)) {\r\n        if (!options.width || !options.height) throw Error('For raw data width and height should be provided by options')\r\n        w = options.width, h = options.height\r\n        data = src\r\n\r\n        if (!options.stride) stride = Math.floor(src.length / w / h)\r\n        else stride = options.stride\r\n    }\r\n    else {\r\n        if (window.HTMLCanvasElement && src instanceof window.HTMLCanvasElement) {\r\n            canvas = src\r\n            ctx = canvas.getContext('2d')\r\n            w = canvas.width, h = canvas.height\r\n            imgData = ctx.getImageData(0, 0, w, h)\r\n            data = imgData.data\r\n            stride = 4\r\n        }\r\n        else if (window.CanvasRenderingContext2D && src instanceof window.CanvasRenderingContext2D) {\r\n            canvas = src.canvas\r\n            ctx = src\r\n            w = canvas.width, h = canvas.height\r\n            imgData = ctx.getImageData(0, 0, w, h)\r\n            data = imgData.data\r\n            stride = 4\r\n        }\r\n        else if (window.ImageData && src instanceof window.ImageData) {\r\n            imgData = src\r\n            w = src.width, h = src.height\r\n            data = imgData.data\r\n            stride = 4\r\n        }\r\n    }\r\n\r\n    size = Math.max(w, h)\r\n\r\n    //convert int data to floats\r\n    if ((window.Uint8ClampedArray && data instanceof window.Uint8ClampedArray) || (window.Uint8Array && data instanceof window.Uint8Array)) {\r\n        intData = data\r\n        data = Array(w*h)\r\n\r\n        for (i = 0, l = intData.length; i < l; i++) {\r\n            data[i] = intData[i*stride + channel] / 255\r\n        }\r\n    }\r\n    else {\r\n        if (stride !== 1) throw Error('Raw data can have only 1 value per pixel')\r\n    }\r\n\r\n    // temporary arrays for the distance transform\r\n    var gridOuter = Array(w * h)\r\n    var gridInner = Array(w * h)\r\n    var f = Array(size)\r\n    var d = Array(size)\r\n    var z = Array(size + 1)\r\n    var v = Array(size)\r\n\r\n    for (i = 0, l = w * h; i < l; i++) {\r\n        var a = data[i]\r\n        gridOuter[i] = a === 1 ? 0 : a === 0 ? INF : Math.pow(Math.max(0, 0.5 - a), 2)\r\n        gridInner[i] = a === 1 ? INF : a === 0 ? 0 : Math.pow(Math.max(0, a - 0.5), 2)\r\n    }\r\n\r\n    edt(gridOuter, w, h, f, d, v, z)\r\n    edt(gridInner, w, h, f, d, v, z)\r\n\r\n    var dist = window.Float32Array ? new Float32Array(w * h) : new Array(w * h)\r\n\r\n    for (i = 0, l = w*h; i < l; i++) {\r\n        dist[i] = clamp(1 - ( (gridOuter[i] - gridInner[i]) / radius + cutoff), 0, 1)\r\n    }\r\n\r\n    return dist\r\n}\r\n\r\n// 2D Euclidean distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/dt/\r\nfunction edt(data, width, height, f, d, v, z) {\r\n    for (var x = 0; x < width; x++) {\r\n        for (var y = 0; y < height; y++) {\r\n            f[y] = data[y * width + x]\r\n        }\r\n        edt1d(f, d, v, z, height)\r\n        for (y = 0; y < height; y++) {\r\n            data[y * width + x] = d[y]\r\n        }\r\n    }\r\n    for (y = 0; y < height; y++) {\r\n        for (x = 0; x < width; x++) {\r\n            f[x] = data[y * width + x]\r\n        }\r\n        edt1d(f, d, v, z, width)\r\n        for (x = 0; x < width; x++) {\r\n            data[y * width + x] = Math.sqrt(d[x])\r\n        }\r\n    }\r\n}\r\n\r\n// 1D squared distance transform\r\nfunction edt1d(f, d, v, z, n) {\r\n    v[0] = 0;\r\n    z[0] = -INF\r\n    z[1] = +INF\r\n\r\n    for (var q = 1, k = 0; q < n; q++) {\r\n        var s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k])\r\n        while (s <= z[k]) {\r\n            k--\r\n            s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k])\r\n        }\r\n        k++\r\n        v[k] = q\r\n        z[k] = s\r\n        z[k + 1] = +INF\r\n    }\r\n\r\n    for (q = 0, k = 0; q < n; q++) {\r\n        while (z[k + 1] < q) k++\r\n        d[q] = (q - v[k]) * (q - v[k]) + f[v[k]]\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Coptic calendar for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) February 2010.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n/** Implementation of the Coptic calendar.\n    See <a href=\"http://en.wikipedia.org/wiki/Coptic_calendar\">http://en.wikipedia.org/wiki/Coptic_calendar</a>.\n    See also Calendrical Calculations: The Millennium Edition\n    (<a href=\"http://emr.cs.iit.edu/home/reingold/calendar-book/index.shtml\">http://emr.cs.iit.edu/home/reingold/calendar-book/index.shtml</a>).\n    @class CopticCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction CopticCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\nCopticCalendar.prototype = new main.baseCalendar();\nassign(CopticCalendar.prototype, {\n  /** The calendar name.\n      @memberof CopticCalendar */\n  name: 'Coptic',\n  /** Julian date of start of Coptic epoch: 29 August 284 CE (Gregorian).\n      @memberof CopticCalendar */\n  jdEpoch: 1825029.5,\n  /** Days per month in a common year.\n      @memberof CopticCalendar */\n  daysPerMonth: [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 5],\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof CopticCalendar */\n  hasYearZero: false,\n  /** The minimum month number.\n      @memberof CopticCalendar */\n  minMonth: 1,\n  /** The first month in the year.\n      @memberof CopticCalendar */\n  firstMonth: 1,\n  /** The minimum day number.\n      @memberof CopticCalendar */\n  minDay: 1,\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof CopticCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Coptic',\n      epochs: ['BAM', 'AM'],\n      monthNames: ['Thout', 'Paopi', 'Hathor', 'Koiak', 'Tobi', 'Meshir', 'Paremhat', 'Paremoude', 'Pashons', 'Paoni', 'Epip', 'Mesori', 'Pi Kogi Enavot'],\n      monthNamesShort: ['Tho', 'Pao', 'Hath', 'Koi', 'Tob', 'Mesh', 'Pat', 'Pad', 'Pash', 'Pao', 'Epi', 'Meso', 'PiK'],\n      dayNames: ['Tkyriaka', 'Pesnau', 'Pshoment', 'Peftoou', 'Ptiou', 'Psoou', 'Psabbaton'],\n      dayNamesShort: ['Tky', 'Pes', 'Psh', 'Pef', 'Pti', 'Pso', 'Psa'],\n      dayNamesMin: ['Tk', 'Pes', 'Psh', 'Pef', 'Pt', 'Pso', 'Psa'],\n      digits: null,\n      dateFormat: 'dd/mm/yyyy',\n      firstDay: 0,\n      isRTL: false\n    }\n  },\n  /** Determine whether this date is in a leap year.\n      @memberof CopticCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n    var year = date.year() + (date.year() < 0 ? 1 : 0); // No year zero\n    return year % 4 === 3 || year % 4 === -1;\n  },\n  /** Retrieve the number of months in a year.\n      @memberof CopticCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {number} The number of months.\n      @throws Error if an invalid year or a different calendar used. */\n  monthsInYear: function monthsInYear(year) {\n    this._validate(year, this.minMonth, this.minDay, main.local.invalidYear || main.regionalOptions[''].invalidYear);\n    return 13;\n  },\n  /** Determine the week of the year for a date.\n      @memberof CopticCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number) the month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Sunday of this week starting on Sunday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(-checkDate.dayOfWeek(), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n  /** Retrieve the number of days in a month.\n      @memberof CopticCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 13 && this.leapYear(date.year()) ? 1 : 0);\n  },\n  /** Determine whether this date is a week day.\n      @memberof CopticCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param month {number} The month to examine.\n      @param day {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return (this.dayOfWeek(year, month, day) || 7) < 6;\n  },\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof CopticCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number) the month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n    year = date.year();\n    if (year < 0) {\n      year++;\n    } // No year zero\n    return date.day() + (date.month() - 1) * 30 + (year - 1) * 365 + Math.floor(year / 4) + this.jdEpoch - 1;\n  },\n  /** Create a new date from a Julian date.\n      @memberof CopticCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    var c = Math.floor(jd) + 0.5 - this.jdEpoch;\n    var year = Math.floor((c - Math.floor((c + 366) / 1461)) / 365) + 1;\n    if (year <= 0) {\n      year--;\n    } // No year zero\n    c = Math.floor(jd) + 0.5 - this.newDate(year, 1, 1).toJD();\n    var month = Math.floor(c / 30) + 1;\n    var day = c - (month - 1) * 30 + 1;\n    return this.newDate(year, month, day);\n  }\n});\n\n// Coptic calendar implementation\nmain.calendars.coptic = CopticCalendar;","map":{"version":3,"names":["main","require","assign","CopticCalendar","language","local","regionalOptions","prototype","baseCalendar","name","jdEpoch","daysPerMonth","hasYearZero","minMonth","firstMonth","minDay","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","dateFormat","firstDay","isRTL","leapYear","year","date","_validate","invalidYear","monthsInYear","weekOfYear","month","day","checkDate","newDate","add","dayOfWeek","Math","floor","dayOfYear","daysInMonth","invalidMonth","weekDay","toJD","invalidDate","fromJD","jd","c","calendars","coptic"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/world-calendars/dist/calendars/coptic.js"],"sourcesContent":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n﻿/* http://keith-wood.name/calendars.html\n   Coptic calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) February 2010.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Coptic calendar.\n    See <a href=\"http://en.wikipedia.org/wiki/Coptic_calendar\">http://en.wikipedia.org/wiki/Coptic_calendar</a>.\n    See also Calendrical Calculations: The Millennium Edition\n    (<a href=\"http://emr.cs.iit.edu/home/reingold/calendar-book/index.shtml\">http://emr.cs.iit.edu/home/reingold/calendar-book/index.shtml</a>).\n    @class CopticCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction CopticCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nCopticCalendar.prototype = new main.baseCalendar;\n\nassign(CopticCalendar.prototype, {\n    /** The calendar name.\n        @memberof CopticCalendar */\n    name: 'Coptic',\n    /** Julian date of start of Coptic epoch: 29 August 284 CE (Gregorian).\n        @memberof CopticCalendar */\n    jdEpoch: 1825029.5,\n    /** Days per month in a common year.\n        @memberof CopticCalendar */\n    daysPerMonth: [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 5],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof CopticCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof CopticCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof CopticCalendar */\n    firstMonth: 1,\n    /** The minimum day number.\n        @memberof CopticCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof CopticCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Coptic',\n            epochs: ['BAM', 'AM'],\n            monthNames: ['Thout', 'Paopi', 'Hathor', 'Koiak', 'Tobi', 'Meshir',\n            'Paremhat', 'Paremoude', 'Pashons', 'Paoni', 'Epip', 'Mesori', 'Pi Kogi Enavot'],\n            monthNamesShort: ['Tho', 'Pao', 'Hath', 'Koi', 'Tob', 'Mesh',\n            'Pat', 'Pad', 'Pash', 'Pao', 'Epi', 'Meso', 'PiK'],\n            dayNames: ['Tkyriaka', 'Pesnau', 'Pshoment', 'Peftoou', 'Ptiou', 'Psoou', 'Psabbaton'],\n            dayNamesShort: ['Tky', 'Pes', 'Psh', 'Pef', 'Pti', 'Pso', 'Psa'],\n            dayNamesMin: ['Tk', 'Pes', 'Psh', 'Pef', 'Pt', 'Pso', 'Psa'],\n            digits: null,\n            dateFormat: 'dd/mm/yyyy',\n            firstDay: 0,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof CopticCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        var year = date.year() + (date.year() < 0 ? 1 : 0); // No year zero\n        return year % 4 === 3 || year % 4 === -1;\n    },\n\n    /** Retrieve the number of months in a year.\n        @memberof CopticCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of months.\n        @throws Error if an invalid year or a different calendar used. */\n    monthsInYear: function(year) {\n        this._validate(year, this.minMonth, this.minDay,\n            main.local.invalidYear || main.regionalOptions[''].invalidYear);\n        return 13;\n    },\n\n    /** Determine the week of the year for a date.\n        @memberof CopticCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number) the month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Sunday of this week starting on Sunday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(-checkDate.dayOfWeek(), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof CopticCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return this.daysPerMonth[date.month() - 1] +\n            (date.month() === 13 && this.leapYear(date.year()) ? 1 : 0);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof CopticCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param month {number} The month to examine.\n        @param day {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return (this.dayOfWeek(year, month, day) || 7) < 6;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof CopticCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number) the month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        year = date.year();\n        if (year < 0) { year++; } // No year zero\n        return date.day() + (date.month() - 1) * 30 +\n            (year - 1) * 365 + Math.floor(year / 4) + this.jdEpoch - 1;\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof CopticCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        var c = Math.floor(jd) + 0.5 - this.jdEpoch;\n        var year = Math.floor((c - Math.floor((c + 366) / 1461)) / 365) + 1;\n        if (year <= 0) { year--; } // No year zero\n        c = Math.floor(jd) + 0.5 - this.newDate(year, 1, 1).toJD();\n        var month = Math.floor(c / 30) + 1;\n        var day = c - (month - 1) * 30 + 1;\n        return this.newDate(year, month, day);\n    }\n});\n\n// Coptic calendar implementation\nmain.calendars.coptic = CopticCalendar;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
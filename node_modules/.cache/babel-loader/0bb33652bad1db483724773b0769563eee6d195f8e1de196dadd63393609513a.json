{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar polybool = require('polybooljs');\nvar Registry = require('../../registry');\nvar Color = require('../../components/color');\nvar Fx = require('../../components/fx');\nvar polygon = require('../../lib/polygon');\nvar throttle = require('../../lib/throttle');\nvar makeEventData = require('../../components/fx/helpers').makeEventData;\nvar getFromId = require('./axis_ids').getFromId;\nvar clearGlCanvases = require('../../lib/clear_gl_canvases');\nvar redrawReglTraces = require('../../plot_api/subroutines').redrawReglTraces;\nvar constants = require('./constants');\nvar MINSELECT = constants.MINSELECT;\nvar filteredPolygon = polygon.filter;\nvar polygonTester = polygon.tester;\nfunction getAxId(ax) {\n  return ax._id;\n}\nfunction prepSelect(e, startX, startY, dragOptions, mode) {\n  var gd = dragOptions.gd;\n  var fullLayout = gd._fullLayout;\n  var zoomLayer = fullLayout._zoomlayer;\n  var dragBBox = dragOptions.element.getBoundingClientRect();\n  var plotinfo = dragOptions.plotinfo;\n  var xs = plotinfo.xaxis._offset;\n  var ys = plotinfo.yaxis._offset;\n  var x0 = startX - dragBBox.left;\n  var y0 = startY - dragBBox.top;\n  var x1 = x0;\n  var y1 = y0;\n  var path0 = 'M' + x0 + ',' + y0;\n  var pw = dragOptions.xaxes[0]._length;\n  var ph = dragOptions.yaxes[0]._length;\n  var allAxes = dragOptions.xaxes.concat(dragOptions.yaxes);\n  var subtract = e.altKey;\n  var filterPoly, selectionTester, mergedPolygons, currentPolygon;\n  var i, searchInfo, eventData;\n  coerceSelectionsCache(e, gd, dragOptions);\n  if (mode === 'lasso') {\n    filterPoly = filteredPolygon([[x0, y0]], constants.BENDPX);\n  }\n  var outlines = zoomLayer.selectAll('path.select-outline-' + plotinfo.id).data([1, 2]);\n  outlines.enter().append('path').attr('class', function (d) {\n    return 'select-outline select-outline-' + d + ' select-outline-' + plotinfo.id;\n  }).attr('transform', 'translate(' + xs + ', ' + ys + ')').attr('d', path0 + 'Z');\n  var corners = zoomLayer.append('path').attr('class', 'zoombox-corners').style({\n    fill: Color.background,\n    stroke: Color.defaultLine,\n    'stroke-width': 1\n  }).attr('transform', 'translate(' + xs + ', ' + ys + ')').attr('d', 'M0,0Z');\n  var throttleID = fullLayout._uid + constants.SELECTID;\n  var selection = [];\n\n  // find the traces to search for selection points\n  var searchTraces = determineSearchTraces(gd, dragOptions.xaxes, dragOptions.yaxes, dragOptions.subplot);\n  function axValue(ax) {\n    var index = ax._id.charAt(0) === 'y' ? 1 : 0;\n    return function (v) {\n      return ax.p2d(v[index]);\n    };\n  }\n  function ascending(a, b) {\n    return a - b;\n  }\n\n  // allow subplots to override fillRangeItems routine\n  var fillRangeItems;\n  if (plotinfo.fillRangeItems) {\n    fillRangeItems = plotinfo.fillRangeItems;\n  } else {\n    if (mode === 'select') {\n      fillRangeItems = function fillRangeItems(eventData, poly) {\n        var ranges = eventData.range = {};\n        for (i = 0; i < allAxes.length; i++) {\n          var ax = allAxes[i];\n          var axLetter = ax._id.charAt(0);\n          ranges[ax._id] = [ax.p2d(poly[axLetter + 'min']), ax.p2d(poly[axLetter + 'max'])].sort(ascending);\n        }\n      };\n    } else {\n      fillRangeItems = function fillRangeItems(eventData, poly, filterPoly) {\n        var dataPts = eventData.lassoPoints = {};\n        for (i = 0; i < allAxes.length; i++) {\n          var ax = allAxes[i];\n          dataPts[ax._id] = filterPoly.filtered.map(axValue(ax));\n        }\n      };\n    }\n  }\n  dragOptions.moveFn = function (dx0, dy0) {\n    x1 = Math.max(0, Math.min(pw, dx0 + x0));\n    y1 = Math.max(0, Math.min(ph, dy0 + y0));\n    var dx = Math.abs(x1 - x0);\n    var dy = Math.abs(y1 - y0);\n    if (mode === 'select') {\n      var direction = fullLayout.selectdirection;\n      if (fullLayout.selectdirection === 'any') {\n        if (dy < Math.min(dx * 0.6, MINSELECT)) direction = 'h';else if (dx < Math.min(dy * 0.6, MINSELECT)) direction = 'v';else direction = 'd';\n      } else {\n        direction = fullLayout.selectdirection;\n      }\n      if (direction === 'h') {\n        // horizontal motion: make a vertical box\n        currentPolygon = [[x0, 0], [x0, ph], [x1, ph], [x1, 0]];\n        currentPolygon.xmin = Math.min(x0, x1);\n        currentPolygon.xmax = Math.max(x0, x1);\n        currentPolygon.ymin = Math.min(0, ph);\n        currentPolygon.ymax = Math.max(0, ph);\n        // extras to guide users in keeping a straight selection\n        corners.attr('d', 'M' + currentPolygon.xmin + ',' + (y0 - MINSELECT) + 'h-4v' + 2 * MINSELECT + 'h4Z' + 'M' + (currentPolygon.xmax - 1) + ',' + (y0 - MINSELECT) + 'h4v' + 2 * MINSELECT + 'h-4Z');\n      } else if (direction === 'v') {\n        // vertical motion: make a horizontal box\n        currentPolygon = [[0, y0], [0, y1], [pw, y1], [pw, y0]];\n        currentPolygon.xmin = Math.min(0, pw);\n        currentPolygon.xmax = Math.max(0, pw);\n        currentPolygon.ymin = Math.min(y0, y1);\n        currentPolygon.ymax = Math.max(y0, y1);\n        corners.attr('d', 'M' + (x0 - MINSELECT) + ',' + currentPolygon.ymin + 'v-4h' + 2 * MINSELECT + 'v4Z' + 'M' + (x0 - MINSELECT) + ',' + (currentPolygon.ymax - 1) + 'v4h' + 2 * MINSELECT + 'v-4Z');\n      } else if (direction === 'd') {\n        // diagonal motion\n        currentPolygon = [[x0, y0], [x0, y1], [x1, y1], [x1, y0]];\n        currentPolygon.xmin = Math.min(x0, x1);\n        currentPolygon.xmax = Math.max(x0, x1);\n        currentPolygon.ymin = Math.min(y0, y1);\n        currentPolygon.ymax = Math.max(y0, y1);\n        corners.attr('d', 'M0,0Z');\n      }\n    } else if (mode === 'lasso') {\n      filterPoly.addPt([x1, y1]);\n      currentPolygon = filterPoly.filtered;\n    }\n\n    // create outline & tester\n    if (dragOptions.selectionDefs && dragOptions.selectionDefs.length) {\n      mergedPolygons = mergePolygons(dragOptions.mergedPolygons, currentPolygon, subtract);\n      currentPolygon.subtract = subtract;\n      selectionTester = multiTester(dragOptions.selectionDefs.concat([currentPolygon]));\n    } else {\n      mergedPolygons = [currentPolygon];\n      selectionTester = polygonTester(currentPolygon);\n    }\n\n    // draw selection\n    drawSelection(mergedPolygons, outlines);\n    throttle.throttle(throttleID, constants.SELECTDELAY, function () {\n      selection = [];\n      var thisSelection;\n      var traceSelections = [];\n      var traceSelection;\n      for (i = 0; i < searchTraces.length; i++) {\n        searchInfo = searchTraces[i];\n        traceSelection = searchInfo._module.selectPoints(searchInfo, selectionTester);\n        traceSelections.push(traceSelection);\n        thisSelection = fillSelectionItem(traceSelection, searchInfo);\n        if (selection.length) {\n          for (var j = 0; j < thisSelection.length; j++) {\n            selection.push(thisSelection[j]);\n          }\n        } else selection = thisSelection;\n      }\n      eventData = {\n        points: selection\n      };\n      updateSelectedState(gd, searchTraces, eventData);\n      fillRangeItems(eventData, currentPolygon, filterPoly);\n      dragOptions.gd.emit('plotly_selecting', eventData);\n    });\n  };\n  dragOptions.clickFn = function (numClicks, evt) {\n    var clickmode = fullLayout.clickmode;\n    corners.remove();\n    throttle.done(throttleID).then(function () {\n      throttle.clear(throttleID);\n      if (numClicks === 2) {\n        // clear selection on doubleclick\n        outlines.remove();\n        for (i = 0; i < searchTraces.length; i++) {\n          searchInfo = searchTraces[i];\n          searchInfo._module.selectPoints(searchInfo, false);\n        }\n        updateSelectedState(gd, searchTraces);\n        clearSelectionsCache(dragOptions);\n        gd.emit('plotly_deselect', null);\n      } else {\n        if (clickmode.indexOf('select') > -1) {\n          selectOnClick(evt, gd, dragOptions.xaxes, dragOptions.yaxes, dragOptions.subplot, dragOptions, outlines);\n        }\n        if (clickmode === 'event') {\n          // TODO: remove in v2 - this was probably never intended to work as it does,\n          // but in case anyone depends on it we don't want to break it now.\n          // Note that click-to-select introduced pre v2 also emitts proper\n          // event data when clickmode is having 'select' in its flag list.\n          gd.emit('plotly_selected', undefined);\n        }\n      }\n      Fx.click(gd, evt);\n    });\n  };\n  dragOptions.doneFn = function () {\n    corners.remove();\n    throttle.done(throttleID).then(function () {\n      throttle.clear(throttleID);\n      dragOptions.gd.emit('plotly_selected', eventData);\n      if (currentPolygon && dragOptions.selectionDefs) {\n        // save last polygons\n        currentPolygon.subtract = subtract;\n        dragOptions.selectionDefs.push(currentPolygon);\n\n        // we have to keep reference to arrays container\n        dragOptions.mergedPolygons.length = 0;\n        [].push.apply(dragOptions.mergedPolygons, mergedPolygons);\n      }\n    });\n  };\n}\nfunction selectOnClick(evt, gd, xAxes, yAxes, subplot, dragOptions, polygonOutlines) {\n  var hoverData = gd._hoverdata;\n  var clickmode = gd._fullLayout.clickmode;\n  var sendEvents = clickmode.indexOf('event') > -1;\n  var selection = [];\n  var searchTraces, searchInfo, currentSelectionDef, selectionTester, traceSelection;\n  var thisTracesSelection, pointOrBinSelected, subtract, eventData, i;\n  if (isHoverDataSet(hoverData)) {\n    coerceSelectionsCache(evt, gd, dragOptions);\n    searchTraces = determineSearchTraces(gd, xAxes, yAxes, subplot);\n    var clickedPtInfo = extractClickedPtInfo(hoverData, searchTraces);\n    var isBinnedTrace = clickedPtInfo.pointNumbers.length > 0;\n\n    // Note: potentially costly operation isPointOrBinSelected is\n    // called as late as possible through the use of an assignment\n    // in an if condition.\n    if (isBinnedTrace ? isOnlyThisBinSelected(searchTraces, clickedPtInfo) : isOnlyOnePointSelected(searchTraces) && (pointOrBinSelected = isPointOrBinSelected(clickedPtInfo))) {\n      if (polygonOutlines) polygonOutlines.remove();\n      for (i = 0; i < searchTraces.length; i++) {\n        searchInfo = searchTraces[i];\n        searchInfo._module.selectPoints(searchInfo, false);\n      }\n      updateSelectedState(gd, searchTraces);\n      clearSelectionsCache(dragOptions);\n      if (sendEvents) {\n        gd.emit('plotly_deselect', null);\n      }\n    } else {\n      subtract = evt.shiftKey && (pointOrBinSelected !== undefined ? pointOrBinSelected : isPointOrBinSelected(clickedPtInfo));\n      currentSelectionDef = newPointSelectionDef(clickedPtInfo.pointNumber, clickedPtInfo.searchInfo, subtract);\n      var allSelectionDefs = dragOptions.selectionDefs.concat([currentSelectionDef]);\n      selectionTester = multiTester(allSelectionDefs);\n      for (i = 0; i < searchTraces.length; i++) {\n        traceSelection = searchTraces[i]._module.selectPoints(searchTraces[i], selectionTester);\n        thisTracesSelection = fillSelectionItem(traceSelection, searchTraces[i]);\n        if (selection.length) {\n          for (var j = 0; j < thisTracesSelection.length; j++) {\n            selection.push(thisTracesSelection[j]);\n          }\n        } else selection = thisTracesSelection;\n      }\n      eventData = {\n        points: selection\n      };\n      updateSelectedState(gd, searchTraces, eventData);\n      if (currentSelectionDef && dragOptions) {\n        dragOptions.selectionDefs.push(currentSelectionDef);\n      }\n      if (polygonOutlines) drawSelection(dragOptions.mergedPolygons, polygonOutlines);\n      if (sendEvents) {\n        gd.emit('plotly_selected', eventData);\n      }\n    }\n  }\n}\n\n/**\n * Constructs a new point selection definition object.\n */\nfunction newPointSelectionDef(pointNumber, searchInfo, subtract) {\n  return {\n    pointNumber: pointNumber,\n    searchInfo: searchInfo,\n    subtract: subtract\n  };\n}\nfunction isPointSelectionDef(o) {\n  return 'pointNumber' in o && 'searchInfo' in o;\n}\n\n/*\n * Constructs a new point number tester.\n */\nfunction newPointNumTester(pointSelectionDef) {\n  return {\n    xmin: 0,\n    xmax: 0,\n    ymin: 0,\n    ymax: 0,\n    pts: [],\n    contains: function contains(pt, omitFirstEdge, pointNumber, searchInfo) {\n      var idxWantedTrace = pointSelectionDef.searchInfo.cd[0].trace._expandedIndex;\n      var idxActualTrace = searchInfo.cd[0].trace._expandedIndex;\n      return idxActualTrace === idxWantedTrace && pointNumber === pointSelectionDef.pointNumber;\n    },\n    isRect: false,\n    degenerate: false,\n    subtract: pointSelectionDef.subtract\n  };\n}\n\n/**\n * Wraps multiple selection testers.\n *\n * @param {Array} list - An array of selection testers.\n *\n * @return a selection tester object with a contains function\n * that can be called to evaluate a point against all wrapped\n * selection testers that were passed in list.\n */\nfunction multiTester(list) {\n  var testers = [];\n  var xmin = isPointSelectionDef(list[0]) ? 0 : list[0][0][0];\n  var xmax = xmin;\n  var ymin = isPointSelectionDef(list[0]) ? 0 : list[0][0][1];\n  var ymax = ymin;\n  for (var i = 0; i < list.length; i++) {\n    if (isPointSelectionDef(list[i])) {\n      testers.push(newPointNumTester(list[i]));\n    } else {\n      var tester = polygon.tester(list[i]);\n      tester.subtract = list[i].subtract;\n      testers.push(tester);\n      xmin = Math.min(xmin, tester.xmin);\n      xmax = Math.max(xmax, tester.xmax);\n      ymin = Math.min(ymin, tester.ymin);\n      ymax = Math.max(ymax, tester.ymax);\n    }\n  }\n\n  /**\n   * Tests if the given point is within this tester.\n   *\n   * @param {Array} pt - [0] is the x coordinate, [1] is the y coordinate of the point.\n   * @param {*} arg - An optional parameter to pass down to wrapped testers.\n   * @param {number} pointNumber - The point number of the point within the underlying data array.\n   * @param {number} searchInfo - An object identifying the trace the point is contained in.\n   *\n   * @return {boolean} true if point is considered to be selected, false otherwise.\n   */\n  function contains(pt, arg, pointNumber, searchInfo) {\n    var contained = false;\n    for (var i = 0; i < testers.length; i++) {\n      if (testers[i].contains(pt, arg, pointNumber, searchInfo)) {\n        // if contained by subtract tester - exclude the point\n        contained = testers[i].subtract === false;\n      }\n    }\n    return contained;\n  }\n  return {\n    xmin: xmin,\n    xmax: xmax,\n    ymin: ymin,\n    ymax: ymax,\n    pts: [],\n    contains: contains,\n    isRect: false,\n    degenerate: false\n  };\n}\nfunction coerceSelectionsCache(evt, gd, dragOptions) {\n  var fullLayout = gd._fullLayout;\n  var zoomLayer = fullLayout._zoomlayer;\n  var plotinfo = dragOptions.plotinfo;\n  var selectingOnSameSubplot = fullLayout._lastSelectedSubplot && fullLayout._lastSelectedSubplot === plotinfo.id;\n  var hasModifierKey = evt.shiftKey || evt.altKey;\n  if (selectingOnSameSubplot && hasModifierKey && plotinfo.selection && plotinfo.selection.selectionDefs && !dragOptions.selectionDefs) {\n    // take over selection definitions from prev mode, if any\n    dragOptions.selectionDefs = plotinfo.selection.selectionDefs;\n    dragOptions.mergedPolygons = plotinfo.selection.mergedPolygons;\n  } else if (!hasModifierKey || !plotinfo.selection) {\n    clearSelectionsCache(dragOptions);\n  }\n\n  // clear selection outline when selecting a different subplot\n  if (!selectingOnSameSubplot) {\n    clearSelect(zoomLayer);\n    fullLayout._lastSelectedSubplot = plotinfo.id;\n  }\n}\nfunction clearSelectionsCache(dragOptions) {\n  var plotinfo = dragOptions.plotinfo;\n  plotinfo.selection = {};\n  plotinfo.selection.selectionDefs = dragOptions.selectionDefs = [];\n  plotinfo.selection.mergedPolygons = dragOptions.mergedPolygons = [];\n}\nfunction determineSearchTraces(gd, xAxes, yAxes, subplot) {\n  var searchTraces = [];\n  var xAxisIds = xAxes.map(getAxId);\n  var yAxisIds = yAxes.map(getAxId);\n  var cd, trace, i;\n  for (i = 0; i < gd.calcdata.length; i++) {\n    cd = gd.calcdata[i];\n    trace = cd[0].trace;\n    if (trace.visible !== true || !trace._module || !trace._module.selectPoints) continue;\n    if (subplot && (trace.subplot === subplot || trace.geo === subplot)) {\n      searchTraces.push(createSearchInfo(trace._module, cd, xAxes[0], yAxes[0]));\n    } else if (trace.type === 'splom' &&\n    // FIXME: make sure we don't have more than single axis for splom\n    trace._xaxes[xAxisIds[0]] && trace._yaxes[yAxisIds[0]]) {\n      var info = createSearchInfo(trace._module, cd, xAxes[0], yAxes[0]);\n      info.scene = gd._fullLayout._splomScenes[trace.uid];\n      searchTraces.push(info);\n    } else {\n      if (xAxisIds.indexOf(trace.xaxis) === -1) continue;\n      if (yAxisIds.indexOf(trace.yaxis) === -1) continue;\n      searchTraces.push(createSearchInfo(trace._module, cd, getFromId(gd, trace.xaxis), getFromId(gd, trace.yaxis)));\n    }\n  }\n  return searchTraces;\n  function createSearchInfo(module, calcData, xaxis, yaxis) {\n    return {\n      _module: module,\n      cd: calcData,\n      xaxis: xaxis,\n      yaxis: yaxis\n    };\n  }\n}\nfunction drawSelection(polygons, outlines) {\n  var paths = [];\n  var i, d;\n  for (i = 0; i < polygons.length; i++) {\n    var ppts = polygons[i];\n    paths.push(ppts.join('L') + 'L' + ppts[0]);\n  }\n  d = polygons.length > 0 ? 'M' + paths.join('M') + 'Z' : 'M0,0Z';\n  outlines.attr('d', d);\n}\nfunction isHoverDataSet(hoverData) {\n  return hoverData && Array.isArray(hoverData) && hoverData[0].hoverOnBox !== true;\n}\nfunction extractClickedPtInfo(hoverData, searchTraces) {\n  var hoverDatum = hoverData[0];\n  var pointNumber = -1;\n  var pointNumbers = [];\n  var searchInfo, i;\n  for (i = 0; i < searchTraces.length; i++) {\n    searchInfo = searchTraces[i];\n    if (hoverDatum.fullData._expandedIndex === searchInfo.cd[0].trace._expandedIndex) {\n      // Special case for box (and violin)\n      if (hoverDatum.hoverOnBox === true) {\n        break;\n      }\n\n      // Hint: in some traces like histogram, one graphical element\n      // doesn't correspond to one particular data point, but to\n      // bins of data points. Thus, hoverDatum can have a binNumber\n      // property instead of pointNumber.\n      if (hoverDatum.pointNumber !== undefined) {\n        pointNumber = hoverDatum.pointNumber;\n      } else if (hoverDatum.binNumber !== undefined) {\n        pointNumber = hoverDatum.binNumber;\n        pointNumbers = hoverDatum.pointNumbers;\n      }\n      break;\n    }\n  }\n  return {\n    pointNumber: pointNumber,\n    pointNumbers: pointNumbers,\n    searchInfo: searchInfo\n  };\n}\nfunction isPointOrBinSelected(clickedPtInfo) {\n  var trace = clickedPtInfo.searchInfo.cd[0].trace;\n  var ptNum = clickedPtInfo.pointNumber;\n  var ptNums = clickedPtInfo.pointNumbers;\n  var ptNumsSet = ptNums.length > 0;\n\n  // When pointsNumbers is set (e.g. histogram's binning),\n  // it is assumed that when the first point of\n  // a bin is selected, all others are as well\n  var ptNumToTest = ptNumsSet ? ptNums[0] : ptNum;\n\n  // TODO potential performance improvement\n  // Primarily we need this function to determine if a click adds\n  // or subtracts from a selection.\n  // In cases `trace.selectedpoints` is a huge array, indexOf\n  // might be slow. One remedy would be to introduce a hash somewhere.\n  return trace.selectedpoints ? trace.selectedpoints.indexOf(ptNumToTest) > -1 : false;\n}\nfunction isOnlyThisBinSelected(searchTraces, clickedPtInfo) {\n  var tracesWithSelectedPts = [];\n  var searchInfo, trace, isSameTrace, i;\n  for (i = 0; i < searchTraces.length; i++) {\n    searchInfo = searchTraces[i];\n    if (searchInfo.cd[0].trace.selectedpoints && searchInfo.cd[0].trace.selectedpoints.length > 0) {\n      tracesWithSelectedPts.push(searchInfo);\n    }\n  }\n  if (tracesWithSelectedPts.length === 1) {\n    isSameTrace = tracesWithSelectedPts[0] === clickedPtInfo.searchInfo;\n    if (isSameTrace) {\n      trace = clickedPtInfo.searchInfo.cd[0].trace;\n      if (trace.selectedpoints.length === clickedPtInfo.pointNumbers.length) {\n        for (i = 0; i < clickedPtInfo.pointNumbers.length; i++) {\n          if (trace.selectedpoints.indexOf(clickedPtInfo.pointNumbers[i]) < 0) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction isOnlyOnePointSelected(searchTraces) {\n  var len = 0;\n  var searchInfo, trace, i;\n  for (i = 0; i < searchTraces.length; i++) {\n    searchInfo = searchTraces[i];\n    trace = searchInfo.cd[0].trace;\n    if (trace.selectedpoints) {\n      if (trace.selectedpoints.length > 1) return false;\n      len += trace.selectedpoints.length;\n      if (len > 1) return false;\n    }\n  }\n  return len === 1;\n}\nfunction updateSelectedState(gd, searchTraces, eventData) {\n  var i, searchInfo, cd, trace;\n\n  // before anything else, update preGUI if necessary\n  for (i = 0; i < searchTraces.length; i++) {\n    var fullInputTrace = searchTraces[i].cd[0].trace._fullInput;\n    var tracePreGUI = gd._fullLayout._tracePreGUI[fullInputTrace.uid];\n    if (tracePreGUI.selectedpoints === undefined) {\n      tracePreGUI.selectedpoints = fullInputTrace._input.selectedpoints || null;\n    }\n  }\n  if (eventData) {\n    var pts = eventData.points || [];\n    for (i = 0; i < searchTraces.length; i++) {\n      trace = searchTraces[i].cd[0].trace;\n      trace._input.selectedpoints = trace._fullInput.selectedpoints = [];\n      if (trace._fullInput !== trace) trace.selectedpoints = [];\n    }\n    for (i = 0; i < pts.length; i++) {\n      var pt = pts[i];\n      var data = pt.data;\n      var fullData = pt.fullData;\n      if (pt.pointIndices) {\n        [].push.apply(data.selectedpoints, pt.pointIndices);\n        if (trace._fullInput !== trace) {\n          [].push.apply(fullData.selectedpoints, pt.pointIndices);\n        }\n      } else {\n        data.selectedpoints.push(pt.pointIndex);\n        if (trace._fullInput !== trace) {\n          fullData.selectedpoints.push(pt.pointIndex);\n        }\n      }\n    }\n  } else {\n    for (i = 0; i < searchTraces.length; i++) {\n      trace = searchTraces[i].cd[0].trace;\n      delete trace.selectedpoints;\n      delete trace._input.selectedpoints;\n      if (trace._fullInput !== trace) {\n        delete trace._fullInput.selectedpoints;\n      }\n    }\n  }\n  var hasRegl = false;\n  for (i = 0; i < searchTraces.length; i++) {\n    searchInfo = searchTraces[i];\n    cd = searchInfo.cd;\n    trace = cd[0].trace;\n    if (Registry.traceIs(trace, 'regl')) {\n      hasRegl = true;\n    }\n    var _module = searchInfo._module;\n    var fn = _module.styleOnSelect || _module.style;\n    if (fn) fn(gd, cd);\n  }\n  if (hasRegl) {\n    clearGlCanvases(gd);\n    redrawReglTraces(gd);\n  }\n}\nfunction mergePolygons(list, poly, subtract) {\n  var res;\n  if (subtract) {\n    res = polybool.difference({\n      regions: list,\n      inverted: false\n    }, {\n      regions: [poly],\n      inverted: false\n    });\n    return res.regions;\n  }\n  res = polybool.union({\n    regions: list,\n    inverted: false\n  }, {\n    regions: [poly],\n    inverted: false\n  });\n  return res.regions;\n}\nfunction fillSelectionItem(selection, searchInfo) {\n  if (Array.isArray(selection)) {\n    var cd = searchInfo.cd;\n    var trace = searchInfo.cd[0].trace;\n    for (var i = 0; i < selection.length; i++) {\n      selection[i] = makeEventData(selection[i], trace, cd);\n    }\n  }\n  return selection;\n}\nfunction clearSelect(zoomlayer) {\n  // until we get around to persistent selections, remove the outline\n  // here. The selection itself will be removed when the plot redraws\n  // at the end.\n  zoomlayer.selectAll('.select-outline').remove();\n}\nmodule.exports = {\n  prepSelect: prepSelect,\n  clearSelect: clearSelect,\n  selectOnClick: selectOnClick\n};","map":{"version":3,"names":["polybool","require","Registry","Color","Fx","polygon","throttle","makeEventData","getFromId","clearGlCanvases","redrawReglTraces","constants","MINSELECT","filteredPolygon","filter","polygonTester","tester","getAxId","ax","_id","prepSelect","e","startX","startY","dragOptions","mode","gd","fullLayout","_fullLayout","zoomLayer","_zoomlayer","dragBBox","element","getBoundingClientRect","plotinfo","xs","xaxis","_offset","ys","yaxis","x0","left","y0","top","x1","y1","path0","pw","xaxes","_length","ph","yaxes","allAxes","concat","subtract","altKey","filterPoly","selectionTester","mergedPolygons","currentPolygon","i","searchInfo","eventData","coerceSelectionsCache","BENDPX","outlines","selectAll","id","data","enter","append","attr","d","corners","style","fill","background","stroke","defaultLine","throttleID","_uid","SELECTID","selection","searchTraces","determineSearchTraces","subplot","axValue","index","charAt","v","p2d","ascending","a","b","fillRangeItems","poly","ranges","range","length","axLetter","sort","dataPts","lassoPoints","filtered","map","moveFn","dx0","dy0","Math","max","min","dx","abs","dy","direction","selectdirection","xmin","xmax","ymin","ymax","addPt","selectionDefs","mergePolygons","multiTester","drawSelection","SELECTDELAY","thisSelection","traceSelections","traceSelection","_module","selectPoints","push","fillSelectionItem","j","points","updateSelectedState","emit","clickFn","numClicks","evt","clickmode","remove","done","then","clear","clearSelectionsCache","indexOf","selectOnClick","undefined","click","doneFn","apply","xAxes","yAxes","polygonOutlines","hoverData","_hoverdata","sendEvents","currentSelectionDef","thisTracesSelection","pointOrBinSelected","isHoverDataSet","clickedPtInfo","extractClickedPtInfo","isBinnedTrace","pointNumbers","isOnlyThisBinSelected","isOnlyOnePointSelected","isPointOrBinSelected","shiftKey","newPointSelectionDef","pointNumber","allSelectionDefs","isPointSelectionDef","o","newPointNumTester","pointSelectionDef","pts","contains","pt","omitFirstEdge","idxWantedTrace","cd","trace","_expandedIndex","idxActualTrace","isRect","degenerate","list","testers","arg","contained","selectingOnSameSubplot","_lastSelectedSubplot","hasModifierKey","clearSelect","xAxisIds","yAxisIds","calcdata","visible","geo","createSearchInfo","type","_xaxes","_yaxes","info","scene","_splomScenes","uid","module","calcData","polygons","paths","ppts","join","Array","isArray","hoverOnBox","hoverDatum","fullData","binNumber","ptNum","ptNums","ptNumsSet","ptNumToTest","selectedpoints","tracesWithSelectedPts","isSameTrace","len","fullInputTrace","_fullInput","tracePreGUI","_tracePreGUI","_input","pointIndices","pointIndex","hasRegl","traceIs","fn","styleOnSelect","res","difference","regions","inverted","union","zoomlayer","exports"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/plots/cartesian/select.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar polybool = require('polybooljs');\n\nvar Registry = require('../../registry');\nvar Color = require('../../components/color');\nvar Fx = require('../../components/fx');\n\nvar polygon = require('../../lib/polygon');\nvar throttle = require('../../lib/throttle');\nvar makeEventData = require('../../components/fx/helpers').makeEventData;\nvar getFromId = require('./axis_ids').getFromId;\nvar clearGlCanvases = require('../../lib/clear_gl_canvases');\nvar redrawReglTraces = require('../../plot_api/subroutines').redrawReglTraces;\n\nvar constants = require('./constants');\nvar MINSELECT = constants.MINSELECT;\n\nvar filteredPolygon = polygon.filter;\nvar polygonTester = polygon.tester;\n\nfunction getAxId(ax) { return ax._id; }\n\nfunction prepSelect(e, startX, startY, dragOptions, mode) {\n    var gd = dragOptions.gd;\n    var fullLayout = gd._fullLayout;\n    var zoomLayer = fullLayout._zoomlayer;\n    var dragBBox = dragOptions.element.getBoundingClientRect();\n    var plotinfo = dragOptions.plotinfo;\n    var xs = plotinfo.xaxis._offset;\n    var ys = plotinfo.yaxis._offset;\n    var x0 = startX - dragBBox.left;\n    var y0 = startY - dragBBox.top;\n    var x1 = x0;\n    var y1 = y0;\n    var path0 = 'M' + x0 + ',' + y0;\n    var pw = dragOptions.xaxes[0]._length;\n    var ph = dragOptions.yaxes[0]._length;\n    var allAxes = dragOptions.xaxes.concat(dragOptions.yaxes);\n    var subtract = e.altKey;\n\n    var filterPoly, selectionTester, mergedPolygons, currentPolygon;\n    var i, searchInfo, eventData;\n\n    coerceSelectionsCache(e, gd, dragOptions);\n\n    if(mode === 'lasso') {\n        filterPoly = filteredPolygon([[x0, y0]], constants.BENDPX);\n    }\n\n    var outlines = zoomLayer.selectAll('path.select-outline-' + plotinfo.id).data([1, 2]);\n\n    outlines.enter()\n        .append('path')\n        .attr('class', function(d) { return 'select-outline select-outline-' + d + ' select-outline-' + plotinfo.id; })\n        .attr('transform', 'translate(' + xs + ', ' + ys + ')')\n        .attr('d', path0 + 'Z');\n\n    var corners = zoomLayer.append('path')\n        .attr('class', 'zoombox-corners')\n        .style({\n            fill: Color.background,\n            stroke: Color.defaultLine,\n            'stroke-width': 1\n        })\n        .attr('transform', 'translate(' + xs + ', ' + ys + ')')\n        .attr('d', 'M0,0Z');\n\n\n    var throttleID = fullLayout._uid + constants.SELECTID;\n    var selection = [];\n\n    // find the traces to search for selection points\n    var searchTraces = determineSearchTraces(gd, dragOptions.xaxes,\n      dragOptions.yaxes, dragOptions.subplot);\n\n    function axValue(ax) {\n        var index = (ax._id.charAt(0) === 'y') ? 1 : 0;\n        return function(v) { return ax.p2d(v[index]); };\n    }\n\n    function ascending(a, b) { return a - b; }\n\n    // allow subplots to override fillRangeItems routine\n    var fillRangeItems;\n\n    if(plotinfo.fillRangeItems) {\n        fillRangeItems = plotinfo.fillRangeItems;\n    } else {\n        if(mode === 'select') {\n            fillRangeItems = function(eventData, poly) {\n                var ranges = eventData.range = {};\n\n                for(i = 0; i < allAxes.length; i++) {\n                    var ax = allAxes[i];\n                    var axLetter = ax._id.charAt(0);\n\n                    ranges[ax._id] = [\n                        ax.p2d(poly[axLetter + 'min']),\n                        ax.p2d(poly[axLetter + 'max'])\n                    ].sort(ascending);\n                }\n            };\n        } else {\n            fillRangeItems = function(eventData, poly, filterPoly) {\n                var dataPts = eventData.lassoPoints = {};\n\n                for(i = 0; i < allAxes.length; i++) {\n                    var ax = allAxes[i];\n                    dataPts[ax._id] = filterPoly.filtered.map(axValue(ax));\n                }\n            };\n        }\n    }\n\n    dragOptions.moveFn = function(dx0, dy0) {\n        x1 = Math.max(0, Math.min(pw, dx0 + x0));\n        y1 = Math.max(0, Math.min(ph, dy0 + y0));\n\n        var dx = Math.abs(x1 - x0);\n        var dy = Math.abs(y1 - y0);\n\n        if(mode === 'select') {\n            var direction = fullLayout.selectdirection;\n\n            if(fullLayout.selectdirection === 'any') {\n                if(dy < Math.min(dx * 0.6, MINSELECT)) direction = 'h';\n                else if(dx < Math.min(dy * 0.6, MINSELECT)) direction = 'v';\n                else direction = 'd';\n            }\n            else {\n                direction = fullLayout.selectdirection;\n            }\n\n            if(direction === 'h') {\n                // horizontal motion: make a vertical box\n                currentPolygon = [[x0, 0], [x0, ph], [x1, ph], [x1, 0]];\n                currentPolygon.xmin = Math.min(x0, x1);\n                currentPolygon.xmax = Math.max(x0, x1);\n                currentPolygon.ymin = Math.min(0, ph);\n                currentPolygon.ymax = Math.max(0, ph);\n                // extras to guide users in keeping a straight selection\n                corners.attr('d', 'M' + currentPolygon.xmin + ',' + (y0 - MINSELECT) +\n                    'h-4v' + (2 * MINSELECT) + 'h4Z' +\n                    'M' + (currentPolygon.xmax - 1) + ',' + (y0 - MINSELECT) +\n                    'h4v' + (2 * MINSELECT) + 'h-4Z');\n\n            }\n            else if(direction === 'v') {\n                // vertical motion: make a horizontal box\n                currentPolygon = [[0, y0], [0, y1], [pw, y1], [pw, y0]];\n                currentPolygon.xmin = Math.min(0, pw);\n                currentPolygon.xmax = Math.max(0, pw);\n                currentPolygon.ymin = Math.min(y0, y1);\n                currentPolygon.ymax = Math.max(y0, y1);\n                corners.attr('d', 'M' + (x0 - MINSELECT) + ',' + currentPolygon.ymin +\n                    'v-4h' + (2 * MINSELECT) + 'v4Z' +\n                    'M' + (x0 - MINSELECT) + ',' + (currentPolygon.ymax - 1) +\n                    'v4h' + (2 * MINSELECT) + 'v-4Z');\n            }\n            else if(direction === 'd') {\n                // diagonal motion\n                currentPolygon = [[x0, y0], [x0, y1], [x1, y1], [x1, y0]];\n                currentPolygon.xmin = Math.min(x0, x1);\n                currentPolygon.xmax = Math.max(x0, x1);\n                currentPolygon.ymin = Math.min(y0, y1);\n                currentPolygon.ymax = Math.max(y0, y1);\n                corners.attr('d', 'M0,0Z');\n            }\n        }\n        else if(mode === 'lasso') {\n            filterPoly.addPt([x1, y1]);\n            currentPolygon = filterPoly.filtered;\n        }\n\n        // create outline & tester\n        if(dragOptions.selectionDefs && dragOptions.selectionDefs.length) {\n            mergedPolygons = mergePolygons(dragOptions.mergedPolygons, currentPolygon, subtract);\n            currentPolygon.subtract = subtract;\n            selectionTester = multiTester(dragOptions.selectionDefs.concat([currentPolygon]));\n        }\n        else {\n            mergedPolygons = [currentPolygon];\n            selectionTester = polygonTester(currentPolygon);\n        }\n\n        // draw selection\n        drawSelection(mergedPolygons, outlines);\n\n\n        throttle.throttle(\n            throttleID,\n            constants.SELECTDELAY,\n            function() {\n                selection = [];\n\n                var thisSelection;\n                var traceSelections = [];\n                var traceSelection;\n                for(i = 0; i < searchTraces.length; i++) {\n                    searchInfo = searchTraces[i];\n\n                    traceSelection = searchInfo._module.selectPoints(searchInfo, selectionTester);\n                    traceSelections.push(traceSelection);\n\n                    thisSelection = fillSelectionItem(traceSelection, searchInfo);\n\n                    if(selection.length) {\n                        for(var j = 0; j < thisSelection.length; j++) {\n                            selection.push(thisSelection[j]);\n                        }\n                    }\n                    else selection = thisSelection;\n                }\n\n                eventData = {points: selection};\n                updateSelectedState(gd, searchTraces, eventData);\n                fillRangeItems(eventData, currentPolygon, filterPoly);\n                dragOptions.gd.emit('plotly_selecting', eventData);\n            }\n        );\n    };\n\n    dragOptions.clickFn = function(numClicks, evt) {\n        var clickmode = fullLayout.clickmode;\n\n        corners.remove();\n\n        throttle.done(throttleID).then(function() {\n            throttle.clear(throttleID);\n            if(numClicks === 2) {\n                // clear selection on doubleclick\n                outlines.remove();\n                for(i = 0; i < searchTraces.length; i++) {\n                    searchInfo = searchTraces[i];\n                    searchInfo._module.selectPoints(searchInfo, false);\n                }\n\n                updateSelectedState(gd, searchTraces);\n\n                clearSelectionsCache(dragOptions);\n\n                gd.emit('plotly_deselect', null);\n            } else {\n                if(clickmode.indexOf('select') > -1) {\n                    selectOnClick(evt, gd, dragOptions.xaxes, dragOptions.yaxes,\n                      dragOptions.subplot, dragOptions, outlines);\n                }\n\n                if(clickmode === 'event') {\n                    // TODO: remove in v2 - this was probably never intended to work as it does,\n                    // but in case anyone depends on it we don't want to break it now.\n                    // Note that click-to-select introduced pre v2 also emitts proper\n                    // event data when clickmode is having 'select' in its flag list.\n                    gd.emit('plotly_selected', undefined);\n                }\n            }\n\n            Fx.click(gd, evt);\n        });\n    };\n\n    dragOptions.doneFn = function() {\n        corners.remove();\n\n        throttle.done(throttleID).then(function() {\n            throttle.clear(throttleID);\n            dragOptions.gd.emit('plotly_selected', eventData);\n\n            if(currentPolygon && dragOptions.selectionDefs) {\n                // save last polygons\n                currentPolygon.subtract = subtract;\n                dragOptions.selectionDefs.push(currentPolygon);\n\n                // we have to keep reference to arrays container\n                dragOptions.mergedPolygons.length = 0;\n                [].push.apply(dragOptions.mergedPolygons, mergedPolygons);\n            }\n        });\n    };\n}\n\nfunction selectOnClick(evt, gd, xAxes, yAxes, subplot, dragOptions, polygonOutlines) {\n    var hoverData = gd._hoverdata;\n    var clickmode = gd._fullLayout.clickmode;\n    var sendEvents = clickmode.indexOf('event') > -1;\n    var selection = [];\n    var searchTraces, searchInfo, currentSelectionDef, selectionTester, traceSelection;\n    var thisTracesSelection, pointOrBinSelected, subtract, eventData, i;\n\n    if(isHoverDataSet(hoverData)) {\n        coerceSelectionsCache(evt, gd, dragOptions);\n        searchTraces = determineSearchTraces(gd, xAxes, yAxes, subplot);\n        var clickedPtInfo = extractClickedPtInfo(hoverData, searchTraces);\n        var isBinnedTrace = clickedPtInfo.pointNumbers.length > 0;\n\n\n        // Note: potentially costly operation isPointOrBinSelected is\n        // called as late as possible through the use of an assignment\n        // in an if condition.\n        if(isBinnedTrace ?\n            isOnlyThisBinSelected(searchTraces, clickedPtInfo) :\n            isOnlyOnePointSelected(searchTraces) &&\n                (pointOrBinSelected = isPointOrBinSelected(clickedPtInfo)))\n        {\n            if(polygonOutlines) polygonOutlines.remove();\n            for(i = 0; i < searchTraces.length; i++) {\n                searchInfo = searchTraces[i];\n                searchInfo._module.selectPoints(searchInfo, false);\n            }\n\n            updateSelectedState(gd, searchTraces);\n\n            clearSelectionsCache(dragOptions);\n\n            if(sendEvents) {\n                gd.emit('plotly_deselect', null);\n            }\n        } else {\n            subtract = evt.shiftKey &&\n              (pointOrBinSelected !== undefined ?\n                pointOrBinSelected :\n                isPointOrBinSelected(clickedPtInfo));\n            currentSelectionDef = newPointSelectionDef(clickedPtInfo.pointNumber, clickedPtInfo.searchInfo, subtract);\n\n            var allSelectionDefs = dragOptions.selectionDefs.concat([currentSelectionDef]);\n            selectionTester = multiTester(allSelectionDefs);\n\n            for(i = 0; i < searchTraces.length; i++) {\n                traceSelection = searchTraces[i]._module.selectPoints(searchTraces[i], selectionTester);\n                thisTracesSelection = fillSelectionItem(traceSelection, searchTraces[i]);\n\n                if(selection.length) {\n                    for(var j = 0; j < thisTracesSelection.length; j++) {\n                        selection.push(thisTracesSelection[j]);\n                    }\n                }\n                else selection = thisTracesSelection;\n            }\n\n            eventData = {points: selection};\n            updateSelectedState(gd, searchTraces, eventData);\n\n            if(currentSelectionDef && dragOptions) {\n                dragOptions.selectionDefs.push(currentSelectionDef);\n            }\n\n            if(polygonOutlines) drawSelection(dragOptions.mergedPolygons, polygonOutlines);\n\n            if(sendEvents) {\n                gd.emit('plotly_selected', eventData);\n            }\n        }\n    }\n}\n\n/**\n * Constructs a new point selection definition object.\n */\nfunction newPointSelectionDef(pointNumber, searchInfo, subtract) {\n    return {\n        pointNumber: pointNumber,\n        searchInfo: searchInfo,\n        subtract: subtract\n    };\n}\n\nfunction isPointSelectionDef(o) {\n    return 'pointNumber' in o && 'searchInfo' in o;\n}\n\n/*\n * Constructs a new point number tester.\n */\nfunction newPointNumTester(pointSelectionDef) {\n    return {\n        xmin: 0,\n        xmax: 0,\n        ymin: 0,\n        ymax: 0,\n        pts: [],\n        contains: function(pt, omitFirstEdge, pointNumber, searchInfo) {\n            var idxWantedTrace = pointSelectionDef.searchInfo.cd[0].trace._expandedIndex;\n            var idxActualTrace = searchInfo.cd[0].trace._expandedIndex;\n            return idxActualTrace === idxWantedTrace &&\n              pointNumber === pointSelectionDef.pointNumber;\n        },\n        isRect: false,\n        degenerate: false,\n        subtract: pointSelectionDef.subtract\n    };\n}\n\n/**\n * Wraps multiple selection testers.\n *\n * @param {Array} list - An array of selection testers.\n *\n * @return a selection tester object with a contains function\n * that can be called to evaluate a point against all wrapped\n * selection testers that were passed in list.\n */\nfunction multiTester(list) {\n    var testers = [];\n    var xmin = isPointSelectionDef(list[0]) ? 0 : list[0][0][0];\n    var xmax = xmin;\n    var ymin = isPointSelectionDef(list[0]) ? 0 : list[0][0][1];\n    var ymax = ymin;\n\n    for(var i = 0; i < list.length; i++) {\n        if(isPointSelectionDef(list[i])) {\n            testers.push(newPointNumTester(list[i]));\n        } else {\n            var tester = polygon.tester(list[i]);\n            tester.subtract = list[i].subtract;\n            testers.push(tester);\n            xmin = Math.min(xmin, tester.xmin);\n            xmax = Math.max(xmax, tester.xmax);\n            ymin = Math.min(ymin, tester.ymin);\n            ymax = Math.max(ymax, tester.ymax);\n        }\n    }\n\n    /**\n     * Tests if the given point is within this tester.\n     *\n     * @param {Array} pt - [0] is the x coordinate, [1] is the y coordinate of the point.\n     * @param {*} arg - An optional parameter to pass down to wrapped testers.\n     * @param {number} pointNumber - The point number of the point within the underlying data array.\n     * @param {number} searchInfo - An object identifying the trace the point is contained in.\n     *\n     * @return {boolean} true if point is considered to be selected, false otherwise.\n     */\n    function contains(pt, arg, pointNumber, searchInfo) {\n        var contained = false;\n        for(var i = 0; i < testers.length; i++) {\n            if(testers[i].contains(pt, arg, pointNumber, searchInfo)) {\n                // if contained by subtract tester - exclude the point\n                contained = testers[i].subtract === false;\n            }\n        }\n\n        return contained;\n    }\n\n    return {\n        xmin: xmin,\n        xmax: xmax,\n        ymin: ymin,\n        ymax: ymax,\n        pts: [],\n        contains: contains,\n        isRect: false,\n        degenerate: false\n    };\n}\n\nfunction coerceSelectionsCache(evt, gd, dragOptions) {\n    var fullLayout = gd._fullLayout;\n    var zoomLayer = fullLayout._zoomlayer;\n    var plotinfo = dragOptions.plotinfo;\n\n    var selectingOnSameSubplot = (\n      fullLayout._lastSelectedSubplot &&\n      fullLayout._lastSelectedSubplot === plotinfo.id\n    );\n    var hasModifierKey = evt.shiftKey || evt.altKey;\n    if(selectingOnSameSubplot && hasModifierKey &&\n      (plotinfo.selection && plotinfo.selection.selectionDefs) && !dragOptions.selectionDefs) {\n        // take over selection definitions from prev mode, if any\n        dragOptions.selectionDefs = plotinfo.selection.selectionDefs;\n        dragOptions.mergedPolygons = plotinfo.selection.mergedPolygons;\n    } else if(!hasModifierKey || !plotinfo.selection) {\n        clearSelectionsCache(dragOptions);\n    }\n\n    // clear selection outline when selecting a different subplot\n    if(!selectingOnSameSubplot) {\n        clearSelect(zoomLayer);\n        fullLayout._lastSelectedSubplot = plotinfo.id;\n    }\n}\n\nfunction clearSelectionsCache(dragOptions) {\n    var plotinfo = dragOptions.plotinfo;\n\n    plotinfo.selection = {};\n    plotinfo.selection.selectionDefs = dragOptions.selectionDefs = [];\n    plotinfo.selection.mergedPolygons = dragOptions.mergedPolygons = [];\n}\n\nfunction determineSearchTraces(gd, xAxes, yAxes, subplot) {\n    var searchTraces = [];\n    var xAxisIds = xAxes.map(getAxId);\n    var yAxisIds = yAxes.map(getAxId);\n    var cd, trace, i;\n\n    for(i = 0; i < gd.calcdata.length; i++) {\n        cd = gd.calcdata[i];\n        trace = cd[0].trace;\n\n        if(trace.visible !== true || !trace._module || !trace._module.selectPoints) continue;\n\n        if(subplot && (trace.subplot === subplot || trace.geo === subplot)) {\n            searchTraces.push(createSearchInfo(trace._module, cd, xAxes[0], yAxes[0]));\n        } else if(\n          trace.type === 'splom' &&\n          // FIXME: make sure we don't have more than single axis for splom\n          trace._xaxes[xAxisIds[0]] && trace._yaxes[yAxisIds[0]]\n        ) {\n            var info = createSearchInfo(trace._module, cd, xAxes[0], yAxes[0]);\n            info.scene = gd._fullLayout._splomScenes[trace.uid];\n            searchTraces.push(info);\n        } else {\n            if(xAxisIds.indexOf(trace.xaxis) === -1) continue;\n            if(yAxisIds.indexOf(trace.yaxis) === -1) continue;\n\n            searchTraces.push(createSearchInfo(trace._module, cd,\n              getFromId(gd, trace.xaxis), getFromId(gd, trace.yaxis)));\n        }\n    }\n\n    return searchTraces;\n\n    function createSearchInfo(module, calcData, xaxis, yaxis) {\n        return {\n            _module: module,\n            cd: calcData,\n            xaxis: xaxis,\n            yaxis: yaxis\n        };\n    }\n}\n\nfunction drawSelection(polygons, outlines) {\n    var paths = [];\n    var i, d;\n\n    for(i = 0; i < polygons.length; i++) {\n        var ppts = polygons[i];\n        paths.push(ppts.join('L') + 'L' + ppts[0]);\n    }\n\n    d = polygons.length > 0 ?\n      'M' + paths.join('M') + 'Z' :\n      'M0,0Z';\n    outlines.attr('d', d);\n}\n\nfunction isHoverDataSet(hoverData) {\n    return hoverData &&\n      Array.isArray(hoverData) &&\n      hoverData[0].hoverOnBox !== true;\n}\n\nfunction extractClickedPtInfo(hoverData, searchTraces) {\n    var hoverDatum = hoverData[0];\n    var pointNumber = -1;\n    var pointNumbers = [];\n    var searchInfo, i;\n\n    for(i = 0; i < searchTraces.length; i++) {\n        searchInfo = searchTraces[i];\n        if(hoverDatum.fullData._expandedIndex === searchInfo.cd[0].trace._expandedIndex) {\n\n            // Special case for box (and violin)\n            if(hoverDatum.hoverOnBox === true) {\n                break;\n            }\n\n            // Hint: in some traces like histogram, one graphical element\n            // doesn't correspond to one particular data point, but to\n            // bins of data points. Thus, hoverDatum can have a binNumber\n            // property instead of pointNumber.\n            if(hoverDatum.pointNumber !== undefined) {\n                pointNumber = hoverDatum.pointNumber;\n            } else if(hoverDatum.binNumber !== undefined) {\n                pointNumber = hoverDatum.binNumber;\n                pointNumbers = hoverDatum.pointNumbers;\n            }\n\n            break;\n        }\n    }\n\n    return {\n        pointNumber: pointNumber,\n        pointNumbers: pointNumbers,\n        searchInfo: searchInfo\n    };\n}\n\nfunction isPointOrBinSelected(clickedPtInfo) {\n    var trace = clickedPtInfo.searchInfo.cd[0].trace;\n    var ptNum = clickedPtInfo.pointNumber;\n    var ptNums = clickedPtInfo.pointNumbers;\n    var ptNumsSet = ptNums.length > 0;\n\n    // When pointsNumbers is set (e.g. histogram's binning),\n    // it is assumed that when the first point of\n    // a bin is selected, all others are as well\n    var ptNumToTest = ptNumsSet ? ptNums[0] : ptNum;\n\n    // TODO potential performance improvement\n    // Primarily we need this function to determine if a click adds\n    // or subtracts from a selection.\n    // In cases `trace.selectedpoints` is a huge array, indexOf\n    // might be slow. One remedy would be to introduce a hash somewhere.\n    return trace.selectedpoints ? trace.selectedpoints.indexOf(ptNumToTest) > -1 : false;\n}\n\nfunction isOnlyThisBinSelected(searchTraces, clickedPtInfo) {\n    var tracesWithSelectedPts = [];\n    var searchInfo, trace, isSameTrace, i;\n\n    for(i = 0; i < searchTraces.length; i++) {\n        searchInfo = searchTraces[i];\n        if(searchInfo.cd[0].trace.selectedpoints && searchInfo.cd[0].trace.selectedpoints.length > 0) {\n            tracesWithSelectedPts.push(searchInfo);\n        }\n    }\n\n    if(tracesWithSelectedPts.length === 1) {\n        isSameTrace = tracesWithSelectedPts[0] === clickedPtInfo.searchInfo;\n        if(isSameTrace) {\n            trace = clickedPtInfo.searchInfo.cd[0].trace;\n            if(trace.selectedpoints.length === clickedPtInfo.pointNumbers.length) {\n                for(i = 0; i < clickedPtInfo.pointNumbers.length; i++) {\n                    if(trace.selectedpoints.indexOf(clickedPtInfo.pointNumbers[i]) < 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nfunction isOnlyOnePointSelected(searchTraces) {\n    var len = 0;\n    var searchInfo, trace, i;\n\n    for(i = 0; i < searchTraces.length; i++) {\n        searchInfo = searchTraces[i];\n        trace = searchInfo.cd[0].trace;\n        if(trace.selectedpoints) {\n            if(trace.selectedpoints.length > 1) return false;\n\n            len += trace.selectedpoints.length;\n            if(len > 1) return false;\n        }\n    }\n\n    return len === 1;\n}\n\nfunction updateSelectedState(gd, searchTraces, eventData) {\n    var i, searchInfo, cd, trace;\n\n    // before anything else, update preGUI if necessary\n    for(i = 0; i < searchTraces.length; i++) {\n        var fullInputTrace = searchTraces[i].cd[0].trace._fullInput;\n        var tracePreGUI = gd._fullLayout._tracePreGUI[fullInputTrace.uid];\n        if(tracePreGUI.selectedpoints === undefined) {\n            tracePreGUI.selectedpoints = fullInputTrace._input.selectedpoints || null;\n        }\n    }\n\n    if(eventData) {\n        var pts = eventData.points || [];\n\n        for(i = 0; i < searchTraces.length; i++) {\n            trace = searchTraces[i].cd[0].trace;\n            trace._input.selectedpoints = trace._fullInput.selectedpoints = [];\n            if(trace._fullInput !== trace) trace.selectedpoints = [];\n        }\n\n        for(i = 0; i < pts.length; i++) {\n            var pt = pts[i];\n            var data = pt.data;\n            var fullData = pt.fullData;\n\n            if(pt.pointIndices) {\n                [].push.apply(data.selectedpoints, pt.pointIndices);\n                if(trace._fullInput !== trace) {\n                    [].push.apply(fullData.selectedpoints, pt.pointIndices);\n                }\n            } else {\n                data.selectedpoints.push(pt.pointIndex);\n                if(trace._fullInput !== trace) {\n                    fullData.selectedpoints.push(pt.pointIndex);\n                }\n            }\n        }\n    }\n    else {\n        for(i = 0; i < searchTraces.length; i++) {\n            trace = searchTraces[i].cd[0].trace;\n            delete trace.selectedpoints;\n            delete trace._input.selectedpoints;\n            if(trace._fullInput !== trace) {\n                delete trace._fullInput.selectedpoints;\n            }\n        }\n    }\n\n    var hasRegl = false;\n\n    for(i = 0; i < searchTraces.length; i++) {\n        searchInfo = searchTraces[i];\n        cd = searchInfo.cd;\n        trace = cd[0].trace;\n\n        if(Registry.traceIs(trace, 'regl')) {\n            hasRegl = true;\n        }\n\n        var _module = searchInfo._module;\n        var fn = _module.styleOnSelect || _module.style;\n        if(fn) fn(gd, cd);\n    }\n\n    if(hasRegl) {\n        clearGlCanvases(gd);\n        redrawReglTraces(gd);\n    }\n}\n\nfunction mergePolygons(list, poly, subtract) {\n    var res;\n\n    if(subtract) {\n        res = polybool.difference({\n            regions: list,\n            inverted: false\n        }, {\n            regions: [poly],\n            inverted: false\n        });\n\n        return res.regions;\n    }\n\n    res = polybool.union({\n        regions: list,\n        inverted: false\n    }, {\n        regions: [poly],\n        inverted: false\n    });\n\n    return res.regions;\n}\n\nfunction fillSelectionItem(selection, searchInfo) {\n    if(Array.isArray(selection)) {\n        var cd = searchInfo.cd;\n        var trace = searchInfo.cd[0].trace;\n\n        for(var i = 0; i < selection.length; i++) {\n            selection[i] = makeEventData(selection[i], trace, cd);\n        }\n    }\n\n    return selection;\n}\n\nfunction clearSelect(zoomlayer) {\n    // until we get around to persistent selections, remove the outline\n    // here. The selection itself will be removed when the plot redraws\n    // at the end.\n    zoomlayer.selectAll('.select-outline').remove();\n}\n\nmodule.exports = {\n    prepSelect: prepSelect,\n    clearSelect: clearSelect,\n    selectOnClick: selectOnClick\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar layoutAttributes = require('./layout_attributes');\nvar handleTickValueDefaults = require('./tick_value_defaults');\nvar handleTickMarkDefaults = require('./tick_mark_defaults');\nvar handleTickLabelDefaults = require('./tick_label_defaults');\nvar handleCategoryOrderDefaults = require('./category_order_defaults');\nvar handleLineGridDefaults = require('./line_grid_defaults');\nvar setConvert = require('./set_convert');\n\n/**\n * options: object containing:\n *\n *  letter: 'x' or 'y'\n *  title: name of the axis (ie 'Colorbar') to go in default title\n *  font: the default font to inherit\n *  outerTicks: boolean, should ticks default to outside?\n *  showGrid: boolean, should gridlines be shown by default?\n *  noHover: boolean, this axis doesn't support hover effects?\n *  noTickson: boolean, this axis doesn't support 'tickson'\n *  data: the plot data, used to manage categories\n *  bgColor: the plot background color, to calculate default gridline colors\n */\nmodule.exports = function handleAxisDefaults(containerIn, containerOut, coerce, options, layoutOut) {\n  var letter = options.letter;\n  var font = options.font || {};\n  var splomStash = options.splomStash || {};\n  var visible = coerce('visible', !options.cheateronly);\n  var axType = containerOut.type;\n  if (axType === 'date') {\n    var handleCalendarDefaults = Registry.getComponentMethod('calendars', 'handleDefaults');\n    handleCalendarDefaults(containerIn, containerOut, 'calendar', options.calendar);\n  }\n  setConvert(containerOut, layoutOut);\n  var autoRange = coerce('autorange', !containerOut.isValidRange(containerIn.range));\n  if (autoRange && (axType === 'linear' || axType === '-')) coerce('rangemode');\n  coerce('range');\n  containerOut.cleanRange();\n  handleCategoryOrderDefaults(containerIn, containerOut, coerce, options);\n  if (axType !== 'category' && !options.noHover) coerce('hoverformat');\n  if (!visible) return containerOut;\n  var dfltColor = coerce('color');\n  // if axis.color was provided, use it for fonts too; otherwise,\n  // inherit from global font color in case that was provided.\n  // Compare to dflt rather than to containerIn, so we can provide color via\n  // template too.\n  var dfltFontColor = dfltColor !== layoutAttributes.color.dflt ? dfltColor : font.color;\n  // try to get default title from splom trace, fallback to graph-wide value\n  var dfltTitle = splomStash.label || layoutOut._dfltTitle[letter];\n  coerce('title.text', dfltTitle);\n  Lib.coerceFont(coerce, 'title.font', {\n    family: font.family,\n    size: Math.round(font.size * 1.2),\n    color: dfltFontColor\n  });\n  handleTickValueDefaults(containerIn, containerOut, coerce, axType);\n  handleTickLabelDefaults(containerIn, containerOut, coerce, axType, options);\n  handleTickMarkDefaults(containerIn, containerOut, coerce, options);\n  handleLineGridDefaults(containerIn, containerOut, coerce, {\n    dfltColor: dfltColor,\n    bgColor: options.bgColor,\n    showGrid: options.showGrid,\n    attributes: layoutAttributes\n  });\n  if (containerOut.showline || containerOut.ticks) coerce('mirror');\n  if (options.automargin) coerce('automargin');\n  var isMultiCategory = containerOut.type === 'multicategory';\n  if (!options.noTickson && (containerOut.type === 'category' || isMultiCategory) && (containerOut.ticks || containerOut.showgrid)) {\n    var ticksonDflt;\n    if (isMultiCategory) ticksonDflt = 'boundaries';\n    coerce('tickson', ticksonDflt);\n  }\n  if (isMultiCategory) {\n    var showDividers = coerce('showdividers');\n    if (showDividers) {\n      coerce('dividercolor');\n      coerce('dividerwidth');\n    }\n  }\n  return containerOut;\n};","map":{"version":3,"names":["Registry","require","Lib","layoutAttributes","handleTickValueDefaults","handleTickMarkDefaults","handleTickLabelDefaults","handleCategoryOrderDefaults","handleLineGridDefaults","setConvert","module","exports","handleAxisDefaults","containerIn","containerOut","coerce","options","layoutOut","letter","font","splomStash","visible","cheateronly","axType","type","handleCalendarDefaults","getComponentMethod","calendar","autoRange","isValidRange","range","cleanRange","noHover","dfltColor","dfltFontColor","color","dflt","dfltTitle","label","_dfltTitle","coerceFont","family","size","Math","round","bgColor","showGrid","attributes","showline","ticks","automargin","isMultiCategory","noTickson","showgrid","ticksonDflt","showDividers"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/plots/cartesian/axis_defaults.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\n\nvar layoutAttributes = require('./layout_attributes');\nvar handleTickValueDefaults = require('./tick_value_defaults');\nvar handleTickMarkDefaults = require('./tick_mark_defaults');\nvar handleTickLabelDefaults = require('./tick_label_defaults');\nvar handleCategoryOrderDefaults = require('./category_order_defaults');\nvar handleLineGridDefaults = require('./line_grid_defaults');\nvar setConvert = require('./set_convert');\n\n/**\n * options: object containing:\n *\n *  letter: 'x' or 'y'\n *  title: name of the axis (ie 'Colorbar') to go in default title\n *  font: the default font to inherit\n *  outerTicks: boolean, should ticks default to outside?\n *  showGrid: boolean, should gridlines be shown by default?\n *  noHover: boolean, this axis doesn't support hover effects?\n *  noTickson: boolean, this axis doesn't support 'tickson'\n *  data: the plot data, used to manage categories\n *  bgColor: the plot background color, to calculate default gridline colors\n */\nmodule.exports = function handleAxisDefaults(containerIn, containerOut, coerce, options, layoutOut) {\n    var letter = options.letter;\n    var font = options.font || {};\n    var splomStash = options.splomStash || {};\n\n    var visible = coerce('visible', !options.cheateronly);\n\n    var axType = containerOut.type;\n\n    if(axType === 'date') {\n        var handleCalendarDefaults = Registry.getComponentMethod('calendars', 'handleDefaults');\n        handleCalendarDefaults(containerIn, containerOut, 'calendar', options.calendar);\n    }\n\n    setConvert(containerOut, layoutOut);\n\n    var autoRange = coerce('autorange', !containerOut.isValidRange(containerIn.range));\n    if(autoRange && (axType === 'linear' || axType === '-')) coerce('rangemode');\n\n    coerce('range');\n    containerOut.cleanRange();\n\n    handleCategoryOrderDefaults(containerIn, containerOut, coerce, options);\n\n    if(axType !== 'category' && !options.noHover) coerce('hoverformat');\n\n    if(!visible) return containerOut;\n\n    var dfltColor = coerce('color');\n    // if axis.color was provided, use it for fonts too; otherwise,\n    // inherit from global font color in case that was provided.\n    // Compare to dflt rather than to containerIn, so we can provide color via\n    // template too.\n    var dfltFontColor = (dfltColor !== layoutAttributes.color.dflt) ? dfltColor : font.color;\n    // try to get default title from splom trace, fallback to graph-wide value\n    var dfltTitle = splomStash.label || layoutOut._dfltTitle[letter];\n\n    coerce('title.text', dfltTitle);\n    Lib.coerceFont(coerce, 'title.font', {\n        family: font.family,\n        size: Math.round(font.size * 1.2),\n        color: dfltFontColor\n    });\n\n    handleTickValueDefaults(containerIn, containerOut, coerce, axType);\n    handleTickLabelDefaults(containerIn, containerOut, coerce, axType, options);\n    handleTickMarkDefaults(containerIn, containerOut, coerce, options);\n    handleLineGridDefaults(containerIn, containerOut, coerce, {\n        dfltColor: dfltColor,\n        bgColor: options.bgColor,\n        showGrid: options.showGrid,\n        attributes: layoutAttributes\n    });\n\n    if(containerOut.showline || containerOut.ticks) coerce('mirror');\n\n    if(options.automargin) coerce('automargin');\n\n    var isMultiCategory = containerOut.type === 'multicategory';\n\n    if(!options.noTickson &&\n        (containerOut.type === 'category' || isMultiCategory) &&\n        (containerOut.ticks || containerOut.showgrid)\n    ) {\n        var ticksonDflt;\n        if(isMultiCategory) ticksonDflt = 'boundaries';\n        coerce('tickson', ticksonDflt);\n    }\n\n    if(isMultiCategory) {\n        var showDividers = coerce('showdividers');\n        if(showDividers) {\n            coerce('dividercolor');\n            coerce('dividerwidth');\n        }\n    }\n\n    return containerOut;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
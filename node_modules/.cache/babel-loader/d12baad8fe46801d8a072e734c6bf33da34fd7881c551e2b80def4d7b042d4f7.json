{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nmodule.exports = {\n  /**\n   * Standardize all missing data in calcdata to use undefined\n   * never null or NaN.\n   * That way we can use !==undefined, or !== BADNUM,\n   * to test for real data\n   */\n  BADNUM: undefined,\n  /*\n   * Limit certain operations to well below floating point max value\n   * to avoid glitches: Make sure that even when you multiply it by the\n   * number of pixels on a giant screen it still works\n   */\n  FP_SAFE: Number.MAX_VALUE / 10000,\n  /*\n   * conversion of date units to milliseconds\n   * year and month constants are marked \"AVG\"\n   * to remind us that not all years and months\n   * have the same length\n   */\n  ONEAVGYEAR: 31557600000,\n  // 365.25 days\n  ONEAVGMONTH: 2629800000,\n  // 1/12 of ONEAVGYEAR\n  ONEDAY: 86400000,\n  ONEHOUR: 3600000,\n  ONEMIN: 60000,\n  ONESEC: 1000,\n  /*\n   * For fast conversion btwn world calendars and epoch ms, the Julian Day Number\n   * of the unix epoch. From calendars.instance().newDate(1970, 1, 1).toJD()\n   */\n  EPOCHJD: 2440587.5,\n  /*\n   * Are two values nearly equal? Compare to 1PPM\n   */\n  ALMOST_EQUAL: 1 - 1e-6,\n  /*\n   * If we're asked to clip a non-positive log value, how far off-screen\n   * do we put it?\n   */\n  LOG_CLIP: 10,\n  /*\n   * not a number, but for displaying numbers: the \"minus sign\" symbol is\n   * wider than the regular ascii dash \"-\"\n   */\n  MINUS_SIGN: \"\\u2212\"\n};","map":{"version":3,"names":["module","exports","BADNUM","undefined","FP_SAFE","Number","MAX_VALUE","ONEAVGYEAR","ONEAVGMONTH","ONEDAY","ONEHOUR","ONEMIN","ONESEC","EPOCHJD","ALMOST_EQUAL","LOG_CLIP","MINUS_SIGN"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/constants/numerical.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n\nmodule.exports = {\n    /**\n     * Standardize all missing data in calcdata to use undefined\n     * never null or NaN.\n     * That way we can use !==undefined, or !== BADNUM,\n     * to test for real data\n     */\n    BADNUM: undefined,\n\n    /*\n     * Limit certain operations to well below floating point max value\n     * to avoid glitches: Make sure that even when you multiply it by the\n     * number of pixels on a giant screen it still works\n     */\n    FP_SAFE: Number.MAX_VALUE / 10000,\n\n    /*\n     * conversion of date units to milliseconds\n     * year and month constants are marked \"AVG\"\n     * to remind us that not all years and months\n     * have the same length\n     */\n    ONEAVGYEAR: 31557600000, // 365.25 days\n    ONEAVGMONTH: 2629800000, // 1/12 of ONEAVGYEAR\n    ONEDAY: 86400000,\n    ONEHOUR: 3600000,\n    ONEMIN: 60000,\n    ONESEC: 1000,\n\n    /*\n     * For fast conversion btwn world calendars and epoch ms, the Julian Day Number\n     * of the unix epoch. From calendars.instance().newDate(1970, 1, 1).toJD()\n     */\n    EPOCHJD: 2440587.5,\n\n    /*\n     * Are two values nearly equal? Compare to 1PPM\n     */\n    ALMOST_EQUAL: 1 - 1e-6,\n\n    /*\n     * If we're asked to clip a non-positive log value, how far off-screen\n     * do we put it?\n     */\n    LOG_CLIP: 10,\n\n    /*\n     * not a number, but for displaying numbers: the \"minus sign\" symbol is\n     * wider than the regular ascii dash \"-\"\n     */\n    MINUS_SIGN: '\\u2212'\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAGZA,MAAM,CAACC,OAAO,GAAG;EACb;AACJ;AACA;AACA;AACA;AACA;EACIC,MAAM,EAAEC,SAAS;EAEjB;AACJ;AACA;AACA;AACA;EACIC,OAAO,EAAEC,MAAM,CAACC,SAAS,GAAG,KAAK;EAEjC;AACJ;AACA;AACA;AACA;AACA;EACIC,UAAU,EAAE,WAAW;EAAE;EACzBC,WAAW,EAAE,UAAU;EAAE;EACzBC,MAAM,EAAE,QAAQ;EAChBC,OAAO,EAAE,OAAO;EAChBC,MAAM,EAAE,KAAK;EACbC,MAAM,EAAE,IAAI;EAEZ;AACJ;AACA;AACA;EACIC,OAAO,EAAE,SAAS;EAElB;AACJ;AACA;EACIC,YAAY,EAAE,CAAC,GAAG,IAAI;EAEtB;AACJ;AACA;AACA;EACIC,QAAQ,EAAE,EAAE;EAEZ;AACJ;AACA;AACA;EACIC,UAAU,EAAE;AAChB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
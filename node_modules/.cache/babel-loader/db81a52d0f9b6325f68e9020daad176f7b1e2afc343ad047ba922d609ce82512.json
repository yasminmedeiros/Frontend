{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Calendars for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\n\nvar assign = require('object-assign');\nfunction Calendars() {\n  this.regionalOptions = [];\n  this.regionalOptions[''] = {\n    invalidCalendar: 'Calendar {0} not found',\n    invalidDate: 'Invalid {0} date',\n    invalidMonth: 'Invalid {0} month',\n    invalidYear: 'Invalid {0} year',\n    differentCalendars: 'Cannot mix {0} and {1} dates'\n  };\n  this.local = this.regionalOptions[''];\n  this.calendars = {};\n  this._localCals = {};\n}\n\n/** Create the calendars plugin.\n    <p>Provides support for various world calendars in a consistent manner.</p>\n     @class Calendars\n    @example _exports.instance('julian').newDate(2014, 12, 25) */\nassign(Calendars.prototype, {\n  /** Obtain a calendar implementation and localisation.\n      @memberof Calendars\n      @param [name='gregorian'] {string} The name of the calendar, e.g. 'gregorian', 'persian', 'islamic'.\n      @param [language=''] {string} The language code to use for localisation (default is English).\n      @return {Calendar} The calendar and localisation.\n      @throws Error if calendar not found. */\n  instance: function instance(name, language) {\n    name = (name || 'gregorian').toLowerCase();\n    language = language || '';\n    var cal = this._localCals[name + '-' + language];\n    if (!cal && this.calendars[name]) {\n      cal = new this.calendars[name](language);\n      this._localCals[name + '-' + language] = cal;\n    }\n    if (!cal) {\n      throw (this.local.invalidCalendar || this.regionalOptions[''].invalidCalendar).replace(/\\{0\\}/, name);\n    }\n    return cal;\n  },\n  /** Create a new date - for today if no other parameters given.\n      @memberof Calendars\n      @param year {CDate|number} The date to copy or the year for the date.\n      @param [month] {number} The month for the date.\n      @param [day] {number} The day for the date.\n      @param [calendar='gregorian'] {BaseCalendar|string} The underlying calendar or the name of the calendar.\n      @param [language=''] {string} The language to use for localisation (default English).\n      @return {CDate} The new date.\n      @throws Error if an invalid date. */\n  newDate: function newDate(year, month, day, calendar, language) {\n    calendar = (year != null && year.year ? year.calendar() : typeof calendar === 'string' ? this.instance(calendar, language) : calendar) || this.instance();\n    return calendar.newDate(year, month, day);\n  },\n  /** A simple digit substitution function for localising numbers via the Calendar digits option.\n      @member Calendars\n      @param digits {string[]} The substitute digits, for 0 through 9.\n      @return {function} The substitution function. */\n  substituteDigits: function substituteDigits(digits) {\n    return function (value) {\n      return (value + '').replace(/[0-9]/g, function (digit) {\n        return digits[digit];\n      });\n    };\n  },\n  /** Digit substitution function for localising Chinese style numbers via the Calendar digits option.\n      @member Calendars\n      @param digits {string[]} The substitute digits, for 0 through 9.\n      @param powers {string[]} The characters denoting powers of 10, i.e. 1, 10, 100, 1000.\n      @return {function} The substitution function. */\n  substituteChineseDigits: function substituteChineseDigits(digits, powers) {\n    return function (value) {\n      var localNumber = '';\n      var power = 0;\n      while (value > 0) {\n        var units = value % 10;\n        localNumber = (units === 0 ? '' : digits[units] + powers[power]) + localNumber;\n        power++;\n        value = Math.floor(value / 10);\n      }\n      if (localNumber.indexOf(digits[1] + powers[1]) === 0) {\n        localNumber = localNumber.substr(1);\n      }\n      return localNumber || digits[0];\n    };\n  }\n});\n\n/** Generic date, based on a particular calendar.\n    @class CDate\n    @param calendar {BaseCalendar} The underlying calendar implementation.\n    @param year {number} The year for this date.\n    @param month {number} The month for this date.\n    @param day {number} The day for this date.\n    @return {CDate} The date object.\n    @throws Error if an invalid date. */\nfunction CDate(calendar, year, month, day) {\n  this._calendar = calendar;\n  this._year = year;\n  this._month = month;\n  this._day = day;\n  if (this._calendar._validateLevel === 0 && !this._calendar.isValid(this._year, this._month, this._day)) {\n    throw (_exports.local.invalidDate || _exports.regionalOptions[''].invalidDate).replace(/\\{0\\}/, this._calendar.local.name);\n  }\n}\n\n/** Pad a numeric value with leading zeroes.\n    @private\n    @param value {number} The number to format.\n    @param length {number} The minimum length.\n    @return {string} The formatted number. */\nfunction pad(value, length) {\n  value = '' + value;\n  return '000000'.substring(0, length - value.length) + value;\n}\nassign(CDate.prototype, {\n  /** Create a new date.\n      @memberof CDate\n      @param [year] {CDate|number} The date to copy or the year for the date (default this date).\n      @param [month] {number} The month for the date.\n      @param [day] {number} The day for the date.\n      @return {CDate} The new date.\n      @throws Error if an invalid date. */\n  newDate: function newDate(year, month, day) {\n    return this._calendar.newDate(year == null ? this : year, month, day);\n  },\n  /** Set or retrieve the year for this date.\n      @memberof CDate\n      @param [year] {number} The year for the date.\n      @return {number|CDate} The date's year (if no parameter) or the updated date.\n      @throws Error if an invalid date. */\n  year: function year(_year) {\n    return arguments.length === 0 ? this._year : this.set(_year, 'y');\n  },\n  /** Set or retrieve the month for this date.\n      @memberof CDate\n      @param [month] {number} The month for the date.\n      @return {number|CDate} The date's month (if no parameter) or the updated date.\n      @throws Error if an invalid date. */\n  month: function month(_month) {\n    return arguments.length === 0 ? this._month : this.set(_month, 'm');\n  },\n  /** Set or retrieve the day for this date.\n      @memberof CDate\n      @param [day] {number} The day for the date.\n      @return {number|CData} The date's day (if no parameter) or the updated date.\n      @throws Error if an invalid date. */\n  day: function day(_day) {\n    return arguments.length === 0 ? this._day : this.set(_day, 'd');\n  },\n  /** Set new values for this date.\n      @memberof CDate\n      @param year {number} The year for the date.\n      @param month {number} The month for the date.\n      @param day {number} The day for the date.\n      @return {CDate} The updated date.\n      @throws Error if an invalid date. */\n  date: function date(year, month, day) {\n    if (!this._calendar.isValid(year, month, day)) {\n      throw (_exports.local.invalidDate || _exports.regionalOptions[''].invalidDate).replace(/\\{0\\}/, this._calendar.local.name);\n    }\n    this._year = year;\n    this._month = month;\n    this._day = day;\n    return this;\n  },\n  /** Determine whether this date is in a leap year.\n      @memberof CDate\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not. */\n  leapYear: function leapYear() {\n    return this._calendar.leapYear(this);\n  },\n  /** Retrieve the epoch designator for this date, e.g. BCE or CE.\n      @memberof CDate\n      @return {string} The current epoch. */\n  epoch: function epoch() {\n    return this._calendar.epoch(this);\n  },\n  /** Format the year, if not a simple sequential number.\n      @memberof CDate\n      @return {string} The formatted year. */\n  formatYear: function formatYear() {\n    return this._calendar.formatYear(this);\n  },\n  /** Retrieve the month of the year for this date,\n      i.e. the month's position within a numbered year.\n      @memberof CDate\n      @return {number} The month of the year: <code>minMonth</code> to months per year. */\n  monthOfYear: function monthOfYear() {\n    return this._calendar.monthOfYear(this);\n  },\n  /** Retrieve the week of the year for this date.\n      @memberof CDate\n      @return {number} The week of the year: 1 to weeks per year. */\n  weekOfYear: function weekOfYear() {\n    return this._calendar.weekOfYear(this);\n  },\n  /** Retrieve the number of days in the year for this date.\n      @memberof CDate\n      @return {number} The number of days in this year. */\n  daysInYear: function daysInYear() {\n    return this._calendar.daysInYear(this);\n  },\n  /** Retrieve the day of the year for this date.\n      @memberof CDate\n      @return {number} The day of the year: 1 to days per year. */\n  dayOfYear: function dayOfYear() {\n    return this._calendar.dayOfYear(this);\n  },\n  /** Retrieve the number of days in the month for this date.\n      @memberof CDate\n      @return {number} The number of days. */\n  daysInMonth: function daysInMonth() {\n    return this._calendar.daysInMonth(this);\n  },\n  /** Retrieve the day of the week for this date.\n      @memberof CDate\n      @return {number} The day of the week: 0 to number of days - 1. */\n  dayOfWeek: function dayOfWeek() {\n    return this._calendar.dayOfWeek(this);\n  },\n  /** Determine whether this date is a week day.\n      @memberof CDate\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not. */\n  weekDay: function weekDay() {\n    return this._calendar.weekDay(this);\n  },\n  /** Retrieve additional information about this date.\n      @memberof CDate\n      @return {object} Additional information - contents depends on calendar. */\n  extraInfo: function extraInfo() {\n    return this._calendar.extraInfo(this);\n  },\n  /** Add period(s) to a date.\n      @memberof CDate\n      @param offset {number} The number of periods to adjust by.\n      @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n      @return {CDate} The updated date. */\n  add: function add(offset, period) {\n    return this._calendar.add(this, offset, period);\n  },\n  /** Set a portion of the date.\n      @memberof CDate\n      @param value {number} The new value for the period.\n      @param period {string} One of 'y' for year, 'm' for month, 'd' for day.\n      @return {CDate} The updated date.\n      @throws Error if not a valid date. */\n  set: function set(value, period) {\n    return this._calendar.set(this, value, period);\n  },\n  /** Compare this date to another date.\n      @memberof CDate\n      @param date {CDate} The other date.\n      @return {number} -1 if this date is before the other date,\n              0 if they are equal, or +1 if this date is after the other date. */\n  compareTo: function compareTo(date) {\n    if (this._calendar.name !== date._calendar.name) {\n      throw (_exports.local.differentCalendars || _exports.regionalOptions[''].differentCalendars).replace(/\\{0\\}/, this._calendar.local.name).replace(/\\{1\\}/, date._calendar.local.name);\n    }\n    var c = this._year !== date._year ? this._year - date._year : this._month !== date._month ? this.monthOfYear() - date.monthOfYear() : this._day - date._day;\n    return c === 0 ? 0 : c < 0 ? -1 : +1;\n  },\n  /** Retrieve the calendar backing this date.\n      @memberof CDate\n      @return {BaseCalendar} The calendar implementation. */\n  calendar: function calendar() {\n    return this._calendar;\n  },\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof CDate\n      @return {number} The equivalent Julian date. */\n  toJD: function toJD() {\n    return this._calendar.toJD(this);\n  },\n  /** Create a new date from a Julian date.\n      @memberof CDate\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    return this._calendar.fromJD(jd);\n  },\n  /** Convert this date to a standard (Gregorian) JavaScript Date.\n      @memberof CDate\n      @return {Date} The equivalent JavaScript date. */\n  toJSDate: function toJSDate() {\n    return this._calendar.toJSDate(this);\n  },\n  /** Create a new date from a standard (Gregorian) JavaScript Date.\n      @memberof CDate\n      @param jsd {Date} The JavaScript date to convert.\n      @return {CDate} The equivalent date. */\n  fromJSDate: function fromJSDate(jsd) {\n    return this._calendar.fromJSDate(jsd);\n  },\n  /** Convert to a string for display.\n      @memberof CDate\n      @return {string} This date as a string. */\n  toString: function toString() {\n    return (this.year() < 0 ? '-' : '') + pad(Math.abs(this.year()), 4) + '-' + pad(this.month(), 2) + '-' + pad(this.day(), 2);\n  }\n});\n\n/** Basic functionality for all calendars.\n    Other calendars should extend this:\n    <pre>OtherCalendar.prototype = new BaseCalendar;</pre>\n    @class BaseCalendar */\nfunction BaseCalendar() {\n  this.shortYearCutoff = '+10';\n}\nassign(BaseCalendar.prototype, {\n  _validateLevel: 0,\n  // \"Stack\" to turn validation on/off\n\n  /** Create a new date within this calendar - today if no parameters given.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to duplicate or the year for the date.\n      @param [month] {number} The month for the date.\n      @param [day] {number} The day for the date.\n      @return {CDate} The new date.\n      @throws Error if not a valid date or a different calendar used. */\n  newDate: function newDate(year, month, day) {\n    if (year == null) {\n      return this.today();\n    }\n    if (year.year) {\n      this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n      day = year.day();\n      month = year.month();\n      year = year.year();\n    }\n    return new CDate(this, year, month, day);\n  },\n  /** Create a new date for today.\n      @memberof BaseCalendar\n      @return {CDate} Today's date. */\n  today: function today() {\n    return this.fromJSDate(new Date());\n  },\n  /** Retrieve the epoch designator for this date.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {string} The current epoch.\n      @throws Error if an invalid year or a different calendar used. */\n  epoch: function epoch(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n    return date.year() < 0 ? this.local.epochs[0] : this.local.epochs[1];\n  },\n  /** Format the year, if not a simple sequential number\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to format or the year to format.\n      @return {string} The formatted year.\n      @throws Error if an invalid year or a different calendar used. */\n  formatYear: function formatYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n    return (date.year() < 0 ? '-' : '') + pad(Math.abs(date.year()), 4);\n  },\n  /** Retrieve the number of months in a year.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {number} The number of months.\n      @throws Error if an invalid year or a different calendar used. */\n  monthsInYear: function monthsInYear(year) {\n    this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n    return 12;\n  },\n  /** Calculate the month's ordinal position within the year -\n      for those calendars that don't start at month 1!\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param month {number} The month to examine.\n      @return {number} The ordinal position, starting from <code>minMonth</code>.\n      @throws Error if an invalid year/month or a different calendar used. */\n  monthOfYear: function monthOfYear(year, month) {\n    var date = this._validate(year, month, this.minDay, _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n    return (date.month() + this.monthsInYear(date) - this.firstMonth) % this.monthsInYear(date) + this.minMonth;\n  },\n  /** Calculate actual month from ordinal position, starting from minMonth.\n      @memberof BaseCalendar\n      @param year {number} The year to examine.\n      @param ord {number} The month's ordinal position.\n      @return {number} The month's number.\n      @throws Error if an invalid year/month. */\n  fromMonthOfYear: function fromMonthOfYear(year, ord) {\n    var m = (ord + this.firstMonth - 2 * this.minMonth) % this.monthsInYear(year) + this.minMonth;\n    this._validate(year, m, this.minDay, _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n    return m;\n  },\n  /** Retrieve the number of days in a year.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {number} The number of days.\n      @throws Error if an invalid year or a different calendar used. */\n  daysInYear: function daysInYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n    return this.leapYear(date) ? 366 : 365;\n  },\n  /** Retrieve the day of the year for a date.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The day of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  dayOfYear: function dayOfYear(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n    return date.toJD() - this.newDate(date.year(), this.fromMonthOfYear(date.year(), this.minMonth), this.minDay).toJD() + 1;\n  },\n  /** Retrieve the number of days in a week.\n      @memberof BaseCalendar\n      @return {number} The number of days. */\n  daysInWeek: function daysInWeek() {\n    return 7;\n  },\n  /** Retrieve the day of the week for a date.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The day of the week: 0 to number of days - 1.\n      @throws Error if an invalid date or a different calendar used. */\n  dayOfWeek: function dayOfWeek(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n    return (Math.floor(this.toJD(date)) + 2) % this.daysInWeek();\n  },\n  /** Retrieve additional information about a date.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {object} Additional information - contents depends on calendar.\n      @throws Error if an invalid date or a different calendar used. */\n  extraInfo: function extraInfo(year, month, day) {\n    this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n    return {};\n  },\n  /** Add period(s) to a date.\n      Cater for no year zero.\n      @memberof BaseCalendar\n      @param date {CDate} The starting date.\n      @param offset {number} The number of periods to adjust by.\n      @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n      @return {CDate} The updated date.\n      @throws Error if a different calendar used. */\n  add: function add(date, offset, period) {\n    this._validate(date, this.minMonth, this.minDay, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n    return this._correctAdd(date, this._add(date, offset, period), offset, period);\n  },\n  /** Add period(s) to a date.\n      @memberof BaseCalendar\n      @private\n      @param date {CDate} The starting date.\n      @param offset {number} The number of periods to adjust by.\n      @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n      @return {CDate} The updated date. */\n  _add: function _add(date, offset, period) {\n    this._validateLevel++;\n    if (period === 'd' || period === 'w') {\n      var jd = date.toJD() + offset * (period === 'w' ? this.daysInWeek() : 1);\n      var d = date.calendar().fromJD(jd);\n      this._validateLevel--;\n      return [d.year(), d.month(), d.day()];\n    }\n    try {\n      var y = date.year() + (period === 'y' ? offset : 0);\n      var m = date.monthOfYear() + (period === 'm' ? offset : 0);\n      var d = date.day(); // + (period === 'd' ? offset : 0) +\n      //(period === 'w' ? offset * this.daysInWeek() : 0);\n      var resyncYearMonth = function resyncYearMonth(calendar) {\n        while (m < calendar.minMonth) {\n          y--;\n          m += calendar.monthsInYear(y);\n        }\n        var yearMonths = calendar.monthsInYear(y);\n        while (m > yearMonths - 1 + calendar.minMonth) {\n          y++;\n          m -= yearMonths;\n          yearMonths = calendar.monthsInYear(y);\n        }\n      };\n      if (period === 'y') {\n        if (date.month() !== this.fromMonthOfYear(y, m)) {\n          // Hebrew\n          m = this.newDate(y, date.month(), this.minDay).monthOfYear();\n        }\n        m = Math.min(m, this.monthsInYear(y));\n        d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));\n      } else if (period === 'm') {\n        resyncYearMonth(this);\n        d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));\n      }\n      var ymd = [y, this.fromMonthOfYear(y, m), d];\n      this._validateLevel--;\n      return ymd;\n    } catch (e) {\n      this._validateLevel--;\n      throw e;\n    }\n  },\n  /** Correct a candidate date after adding period(s) to a date.\n      Handle no year zero if necessary.\n      @memberof BaseCalendar\n      @private\n      @param date {CDate} The starting date.\n      @param ymd {number[]} The added date.\n      @param offset {number} The number of periods to adjust by.\n      @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n      @return {CDate} The updated date. */\n  _correctAdd: function _correctAdd(date, ymd, offset, period) {\n    if (!this.hasYearZero && (period === 'y' || period === 'm')) {\n      if (ymd[0] === 0 ||\n      // In year zero\n      date.year() > 0 !== ymd[0] > 0) {\n        // Crossed year zero\n        var adj = {\n          y: [1, 1, 'y'],\n          m: [1, this.monthsInYear(-1), 'm'],\n          w: [this.daysInWeek(), this.daysInYear(-1), 'd'],\n          d: [1, this.daysInYear(-1), 'd']\n        }[period];\n        var dir = offset < 0 ? -1 : +1;\n        ymd = this._add(date, offset * adj[0] + dir * adj[1], adj[2]);\n      }\n    }\n    return date.date(ymd[0], ymd[1], ymd[2]);\n  },\n  /** Set a portion of the date.\n      @memberof BaseCalendar\n      @param date {CDate} The starting date.\n      @param value {number} The new value for the period.\n      @param period {string} One of 'y' for year, 'm' for month, 'd' for day.\n      @return {CDate} The updated date.\n      @throws Error if an invalid date or a different calendar used. */\n  set: function set(date, value, period) {\n    this._validate(date, this.minMonth, this.minDay, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n    var y = period === 'y' ? value : date.year();\n    var m = period === 'm' ? value : date.month();\n    var d = period === 'd' ? value : date.day();\n    if (period === 'y' || period === 'm') {\n      d = Math.min(d, this.daysInMonth(y, m));\n    }\n    return date.date(y, m, d);\n  },\n  /** Determine whether a date is valid for this calendar.\n      @memberof BaseCalendar\n      @param year {number} The year to examine.\n      @param month {number} The month to examine.\n      @param day {number} The day to examine.\n      @return {boolean} <code>true</code> if a valid date, <code>false</code> if not. */\n  isValid: function isValid(year, month, day) {\n    this._validateLevel++;\n    var valid = this.hasYearZero || year !== 0;\n    if (valid) {\n      var date = this.newDate(year, month, this.minDay);\n      valid = month >= this.minMonth && month - this.minMonth < this.monthsInYear(date) && day >= this.minDay && day - this.minDay < this.daysInMonth(date);\n    }\n    this._validateLevel--;\n    return valid;\n  },\n  /** Convert the date to a standard (Gregorian) JavaScript Date.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {Date} The equivalent JavaScript date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJSDate: function toJSDate(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n    return _exports.instance().fromJD(this.toJD(date)).toJSDate();\n  },\n  /** Convert the date from a standard (Gregorian) JavaScript Date.\n      @memberof BaseCalendar\n      @param jsd {Date} The JavaScript date.\n      @return {CDate} The equivalent calendar date. */\n  fromJSDate: function fromJSDate(jsd) {\n    return this.fromJD(_exports.instance().fromJSDate(jsd).toJD());\n  },\n  /** Check that a candidate date is from the same calendar and is valid.\n      @memberof BaseCalendar\n      @private\n      @param year {CDate|number} The date to validate or the year to validate.\n      @param [month] {number} The month to validate.\n      @param [day] {number} The day to validate.\n      @param error {string} Rrror message if invalid.\n      @throws Error if different calendars used or invalid date. */\n  _validate: function _validate(year, month, day, error) {\n    if (year.year) {\n      if (this._validateLevel === 0 && this.name !== year.calendar().name) {\n        throw (_exports.local.differentCalendars || _exports.regionalOptions[''].differentCalendars).replace(/\\{0\\}/, this.local.name).replace(/\\{1\\}/, year.calendar().local.name);\n      }\n      return year;\n    }\n    try {\n      this._validateLevel++;\n      if (this._validateLevel === 1 && !this.isValid(year, month, day)) {\n        throw error.replace(/\\{0\\}/, this.local.name);\n      }\n      var date = this.newDate(year, month, day);\n      this._validateLevel--;\n      return date;\n    } catch (e) {\n      this._validateLevel--;\n      throw e;\n    }\n  }\n});\n\n/** Implementation of the Proleptic Gregorian Calendar.\n    See <a href=\":http://en.wikipedia.org/wiki/Gregorian_calendar\">http://en.wikipedia.org/wiki/Gregorian_calendar</a>\n    and <a href=\"http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar\">http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar</a>.\n    @class GregorianCalendar\n    @augments BaseCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction GregorianCalendar(language) {\n  this.local = this.regionalOptions[language] || this.regionalOptions[''];\n}\nGregorianCalendar.prototype = new BaseCalendar();\nassign(GregorianCalendar.prototype, {\n  /** The calendar name.\n      @memberof GregorianCalendar */\n  name: 'Gregorian',\n  /** Julian date of start of Gregorian epoch: 1 January 0001 CE.\n     @memberof GregorianCalendar */\n  jdEpoch: 1721425.5,\n  /** Days per month in a common year.\n     @memberof GregorianCalendar */\n  daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n     @memberof GregorianCalendar */\n  hasYearZero: false,\n  /** The minimum month number.\n      @memberof GregorianCalendar */\n  minMonth: 1,\n  /** The first month in the year.\n      @memberof GregorianCalendar */\n  firstMonth: 1,\n  /** The minimum day number.\n     @memberof GregorianCalendar */\n  minDay: 1,\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof GregorianCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Gregorian',\n      epochs: ['BCE', 'CE'],\n      monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n      monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n      dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n      dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n      digits: null,\n      dateFormat: 'mm/dd/yyyy',\n      firstDay: 0,\n      isRTL: false\n    }\n  },\n  /** Determine whether this date is in a leap year.\n      @memberof GregorianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n    var year = date.year() + (date.year() < 0 ? 1 : 0); // No year zero\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n  },\n  /** Determine the week of the year for a date - ISO 8601.\n      @memberof GregorianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year, starting from 1.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Thursday of this week starting on Monday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(4 - (checkDate.dayOfWeek() || 7), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n  /** Retrieve the number of days in a month.\n      @memberof GregorianCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 2 && this.leapYear(date.year()) ? 1 : 0);\n  },\n  /** Determine whether this date is a week day.\n      @memberof GregorianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return (this.dayOfWeek(year, month, day) || 7) < 6;\n  },\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof GregorianCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n    year = date.year();\n    month = date.month();\n    day = date.day();\n    if (year < 0) {\n      year++;\n    } // No year zero\n    // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n    if (month < 3) {\n      month += 12;\n      year--;\n    }\n    var a = Math.floor(year / 100);\n    var b = 2 - a + Math.floor(a / 4);\n    return Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day + b - 1524.5;\n  },\n  /** Create a new date from a Julian date.\n      @memberof GregorianCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n    var z = Math.floor(jd + 0.5);\n    var a = Math.floor((z - 1867216.25) / 36524.25);\n    a = z + 1 + a - Math.floor(a / 4);\n    var b = a + 1524;\n    var c = Math.floor((b - 122.1) / 365.25);\n    var d = Math.floor(365.25 * c);\n    var e = Math.floor((b - d) / 30.6001);\n    var day = b - d - Math.floor(e * 30.6001);\n    var month = e - (e > 13.5 ? 13 : 1);\n    var year = c - (month > 2.5 ? 4716 : 4715);\n    if (year <= 0) {\n      year--;\n    } // No year zero\n    return this.newDate(year, month, day);\n  },\n  /** Convert this date to a standard (Gregorian) JavaScript Date.\n      @memberof GregorianCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {Date} The equivalent JavaScript date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJSDate: function toJSDate(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n    var jsd = new Date(date.year(), date.month() - 1, date.day());\n    jsd.setHours(0);\n    jsd.setMinutes(0);\n    jsd.setSeconds(0);\n    jsd.setMilliseconds(0);\n    // Hours may be non-zero on daylight saving cut-over:\n    // > 12 when midnight changeover, but then cannot generate\n    // midnight datetime, so jump to 1AM, otherwise reset.\n    jsd.setHours(jsd.getHours() > 12 ? jsd.getHours() + 2 : 0);\n    return jsd;\n  },\n  /** Create a new date from a standard (Gregorian) JavaScript Date.\n      @memberof GregorianCalendar\n      @param jsd {Date} The JavaScript date to convert.\n      @return {CDate} The equivalent date. */\n  fromJSDate: function fromJSDate(jsd) {\n    return this.newDate(jsd.getFullYear(), jsd.getMonth() + 1, jsd.getDate());\n  }\n});\n\n// Singleton manager\nvar _exports = module.exports = new Calendars();\n\n// Date template\n_exports.cdate = CDate;\n\n// Base calendar template\n_exports.baseCalendar = BaseCalendar;\n\n// Gregorian calendar implementation\n_exports.calendars.gregorian = GregorianCalendar;","map":{"version":3,"names":["assign","require","Calendars","regionalOptions","invalidCalendar","invalidDate","invalidMonth","invalidYear","differentCalendars","local","calendars","_localCals","prototype","instance","name","language","toLowerCase","cal","replace","newDate","year","month","day","calendar","substituteDigits","digits","value","digit","substituteChineseDigits","powers","localNumber","power","units","Math","floor","indexOf","substr","CDate","_calendar","_year","_month","_day","_validateLevel","isValid","_exports","pad","length","substring","arguments","set","date","leapYear","epoch","formatYear","monthOfYear","weekOfYear","daysInYear","dayOfYear","daysInMonth","dayOfWeek","weekDay","extraInfo","add","offset","period","compareTo","c","toJD","fromJD","jd","toJSDate","fromJSDate","jsd","toString","abs","BaseCalendar","shortYearCutoff","today","_validate","Date","minMonth","minDay","epochs","monthsInYear","firstMonth","fromMonthOfYear","ord","m","daysInWeek","_correctAdd","_add","d","y","resyncYearMonth","yearMonths","min","ymd","e","hasYearZero","adj","w","dir","valid","error","GregorianCalendar","jdEpoch","daysPerMonth","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","dateFormat","firstDay","isRTL","checkDate","a","b","z","setHours","setMinutes","setSeconds","setMilliseconds","getHours","getFullYear","getMonth","getDate","module","exports","cdate","baseCalendar","gregorian"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/world-calendars/dist/main.js"],"sourcesContent":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n﻿/* http://keith-wood.name/calendars.html\n   Calendars for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar assign = require('object-assign');\n\n\nfunction Calendars() {\n    this.regionalOptions = [];\n    this.regionalOptions[''] = {\n        invalidCalendar: 'Calendar {0} not found',\n        invalidDate: 'Invalid {0} date',\n        invalidMonth: 'Invalid {0} month',\n        invalidYear: 'Invalid {0} year',\n        differentCalendars: 'Cannot mix {0} and {1} dates'\n    };\n    this.local = this.regionalOptions[''];\n    this.calendars = {};\n    this._localCals = {};\n}\n\n/** Create the calendars plugin.\n    <p>Provides support for various world calendars in a consistent manner.</p>\n     @class Calendars\n    @example _exports.instance('julian').newDate(2014, 12, 25) */\nassign(Calendars.prototype, {\n\n    /** Obtain a calendar implementation and localisation.\n        @memberof Calendars\n        @param [name='gregorian'] {string} The name of the calendar, e.g. 'gregorian', 'persian', 'islamic'.\n        @param [language=''] {string} The language code to use for localisation (default is English).\n        @return {Calendar} The calendar and localisation.\n        @throws Error if calendar not found. */\n    instance: function(name, language) {\n        name = (name || 'gregorian').toLowerCase();\n        language = language || '';\n        var cal = this._localCals[name + '-' + language];\n        if (!cal && this.calendars[name]) {\n            cal = new this.calendars[name](language);\n            this._localCals[name + '-' + language] = cal;\n        }\n        if (!cal) {\n            throw (this.local.invalidCalendar || this.regionalOptions[''].invalidCalendar).\n                replace(/\\{0\\}/, name);\n        }\n        return cal;\n    },\n\n    /** Create a new date - for today if no other parameters given.\n        @memberof Calendars\n        @param year {CDate|number} The date to copy or the year for the date.\n        @param [month] {number} The month for the date.\n        @param [day] {number} The day for the date.\n        @param [calendar='gregorian'] {BaseCalendar|string} The underlying calendar or the name of the calendar.\n        @param [language=''] {string} The language to use for localisation (default English).\n        @return {CDate} The new date.\n        @throws Error if an invalid date. */\n    newDate: function(year, month, day, calendar, language) {\n        calendar = (year != null && year.year ? year.calendar() : (typeof calendar === 'string' ?\n            this.instance(calendar, language) : calendar)) || this.instance();\n        return calendar.newDate(year, month, day);\n    },\n    \n    /** A simple digit substitution function for localising numbers via the Calendar digits option.\n        @member Calendars\n        @param digits {string[]} The substitute digits, for 0 through 9.\n        @return {function} The substitution function. */\n    substituteDigits: function(digits) {\n        return function(value) {\n            return (value + '').replace(/[0-9]/g, function(digit) {\n                return digits[digit];\n            });\n        }\n    },\n    \n    /** Digit substitution function for localising Chinese style numbers via the Calendar digits option.\n        @member Calendars\n        @param digits {string[]} The substitute digits, for 0 through 9.\n        @param powers {string[]} The characters denoting powers of 10, i.e. 1, 10, 100, 1000.\n        @return {function} The substitution function. */\n    substituteChineseDigits: function(digits, powers) {\n        return function(value) {\n            var localNumber = '';\n            var power = 0;\n            while (value > 0) {\n                var units = value % 10;\n                localNumber = (units === 0 ? '' : digits[units] + powers[power]) + localNumber;\n                power++;\n                value = Math.floor(value / 10);\n            }\n            if (localNumber.indexOf(digits[1] + powers[1]) === 0) {\n                localNumber = localNumber.substr(1);\n            }\n            return localNumber || digits[0];\n        }\n    }\n});\n\n/** Generic date, based on a particular calendar.\n    @class CDate\n    @param calendar {BaseCalendar} The underlying calendar implementation.\n    @param year {number} The year for this date.\n    @param month {number} The month for this date.\n    @param day {number} The day for this date.\n    @return {CDate} The date object.\n    @throws Error if an invalid date. */\nfunction CDate(calendar, year, month, day) {\n    this._calendar = calendar;\n    this._year = year;\n    this._month = month;\n    this._day = day;\n    if (this._calendar._validateLevel === 0 &&\n            !this._calendar.isValid(this._year, this._month, this._day)) {\n        throw (_exports.local.invalidDate || _exports.regionalOptions[''].invalidDate).\n            replace(/\\{0\\}/, this._calendar.local.name);\n    }\n}\n\n/** Pad a numeric value with leading zeroes.\n    @private\n    @param value {number} The number to format.\n    @param length {number} The minimum length.\n    @return {string} The formatted number. */\nfunction pad(value, length) {\n    value = '' + value;\n    return '000000'.substring(0, length - value.length) + value;\n}\n\nassign(CDate.prototype, {\n\n    /** Create a new date.\n        @memberof CDate\n        @param [year] {CDate|number} The date to copy or the year for the date (default this date).\n        @param [month] {number} The month for the date.\n        @param [day] {number} The day for the date.\n        @return {CDate} The new date.\n        @throws Error if an invalid date. */\n    newDate: function(year, month, day) {\n        return this._calendar.newDate((year == null ? this : year), month, day);\n    },\n\n    /** Set or retrieve the year for this date.\n        @memberof CDate\n        @param [year] {number} The year for the date.\n        @return {number|CDate} The date's year (if no parameter) or the updated date.\n        @throws Error if an invalid date. */\n    year: function(year) {\n        return (arguments.length === 0 ? this._year : this.set(year, 'y'));\n    },\n\n    /** Set or retrieve the month for this date.\n        @memberof CDate\n        @param [month] {number} The month for the date.\n        @return {number|CDate} The date's month (if no parameter) or the updated date.\n        @throws Error if an invalid date. */\n    month: function(month) {\n        return (arguments.length === 0 ? this._month : this.set(month, 'm'));\n    },\n\n    /** Set or retrieve the day for this date.\n        @memberof CDate\n        @param [day] {number} The day for the date.\n        @return {number|CData} The date's day (if no parameter) or the updated date.\n        @throws Error if an invalid date. */\n    day: function(day) {\n        return (arguments.length === 0 ? this._day : this.set(day, 'd'));\n    },\n\n    /** Set new values for this date.\n        @memberof CDate\n        @param year {number} The year for the date.\n        @param month {number} The month for the date.\n        @param day {number} The day for the date.\n        @return {CDate} The updated date.\n        @throws Error if an invalid date. */\n    date: function(year, month, day) {\n        if (!this._calendar.isValid(year, month, day)) {\n            throw (_exports.local.invalidDate || _exports.regionalOptions[''].invalidDate).\n                replace(/\\{0\\}/, this._calendar.local.name);\n        }\n        this._year = year;\n        this._month = month;\n        this._day = day;\n        return this;\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof CDate\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not. */\n    leapYear: function() {\n        return this._calendar.leapYear(this);\n    },\n\n    /** Retrieve the epoch designator for this date, e.g. BCE or CE.\n        @memberof CDate\n        @return {string} The current epoch. */\n    epoch: function() {\n        return this._calendar.epoch(this);\n    },\n\n    /** Format the year, if not a simple sequential number.\n        @memberof CDate\n        @return {string} The formatted year. */\n    formatYear: function() {\n        return this._calendar.formatYear(this);\n    },\n\n    /** Retrieve the month of the year for this date,\n        i.e. the month's position within a numbered year.\n        @memberof CDate\n        @return {number} The month of the year: <code>minMonth</code> to months per year. */\n    monthOfYear: function() {\n        return this._calendar.monthOfYear(this);\n    },\n\n    /** Retrieve the week of the year for this date.\n        @memberof CDate\n        @return {number} The week of the year: 1 to weeks per year. */\n    weekOfYear: function() {\n        return this._calendar.weekOfYear(this);\n    },\n\n    /** Retrieve the number of days in the year for this date.\n        @memberof CDate\n        @return {number} The number of days in this year. */\n    daysInYear: function() {\n        return this._calendar.daysInYear(this);\n    },\n\n    /** Retrieve the day of the year for this date.\n        @memberof CDate\n        @return {number} The day of the year: 1 to days per year. */\n    dayOfYear: function() {\n        return this._calendar.dayOfYear(this);\n    },\n\n    /** Retrieve the number of days in the month for this date.\n        @memberof CDate\n        @return {number} The number of days. */\n    daysInMonth: function() {\n        return this._calendar.daysInMonth(this);\n    },\n\n    /** Retrieve the day of the week for this date.\n        @memberof CDate\n        @return {number} The day of the week: 0 to number of days - 1. */\n    dayOfWeek: function() {\n        return this._calendar.dayOfWeek(this);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof CDate\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not. */\n    weekDay: function() {\n        return this._calendar.weekDay(this);\n    },\n\n    /** Retrieve additional information about this date.\n        @memberof CDate\n        @return {object} Additional information - contents depends on calendar. */\n    extraInfo: function() {\n        return this._calendar.extraInfo(this);\n    },\n\n    /** Add period(s) to a date.\n        @memberof CDate\n        @param offset {number} The number of periods to adjust by.\n        @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n        @return {CDate} The updated date. */\n    add: function(offset, period) {\n        return this._calendar.add(this, offset, period);\n    },\n\n    /** Set a portion of the date.\n        @memberof CDate\n        @param value {number} The new value for the period.\n        @param period {string} One of 'y' for year, 'm' for month, 'd' for day.\n        @return {CDate} The updated date.\n        @throws Error if not a valid date. */\n    set: function(value, period) {\n        return this._calendar.set(this, value, period);\n    },\n\n    /** Compare this date to another date.\n        @memberof CDate\n        @param date {CDate} The other date.\n        @return {number} -1 if this date is before the other date,\n                0 if they are equal, or +1 if this date is after the other date. */\n    compareTo: function(date) {\n        if (this._calendar.name !== date._calendar.name) {\n            throw (_exports.local.differentCalendars || _exports.regionalOptions[''].differentCalendars).\n                replace(/\\{0\\}/, this._calendar.local.name).replace(/\\{1\\}/, date._calendar.local.name);\n        }\n        var c = (this._year !== date._year ? this._year - date._year :\n            this._month !== date._month ? this.monthOfYear() - date.monthOfYear() :\n            this._day - date._day);\n        return (c === 0 ? 0 : (c < 0 ? -1 : +1));\n    },\n\n    /** Retrieve the calendar backing this date.\n        @memberof CDate\n        @return {BaseCalendar} The calendar implementation. */\n    calendar: function() {\n        return this._calendar;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof CDate\n        @return {number} The equivalent Julian date. */\n    toJD: function() {\n        return this._calendar.toJD(this);\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof CDate\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        return this._calendar.fromJD(jd);\n    },\n\n    /** Convert this date to a standard (Gregorian) JavaScript Date.\n        @memberof CDate\n        @return {Date} The equivalent JavaScript date. */\n    toJSDate: function() {\n        return this._calendar.toJSDate(this);\n    },\n\n    /** Create a new date from a standard (Gregorian) JavaScript Date.\n        @memberof CDate\n        @param jsd {Date} The JavaScript date to convert.\n        @return {CDate} The equivalent date. */\n    fromJSDate: function(jsd) {\n        return this._calendar.fromJSDate(jsd);\n    },\n\n    /** Convert to a string for display.\n        @memberof CDate\n        @return {string} This date as a string. */\n    toString: function() {\n        return (this.year() < 0 ? '-' : '') + pad(Math.abs(this.year()), 4) +\n            '-' + pad(this.month(), 2) + '-' + pad(this.day(), 2);\n    }\n});\n\n/** Basic functionality for all calendars.\n    Other calendars should extend this:\n    <pre>OtherCalendar.prototype = new BaseCalendar;</pre>\n    @class BaseCalendar */\nfunction BaseCalendar() {\n    this.shortYearCutoff = '+10';\n}\n\nassign(BaseCalendar.prototype, {\n    _validateLevel: 0, // \"Stack\" to turn validation on/off\n\n    /** Create a new date within this calendar - today if no parameters given.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to duplicate or the year for the date.\n        @param [month] {number} The month for the date.\n        @param [day] {number} The day for the date.\n        @return {CDate} The new date.\n        @throws Error if not a valid date or a different calendar used. */\n    newDate: function(year, month, day) {\n        if (year == null) {\n            return this.today();\n        }\n        if (year.year) {\n            this._validate(year, month, day,\n                _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n            day = year.day();\n            month = year.month();\n            year = year.year();\n        }\n        return new CDate(this, year, month, day);\n    },\n\n    /** Create a new date for today.\n        @memberof BaseCalendar\n        @return {CDate} Today's date. */\n    today: function() {\n        return this.fromJSDate(new Date());\n    },\n\n    /** Retrieve the epoch designator for this date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {string} The current epoch.\n        @throws Error if an invalid year or a different calendar used. */\n    epoch: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        return (date.year() < 0 ? this.local.epochs[0] : this.local.epochs[1]);\n    },\n\n    /** Format the year, if not a simple sequential number\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to format or the year to format.\n        @return {string} The formatted year.\n        @throws Error if an invalid year or a different calendar used. */\n    formatYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        return (date.year() < 0 ? '-' : '') + pad(Math.abs(date.year()), 4)\n    },\n\n    /** Retrieve the number of months in a year.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of months.\n        @throws Error if an invalid year or a different calendar used. */\n    monthsInYear: function(year) {\n        this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        return 12;\n    },\n\n    /** Calculate the month's ordinal position within the year -\n        for those calendars that don't start at month 1!\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param month {number} The month to examine.\n        @return {number} The ordinal position, starting from <code>minMonth</code>.\n        @throws Error if an invalid year/month or a different calendar used. */\n    monthOfYear: function(year, month) {\n        var date = this._validate(year, month, this.minDay,\n            _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n        return (date.month() + this.monthsInYear(date) - this.firstMonth) %\n            this.monthsInYear(date) + this.minMonth;\n    },\n\n    /** Calculate actual month from ordinal position, starting from minMonth.\n        @memberof BaseCalendar\n        @param year {number} The year to examine.\n        @param ord {number} The month's ordinal position.\n        @return {number} The month's number.\n        @throws Error if an invalid year/month. */\n    fromMonthOfYear: function(year, ord) {\n        var m = (ord + this.firstMonth - 2 * this.minMonth) %\n            this.monthsInYear(year) + this.minMonth;\n        this._validate(year, m, this.minDay,\n            _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n        return m;\n    },\n\n    /** Retrieve the number of days in a year.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of days.\n        @throws Error if an invalid year or a different calendar used. */\n    daysInYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        return (this.leapYear(date) ? 366 : 365);\n    },\n\n    /** Retrieve the day of the year for a date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The day of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    dayOfYear: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return date.toJD() - this.newDate(date.year(),\n            this.fromMonthOfYear(date.year(), this.minMonth), this.minDay).toJD() + 1;\n    },\n\n    /** Retrieve the number of days in a week.\n        @memberof BaseCalendar\n        @return {number} The number of days. */\n    daysInWeek: function() {\n        return 7;\n    },\n\n    /** Retrieve the day of the week for a date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The day of the week: 0 to number of days - 1.\n        @throws Error if an invalid date or a different calendar used. */\n    dayOfWeek: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return (Math.floor(this.toJD(date)) + 2) % this.daysInWeek();\n    },\n\n    /** Retrieve additional information about a date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {object} Additional information - contents depends on calendar.\n        @throws Error if an invalid date or a different calendar used. */\n    extraInfo: function(year, month, day) {\n        this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return {};\n    },\n\n    /** Add period(s) to a date.\n        Cater for no year zero.\n        @memberof BaseCalendar\n        @param date {CDate} The starting date.\n        @param offset {number} The number of periods to adjust by.\n        @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n        @return {CDate} The updated date.\n        @throws Error if a different calendar used. */\n    add: function(date, offset, period) {\n        this._validate(date, this.minMonth, this.minDay,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return this._correctAdd(date, this._add(date, offset, period), offset, period);\n    },\n\n    /** Add period(s) to a date.\n        @memberof BaseCalendar\n        @private\n        @param date {CDate} The starting date.\n        @param offset {number} The number of periods to adjust by.\n        @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n        @return {CDate} The updated date. */\n    _add: function(date, offset, period) {\n        this._validateLevel++;\n        if (period === 'd' || period === 'w') {\n            var jd = date.toJD() + offset * (period === 'w' ? this.daysInWeek() : 1);\n            var d = date.calendar().fromJD(jd);\n            this._validateLevel--;\n            return [d.year(), d.month(), d.day()];\n        }\n        try {\n            var y = date.year() + (period === 'y' ? offset : 0);\n            var m = date.monthOfYear() + (period === 'm' ? offset : 0);\n            var d = date.day();// + (period === 'd' ? offset : 0) +\n                //(period === 'w' ? offset * this.daysInWeek() : 0);\n            var resyncYearMonth = function(calendar) {\n                while (m < calendar.minMonth) {\n                    y--;\n                    m += calendar.monthsInYear(y);\n                }\n                var yearMonths = calendar.monthsInYear(y);\n                while (m > yearMonths - 1 + calendar.minMonth) {\n                    y++;\n                    m -= yearMonths;\n                    yearMonths = calendar.monthsInYear(y);\n                }\n            };\n            if (period === 'y') {\n                if (date.month() !== this.fromMonthOfYear(y, m)) { // Hebrew\n                    m = this.newDate(y, date.month(), this.minDay).monthOfYear();\n                }\n                m = Math.min(m, this.monthsInYear(y));\n                d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));\n            }\n            else if (period === 'm') {\n                resyncYearMonth(this);\n                d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));\n            }\n            var ymd = [y, this.fromMonthOfYear(y, m), d];\n            this._validateLevel--;\n            return ymd;\n        }\n        catch (e) {\n            this._validateLevel--;\n            throw e;\n        }\n    },\n\n    /** Correct a candidate date after adding period(s) to a date.\n        Handle no year zero if necessary.\n        @memberof BaseCalendar\n        @private\n        @param date {CDate} The starting date.\n        @param ymd {number[]} The added date.\n        @param offset {number} The number of periods to adjust by.\n        @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n        @return {CDate} The updated date. */\n    _correctAdd: function(date, ymd, offset, period) {\n        if (!this.hasYearZero && (period === 'y' || period === 'm')) {\n            if (ymd[0] === 0 || // In year zero\n                    (date.year() > 0) !== (ymd[0] > 0)) { // Crossed year zero\n                var adj = {y: [1, 1, 'y'], m: [1, this.monthsInYear(-1), 'm'],\n                    w: [this.daysInWeek(), this.daysInYear(-1), 'd'],\n                    d: [1, this.daysInYear(-1), 'd']}[period];\n                var dir = (offset < 0 ? -1 : +1);\n                ymd = this._add(date, offset * adj[0] + dir * adj[1], adj[2]);\n            }\n        }\n        return date.date(ymd[0], ymd[1], ymd[2]);\n    },\n\n    /** Set a portion of the date.\n        @memberof BaseCalendar\n        @param date {CDate} The starting date.\n        @param value {number} The new value for the period.\n        @param period {string} One of 'y' for year, 'm' for month, 'd' for day.\n        @return {CDate} The updated date.\n        @throws Error if an invalid date or a different calendar used. */\n    set: function(date, value, period) {\n        this._validate(date, this.minMonth, this.minDay,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        var y = (period === 'y' ? value : date.year());\n        var m = (period === 'm' ? value : date.month());\n        var d = (period === 'd' ? value : date.day());\n        if (period === 'y' || period === 'm') {\n            d = Math.min(d, this.daysInMonth(y, m));\n        }\n        return date.date(y, m, d);\n    },\n\n    /** Determine whether a date is valid for this calendar.\n        @memberof BaseCalendar\n        @param year {number} The year to examine.\n        @param month {number} The month to examine.\n        @param day {number} The day to examine.\n        @return {boolean} <code>true</code> if a valid date, <code>false</code> if not. */\n    isValid: function(year, month, day) {\n        this._validateLevel++;\n        var valid = (this.hasYearZero || year !== 0);\n        if (valid) {\n            var date = this.newDate(year, month, this.minDay);\n            valid = (month >= this.minMonth && month - this.minMonth < this.monthsInYear(date)) &&\n                (day >= this.minDay && day - this.minDay < this.daysInMonth(date));\n        }\n        this._validateLevel--;\n        return valid;\n    },\n\n    /** Convert the date to a standard (Gregorian) JavaScript Date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {Date} The equivalent JavaScript date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJSDate: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return _exports.instance().fromJD(this.toJD(date)).toJSDate();\n    },\n\n    /** Convert the date from a standard (Gregorian) JavaScript Date.\n        @memberof BaseCalendar\n        @param jsd {Date} The JavaScript date.\n        @return {CDate} The equivalent calendar date. */\n    fromJSDate: function(jsd) {\n        return this.fromJD(_exports.instance().fromJSDate(jsd).toJD());\n    },\n\n    /** Check that a candidate date is from the same calendar and is valid.\n        @memberof BaseCalendar\n        @private\n        @param year {CDate|number} The date to validate or the year to validate.\n        @param [month] {number} The month to validate.\n        @param [day] {number} The day to validate.\n        @param error {string} Rrror message if invalid.\n        @throws Error if different calendars used or invalid date. */\n    _validate: function(year, month, day, error) {\n        if (year.year) {\n            if (this._validateLevel === 0 && this.name !== year.calendar().name) {\n                throw (_exports.local.differentCalendars || _exports.regionalOptions[''].differentCalendars).\n                    replace(/\\{0\\}/, this.local.name).replace(/\\{1\\}/, year.calendar().local.name);\n            }\n            return year;\n        }\n        try {\n            this._validateLevel++;\n            if (this._validateLevel === 1 && !this.isValid(year, month, day)) {\n                throw error.replace(/\\{0\\}/, this.local.name);\n            }\n            var date = this.newDate(year, month, day);\n            this._validateLevel--;\n            return date;\n        }\n        catch (e) {\n            this._validateLevel--;\n            throw e;\n        }\n    }\n});\n\n/** Implementation of the Proleptic Gregorian Calendar.\n    See <a href=\":http://en.wikipedia.org/wiki/Gregorian_calendar\">http://en.wikipedia.org/wiki/Gregorian_calendar</a>\n    and <a href=\"http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar\">http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar</a>.\n    @class GregorianCalendar\n    @augments BaseCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction GregorianCalendar(language) {\n    this.local = this.regionalOptions[language] || this.regionalOptions[''];\n}\n\nGregorianCalendar.prototype = new BaseCalendar;\n\nassign(GregorianCalendar.prototype, {\n    /** The calendar name.\n        @memberof GregorianCalendar */\n    name: 'Gregorian',\n     /** Julian date of start of Gregorian epoch: 1 January 0001 CE.\n        @memberof GregorianCalendar */\n    jdEpoch: 1721425.5,\n     /** Days per month in a common year.\n        @memberof GregorianCalendar */\n    daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n     /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof GregorianCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof GregorianCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof GregorianCalendar */\n    firstMonth: 1,\n     /** The minimum day number.\n        @memberof GregorianCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof GregorianCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Gregorian',\n            epochs: ['BCE', 'CE'],\n            monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\n            'July', 'August', 'September', 'October', 'November', 'December'],\n            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n            digits: null,\n            dateFormat: 'mm/dd/yyyy',\n            firstDay: 0,\n            isRTL: false\n        }\n    },\n    \n    /** Determine whether this date is in a leap year.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        var year = date.year() + (date.year() < 0 ? 1 : 0); // No year zero\n        return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n    },\n\n    /** Determine the week of the year for a date - ISO 8601.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year, starting from 1.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Thursday of this week starting on Monday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(4 - (checkDate.dayOfWeek() || 7), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        var date = this._validate(year, month, this.minDay,\n            _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n        return this.daysPerMonth[date.month() - 1] +\n            (date.month() === 2 && this.leapYear(date.year()) ? 1 : 0);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return (this.dayOfWeek(year, month, day) || 7) < 6;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        year = date.year();\n        month = date.month();\n        day = date.day();\n        if (year < 0) { year++; } // No year zero\n        // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n        if (month < 3) {\n            month += 12;\n            year--;\n        }\n        var a = Math.floor(year / 100);\n        var b = 2 - a + Math.floor(a / 4);\n        return Math.floor(365.25 * (year + 4716)) +\n            Math.floor(30.6001 * (month + 1)) + day + b - 1524.5;\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof GregorianCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n        var z = Math.floor(jd + 0.5);\n        var a = Math.floor((z - 1867216.25) / 36524.25);\n        a = z + 1 + a - Math.floor(a / 4);\n        var b = a + 1524;\n        var c = Math.floor((b - 122.1) / 365.25);\n        var d = Math.floor(365.25 * c);\n        var e = Math.floor((b - d) / 30.6001);\n        var day = b - d - Math.floor(e * 30.6001);\n        var month = e - (e > 13.5 ? 13 : 1);\n        var year = c - (month > 2.5 ? 4716 : 4715);\n        if (year <= 0) { year--; } // No year zero\n        return this.newDate(year, month, day);\n    },\n\n    /** Convert this date to a standard (Gregorian) JavaScript Date.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {Date} The equivalent JavaScript date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJSDate: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        var jsd = new Date(date.year(), date.month() - 1, date.day());\n        jsd.setHours(0);\n        jsd.setMinutes(0);\n        jsd.setSeconds(0);\n        jsd.setMilliseconds(0);\n        // Hours may be non-zero on daylight saving cut-over:\n        // > 12 when midnight changeover, but then cannot generate\n        // midnight datetime, so jump to 1AM, otherwise reset.\n        jsd.setHours(jsd.getHours() > 12 ? jsd.getHours() + 2 : 0);\n        return jsd;\n    },\n\n    /** Create a new date from a standard (Gregorian) JavaScript Date.\n        @memberof GregorianCalendar\n        @param jsd {Date} The JavaScript date to convert.\n        @return {CDate} The equivalent date. */\n    fromJSDate: function(jsd) {\n        return this.newDate(jsd.getFullYear(), jsd.getMonth() + 1, jsd.getDate());\n    }\n});\n\n// Singleton manager\nvar _exports = module.exports = new Calendars();\n\n// Date template\n_exports.cdate = CDate;\n\n// Base calendar template\n_exports.baseCalendar = BaseCalendar;\n\n// Gregorian calendar implementation\n_exports.calendars.gregorian = GregorianCalendar;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
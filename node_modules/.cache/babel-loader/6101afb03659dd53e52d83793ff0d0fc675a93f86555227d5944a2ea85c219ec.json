{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\n// pure functions, don't alter but passes on `gd` and parts of `trace` without deep copying\n\nexports.splitToPanels = function (d) {\n  var prevPages = [0, 0];\n  var headerPanel = extendFlat({}, d, {\n    key: 'header',\n    type: 'header',\n    page: 0,\n    prevPages: prevPages,\n    currentRepaint: [null, null],\n    dragHandle: true,\n    values: d.calcdata.headerCells.values[d.specIndex],\n    rowBlocks: d.calcdata.headerRowBlocks,\n    calcdata: extendFlat({}, d.calcdata, {\n      cells: d.calcdata.headerCells\n    })\n  });\n  var revolverPanel1 = extendFlat({}, d, {\n    key: 'cells1',\n    type: 'cells',\n    page: 0,\n    prevPages: prevPages,\n    currentRepaint: [null, null],\n    dragHandle: false,\n    values: d.calcdata.cells.values[d.specIndex],\n    rowBlocks: d.calcdata.rowBlocks\n  });\n  var revolverPanel2 = extendFlat({}, d, {\n    key: 'cells2',\n    type: 'cells',\n    page: 1,\n    prevPages: prevPages,\n    currentRepaint: [null, null],\n    dragHandle: false,\n    values: d.calcdata.cells.values[d.specIndex],\n    rowBlocks: d.calcdata.rowBlocks\n  });\n  // order due to SVG using painter's algo:\n  return [revolverPanel1, revolverPanel2, headerPanel];\n};\nexports.splitToCells = function (d) {\n  var fromTo = rowFromTo(d);\n  return (d.values || []).slice(fromTo[0], fromTo[1]).map(function (v, i) {\n    // By keeping identical key, a DOM node removal, creation and addition is spared, important when visible\n    // grid has a lot of elements (quadratic with xcol/ycol count).\n    // But it has to be busted when `svgUtil.convertToTspans` is used as it reshapes cell subtrees asynchronously,\n    // and by that time the user may have scrolled away, resulting in stale overwrites. The real solution will be\n    // to turn `svgUtil.convertToTspans` into a cancelable request, in which case no key busting is needed.\n    var buster = typeof v === 'string' && v.match(/[<$&> ]/) ? '_keybuster_' + Math.random() : '';\n    return {\n      // keyWithinBlock: /*fromTo[0] + */i, // optimized future version - no busting\n      // keyWithinBlock: fromTo[0] + i, // initial always-unoptimized version - janky scrolling with 5+ columns\n      keyWithinBlock: i + buster,\n      // current compromise: regular content is very fast; async content is possible\n      key: fromTo[0] + i,\n      column: d,\n      calcdata: d.calcdata,\n      page: d.page,\n      rowBlocks: d.rowBlocks,\n      value: v\n    };\n  });\n};\nfunction rowFromTo(d) {\n  var rowBlock = d.rowBlocks[d.page];\n  // fixme rowBlock truthiness check is due to ugly hack of placing 2nd panel as d.page = -1\n  var rowFrom = rowBlock ? rowBlock.rows[0].rowIndex : 0;\n  var rowTo = rowBlock ? rowFrom + rowBlock.rows.length : 0;\n  return [rowFrom, rowTo];\n}","map":{"version":3,"names":["extendFlat","require","exports","splitToPanels","d","prevPages","headerPanel","key","type","page","currentRepaint","dragHandle","values","calcdata","headerCells","specIndex","rowBlocks","headerRowBlocks","cells","revolverPanel1","revolverPanel2","splitToCells","fromTo","rowFromTo","slice","map","v","i","buster","match","Math","random","keyWithinBlock","column","value","rowBlock","rowFrom","rows","rowIndex","rowTo","length"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/table/data_split_helpers.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\n// pure functions, don't alter but passes on `gd` and parts of `trace` without deep copying\n\nexports.splitToPanels = function(d) {\n    var prevPages = [0, 0];\n    var headerPanel = extendFlat({}, d, {\n        key: 'header',\n        type: 'header',\n        page: 0,\n        prevPages: prevPages,\n        currentRepaint: [null, null],\n        dragHandle: true,\n        values: d.calcdata.headerCells.values[d.specIndex],\n        rowBlocks: d.calcdata.headerRowBlocks,\n        calcdata: extendFlat({}, d.calcdata, {cells: d.calcdata.headerCells})\n    });\n    var revolverPanel1 = extendFlat({}, d, {\n        key: 'cells1',\n        type: 'cells',\n        page: 0,\n        prevPages: prevPages,\n        currentRepaint: [null, null],\n        dragHandle: false,\n        values: d.calcdata.cells.values[d.specIndex],\n        rowBlocks: d.calcdata.rowBlocks\n    });\n    var revolverPanel2 = extendFlat({}, d, {\n        key: 'cells2',\n        type: 'cells',\n        page: 1,\n        prevPages: prevPages,\n        currentRepaint: [null, null],\n        dragHandle: false,\n        values: d.calcdata.cells.values[d.specIndex],\n        rowBlocks: d.calcdata.rowBlocks\n    });\n    // order due to SVG using painter's algo:\n    return [revolverPanel1, revolverPanel2, headerPanel];\n};\n\nexports.splitToCells = function(d) {\n    var fromTo = rowFromTo(d);\n    return (d.values || []).slice(fromTo[0], fromTo[1]).map(function(v, i) {\n        // By keeping identical key, a DOM node removal, creation and addition is spared, important when visible\n        // grid has a lot of elements (quadratic with xcol/ycol count).\n        // But it has to be busted when `svgUtil.convertToTspans` is used as it reshapes cell subtrees asynchronously,\n        // and by that time the user may have scrolled away, resulting in stale overwrites. The real solution will be\n        // to turn `svgUtil.convertToTspans` into a cancelable request, in which case no key busting is needed.\n        var buster = (typeof v === 'string') && v.match(/[<$&> ]/) ? '_keybuster_' + Math.random() : '';\n        return {\n            // keyWithinBlock: /*fromTo[0] + */i, // optimized future version - no busting\n            // keyWithinBlock: fromTo[0] + i, // initial always-unoptimized version - janky scrolling with 5+ columns\n            keyWithinBlock: i + buster, // current compromise: regular content is very fast; async content is possible\n            key: fromTo[0] + i,\n            column: d,\n            calcdata: d.calcdata,\n            page: d.page,\n            rowBlocks: d.rowBlocks,\n            value: v\n        };\n    });\n};\n\nfunction rowFromTo(d) {\n    var rowBlock = d.rowBlocks[d.page];\n    // fixme rowBlock truthiness check is due to ugly hack of placing 2nd panel as d.page = -1\n    var rowFrom = rowBlock ? rowBlock.rows[0].rowIndex : 0;\n    var rowTo = rowBlock ? rowFrom + rowBlock.rows.length : 0;\n    return [rowFrom, rowTo];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
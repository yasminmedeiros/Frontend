{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\n\n/*\n * Given a 2D array as well as a basis in either direction, this function fills in the\n * 2D array using a combination of smoothing and extrapolation. This is rather important\n * for carpet plots since it's used for layout so that we can't simply omit or blank out\n * points. We need a reasonable guess so that the interpolation puts points somewhere\n * even if we were to somehow represent that the data was missing later on.\n *\n * input:\n *  - data: 2D array of arrays\n *  - a: array such that a.length === data[0].length\n *  - b: array such that b.length === data.length\n */\nmodule.exports = function smoothFill2dArray(data, a, b) {\n  var i, j, k;\n  var ip = [];\n  var jp = [];\n  // var neighborCnts = [];\n\n  var ni = data[0].length;\n  var nj = data.length;\n  function avgSurrounding(i, j) {\n    // As a low-quality start, we can simply average surrounding points (in a not\n    // non-uniform grid aware manner):\n    var sum = 0.0;\n    var val;\n    var cnt = 0;\n    if (i > 0 && (val = data[j][i - 1]) !== undefined) {\n      cnt++;\n      sum += val;\n    }\n    if (i < ni - 1 && (val = data[j][i + 1]) !== undefined) {\n      cnt++;\n      sum += val;\n    }\n    if (j > 0 && (val = data[j - 1][i]) !== undefined) {\n      cnt++;\n      sum += val;\n    }\n    if (j < nj - 1 && (val = data[j + 1][i]) !== undefined) {\n      cnt++;\n      sum += val;\n    }\n    return sum / Math.max(1, cnt);\n  }\n\n  // This loop iterates over all cells. Any cells that are null will be noted and those\n  // are the only points we will loop over and update via laplace's equation. Points with\n  // any neighbors will receive the average. If there are no neighboring points, then they\n  // will be set to zero. Also as we go, track the maximum magnitude so that we can scale\n  // our tolerance accordingly.\n  var dmax = 0.0;\n  for (i = 0; i < ni; i++) {\n    for (j = 0; j < nj; j++) {\n      if (data[j][i] === undefined) {\n        ip.push(i);\n        jp.push(j);\n        data[j][i] = avgSurrounding(i, j);\n        // neighborCnts.push(result.neighbors);\n      }\n\n      dmax = Math.max(dmax, Math.abs(data[j][i]));\n    }\n  }\n  if (!ip.length) return data;\n\n  // The tolerance doesn't need to be excessive. It's just for display positioning\n  var dxp, dxm, dap, dam, dbp, dbm, c, d, diff, reldiff, overrelaxation;\n  var tol = 1e-5;\n  var resid = 0;\n  var itermax = 100;\n  var iter = 0;\n  var n = ip.length;\n  do {\n    resid = 0;\n    // Normally we'd loop in two dimensions, but not all points are blank and need\n    // an update, so we instead loop only over the points that were tabulated above\n    for (k = 0; k < n; k++) {\n      i = ip[k];\n      j = jp[k];\n      // neighborCnt = neighborCnts[k];\n\n      // Track a counter for how many contributions there are. We'll use this counter\n      // to average at the end, which reduces to laplace's equation with neumann boundary\n      // conditions on the first derivative (second derivative is zero so that we get\n      // a nice linear extrapolation at the boundaries).\n      var boundaryCnt = 0;\n      var newVal = 0;\n      var d0, d1, x0, x1, i0, j0;\n      if (i === 0) {\n        // If this lies along the i = 0 boundary, extrapolate from the two points\n        // to the right of this point. Note that the finite differences take into\n        // account non-uniform grid spacing:\n        i0 = Math.min(ni - 1, 2);\n        x0 = a[i0];\n        x1 = a[1];\n        d0 = data[j][i0];\n        d1 = data[j][1];\n        newVal += d1 + (d1 - d0) * (a[0] - x1) / (x1 - x0);\n        boundaryCnt++;\n      } else if (i === ni - 1) {\n        // If along the high i boundary, extrapolate from the two points to the\n        // left of this point\n        i0 = Math.max(0, ni - 3);\n        x0 = a[i0];\n        x1 = a[ni - 2];\n        d0 = data[j][i0];\n        d1 = data[j][ni - 2];\n        newVal += d1 + (d1 - d0) * (a[ni - 1] - x1) / (x1 - x0);\n        boundaryCnt++;\n      }\n      if ((i === 0 || i === ni - 1) && j > 0 && j < nj - 1) {\n        // If along the min(i) or max(i) boundaries, also smooth vertically as long\n        // as we're not in a corner. Note that the finite differences used here\n        // are also aware of nonuniform grid spacing:\n        dxp = b[j + 1] - b[j];\n        dxm = b[j] - b[j - 1];\n        newVal += (dxm * data[j + 1][i] + dxp * data[j - 1][i]) / (dxm + dxp);\n        boundaryCnt++;\n      }\n      if (j === 0) {\n        // If along the j = 0 boundary, extrpolate this point from the two points\n        // above it\n        j0 = Math.min(nj - 1, 2);\n        x0 = b[j0];\n        x1 = b[1];\n        d0 = data[j0][i];\n        d1 = data[1][i];\n        newVal += d1 + (d1 - d0) * (b[0] - x1) / (x1 - x0);\n        boundaryCnt++;\n      } else if (j === nj - 1) {\n        // Same for the max j boundary from the cells below it:\n        j0 = Math.max(0, nj - 3);\n        x0 = b[j0];\n        x1 = b[nj - 2];\n        d0 = data[j0][i];\n        d1 = data[nj - 2][i];\n        newVal += d1 + (d1 - d0) * (b[nj - 1] - x1) / (x1 - x0);\n        boundaryCnt++;\n      }\n      if ((j === 0 || j === nj - 1) && i > 0 && i < ni - 1) {\n        // Now average points to the left/right as long as not in a corner:\n        dxp = a[i + 1] - a[i];\n        dxm = a[i] - a[i - 1];\n        newVal += (dxm * data[j][i + 1] + dxp * data[j][i - 1]) / (dxm + dxp);\n        boundaryCnt++;\n      }\n      if (!boundaryCnt) {\n        // If none of the above conditions were triggered, then this is an interior\n        // point and we can just do a laplace equation update. As above, these differences\n        // are aware of nonuniform grid spacing:\n        dap = a[i + 1] - a[i];\n        dam = a[i] - a[i - 1];\n        dbp = b[j + 1] - b[j];\n        dbm = b[j] - b[j - 1];\n\n        // These are just some useful constants for the iteration, which is perfectly\n        // straightforward but a little long to derive from f_xx + f_yy = 0.\n        c = dap * dam * (dap + dam);\n        d = dbp * dbm * (dbp + dbm);\n        newVal = (c * (dbm * data[j + 1][i] + dbp * data[j - 1][i]) + d * (dam * data[j][i + 1] + dap * data[j][i - 1])) / (d * (dam + dap) + c * (dbm + dbp));\n      } else {\n        // If we did have contributions from the boundary conditions, then average\n        // the result from the various contributions:\n        newVal /= boundaryCnt;\n      }\n\n      // Jacobi updates are ridiculously slow to converge, so this approach uses a\n      // Gauss-seidel iteration which is dramatically faster.\n      diff = newVal - data[j][i];\n      reldiff = diff / dmax;\n      resid += reldiff * reldiff;\n\n      // Gauss-Seidel-ish iteration, omega chosen based on heuristics and some\n      // quick tests.\n      //\n      // NB: Don't overrelax the boundarie. Otherwise set an overrelaxation factor\n      // which is a little low but safely optimal-ish:\n      overrelaxation = boundaryCnt ? 0 : 0.85;\n\n      // If there are four non-null neighbors, then we want a simple average without\n      // overrelaxation. If all the surrouding points are null, then we want the full\n      // overrelaxation\n      //\n      // Based on experiments, this actually seems to slow down convergence just a bit.\n      // I'll leave it here for reference in case this needs to be revisited, but\n      // it seems to work just fine without this.\n      // if (overrelaxation) overrelaxation *= (4 - neighborCnt) / 4;\n\n      data[j][i] += diff * (1 + overrelaxation);\n    }\n    resid = Math.sqrt(resid);\n  } while (iter++ < itermax && resid > tol);\n  Lib.log('Smoother converged to', resid, 'after', iter, 'iterations');\n  return data;\n};","map":{"version":3,"names":["Lib","require","module","exports","smoothFill2dArray","data","a","b","i","j","k","ip","jp","ni","length","nj","avgSurrounding","sum","val","cnt","undefined","Math","max","dmax","push","abs","dxp","dxm","dap","dam","dbp","dbm","c","d","diff","reldiff","overrelaxation","tol","resid","itermax","iter","n","boundaryCnt","newVal","d0","d1","x0","x1","i0","j0","min","sqrt","log"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/carpet/smooth_fill_2d_array.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\n\n/*\n * Given a 2D array as well as a basis in either direction, this function fills in the\n * 2D array using a combination of smoothing and extrapolation. This is rather important\n * for carpet plots since it's used for layout so that we can't simply omit or blank out\n * points. We need a reasonable guess so that the interpolation puts points somewhere\n * even if we were to somehow represent that the data was missing later on.\n *\n * input:\n *  - data: 2D array of arrays\n *  - a: array such that a.length === data[0].length\n *  - b: array such that b.length === data.length\n */\nmodule.exports = function smoothFill2dArray(data, a, b) {\n    var i, j, k;\n    var ip = [];\n    var jp = [];\n    // var neighborCnts = [];\n\n    var ni = data[0].length;\n    var nj = data.length;\n\n    function avgSurrounding(i, j) {\n        // As a low-quality start, we can simply average surrounding points (in a not\n        // non-uniform grid aware manner):\n        var sum = 0.0;\n        var val;\n        var cnt = 0;\n        if(i > 0 && (val = data[j][i - 1]) !== undefined) {\n            cnt++;\n            sum += val;\n        }\n        if(i < ni - 1 && (val = data[j][i + 1]) !== undefined) {\n            cnt++;\n            sum += val;\n        }\n        if(j > 0 && (val = data[j - 1][i]) !== undefined) {\n            cnt++;\n            sum += val;\n        }\n        if(j < nj - 1 && (val = data[j + 1][i]) !== undefined) {\n            cnt++;\n            sum += val;\n        }\n        return sum / Math.max(1, cnt);\n\n    }\n\n    // This loop iterates over all cells. Any cells that are null will be noted and those\n    // are the only points we will loop over and update via laplace's equation. Points with\n    // any neighbors will receive the average. If there are no neighboring points, then they\n    // will be set to zero. Also as we go, track the maximum magnitude so that we can scale\n    // our tolerance accordingly.\n    var dmax = 0.0;\n    for(i = 0; i < ni; i++) {\n        for(j = 0; j < nj; j++) {\n            if(data[j][i] === undefined) {\n                ip.push(i);\n                jp.push(j);\n\n                data[j][i] = avgSurrounding(i, j);\n                // neighborCnts.push(result.neighbors);\n            }\n            dmax = Math.max(dmax, Math.abs(data[j][i]));\n        }\n    }\n\n    if(!ip.length) return data;\n\n    // The tolerance doesn't need to be excessive. It's just for display positioning\n    var dxp, dxm, dap, dam, dbp, dbm, c, d, diff, reldiff, overrelaxation;\n    var tol = 1e-5;\n    var resid = 0;\n    var itermax = 100;\n    var iter = 0;\n    var n = ip.length;\n    do {\n        resid = 0;\n        // Normally we'd loop in two dimensions, but not all points are blank and need\n        // an update, so we instead loop only over the points that were tabulated above\n        for(k = 0; k < n; k++) {\n            i = ip[k];\n            j = jp[k];\n            // neighborCnt = neighborCnts[k];\n\n            // Track a counter for how many contributions there are. We'll use this counter\n            // to average at the end, which reduces to laplace's equation with neumann boundary\n            // conditions on the first derivative (second derivative is zero so that we get\n            // a nice linear extrapolation at the boundaries).\n            var boundaryCnt = 0;\n            var newVal = 0;\n\n            var d0, d1, x0, x1, i0, j0;\n            if(i === 0) {\n                // If this lies along the i = 0 boundary, extrapolate from the two points\n                // to the right of this point. Note that the finite differences take into\n                // account non-uniform grid spacing:\n                i0 = Math.min(ni - 1, 2);\n                x0 = a[i0];\n                x1 = a[1];\n                d0 = data[j][i0];\n                d1 = data[j][1];\n                newVal += d1 + (d1 - d0) * (a[0] - x1) / (x1 - x0);\n                boundaryCnt++;\n            } else if(i === ni - 1) {\n                // If along the high i boundary, extrapolate from the two points to the\n                // left of this point\n                i0 = Math.max(0, ni - 3);\n                x0 = a[i0];\n                x1 = a[ni - 2];\n                d0 = data[j][i0];\n                d1 = data[j][ni - 2];\n                newVal += d1 + (d1 - d0) * (a[ni - 1] - x1) / (x1 - x0);\n                boundaryCnt++;\n            }\n\n            if((i === 0 || i === ni - 1) && (j > 0 && j < nj - 1)) {\n                // If along the min(i) or max(i) boundaries, also smooth vertically as long\n                // as we're not in a corner. Note that the finite differences used here\n                // are also aware of nonuniform grid spacing:\n                dxp = b[j + 1] - b[j];\n                dxm = b[j] - b[j - 1];\n                newVal += (dxm * data[j + 1][i] + dxp * data[j - 1][i]) / (dxm + dxp);\n                boundaryCnt++;\n            }\n\n            if(j === 0) {\n                // If along the j = 0 boundary, extrpolate this point from the two points\n                // above it\n                j0 = Math.min(nj - 1, 2);\n                x0 = b[j0];\n                x1 = b[1];\n                d0 = data[j0][i];\n                d1 = data[1][i];\n                newVal += d1 + (d1 - d0) * (b[0] - x1) / (x1 - x0);\n                boundaryCnt++;\n            } else if(j === nj - 1) {\n                // Same for the max j boundary from the cells below it:\n                j0 = Math.max(0, nj - 3);\n                x0 = b[j0];\n                x1 = b[nj - 2];\n                d0 = data[j0][i];\n                d1 = data[nj - 2][i];\n                newVal += d1 + (d1 - d0) * (b[nj - 1] - x1) / (x1 - x0);\n                boundaryCnt++;\n            }\n\n            if((j === 0 || j === nj - 1) && (i > 0 && i < ni - 1)) {\n                // Now average points to the left/right as long as not in a corner:\n                dxp = a[i + 1] - a[i];\n                dxm = a[i] - a[i - 1];\n                newVal += (dxm * data[j][i + 1] + dxp * data[j][i - 1]) / (dxm + dxp);\n                boundaryCnt++;\n            }\n\n            if(!boundaryCnt) {\n                // If none of the above conditions were triggered, then this is an interior\n                // point and we can just do a laplace equation update. As above, these differences\n                // are aware of nonuniform grid spacing:\n                dap = a[i + 1] - a[i];\n                dam = a[i] - a[i - 1];\n                dbp = b[j + 1] - b[j];\n                dbm = b[j] - b[j - 1];\n\n                // These are just some useful constants for the iteration, which is perfectly\n                // straightforward but a little long to derive from f_xx + f_yy = 0.\n                c = dap * dam * (dap + dam);\n                d = dbp * dbm * (dbp + dbm);\n\n                newVal = (c * (dbm * data[j + 1][i] + dbp * data[j - 1][i]) +\n                          d * (dam * data[j][i + 1] + dap * data[j][i - 1])) /\n                          (d * (dam + dap) + c * (dbm + dbp));\n            } else {\n                // If we did have contributions from the boundary conditions, then average\n                // the result from the various contributions:\n                newVal /= boundaryCnt;\n            }\n\n            // Jacobi updates are ridiculously slow to converge, so this approach uses a\n            // Gauss-seidel iteration which is dramatically faster.\n            diff = newVal - data[j][i];\n            reldiff = diff / dmax;\n            resid += reldiff * reldiff;\n\n            // Gauss-Seidel-ish iteration, omega chosen based on heuristics and some\n            // quick tests.\n            //\n            // NB: Don't overrelax the boundarie. Otherwise set an overrelaxation factor\n            // which is a little low but safely optimal-ish:\n            overrelaxation = boundaryCnt ? 0 : 0.85;\n\n            // If there are four non-null neighbors, then we want a simple average without\n            // overrelaxation. If all the surrouding points are null, then we want the full\n            // overrelaxation\n            //\n            // Based on experiments, this actually seems to slow down convergence just a bit.\n            // I'll leave it here for reference in case this needs to be revisited, but\n            // it seems to work just fine without this.\n            // if (overrelaxation) overrelaxation *= (4 - neighborCnt) / 4;\n\n            data[j][i] += diff * (1 + overrelaxation);\n        }\n\n        resid = Math.sqrt(resid);\n    } while(iter++ < itermax && resid > tol);\n\n    Lib.log('Smoother converged to', resid, 'after', iter, 'iterations');\n\n    return data;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
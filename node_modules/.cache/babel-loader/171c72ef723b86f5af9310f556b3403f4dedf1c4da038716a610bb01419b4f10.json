{"ast":null,"code":"'use strict';\n\nmodule.exports = findMedian;\nvar genPartition = require('./partition');\nvar partitionStartLessThan = genPartition('lo<p0', ['p0']);\nvar PARTITION_THRESHOLD = 8; //Cut off for using insertion sort in findMedian\n\n//Base case for median finding:  Use insertion sort\nfunction insertionSort(d, axis, start, end, boxes, ids) {\n  var elemSize = 2 * d;\n  var boxPtr = elemSize * (start + 1) + axis;\n  for (var i = start + 1; i < end; ++i, boxPtr += elemSize) {\n    var x = boxes[boxPtr];\n    for (var j = i, ptr = elemSize * (i - 1); j > start && boxes[ptr + axis] > x; --j, ptr -= elemSize) {\n      //Swap\n      var aPtr = ptr;\n      var bPtr = ptr + elemSize;\n      for (var k = 0; k < elemSize; ++k, ++aPtr, ++bPtr) {\n        var y = boxes[aPtr];\n        boxes[aPtr] = boxes[bPtr];\n        boxes[bPtr] = y;\n      }\n      var tmp = ids[j];\n      ids[j] = ids[j - 1];\n      ids[j - 1] = tmp;\n    }\n  }\n}\n\n//Find median using quick select algorithm\n//  takes O(n) time with high probability\nfunction findMedian(d, axis, start, end, boxes, ids) {\n  if (end <= start + 1) {\n    return start;\n  }\n  var lo = start;\n  var hi = end;\n  var mid = end + start >>> 1;\n  var elemSize = 2 * d;\n  var pivot = mid;\n  var value = boxes[elemSize * mid + axis];\n  while (lo < hi) {\n    if (hi - lo < PARTITION_THRESHOLD) {\n      insertionSort(d, axis, lo, hi, boxes, ids);\n      value = boxes[elemSize * mid + axis];\n      break;\n    }\n\n    //Select pivot using median-of-3\n    var count = hi - lo;\n    var pivot0 = Math.random() * count + lo | 0;\n    var value0 = boxes[elemSize * pivot0 + axis];\n    var pivot1 = Math.random() * count + lo | 0;\n    var value1 = boxes[elemSize * pivot1 + axis];\n    var pivot2 = Math.random() * count + lo | 0;\n    var value2 = boxes[elemSize * pivot2 + axis];\n    if (value0 <= value1) {\n      if (value2 >= value1) {\n        pivot = pivot1;\n        value = value1;\n      } else if (value0 >= value2) {\n        pivot = pivot0;\n        value = value0;\n      } else {\n        pivot = pivot2;\n        value = value2;\n      }\n    } else {\n      if (value1 >= value2) {\n        pivot = pivot1;\n        value = value1;\n      } else if (value2 >= value0) {\n        pivot = pivot0;\n        value = value0;\n      } else {\n        pivot = pivot2;\n        value = value2;\n      }\n    }\n\n    //Swap pivot to end of array\n    var aPtr = elemSize * (hi - 1);\n    var bPtr = elemSize * pivot;\n    for (var i = 0; i < elemSize; ++i, ++aPtr, ++bPtr) {\n      var x = boxes[aPtr];\n      boxes[aPtr] = boxes[bPtr];\n      boxes[bPtr] = x;\n    }\n    var y = ids[hi - 1];\n    ids[hi - 1] = ids[pivot];\n    ids[pivot] = y;\n\n    //Partition using pivot\n    pivot = partitionStartLessThan(d, axis, lo, hi - 1, boxes, ids, value);\n\n    //Swap pivot back\n    var aPtr = elemSize * (hi - 1);\n    var bPtr = elemSize * pivot;\n    for (var i = 0; i < elemSize; ++i, ++aPtr, ++bPtr) {\n      var x = boxes[aPtr];\n      boxes[aPtr] = boxes[bPtr];\n      boxes[bPtr] = x;\n    }\n    var y = ids[hi - 1];\n    ids[hi - 1] = ids[pivot];\n    ids[pivot] = y;\n\n    //Swap pivot to last pivot\n    if (mid < pivot) {\n      hi = pivot - 1;\n      while (lo < hi && boxes[elemSize * (hi - 1) + axis] === value) {\n        hi -= 1;\n      }\n      hi += 1;\n    } else if (pivot < mid) {\n      lo = pivot + 1;\n      while (lo < hi && boxes[elemSize * lo + axis] === value) {\n        lo += 1;\n      }\n    } else {\n      break;\n    }\n  }\n\n  //Make sure pivot is at start\n  return partitionStartLessThan(d, axis, start, mid, boxes, ids, boxes[elemSize * mid + axis]);\n}","map":{"version":3,"names":["module","exports","findMedian","genPartition","require","partitionStartLessThan","PARTITION_THRESHOLD","insertionSort","d","axis","start","end","boxes","ids","elemSize","boxPtr","i","x","j","ptr","aPtr","bPtr","k","y","tmp","lo","hi","mid","pivot","value","count","pivot0","Math","random","value0","pivot1","value1","pivot2","value2"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/box-intersect/lib/median.js"],"sourcesContent":["'use strict'\n\nmodule.exports = findMedian\n\nvar genPartition = require('./partition')\n\nvar partitionStartLessThan = genPartition('lo<p0', ['p0'])\n\nvar PARTITION_THRESHOLD = 8   //Cut off for using insertion sort in findMedian\n\n//Base case for median finding:  Use insertion sort\nfunction insertionSort(d, axis, start, end, boxes, ids) {\n  var elemSize = 2 * d\n  var boxPtr = elemSize * (start+1) + axis\n  for(var i=start+1; i<end; ++i, boxPtr+=elemSize) {\n    var x = boxes[boxPtr]\n    for(var j=i, ptr=elemSize*(i-1); \n        j>start && boxes[ptr+axis] > x; \n        --j, ptr-=elemSize) {\n      //Swap\n      var aPtr = ptr\n      var bPtr = ptr+elemSize\n      for(var k=0; k<elemSize; ++k, ++aPtr, ++bPtr) {\n        var y = boxes[aPtr]\n        boxes[aPtr] = boxes[bPtr]\n        boxes[bPtr] = y\n      }\n      var tmp = ids[j]\n      ids[j] = ids[j-1]\n      ids[j-1] = tmp\n    }\n  }\n}\n\n//Find median using quick select algorithm\n//  takes O(n) time with high probability\nfunction findMedian(d, axis, start, end, boxes, ids) {\n  if(end <= start+1) {\n    return start\n  }\n\n  var lo       = start\n  var hi       = end\n  var mid      = ((end + start) >>> 1)\n  var elemSize = 2*d\n  var pivot    = mid\n  var value    = boxes[elemSize*mid+axis]\n  \n  while(lo < hi) {\n    if(hi - lo < PARTITION_THRESHOLD) {\n      insertionSort(d, axis, lo, hi, boxes, ids)\n      value = boxes[elemSize*mid+axis]\n      break\n    }\n    \n    //Select pivot using median-of-3\n    var count  = hi - lo\n    var pivot0 = (Math.random()*count+lo)|0\n    var value0 = boxes[elemSize*pivot0 + axis]\n    var pivot1 = (Math.random()*count+lo)|0\n    var value1 = boxes[elemSize*pivot1 + axis]\n    var pivot2 = (Math.random()*count+lo)|0\n    var value2 = boxes[elemSize*pivot2 + axis]\n    if(value0 <= value1) {\n      if(value2 >= value1) {\n        pivot = pivot1\n        value = value1\n      } else if(value0 >= value2) {\n        pivot = pivot0\n        value = value0\n      } else {\n        pivot = pivot2\n        value = value2\n      }\n    } else {\n      if(value1 >= value2) {\n        pivot = pivot1\n        value = value1\n      } else if(value2 >= value0) {\n        pivot = pivot0\n        value = value0\n      } else {\n        pivot = pivot2\n        value = value2\n      }\n    }\n\n    //Swap pivot to end of array\n    var aPtr = elemSize * (hi-1)\n    var bPtr = elemSize * pivot\n    for(var i=0; i<elemSize; ++i, ++aPtr, ++bPtr) {\n      var x = boxes[aPtr]\n      boxes[aPtr] = boxes[bPtr]\n      boxes[bPtr] = x\n    }\n    var y = ids[hi-1]\n    ids[hi-1] = ids[pivot]\n    ids[pivot] = y\n\n    //Partition using pivot\n    pivot = partitionStartLessThan(\n      d, axis, \n      lo, hi-1, boxes, ids,\n      value)\n\n    //Swap pivot back\n    var aPtr = elemSize * (hi-1)\n    var bPtr = elemSize * pivot\n    for(var i=0; i<elemSize; ++i, ++aPtr, ++bPtr) {\n      var x = boxes[aPtr]\n      boxes[aPtr] = boxes[bPtr]\n      boxes[bPtr] = x\n    }\n    var y = ids[hi-1]\n    ids[hi-1] = ids[pivot]\n    ids[pivot] = y\n\n    //Swap pivot to last pivot\n    if(mid < pivot) {\n      hi = pivot-1\n      while(lo < hi && \n        boxes[elemSize*(hi-1)+axis] === value) {\n        hi -= 1\n      }\n      hi += 1\n    } else if(pivot < mid) {\n      lo = pivot + 1\n      while(lo < hi &&\n        boxes[elemSize*lo+axis] === value) {\n        lo += 1\n      }\n    } else {\n      break\n    }\n  }\n\n  //Make sure pivot is at start\n  return partitionStartLessThan(\n    d, axis, \n    start, mid, boxes, ids,\n    boxes[elemSize*mid+axis])\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\nmodule.exports = createGrid;\nvar createBuffer = require('gl-buffer');\nvar createShader = require('gl-shader');\nvar bsearch = require('binary-search-bounds');\nvar shaders = require('./shaders');\nfunction Grid(plot, vbo, shader, tickShader) {\n  this.plot = plot;\n  this.vbo = vbo;\n  this.shader = shader;\n  this.tickShader = tickShader;\n  this.ticks = [[], []];\n}\nfunction compareTickNum(a, b) {\n  return a - b;\n}\nvar proto = Grid.prototype;\nproto.draw = function () {\n  var DATA_SHIFT = [0, 0];\n  var DATA_SCALE = [0, 0];\n  var DATA_AXIS = [0, 0];\n  return function () {\n    var plot = this.plot;\n    var vbo = this.vbo;\n    var shader = this.shader;\n    var ticks = this.ticks;\n    var gl = plot.gl;\n    var bounds = plot._tickBounds;\n    var dataBox = plot.dataBox;\n    var viewPixels = plot.viewBox;\n    var lineWidth = plot.gridLineWidth;\n    var gridColor = plot.gridLineColor;\n    var gridEnable = plot.gridLineEnable;\n    var pixelRatio = plot.pixelRatio;\n    for (var i = 0; i < 2; ++i) {\n      var lo = bounds[i];\n      var hi = bounds[i + 2];\n      var boundScale = hi - lo;\n      var dataCenter = 0.5 * (dataBox[i + 2] + dataBox[i]);\n      var dataWidth = dataBox[i + 2] - dataBox[i];\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth;\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth;\n    }\n    shader.bind();\n    vbo.bind();\n    shader.attributes.dataCoord.pointer();\n    shader.uniforms.dataShift = DATA_SHIFT;\n    shader.uniforms.dataScale = DATA_SCALE;\n    var offset = 0;\n    for (var i = 0; i < 2; ++i) {\n      DATA_AXIS[0] = DATA_AXIS[1] = 0;\n      DATA_AXIS[i] = 1;\n      shader.uniforms.dataAxis = DATA_AXIS;\n      shader.uniforms.lineWidth = lineWidth[i] / (viewPixels[i + 2] - viewPixels[i]) * pixelRatio;\n      shader.uniforms.color = gridColor[i];\n      var size = ticks[i].length * 6;\n      if (gridEnable[i] && size) {\n        gl.drawArrays(gl.TRIANGLES, offset, size);\n      }\n      offset += size;\n    }\n  };\n}();\nproto.drawTickMarks = function () {\n  var DATA_SHIFT = [0, 0];\n  var DATA_SCALE = [0, 0];\n  var X_AXIS = [1, 0];\n  var Y_AXIS = [0, 1];\n  var SCR_OFFSET = [0, 0];\n  var TICK_SCALE = [0, 0];\n  return function () {\n    var plot = this.plot;\n    var vbo = this.vbo;\n    var shader = this.tickShader;\n    var ticks = this.ticks;\n    var gl = plot.gl;\n    var bounds = plot._tickBounds;\n    var dataBox = plot.dataBox;\n    var viewBox = plot.viewBox;\n    var pixelRatio = plot.pixelRatio;\n    var screenBox = plot.screenBox;\n    var screenWidth = screenBox[2] - screenBox[0];\n    var screenHeight = screenBox[3] - screenBox[1];\n    var viewWidth = viewBox[2] - viewBox[0];\n    var viewHeight = viewBox[3] - viewBox[1];\n    for (var i = 0; i < 2; ++i) {\n      var lo = bounds[i];\n      var hi = bounds[i + 2];\n      var boundScale = hi - lo;\n      var dataCenter = 0.5 * (dataBox[i + 2] + dataBox[i]);\n      var dataWidth = dataBox[i + 2] - dataBox[i];\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth;\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth;\n    }\n    DATA_SCALE[0] *= viewWidth / screenWidth;\n    DATA_SHIFT[0] *= viewWidth / screenWidth;\n    DATA_SCALE[1] *= viewHeight / screenHeight;\n    DATA_SHIFT[1] *= viewHeight / screenHeight;\n    shader.bind();\n    vbo.bind();\n    shader.attributes.dataCoord.pointer();\n    var uniforms = shader.uniforms;\n    uniforms.dataShift = DATA_SHIFT;\n    uniforms.dataScale = DATA_SCALE;\n    var tickMarkLength = plot.tickMarkLength;\n    var tickMarkWidth = plot.tickMarkWidth;\n    var tickMarkColor = plot.tickMarkColor;\n    var xTicksOffset = 0;\n    var yTicksOffset = ticks[0].length * 6;\n    var xStart = Math.min(bsearch.ge(ticks[0], (dataBox[0] - bounds[0]) / (bounds[2] - bounds[0]), compareTickNum), ticks[0].length);\n    var xEnd = Math.min(bsearch.gt(ticks[0], (dataBox[2] - bounds[0]) / (bounds[2] - bounds[0]), compareTickNum), ticks[0].length);\n    var xOffset = xTicksOffset + 6 * xStart;\n    var xCount = 6 * Math.max(0, xEnd - xStart);\n    var yStart = Math.min(bsearch.ge(ticks[1], (dataBox[1] - bounds[1]) / (bounds[3] - bounds[1]), compareTickNum), ticks[1].length);\n    var yEnd = Math.min(bsearch.gt(ticks[1], (dataBox[3] - bounds[1]) / (bounds[3] - bounds[1]), compareTickNum), ticks[1].length);\n    var yOffset = yTicksOffset + 6 * yStart;\n    var yCount = 6 * Math.max(0, yEnd - yStart);\n    SCR_OFFSET[0] = 2.0 * (viewBox[0] - tickMarkLength[1]) / screenWidth - 1.0;\n    SCR_OFFSET[1] = (viewBox[3] + viewBox[1]) / screenHeight - 1.0;\n    TICK_SCALE[0] = tickMarkLength[1] * pixelRatio / screenWidth;\n    TICK_SCALE[1] = tickMarkWidth[1] * pixelRatio / screenHeight;\n    if (yCount) {\n      uniforms.color = tickMarkColor[1];\n      uniforms.tickScale = TICK_SCALE;\n      uniforms.dataAxis = Y_AXIS;\n      uniforms.screenOffset = SCR_OFFSET;\n      gl.drawArrays(gl.TRIANGLES, yOffset, yCount);\n    }\n    SCR_OFFSET[0] = (viewBox[2] + viewBox[0]) / screenWidth - 1.0;\n    SCR_OFFSET[1] = 2.0 * (viewBox[1] - tickMarkLength[0]) / screenHeight - 1.0;\n    TICK_SCALE[0] = tickMarkWidth[0] * pixelRatio / screenWidth;\n    TICK_SCALE[1] = tickMarkLength[0] * pixelRatio / screenHeight;\n    if (xCount) {\n      uniforms.color = tickMarkColor[0];\n      uniforms.tickScale = TICK_SCALE;\n      uniforms.dataAxis = X_AXIS;\n      uniforms.screenOffset = SCR_OFFSET;\n      gl.drawArrays(gl.TRIANGLES, xOffset, xCount);\n    }\n    SCR_OFFSET[0] = 2.0 * (viewBox[2] + tickMarkLength[3]) / screenWidth - 1.0;\n    SCR_OFFSET[1] = (viewBox[3] + viewBox[1]) / screenHeight - 1.0;\n    TICK_SCALE[0] = tickMarkLength[3] * pixelRatio / screenWidth;\n    TICK_SCALE[1] = tickMarkWidth[3] * pixelRatio / screenHeight;\n    if (yCount) {\n      uniforms.color = tickMarkColor[3];\n      uniforms.tickScale = TICK_SCALE;\n      uniforms.dataAxis = Y_AXIS;\n      uniforms.screenOffset = SCR_OFFSET;\n      gl.drawArrays(gl.TRIANGLES, yOffset, yCount);\n    }\n    SCR_OFFSET[0] = (viewBox[2] + viewBox[0]) / screenWidth - 1.0;\n    SCR_OFFSET[1] = 2.0 * (viewBox[3] + tickMarkLength[2]) / screenHeight - 1.0;\n    TICK_SCALE[0] = tickMarkWidth[2] * pixelRatio / screenWidth;\n    TICK_SCALE[1] = tickMarkLength[2] * pixelRatio / screenHeight;\n    if (xCount) {\n      uniforms.color = tickMarkColor[2];\n      uniforms.tickScale = TICK_SCALE;\n      uniforms.dataAxis = X_AXIS;\n      uniforms.screenOffset = SCR_OFFSET;\n      gl.drawArrays(gl.TRIANGLES, xOffset, xCount);\n    }\n  };\n}();\nproto.update = function () {\n  var OFFSET_X = [1, 1, -1, -1, 1, -1];\n  var OFFSET_Y = [1, -1, 1, 1, -1, -1];\n  return function (options) {\n    var ticks = options.ticks;\n    var bounds = options.bounds;\n    var data = new Float32Array(6 * 3 * (ticks[0].length + ticks[1].length));\n    var zeroLineEnable = this.plot.zeroLineEnable;\n    var ptr = 0;\n    var gridTicks = [[], []];\n    for (var dim = 0; dim < 2; ++dim) {\n      var localTicks = gridTicks[dim];\n      var axisTicks = ticks[dim];\n      var lo = bounds[dim];\n      var hi = bounds[dim + 2];\n      for (var i = 0; i < axisTicks.length; ++i) {\n        var x = (axisTicks[i].x - lo) / (hi - lo);\n        localTicks.push(x);\n        for (var j = 0; j < 6; ++j) {\n          data[ptr++] = x;\n          data[ptr++] = OFFSET_X[j];\n          data[ptr++] = OFFSET_Y[j];\n        }\n      }\n    }\n    this.ticks = gridTicks;\n    this.vbo.update(data);\n  };\n}();\nproto.dispose = function () {\n  this.vbo.dispose();\n  this.shader.dispose();\n  this.tickShader.dispose();\n};\nfunction createGrid(plot) {\n  var gl = plot.gl;\n  var vbo = createBuffer(gl);\n  var shader = createShader(gl, shaders.gridVert, shaders.gridFrag);\n  var tickShader = createShader(gl, shaders.tickVert, shaders.gridFrag);\n  var grid = new Grid(plot, vbo, shader, tickShader);\n  return grid;\n}","map":{"version":3,"names":["module","exports","createGrid","createBuffer","require","createShader","bsearch","shaders","Grid","plot","vbo","shader","tickShader","ticks","compareTickNum","a","b","proto","prototype","draw","DATA_SHIFT","DATA_SCALE","DATA_AXIS","gl","bounds","_tickBounds","dataBox","viewPixels","viewBox","lineWidth","gridLineWidth","gridColor","gridLineColor","gridEnable","gridLineEnable","pixelRatio","i","lo","hi","boundScale","dataCenter","dataWidth","bind","attributes","dataCoord","pointer","uniforms","dataShift","dataScale","offset","dataAxis","color","size","length","drawArrays","TRIANGLES","drawTickMarks","X_AXIS","Y_AXIS","SCR_OFFSET","TICK_SCALE","screenBox","screenWidth","screenHeight","viewWidth","viewHeight","tickMarkLength","tickMarkWidth","tickMarkColor","xTicksOffset","yTicksOffset","xStart","Math","min","ge","xEnd","gt","xOffset","xCount","max","yStart","yEnd","yOffset","yCount","tickScale","screenOffset","update","OFFSET_X","OFFSET_Y","options","data","Float32Array","zeroLineEnable","ptr","gridTicks","dim","localTicks","axisTicks","x","push","j","dispose","gridVert","gridFrag","tickVert","grid"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/gl-plot2d/lib/grid.js"],"sourcesContent":["'use strict'\n\nmodule.exports = createGrid\n\nvar createBuffer  = require('gl-buffer')\nvar createShader  = require('gl-shader')\nvar bsearch       = require('binary-search-bounds')\nvar shaders       = require('./shaders')\n\nfunction Grid(plot, vbo, shader, tickShader) {\n  this.plot   = plot\n  this.vbo    = vbo\n  this.shader = shader\n  this.tickShader = tickShader\n  this.ticks  = [[], []]\n}\n\nfunction compareTickNum(a, b) {\n  return a - b\n}\n\nvar proto = Grid.prototype\n\nproto.draw = (function() {\n\n  var DATA_SHIFT = [0,0]\n  var DATA_SCALE = [0,0]\n  var DATA_AXIS  = [0,0]\n\n  return function() {\n    var plot       = this.plot\n    var vbo        = this.vbo\n    var shader     = this.shader\n    var ticks      = this.ticks\n    var gl         = plot.gl\n    var bounds     = plot._tickBounds\n    var dataBox    = plot.dataBox\n    var viewPixels = plot.viewBox\n    var lineWidth  = plot.gridLineWidth\n    var gridColor  = plot.gridLineColor\n    var gridEnable = plot.gridLineEnable\n    var pixelRatio = plot.pixelRatio\n\n    for(var i=0; i<2; ++i) {\n      var lo = bounds[i]\n      var hi = bounds[i+2]\n      var boundScale = hi - lo\n      var dataCenter  = 0.5 * (dataBox[i+2] + dataBox[i])\n      var dataWidth   = dataBox[i+2] - dataBox[i]\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth\n    }\n\n    shader.bind()\n    vbo.bind()\n    shader.attributes.dataCoord.pointer()\n    shader.uniforms.dataShift = DATA_SHIFT\n    shader.uniforms.dataScale = DATA_SCALE\n\n    var offset = 0\n    for(var i=0; i<2; ++i) {\n      DATA_AXIS[0] = DATA_AXIS[1] = 0\n      DATA_AXIS[i] = 1\n      shader.uniforms.dataAxis  = DATA_AXIS\n      shader.uniforms.lineWidth = lineWidth[i] / (viewPixels[i+2] - viewPixels[i]) * pixelRatio\n      shader.uniforms.color     = gridColor[i]\n\n      var size = ticks[i].length * 6\n      if(gridEnable[i] && size) {\n        gl.drawArrays(gl.TRIANGLES, offset, size)\n      }\n      offset += size\n    }\n  }\n})()\n\nproto.drawTickMarks = (function() {\n  var DATA_SHIFT = [0,0]\n  var DATA_SCALE = [0,0]\n  var X_AXIS     = [1,0]\n  var Y_AXIS     = [0,1]\n  var SCR_OFFSET = [0,0]\n  var TICK_SCALE = [0,0]\n\n  return function() {\n    var plot       = this.plot\n    var vbo        = this.vbo\n    var shader     = this.tickShader\n    var ticks      = this.ticks\n    var gl         = plot.gl\n    var bounds     = plot._tickBounds\n    var dataBox    = plot.dataBox\n    var viewBox    = plot.viewBox\n    var pixelRatio = plot.pixelRatio\n    var screenBox  = plot.screenBox\n\n    var screenWidth  = screenBox[2] - screenBox[0]\n    var screenHeight = screenBox[3] - screenBox[1]\n    var viewWidth    = viewBox[2]   - viewBox[0]\n    var viewHeight   = viewBox[3]   - viewBox[1]\n\n    for(var i=0; i<2; ++i) {\n      var lo = bounds[i]\n      var hi = bounds[i+2]\n      var boundScale = hi - lo\n      var dataCenter  = 0.5 * (dataBox[i+2] + dataBox[i])\n      var dataWidth   = (dataBox[i+2] - dataBox[i])\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth\n    }\n\n    DATA_SCALE[0] *= viewWidth / screenWidth\n    DATA_SHIFT[0] *= viewWidth / screenWidth\n\n    DATA_SCALE[1] *= viewHeight / screenHeight\n    DATA_SHIFT[1] *= viewHeight / screenHeight\n\n    shader.bind()\n    vbo.bind()\n\n    shader.attributes.dataCoord.pointer()\n\n    var uniforms = shader.uniforms\n    uniforms.dataShift = DATA_SHIFT\n    uniforms.dataScale = DATA_SCALE\n\n    var tickMarkLength = plot.tickMarkLength\n    var tickMarkWidth  = plot.tickMarkWidth\n    var tickMarkColor  = plot.tickMarkColor\n\n    var xTicksOffset = 0\n    var yTicksOffset = ticks[0].length * 6\n\n    var xStart = Math.min(bsearch.ge(ticks[0], (dataBox[0] - bounds[0]) / (bounds[2] - bounds[0]), compareTickNum), ticks[0].length)\n    var xEnd   = Math.min(bsearch.gt(ticks[0], (dataBox[2] - bounds[0]) / (bounds[2] - bounds[0]), compareTickNum), ticks[0].length)\n    var xOffset = xTicksOffset + 6 * xStart\n    var xCount  = 6 * Math.max(0, xEnd - xStart)\n\n    var yStart = Math.min(bsearch.ge(ticks[1], (dataBox[1] - bounds[1]) / (bounds[3] - bounds[1]), compareTickNum), ticks[1].length)\n    var yEnd   = Math.min(bsearch.gt(ticks[1], (dataBox[3] - bounds[1]) / (bounds[3] - bounds[1]), compareTickNum), ticks[1].length)\n    var yOffset = yTicksOffset + 6 * yStart\n    var yCount  = 6 * Math.max(0, yEnd - yStart)\n\n    SCR_OFFSET[0]         = 2.0 * (viewBox[0] - tickMarkLength[1]) / screenWidth - 1.0\n    SCR_OFFSET[1]         = (viewBox[3] + viewBox[1]) / screenHeight - 1.0\n    TICK_SCALE[0]         = tickMarkLength[1] * pixelRatio / screenWidth\n    TICK_SCALE[1]         = tickMarkWidth[1]  * pixelRatio / screenHeight\n\n    if(yCount) {\n      uniforms.color        = tickMarkColor[1]\n      uniforms.tickScale    = TICK_SCALE\n      uniforms.dataAxis     = Y_AXIS\n      uniforms.screenOffset = SCR_OFFSET\n      gl.drawArrays(gl.TRIANGLES, yOffset, yCount)\n    }\n\n    SCR_OFFSET[0]         = (viewBox[2] + viewBox[0]) / screenWidth - 1.0\n    SCR_OFFSET[1]         = 2.0 * (viewBox[1] - tickMarkLength[0]) / screenHeight - 1.0\n    TICK_SCALE[0]         = tickMarkWidth[0]  * pixelRatio / screenWidth\n    TICK_SCALE[1]         = tickMarkLength[0] * pixelRatio / screenHeight\n\n    if(xCount) {\n      uniforms.color        = tickMarkColor[0]\n      uniforms.tickScale    = TICK_SCALE\n      uniforms.dataAxis     = X_AXIS\n      uniforms.screenOffset = SCR_OFFSET\n      gl.drawArrays(gl.TRIANGLES, xOffset, xCount)\n    }\n\n    SCR_OFFSET[0]         = 2.0 * (viewBox[2] + tickMarkLength[3]) / screenWidth - 1.0\n    SCR_OFFSET[1]         = (viewBox[3] + viewBox[1]) / screenHeight - 1.0\n    TICK_SCALE[0]         = tickMarkLength[3] * pixelRatio / screenWidth\n    TICK_SCALE[1]         = tickMarkWidth[3]  * pixelRatio / screenHeight\n\n    if(yCount) {\n      uniforms.color        = tickMarkColor[3]\n      uniforms.tickScale    = TICK_SCALE\n      uniforms.dataAxis     = Y_AXIS\n      uniforms.screenOffset = SCR_OFFSET\n      gl.drawArrays(gl.TRIANGLES, yOffset, yCount)\n    }\n\n    SCR_OFFSET[0]         = (viewBox[2] + viewBox[0]) / screenWidth - 1.0\n    SCR_OFFSET[1]         = 2.0 * (viewBox[3] + tickMarkLength[2]) / screenHeight - 1.0\n    TICK_SCALE[0]         = tickMarkWidth[2]  * pixelRatio / screenWidth\n    TICK_SCALE[1]         = tickMarkLength[2] * pixelRatio / screenHeight\n\n    if(xCount) {\n      uniforms.color        = tickMarkColor[2]\n      uniforms.tickScale    = TICK_SCALE\n      uniforms.dataAxis     = X_AXIS\n      uniforms.screenOffset = SCR_OFFSET\n      gl.drawArrays(gl.TRIANGLES, xOffset, xCount)\n    }\n  }\n})()\n\nproto.update = (function() {\n  var OFFSET_X = [1,  1, -1, -1,  1, -1]\n  var OFFSET_Y = [1, -1,  1,  1, -1, -1]\n\n  return function(options) {\n    var ticks  = options.ticks\n    var bounds = options.bounds\n    var data   = new Float32Array(6 * 3 * (ticks[0].length + ticks[1].length))\n\n    var zeroLineEnable = this.plot.zeroLineEnable\n\n    var ptr    = 0\n    var gridTicks = [[], []]\n    for(var dim=0; dim<2; ++dim) {\n      var localTicks = gridTicks[dim]\n      var axisTicks = ticks[dim]\n      var lo = bounds[dim]\n      var hi = bounds[dim+2]\n      for(var i=0; i<axisTicks.length; ++i) {\n        var x = (axisTicks[i].x - lo) / (hi - lo)\n        localTicks.push(x)\n        for(var j=0; j<6; ++j) {\n          data[ptr++] = x\n          data[ptr++] = OFFSET_X[j]\n          data[ptr++] = OFFSET_Y[j]\n        }\n      }\n    }\n\n    this.ticks = gridTicks\n    this.vbo.update(data)\n  }\n})()\n\nproto.dispose = function() {\n  this.vbo.dispose()\n  this.shader.dispose()\n  this.tickShader.dispose()\n}\n\nfunction createGrid(plot) {\n  var gl     = plot.gl\n  var vbo    = createBuffer(gl)\n  var shader = createShader(gl, shaders.gridVert, shaders.gridFrag)\n  var tickShader = createShader(gl, shaders.tickVert, shaders.gridFrag)\n  var grid   = new Grid(plot, vbo, shader, tickShader)\n  return grid\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
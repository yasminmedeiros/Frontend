{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n   Nanakshahi calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) January 2016.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n/** Implementation of the Nanakshahi calendar.\n    See also <a href=\"https://en.wikipedia.org/wiki/Nanakshahi_calendar\">https://en.wikipedia.org/wiki/Nanakshahi_calendar</a>.\n    @class NanakshahiCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction NanakshahiCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\nNanakshahiCalendar.prototype = new main.baseCalendar();\nvar gregorian = main.instance('gregorian');\nassign(NanakshahiCalendar.prototype, {\n  /** The calendar name.\n      @memberof NanakshahiCalendar */\n  name: 'Nanakshahi',\n  /** Julian date of start of Nanakshahi epoch: 14 March 1469 CE.\n      @memberof NanakshahiCalendar */\n  jdEpoch: 2257673.5,\n  /** Days per month in a common year.\n      @memberof NanakshahiCalendar */\n  daysPerMonth: [31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30],\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof NanakshahiCalendar */\n  hasYearZero: false,\n  /** The minimum month number.\n      @memberof NanakshahiCalendar */\n  minMonth: 1,\n  /** The first month in the year.\n      @memberof NanakshahiCalendar */\n  firstMonth: 1,\n  /** The minimum day number.\n      @memberof NanakshahiCalendar */\n  minDay: 1,\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof NanakshahiCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Nanakshahi',\n      epochs: ['BN', 'AN'],\n      monthNames: ['Chet', 'Vaisakh', 'Jeth', 'Harh', 'Sawan', 'Bhadon', 'Assu', 'Katak', 'Maghar', 'Poh', 'Magh', 'Phagun'],\n      monthNamesShort: ['Che', 'Vai', 'Jet', 'Har', 'Saw', 'Bha', 'Ass', 'Kat', 'Mgr', 'Poh', 'Mgh', 'Pha'],\n      dayNames: ['Somvaar', 'Mangalvar', 'Budhvaar', 'Veervaar', 'Shukarvaar', 'Sanicharvaar', 'Etvaar'],\n      dayNamesShort: ['Som', 'Mangal', 'Budh', 'Veer', 'Shukar', 'Sanichar', 'Et'],\n      dayNamesMin: ['So', 'Ma', 'Bu', 'Ve', 'Sh', 'Sa', 'Et'],\n      digits: null,\n      dateFormat: 'dd-mm-yyyy',\n      firstDay: 0,\n      isRTL: false\n    }\n  },\n  /** Determine whether this date is in a leap year.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear || main.regionalOptions[''].invalidYear);\n    return gregorian.leapYear(date.year() + (date.year() < 1 ? 1 : 0) + 1469);\n  },\n  /** Determine the week of the year for a date.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Monday of this week starting on Monday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(1 - (checkDate.dayOfWeek() || 7), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n  /** Retrieve the number of days in a month.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 12 && this.leapYear(date.year()) ? 1 : 0);\n  },\n  /** Determine whether this date is a week day.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return (this.dayOfWeek(year, month, day) || 7) < 6;\n  },\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidMonth);\n    var year = date.year();\n    if (year < 0) {\n      year++;\n    } // No year zero\n    var doy = date.day();\n    for (var m = 1; m < date.month(); m++) {\n      doy += this.daysPerMonth[m - 1];\n    }\n    return doy + gregorian.toJD(year + 1468, 3, 13);\n  },\n  /** Create a new date from a Julian date.\n      @memberof NanakshahiCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    jd = Math.floor(jd + 0.5);\n    var year = Math.floor((jd - (this.jdEpoch - 1)) / 366);\n    while (jd >= this.toJD(year + 1, 1, 1)) {\n      year++;\n    }\n    var day = jd - Math.floor(this.toJD(year, 1, 1) + 0.5) + 1;\n    var month = 1;\n    while (day > this.daysInMonth(year, month)) {\n      day -= this.daysInMonth(year, month);\n      month++;\n    }\n    return this.newDate(year, month, day);\n  }\n});\n\n// Nanakshahi calendar implementation\nmain.calendars.nanakshahi = NanakshahiCalendar;","map":{"version":3,"names":["main","require","assign","NanakshahiCalendar","language","local","regionalOptions","prototype","baseCalendar","gregorian","instance","name","jdEpoch","daysPerMonth","hasYearZero","minMonth","firstMonth","minDay","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","dateFormat","firstDay","isRTL","leapYear","year","date","_validate","invalidYear","weekOfYear","month","day","checkDate","newDate","add","dayOfWeek","Math","floor","dayOfYear","daysInMonth","invalidMonth","weekDay","toJD","doy","m","fromJD","jd","calendars","nanakshahi"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/world-calendars/dist/calendars/nanakshahi.js"],"sourcesContent":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n   Nanakshahi calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) January 2016.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Nanakshahi calendar.\n    See also <a href=\"https://en.wikipedia.org/wiki/Nanakshahi_calendar\">https://en.wikipedia.org/wiki/Nanakshahi_calendar</a>.\n    @class NanakshahiCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction NanakshahiCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nNanakshahiCalendar.prototype = new main.baseCalendar;\n\nvar gregorian = main.instance('gregorian');\n\nassign(NanakshahiCalendar.prototype, {\n    /** The calendar name.\n        @memberof NanakshahiCalendar */\n    name: 'Nanakshahi',\n    /** Julian date of start of Nanakshahi epoch: 14 March 1469 CE.\n        @memberof NanakshahiCalendar */\n    jdEpoch: 2257673.5,\n    /** Days per month in a common year.\n        @memberof NanakshahiCalendar */\n    daysPerMonth: [31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof NanakshahiCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof NanakshahiCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof NanakshahiCalendar */\n    firstMonth: 1,\n    /** The minimum day number.\n        @memberof NanakshahiCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof NanakshahiCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Nanakshahi',\n            epochs: ['BN', 'AN'],\n            monthNames: ['Chet', 'Vaisakh', 'Jeth', 'Harh', 'Sawan', 'Bhadon',\n            'Assu', 'Katak', 'Maghar', 'Poh', 'Magh', 'Phagun'],\n            monthNamesShort: ['Che', 'Vai', 'Jet', 'Har', 'Saw', 'Bha', 'Ass', 'Kat', 'Mgr', 'Poh', 'Mgh', 'Pha'],\n            dayNames: ['Somvaar', 'Mangalvar', 'Budhvaar', 'Veervaar', 'Shukarvaar', 'Sanicharvaar', 'Etvaar'],\n            dayNamesShort: ['Som', 'Mangal', 'Budh', 'Veer', 'Shukar', 'Sanichar', 'Et'],\n            dayNamesMin: ['So', 'Ma', 'Bu', 'Ve', 'Sh', 'Sa', 'Et'],\n            digits: null,\n            dateFormat: 'dd-mm-yyyy',\n            firstDay: 0,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof NanakshahiCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay,\n            main.local.invalidYear || main.regionalOptions[''].invalidYear);\n        return gregorian.leapYear(date.year() + (date.year() < 1 ? 1 : 0) + 1469);\n    },\n\n    /** Determine the week of the year for a date.\n        @memberof NanakshahiCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Monday of this week starting on Monday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(1 - (checkDate.dayOfWeek() || 7), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof NanakshahiCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return this.daysPerMonth[date.month() - 1] +\n            (date.month() === 12 && this.leapYear(date.year()) ? 1 : 0);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof NanakshahiCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return (this.dayOfWeek(year, month, day) || 7) < 6;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof NanakshahiCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidMonth);\n        var year = date.year();\n        if (year < 0) { year++; } // No year zero\n        var doy = date.day();\n        for (var m = 1; m < date.month(); m++) {\n            doy += this.daysPerMonth[m - 1];\n        }\n        return doy + gregorian.toJD(year + 1468, 3, 13);\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof NanakshahiCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        jd = Math.floor(jd + 0.5);\n        var year = Math.floor((jd - (this.jdEpoch - 1)) / 366);\n        while (jd >= this.toJD(year + 1, 1, 1)) {\n            year++;\n        }\n        var day = jd - Math.floor(this.toJD(year, 1, 1) + 0.5) + 1;\n        var month = 1;\n        while (day > this.daysInMonth(year, month)) {\n            day -= this.daysInMonth(year, month);\n            month++;\n        }\n        return this.newDate(year, month, day);\n    }\n});\n\n// Nanakshahi calendar implementation\nmain.calendars.nanakshahi = NanakshahiCalendar;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar hovertemplateAttrs = require('../../components/fx/hovertemplate_attributes');\nvar scatterAttrs = require('../scatter/attributes');\nvar plotAttrs = require('../../plots/attributes');\nvar colorAttributes = require('../../components/colorscale/attributes');\nvar dash = require('../../components/drawing/attributes').dash;\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar scatterMarkerAttrs = scatterAttrs.marker;\nvar scatterLineAttrs = scatterAttrs.line;\nvar scatterMarkerLineAttrs = scatterMarkerAttrs.line;\nmodule.exports = overrideAll({\n  lon: {\n    valType: 'data_array',\n    description: 'Sets the longitude coordinates (in degrees East).'\n  },\n  lat: {\n    valType: 'data_array',\n    description: 'Sets the latitude coordinates (in degrees North).'\n  },\n  locations: {\n    valType: 'data_array',\n    description: ['Sets the coordinates via location IDs or names.', 'Coordinates correspond to the centroid of each location given.', 'See `locationmode` for more info.'].join(' ')\n  },\n  locationmode: {\n    valType: 'enumerated',\n    values: ['ISO-3', 'USA-states', 'country names'],\n    role: 'info',\n    dflt: 'ISO-3',\n    description: ['Determines the set of locations used to match entries in `locations`', 'to regions on the map.'].join(' ')\n  },\n  mode: extendFlat({}, scatterAttrs.mode, {\n    dflt: 'markers'\n  }),\n  text: extendFlat({}, scatterAttrs.text, {\n    description: ['Sets text elements associated with each (lon,lat) pair', 'or item in `locations`.', 'If a single string, the same string appears over', 'all the data points.', 'If an array of string, the items are mapped in order to the', 'this trace\\'s (lon,lat) or `locations` coordinates.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  }),\n  hovertext: extendFlat({}, scatterAttrs.hovertext, {\n    description: ['Sets hover text elements associated with each (lon,lat) pair', 'or item in `locations`.', 'If a single string, the same string appears over', 'all the data points.', 'If an array of string, the items are mapped in order to the', 'this trace\\'s (lon,lat) or `locations` coordinates.', 'To be seen, trace `hoverinfo` must contain a *text* flag.'].join(' ')\n  }),\n  textfont: scatterAttrs.textfont,\n  textposition: scatterAttrs.textposition,\n  line: {\n    color: scatterLineAttrs.color,\n    width: scatterLineAttrs.width,\n    dash: dash\n  },\n  connectgaps: scatterAttrs.connectgaps,\n  marker: extendFlat({\n    symbol: scatterMarkerAttrs.symbol,\n    opacity: scatterMarkerAttrs.opacity,\n    size: scatterMarkerAttrs.size,\n    sizeref: scatterMarkerAttrs.sizeref,\n    sizemin: scatterMarkerAttrs.sizemin,\n    sizemode: scatterMarkerAttrs.sizemode,\n    colorbar: scatterMarkerAttrs.colorbar,\n    line: extendFlat({\n      width: scatterMarkerLineAttrs.width\n    }, colorAttributes('marker.line')),\n    gradient: scatterMarkerAttrs.gradient\n  }, colorAttributes('marker')),\n  fill: {\n    valType: 'enumerated',\n    values: ['none', 'toself'],\n    dflt: 'none',\n    role: 'style',\n    description: ['Sets the area to fill with a solid color.', 'Use with `fillcolor` if not *none*.', '*toself* connects the endpoints of the trace (or each segment', 'of the trace if it has gaps) into a closed shape.'].join(' ')\n  },\n  fillcolor: scatterAttrs.fillcolor,\n  selected: scatterAttrs.selected,\n  unselected: scatterAttrs.unselected,\n  hoverinfo: extendFlat({}, plotAttrs.hoverinfo, {\n    flags: ['lon', 'lat', 'location', 'text', 'name']\n  }),\n  hovertemplate: hovertemplateAttrs()\n}, 'calc', 'nested');","map":{"version":3,"names":["hovertemplateAttrs","require","scatterAttrs","plotAttrs","colorAttributes","dash","extendFlat","overrideAll","scatterMarkerAttrs","marker","scatterLineAttrs","line","scatterMarkerLineAttrs","module","exports","lon","valType","description","lat","locations","join","locationmode","values","role","dflt","mode","text","hovertext","textfont","textposition","color","width","connectgaps","symbol","opacity","size","sizeref","sizemin","sizemode","colorbar","gradient","fill","fillcolor","selected","unselected","hoverinfo","flags","hovertemplate"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/scattergeo/attributes.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar hovertemplateAttrs = require('../../components/fx/hovertemplate_attributes');\nvar scatterAttrs = require('../scatter/attributes');\nvar plotAttrs = require('../../plots/attributes');\nvar colorAttributes = require('../../components/colorscale/attributes');\nvar dash = require('../../components/drawing/attributes').dash;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar scatterMarkerAttrs = scatterAttrs.marker;\nvar scatterLineAttrs = scatterAttrs.line;\nvar scatterMarkerLineAttrs = scatterMarkerAttrs.line;\n\nmodule.exports = overrideAll({\n    lon: {\n        valType: 'data_array',\n        description: 'Sets the longitude coordinates (in degrees East).'\n    },\n    lat: {\n        valType: 'data_array',\n        description: 'Sets the latitude coordinates (in degrees North).'\n    },\n\n    locations: {\n        valType: 'data_array',\n        description: [\n            'Sets the coordinates via location IDs or names.',\n            'Coordinates correspond to the centroid of each location given.',\n            'See `locationmode` for more info.'\n        ].join(' ')\n    },\n    locationmode: {\n        valType: 'enumerated',\n        values: ['ISO-3', 'USA-states', 'country names'],\n        role: 'info',\n        dflt: 'ISO-3',\n        description: [\n            'Determines the set of locations used to match entries in `locations`',\n            'to regions on the map.'\n        ].join(' ')\n    },\n\n    mode: extendFlat({}, scatterAttrs.mode, {dflt: 'markers'}),\n\n    text: extendFlat({}, scatterAttrs.text, {\n        description: [\n            'Sets text elements associated with each (lon,lat) pair',\n            'or item in `locations`.',\n            'If a single string, the same string appears over',\n            'all the data points.',\n            'If an array of string, the items are mapped in order to the',\n            'this trace\\'s (lon,lat) or `locations` coordinates.',\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\n            'these elements will be seen in the hover labels.'\n        ].join(' ')\n    }),\n    hovertext: extendFlat({}, scatterAttrs.hovertext, {\n        description: [\n            'Sets hover text elements associated with each (lon,lat) pair',\n            'or item in `locations`.',\n            'If a single string, the same string appears over',\n            'all the data points.',\n            'If an array of string, the items are mapped in order to the',\n            'this trace\\'s (lon,lat) or `locations` coordinates.',\n            'To be seen, trace `hoverinfo` must contain a *text* flag.'\n        ].join(' ')\n    }),\n\n    textfont: scatterAttrs.textfont,\n    textposition: scatterAttrs.textposition,\n\n    line: {\n        color: scatterLineAttrs.color,\n        width: scatterLineAttrs.width,\n        dash: dash\n    },\n    connectgaps: scatterAttrs.connectgaps,\n\n    marker: extendFlat({\n        symbol: scatterMarkerAttrs.symbol,\n        opacity: scatterMarkerAttrs.opacity,\n        size: scatterMarkerAttrs.size,\n        sizeref: scatterMarkerAttrs.sizeref,\n        sizemin: scatterMarkerAttrs.sizemin,\n        sizemode: scatterMarkerAttrs.sizemode,\n        colorbar: scatterMarkerAttrs.colorbar,\n        line: extendFlat({\n            width: scatterMarkerLineAttrs.width\n        },\n            colorAttributes('marker.line')\n        ),\n        gradient: scatterMarkerAttrs.gradient\n    },\n        colorAttributes('marker')\n    ),\n\n    fill: {\n        valType: 'enumerated',\n        values: ['none', 'toself'],\n        dflt: 'none',\n        role: 'style',\n        description: [\n            'Sets the area to fill with a solid color.',\n            'Use with `fillcolor` if not *none*.',\n            '*toself* connects the endpoints of the trace (or each segment',\n            'of the trace if it has gaps) into a closed shape.'\n        ].join(' ')\n    },\n    fillcolor: scatterAttrs.fillcolor,\n\n    selected: scatterAttrs.selected,\n    unselected: scatterAttrs.unselected,\n\n    hoverinfo: extendFlat({}, plotAttrs.hoverinfo, {\n        flags: ['lon', 'lat', 'location', 'text', 'name']\n    }),\n    hovertemplate: hovertemplateAttrs(),\n}, 'calc', 'nested');\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
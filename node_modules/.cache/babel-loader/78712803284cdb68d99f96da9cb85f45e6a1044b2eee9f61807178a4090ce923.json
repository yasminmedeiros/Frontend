{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\n\n// Maybe add kernels more down the road,\n// but note that the default `spanmode: 'soft'` bounds might have\n// to become kernel-dependent\nvar kernels = {\n  gaussian: function gaussian(v) {\n    return 1 / Math.sqrt(2 * Math.PI) * Math.exp(-0.5 * v * v);\n  }\n};\nexports.makeKDE = function (calcItem, trace, vals) {\n  var len = vals.length;\n  var kernel = kernels.gaussian;\n  var bandwidth = calcItem.bandwidth;\n  var factor = 1 / (len * bandwidth);\n\n  // don't use Lib.aggNums to skip isNumeric checks\n  return function (x) {\n    var sum = 0;\n    for (var i = 0; i < len; i++) {\n      sum += kernel((x - vals[i]) / bandwidth);\n    }\n    return factor * sum;\n  };\n};\nexports.getPositionOnKdePath = function (calcItem, trace, valuePx) {\n  var posLetter, valLetter;\n  if (trace.orientation === 'h') {\n    posLetter = 'y';\n    valLetter = 'x';\n  } else {\n    posLetter = 'x';\n    valLetter = 'y';\n  }\n  var pointOnPath = Lib.findPointOnPath(calcItem.path, valuePx, valLetter, {\n    pathLength: calcItem.pathLength\n  });\n  var posCenterPx = calcItem.posCenterPx;\n  var posOnPath0 = pointOnPath[posLetter];\n  var posOnPath1 = trace.side === 'both' ? 2 * posCenterPx - posOnPath0 : posCenterPx;\n  return [posOnPath0, posOnPath1];\n};\nexports.getKdeValue = function (calcItem, trace, valueDist) {\n  var vals = calcItem.pts.map(exports.extractVal);\n  var kde = exports.makeKDE(calcItem, trace, vals);\n  return kde(valueDist) / calcItem.posDensityScale;\n};\nexports.extractVal = function (o) {\n  return o.v;\n};","map":{"version":3,"names":["Lib","require","kernels","gaussian","v","Math","sqrt","PI","exp","exports","makeKDE","calcItem","trace","vals","len","length","kernel","bandwidth","factor","x","sum","i","getPositionOnKdePath","valuePx","posLetter","valLetter","orientation","pointOnPath","findPointOnPath","path","pathLength","posCenterPx","posOnPath0","posOnPath1","side","getKdeValue","valueDist","pts","map","extractVal","kde","posDensityScale","o"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/violin/helpers.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\n\n// Maybe add kernels more down the road,\n// but note that the default `spanmode: 'soft'` bounds might have\n// to become kernel-dependent\nvar kernels = {\n    gaussian: function(v) {\n        return (1 / Math.sqrt(2 * Math.PI)) * Math.exp(-0.5 * v * v);\n    }\n};\n\nexports.makeKDE = function(calcItem, trace, vals) {\n    var len = vals.length;\n    var kernel = kernels.gaussian;\n    var bandwidth = calcItem.bandwidth;\n    var factor = 1 / (len * bandwidth);\n\n    // don't use Lib.aggNums to skip isNumeric checks\n    return function(x) {\n        var sum = 0;\n        for(var i = 0; i < len; i++) {\n            sum += kernel((x - vals[i]) / bandwidth);\n        }\n        return factor * sum;\n    };\n};\n\nexports.getPositionOnKdePath = function(calcItem, trace, valuePx) {\n    var posLetter, valLetter;\n\n    if(trace.orientation === 'h') {\n        posLetter = 'y';\n        valLetter = 'x';\n    } else {\n        posLetter = 'x';\n        valLetter = 'y';\n    }\n\n    var pointOnPath = Lib.findPointOnPath(\n        calcItem.path,\n        valuePx,\n        valLetter,\n        {pathLength: calcItem.pathLength}\n    );\n\n    var posCenterPx = calcItem.posCenterPx;\n    var posOnPath0 = pointOnPath[posLetter];\n    var posOnPath1 = trace.side === 'both' ?\n        2 * posCenterPx - posOnPath0 :\n        posCenterPx;\n\n    return [posOnPath0, posOnPath1];\n};\n\nexports.getKdeValue = function(calcItem, trace, valueDist) {\n    var vals = calcItem.pts.map(exports.extractVal);\n    var kde = exports.makeKDE(calcItem, trace, vals);\n    return kde(valueDist) / calcItem.posDensityScale;\n};\n\nexports.extractVal = function(o) { return o.v; };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAW,CAAC;;AAE9B;AACA;AACA;AACA,IAAIC,OAAO,GAAG;EACVC,QAAQ,EAAE,kBAASC,CAAC,EAAE;IAClB,OAAQ,CAAC,GAAGC,IAAI,CAACC,IAAI,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE,CAAC,GAAIF,IAAI,CAACG,GAAG,CAAC,CAAC,GAAG,GAAGJ,CAAC,GAAGA,CAAC,CAAC;EAChE;AACJ,CAAC;AAEDK,OAAO,CAACC,OAAO,GAAG,UAASC,QAAQ,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAC9C,IAAIC,GAAG,GAAGD,IAAI,CAACE,MAAM;EACrB,IAAIC,MAAM,GAAGd,OAAO,CAACC,QAAQ;EAC7B,IAAIc,SAAS,GAAGN,QAAQ,CAACM,SAAS;EAClC,IAAIC,MAAM,GAAG,CAAC,IAAIJ,GAAG,GAAGG,SAAS,CAAC;;EAElC;EACA,OAAO,UAASE,CAAC,EAAE;IACf,IAAIC,GAAG,GAAG,CAAC;IACX,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,GAAG,EAAEO,CAAC,EAAE,EAAE;MACzBD,GAAG,IAAIJ,MAAM,CAAC,CAACG,CAAC,GAAGN,IAAI,CAACQ,CAAC,CAAC,IAAIJ,SAAS,CAAC;IAC5C;IACA,OAAOC,MAAM,GAAGE,GAAG;EACvB,CAAC;AACL,CAAC;AAEDX,OAAO,CAACa,oBAAoB,GAAG,UAASX,QAAQ,EAAEC,KAAK,EAAEW,OAAO,EAAE;EAC9D,IAAIC,SAAS,EAAEC,SAAS;EAExB,IAAGb,KAAK,CAACc,WAAW,KAAK,GAAG,EAAE;IAC1BF,SAAS,GAAG,GAAG;IACfC,SAAS,GAAG,GAAG;EACnB,CAAC,MAAM;IACHD,SAAS,GAAG,GAAG;IACfC,SAAS,GAAG,GAAG;EACnB;EAEA,IAAIE,WAAW,GAAG3B,GAAG,CAAC4B,eAAe,CACjCjB,QAAQ,CAACkB,IAAI,EACbN,OAAO,EACPE,SAAS,EACT;IAACK,UAAU,EAAEnB,QAAQ,CAACmB;EAAU,CAAC,CACpC;EAED,IAAIC,WAAW,GAAGpB,QAAQ,CAACoB,WAAW;EACtC,IAAIC,UAAU,GAAGL,WAAW,CAACH,SAAS,CAAC;EACvC,IAAIS,UAAU,GAAGrB,KAAK,CAACsB,IAAI,KAAK,MAAM,GAClC,CAAC,GAAGH,WAAW,GAAGC,UAAU,GAC5BD,WAAW;EAEf,OAAO,CAACC,UAAU,EAAEC,UAAU,CAAC;AACnC,CAAC;AAEDxB,OAAO,CAAC0B,WAAW,GAAG,UAASxB,QAAQ,EAAEC,KAAK,EAAEwB,SAAS,EAAE;EACvD,IAAIvB,IAAI,GAAGF,QAAQ,CAAC0B,GAAG,CAACC,GAAG,CAAC7B,OAAO,CAAC8B,UAAU,CAAC;EAC/C,IAAIC,GAAG,GAAG/B,OAAO,CAACC,OAAO,CAACC,QAAQ,EAAEC,KAAK,EAAEC,IAAI,CAAC;EAChD,OAAO2B,GAAG,CAACJ,SAAS,CAAC,GAAGzB,QAAQ,CAAC8B,eAAe;AACpD,CAAC;AAEDhC,OAAO,CAAC8B,UAAU,GAAG,UAASG,CAAC,EAAE;EAAE,OAAOA,CAAC,CAACtC,CAAC;AAAE,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar parcoords = require('./parcoords');\nvar prepareRegl = require('../../lib/prepare_regl');\nmodule.exports = function plot(gd, cdparcoords) {\n  var fullLayout = gd._fullLayout;\n  var svg = fullLayout._toppaper;\n  var root = fullLayout._paperdiv;\n  var container = fullLayout._glcontainer;\n  var success = prepareRegl(gd);\n  if (!success) return;\n  var gdDimensions = {};\n  var gdDimensionsOriginalOrder = {};\n  var fullIndices = {};\n  var inputIndices = {};\n  var size = fullLayout._size;\n  cdparcoords.forEach(function (d, i) {\n    var trace = d[0].trace;\n    fullIndices[i] = trace.index;\n    var iIn = inputIndices[i] = trace._fullInput.index;\n    gdDimensions[i] = gd.data[iIn].dimensions;\n    gdDimensionsOriginalOrder[i] = gd.data[iIn].dimensions.slice();\n  });\n  var filterChanged = function filterChanged(i, originalDimensionIndex, newRanges) {\n    // Have updated `constraintrange` data on `gd.data` and raise `Plotly.restyle` event\n    // without having to incur heavy UI blocking due to an actual `Plotly.restyle` call\n\n    var gdDimension = gdDimensionsOriginalOrder[i][originalDimensionIndex];\n    var newConstraints = newRanges.map(function (r) {\n      return r.slice();\n    });\n\n    // Store constraint range in preGUI\n    // This one doesn't work if it's stored in pieces in _storeDirectGUIEdit\n    // because it's an array of variable dimensionality. So store the whole\n    // thing at once manually.\n    var aStr = 'dimensions[' + originalDimensionIndex + '].constraintrange';\n    var preGUI = fullLayout._tracePreGUI[gd._fullData[fullIndices[i]]._fullInput.uid];\n    if (preGUI[aStr] === undefined) {\n      var initialVal = gdDimension.constraintrange;\n      preGUI[aStr] = initialVal || null;\n    }\n    var fullDimension = gd._fullData[fullIndices[i]].dimensions[originalDimensionIndex];\n    if (!newConstraints.length) {\n      delete gdDimension.constraintrange;\n      delete fullDimension.constraintrange;\n      newConstraints = null;\n    } else {\n      if (newConstraints.length === 1) newConstraints = newConstraints[0];\n      gdDimension.constraintrange = newConstraints;\n      fullDimension.constraintrange = newConstraints.slice();\n      // wrap in another array for restyle event data\n      newConstraints = [newConstraints];\n    }\n    var restyleData = {};\n    restyleData[aStr] = newConstraints;\n    gd.emit('plotly_restyle', [restyleData, [inputIndices[i]]]);\n  };\n  var hover = function hover(eventData) {\n    gd.emit('plotly_hover', eventData);\n  };\n  var unhover = function unhover(eventData) {\n    gd.emit('plotly_unhover', eventData);\n  };\n  var axesMoved = function axesMoved(i, visibleIndices) {\n    // Have updated order data on `gd.data` and raise `Plotly.restyle` event\n    // without having to incur heavy UI blocking due to an actual `Plotly.restyle` call\n\n    function visible(dimension) {\n      return !('visible' in dimension) || dimension.visible;\n    }\n    function newIdx(visibleIndices, orig, dim) {\n      var origIndex = orig.indexOf(dim);\n      var currentIndex = visibleIndices.indexOf(origIndex);\n      if (currentIndex === -1) {\n        // invisible dimensions initially go to the end\n        currentIndex += orig.length;\n      }\n      return currentIndex;\n    }\n    function sorter(orig) {\n      return function sorter(d1, d2) {\n        var i1 = newIdx(visibleIndices, orig, d1);\n        var i2 = newIdx(visibleIndices, orig, d2);\n        return i1 - i2;\n      };\n    }\n\n    // drag&drop sorting of the visible dimensions\n    var orig = sorter(gdDimensionsOriginalOrder[i].filter(visible));\n    gdDimensions[i].sort(orig);\n\n    // invisible dimensions are not interpreted in the context of drag&drop sorting as an invisible dimension\n    // cannot be dragged; they're interspersed into their original positions by this subsequent merging step\n    gdDimensionsOriginalOrder[i].filter(function (d) {\n      return !visible(d);\n    }).sort(function (d) {\n      // subsequent splicing to be done left to right, otherwise indices may be incorrect\n      return gdDimensionsOriginalOrder[i].indexOf(d);\n    }).forEach(function (d) {\n      gdDimensions[i].splice(gdDimensions[i].indexOf(d), 1); // remove from the end\n      gdDimensions[i].splice(gdDimensionsOriginalOrder[i].indexOf(d), 0, d); // insert at original index\n    });\n\n    // TODO: we can't really store this part of the interaction state\n    // directly as below, since it incudes data arrays. If we want to\n    // persist column order we may have to do something special for this\n    // case to just store the order itself.\n    // Registry.call('_storeDirectGUIEdit',\n    //     gd.data[inputIndices[i]],\n    //     fullLayout._tracePreGUI[gd._fullData[fullIndices[i]]._fullInput.uid],\n    //     {dimensions: gdDimensions[i]}\n    // );\n\n    gd.emit('plotly_restyle', [{\n      dimensions: [gdDimensions[i]]\n    }, [inputIndices[i]]]);\n  };\n  parcoords(root, svg, container, cdparcoords, {\n    width: size.w,\n    height: size.h,\n    margin: {\n      t: size.t,\n      r: size.r,\n      b: size.b,\n      l: size.l\n    }\n  }, {\n    filterChanged: filterChanged,\n    hover: hover,\n    unhover: unhover,\n    axesMoved: axesMoved\n  });\n};","map":{"version":3,"names":["parcoords","require","prepareRegl","module","exports","plot","gd","cdparcoords","fullLayout","_fullLayout","svg","_toppaper","root","_paperdiv","container","_glcontainer","success","gdDimensions","gdDimensionsOriginalOrder","fullIndices","inputIndices","size","_size","forEach","d","i","trace","index","iIn","_fullInput","data","dimensions","slice","filterChanged","originalDimensionIndex","newRanges","gdDimension","newConstraints","map","r","aStr","preGUI","_tracePreGUI","_fullData","uid","undefined","initialVal","constraintrange","fullDimension","length","restyleData","emit","hover","eventData","unhover","axesMoved","visibleIndices","visible","dimension","newIdx","orig","dim","origIndex","indexOf","currentIndex","sorter","d1","d2","i1","i2","filter","sort","splice","width","w","height","h","margin","t","b","l"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/parcoords/plot.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar parcoords = require('./parcoords');\nvar prepareRegl = require('../../lib/prepare_regl');\n\nmodule.exports = function plot(gd, cdparcoords) {\n    var fullLayout = gd._fullLayout;\n    var svg = fullLayout._toppaper;\n    var root = fullLayout._paperdiv;\n    var container = fullLayout._glcontainer;\n\n    var success = prepareRegl(gd);\n    if(!success) return;\n\n    var gdDimensions = {};\n    var gdDimensionsOriginalOrder = {};\n    var fullIndices = {};\n    var inputIndices = {};\n\n    var size = fullLayout._size;\n\n    cdparcoords.forEach(function(d, i) {\n        var trace = d[0].trace;\n        fullIndices[i] = trace.index;\n        var iIn = inputIndices[i] = trace._fullInput.index;\n        gdDimensions[i] = gd.data[iIn].dimensions;\n        gdDimensionsOriginalOrder[i] = gd.data[iIn].dimensions.slice();\n    });\n\n    var filterChanged = function(i, originalDimensionIndex, newRanges) {\n\n        // Have updated `constraintrange` data on `gd.data` and raise `Plotly.restyle` event\n        // without having to incur heavy UI blocking due to an actual `Plotly.restyle` call\n\n        var gdDimension = gdDimensionsOriginalOrder[i][originalDimensionIndex];\n        var newConstraints = newRanges.map(function(r) { return r.slice(); });\n\n        // Store constraint range in preGUI\n        // This one doesn't work if it's stored in pieces in _storeDirectGUIEdit\n        // because it's an array of variable dimensionality. So store the whole\n        // thing at once manually.\n        var aStr = 'dimensions[' + originalDimensionIndex + '].constraintrange';\n        var preGUI = fullLayout._tracePreGUI[gd._fullData[fullIndices[i]]._fullInput.uid];\n        if(preGUI[aStr] === undefined) {\n            var initialVal = gdDimension.constraintrange;\n            preGUI[aStr] = initialVal || null;\n        }\n\n        var fullDimension = gd._fullData[fullIndices[i]].dimensions[originalDimensionIndex];\n\n        if(!newConstraints.length) {\n            delete gdDimension.constraintrange;\n            delete fullDimension.constraintrange;\n            newConstraints = null;\n        }\n        else {\n            if(newConstraints.length === 1) newConstraints = newConstraints[0];\n            gdDimension.constraintrange = newConstraints;\n            fullDimension.constraintrange = newConstraints.slice();\n            // wrap in another array for restyle event data\n            newConstraints = [newConstraints];\n        }\n\n        var restyleData = {};\n        restyleData[aStr] = newConstraints;\n        gd.emit('plotly_restyle', [restyleData, [inputIndices[i]]]);\n    };\n\n    var hover = function(eventData) {\n        gd.emit('plotly_hover', eventData);\n    };\n\n    var unhover = function(eventData) {\n        gd.emit('plotly_unhover', eventData);\n    };\n\n    var axesMoved = function(i, visibleIndices) {\n\n        // Have updated order data on `gd.data` and raise `Plotly.restyle` event\n        // without having to incur heavy UI blocking due to an actual `Plotly.restyle` call\n\n        function visible(dimension) {return !('visible' in dimension) || dimension.visible;}\n\n        function newIdx(visibleIndices, orig, dim) {\n            var origIndex = orig.indexOf(dim);\n            var currentIndex = visibleIndices.indexOf(origIndex);\n            if(currentIndex === -1) {\n                // invisible dimensions initially go to the end\n                currentIndex += orig.length;\n            }\n            return currentIndex;\n        }\n\n        function sorter(orig) {\n            return function sorter(d1, d2) {\n                var i1 = newIdx(visibleIndices, orig, d1);\n                var i2 = newIdx(visibleIndices, orig, d2);\n                return i1 - i2;\n            };\n        }\n\n        // drag&drop sorting of the visible dimensions\n        var orig = sorter(gdDimensionsOriginalOrder[i].filter(visible));\n        gdDimensions[i].sort(orig);\n\n        // invisible dimensions are not interpreted in the context of drag&drop sorting as an invisible dimension\n        // cannot be dragged; they're interspersed into their original positions by this subsequent merging step\n        gdDimensionsOriginalOrder[i].filter(function(d) {return !visible(d);})\n             .sort(function(d) {\n                 // subsequent splicing to be done left to right, otherwise indices may be incorrect\n                 return gdDimensionsOriginalOrder[i].indexOf(d);\n             })\n            .forEach(function(d) {\n                gdDimensions[i].splice(gdDimensions[i].indexOf(d), 1); // remove from the end\n                gdDimensions[i].splice(gdDimensionsOriginalOrder[i].indexOf(d), 0, d); // insert at original index\n            });\n\n        // TODO: we can't really store this part of the interaction state\n        // directly as below, since it incudes data arrays. If we want to\n        // persist column order we may have to do something special for this\n        // case to just store the order itself.\n        // Registry.call('_storeDirectGUIEdit',\n        //     gd.data[inputIndices[i]],\n        //     fullLayout._tracePreGUI[gd._fullData[fullIndices[i]]._fullInput.uid],\n        //     {dimensions: gdDimensions[i]}\n        // );\n\n        gd.emit('plotly_restyle', [{dimensions: [gdDimensions[i]]}, [inputIndices[i]]]);\n    };\n\n    parcoords(\n        root,\n        svg,\n        container,\n        cdparcoords,\n        {\n            width: size.w,\n            height: size.h,\n            margin: {\n                t: size.t,\n                r: size.r,\n                b: size.b,\n                l: size.l\n            }\n        },\n        {\n            filterChanged: filterChanged,\n            hover: hover,\n            unhover: unhover,\n            axesMoved: axesMoved\n        });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
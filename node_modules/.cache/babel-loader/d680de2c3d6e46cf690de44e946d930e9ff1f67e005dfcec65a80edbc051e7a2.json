{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar Plots = require('../../plots/plots');\nvar axisIds = require('../../plots/cartesian/axis_ids');\nvar Lib = require('../../lib');\nvar Icons = require('../../../build/ploticon');\nvar _ = Lib._;\nvar modeBarButtons = module.exports = {};\n\n/**\n * ModeBar buttons configuration\n *\n * @param {string} name\n *      name / id of the buttons (for tracking)\n * @param {string} title\n *      text that appears while hovering over the button,\n *      enter null, false or '' for no hover text\n * @param {string} icon\n *      svg icon object associated with the button\n *      can be linked to Plotly.Icons to use the default plotly icons\n * @param {string} [gravity]\n *      icon positioning\n * @param {function} click\n *      click handler associated with the button, a function of\n *      'gd' (the main graph object) and\n *      'ev' (the event object)\n * @param {string} [attr]\n *      attribute associated with button,\n *      use this with 'val' to keep track of the state\n * @param {*} [val]\n *      initial 'attr' value, can be a function of gd\n * @param {boolean} [toggle]\n *      is the button a toggle button?\n */\n\nmodeBarButtons.toImage = {\n  name: 'toImage',\n  title: function title(gd) {\n    var opts = gd._context.toImageButtonOptions || {};\n    var format = opts.format || 'png';\n    return format === 'png' ? _(gd, 'Download plot as a png') :\n    // legacy text\n    _(gd, 'Download plot'); // generic non-PNG text\n  },\n\n  icon: Icons.camera,\n  click: function click(gd) {\n    var toImageButtonOptions = gd._context.toImageButtonOptions;\n    var opts = {\n      format: toImageButtonOptions.format || 'png'\n    };\n    Lib.notifier(_(gd, 'Taking snapshot - this may take a few seconds'), 'long');\n    if (opts.format !== 'svg' && Lib.isIE()) {\n      Lib.notifier(_(gd, 'IE only supports svg.  Changing format to svg.'), 'long');\n      opts.format = 'svg';\n    }\n    ['filename', 'width', 'height', 'scale'].forEach(function (key) {\n      if (toImageButtonOptions[key]) {\n        opts[key] = toImageButtonOptions[key];\n      }\n    });\n    Registry.call('downloadImage', gd, opts).then(function (filename) {\n      Lib.notifier(_(gd, 'Snapshot succeeded') + ' - ' + filename, 'long');\n    }).catch(function () {\n      Lib.notifier(_(gd, 'Sorry, there was a problem downloading your snapshot!'), 'long');\n    });\n  }\n};\nmodeBarButtons.sendDataToCloud = {\n  name: 'sendDataToCloud',\n  title: function title(gd) {\n    return _(gd, 'Edit in Chart Studio');\n  },\n  icon: Icons.disk,\n  click: function click(gd) {\n    Plots.sendDataToCloud(gd);\n  }\n};\nmodeBarButtons.zoom2d = {\n  name: 'zoom2d',\n  title: function title(gd) {\n    return _(gd, 'Zoom');\n  },\n  attr: 'dragmode',\n  val: 'zoom',\n  icon: Icons.zoombox,\n  click: handleCartesian\n};\nmodeBarButtons.pan2d = {\n  name: 'pan2d',\n  title: function title(gd) {\n    return _(gd, 'Pan');\n  },\n  attr: 'dragmode',\n  val: 'pan',\n  icon: Icons.pan,\n  click: handleCartesian\n};\nmodeBarButtons.select2d = {\n  name: 'select2d',\n  title: function title(gd) {\n    return _(gd, 'Box Select');\n  },\n  attr: 'dragmode',\n  val: 'select',\n  icon: Icons.selectbox,\n  click: handleCartesian\n};\nmodeBarButtons.lasso2d = {\n  name: 'lasso2d',\n  title: function title(gd) {\n    return _(gd, 'Lasso Select');\n  },\n  attr: 'dragmode',\n  val: 'lasso',\n  icon: Icons.lasso,\n  click: handleCartesian\n};\nmodeBarButtons.zoomIn2d = {\n  name: 'zoomIn2d',\n  title: function title(gd) {\n    return _(gd, 'Zoom in');\n  },\n  attr: 'zoom',\n  val: 'in',\n  icon: Icons.zoom_plus,\n  click: handleCartesian\n};\nmodeBarButtons.zoomOut2d = {\n  name: 'zoomOut2d',\n  title: function title(gd) {\n    return _(gd, 'Zoom out');\n  },\n  attr: 'zoom',\n  val: 'out',\n  icon: Icons.zoom_minus,\n  click: handleCartesian\n};\nmodeBarButtons.autoScale2d = {\n  name: 'autoScale2d',\n  title: function title(gd) {\n    return _(gd, 'Autoscale');\n  },\n  attr: 'zoom',\n  val: 'auto',\n  icon: Icons.autoscale,\n  click: handleCartesian\n};\nmodeBarButtons.resetScale2d = {\n  name: 'resetScale2d',\n  title: function title(gd) {\n    return _(gd, 'Reset axes');\n  },\n  attr: 'zoom',\n  val: 'reset',\n  icon: Icons.home,\n  click: handleCartesian\n};\nmodeBarButtons.hoverClosestCartesian = {\n  name: 'hoverClosestCartesian',\n  title: function title(gd) {\n    return _(gd, 'Show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: 'closest',\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: handleCartesian\n};\nmodeBarButtons.hoverCompareCartesian = {\n  name: 'hoverCompareCartesian',\n  title: function title(gd) {\n    return _(gd, 'Compare data on hover');\n  },\n  attr: 'hovermode',\n  val: function val(gd) {\n    return gd._fullLayout._isHoriz ? 'y' : 'x';\n  },\n  icon: Icons.tooltip_compare,\n  gravity: 'ne',\n  click: handleCartesian\n};\nfunction handleCartesian(gd, ev) {\n  var button = ev.currentTarget;\n  var astr = button.getAttribute('data-attr');\n  var val = button.getAttribute('data-val') || true;\n  var fullLayout = gd._fullLayout;\n  var aobj = {};\n  var axList = axisIds.list(gd, null, true);\n  var allSpikesEnabled = 'on';\n  var ax, i;\n  if (astr === 'zoom') {\n    var mag = val === 'in' ? 0.5 : 2;\n    var r0 = (1 + mag) / 2;\n    var r1 = (1 - mag) / 2;\n    var axName;\n    for (i = 0; i < axList.length; i++) {\n      ax = axList[i];\n      if (!ax.fixedrange) {\n        axName = ax._name;\n        if (val === 'auto') aobj[axName + '.autorange'] = true;else if (val === 'reset') {\n          if (ax._rangeInitial === undefined) {\n            aobj[axName + '.autorange'] = true;\n          } else {\n            var rangeInitial = ax._rangeInitial.slice();\n            aobj[axName + '.range[0]'] = rangeInitial[0];\n            aobj[axName + '.range[1]'] = rangeInitial[1];\n          }\n          if (ax._showSpikeInitial !== undefined) {\n            aobj[axName + '.showspikes'] = ax._showSpikeInitial;\n            if (allSpikesEnabled === 'on' && !ax._showSpikeInitial) {\n              allSpikesEnabled = 'off';\n            }\n          }\n        } else {\n          var rangeNow = [ax.r2l(ax.range[0]), ax.r2l(ax.range[1])];\n          var rangeNew = [r0 * rangeNow[0] + r1 * rangeNow[1], r0 * rangeNow[1] + r1 * rangeNow[0]];\n          aobj[axName + '.range[0]'] = ax.l2r(rangeNew[0]);\n          aobj[axName + '.range[1]'] = ax.l2r(rangeNew[1]);\n        }\n      }\n    }\n    fullLayout._cartesianSpikesEnabled = allSpikesEnabled;\n  } else {\n    // if ALL traces have orientation 'h', 'hovermode': 'x' otherwise: 'y'\n    if (astr === 'hovermode' && (val === 'x' || val === 'y')) {\n      val = fullLayout._isHoriz ? 'y' : 'x';\n      button.setAttribute('data-val', val);\n    } else if (astr === 'hovermode' && val === 'closest') {\n      for (i = 0; i < axList.length; i++) {\n        ax = axList[i];\n        if (allSpikesEnabled === 'on' && !ax.showspikes) {\n          allSpikesEnabled = 'off';\n        }\n      }\n      fullLayout._cartesianSpikesEnabled = allSpikesEnabled;\n    }\n    aobj[astr] = val;\n  }\n  Registry.call('_guiRelayout', gd, aobj);\n}\nmodeBarButtons.zoom3d = {\n  name: 'zoom3d',\n  title: function title(gd) {\n    return _(gd, 'Zoom');\n  },\n  attr: 'scene.dragmode',\n  val: 'zoom',\n  icon: Icons.zoombox,\n  click: handleDrag3d\n};\nmodeBarButtons.pan3d = {\n  name: 'pan3d',\n  title: function title(gd) {\n    return _(gd, 'Pan');\n  },\n  attr: 'scene.dragmode',\n  val: 'pan',\n  icon: Icons.pan,\n  click: handleDrag3d\n};\nmodeBarButtons.orbitRotation = {\n  name: 'orbitRotation',\n  title: function title(gd) {\n    return _(gd, 'Orbital rotation');\n  },\n  attr: 'scene.dragmode',\n  val: 'orbit',\n  icon: Icons['3d_rotate'],\n  click: handleDrag3d\n};\nmodeBarButtons.tableRotation = {\n  name: 'tableRotation',\n  title: function title(gd) {\n    return _(gd, 'Turntable rotation');\n  },\n  attr: 'scene.dragmode',\n  val: 'turntable',\n  icon: Icons['z-axis'],\n  click: handleDrag3d\n};\nfunction handleDrag3d(gd, ev) {\n  var button = ev.currentTarget;\n  var attr = button.getAttribute('data-attr');\n  var val = button.getAttribute('data-val') || true;\n  var sceneIds = gd._fullLayout._subplots.gl3d;\n  var layoutUpdate = {};\n  var parts = attr.split('.');\n  for (var i = 0; i < sceneIds.length; i++) {\n    layoutUpdate[sceneIds[i] + '.' + parts[1]] = val;\n  }\n\n  // for multi-type subplots\n  var val2d = val === 'pan' ? val : 'zoom';\n  layoutUpdate.dragmode = val2d;\n  Registry.call('_guiRelayout', gd, layoutUpdate);\n}\nmodeBarButtons.resetCameraDefault3d = {\n  name: 'resetCameraDefault3d',\n  title: function title(gd) {\n    return _(gd, 'Reset camera to default');\n  },\n  attr: 'resetDefault',\n  icon: Icons.home,\n  click: handleCamera3d\n};\nmodeBarButtons.resetCameraLastSave3d = {\n  name: 'resetCameraLastSave3d',\n  title: function title(gd) {\n    return _(gd, 'Reset camera to last save');\n  },\n  attr: 'resetLastSave',\n  icon: Icons.movie,\n  click: handleCamera3d\n};\nfunction handleCamera3d(gd, ev) {\n  var button = ev.currentTarget;\n  var attr = button.getAttribute('data-attr');\n  var fullLayout = gd._fullLayout;\n  var sceneIds = fullLayout._subplots.gl3d;\n  var aobj = {};\n  for (var i = 0; i < sceneIds.length; i++) {\n    var sceneId = sceneIds[i];\n    var key = sceneId + '.camera';\n    var scene = fullLayout[sceneId]._scene;\n    if (attr === 'resetDefault') {\n      aobj[key] = null;\n    } else if (attr === 'resetLastSave') {\n      aobj[key] = Lib.extendDeep({}, scene.cameraInitial);\n    }\n  }\n  Registry.call('_guiRelayout', gd, aobj);\n}\nmodeBarButtons.hoverClosest3d = {\n  name: 'hoverClosest3d',\n  title: function title(gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: null,\n  toggle: true,\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: handleHover3d\n};\nfunction getNextHover3d(gd, ev) {\n  var button = ev.currentTarget;\n  var val = button._previousVal;\n  var fullLayout = gd._fullLayout;\n  var sceneIds = fullLayout._subplots.gl3d;\n  var axes = ['xaxis', 'yaxis', 'zaxis'];\n\n  // initialize 'current spike' object to be stored in the DOM\n  var currentSpikes = {};\n  var layoutUpdate = {};\n  if (val) {\n    layoutUpdate = val;\n    button._previousVal = null;\n  } else {\n    for (var i = 0; i < sceneIds.length; i++) {\n      var sceneId = sceneIds[i];\n      var sceneLayout = fullLayout[sceneId];\n      var hovermodeAStr = sceneId + '.hovermode';\n      currentSpikes[hovermodeAStr] = sceneLayout.hovermode;\n      layoutUpdate[hovermodeAStr] = false;\n\n      // copy all the current spike attrs\n      for (var j = 0; j < 3; j++) {\n        var axis = axes[j];\n        var spikeAStr = sceneId + '.' + axis + '.showspikes';\n        layoutUpdate[spikeAStr] = false;\n        currentSpikes[spikeAStr] = sceneLayout[axis].showspikes;\n      }\n    }\n    button._previousVal = currentSpikes;\n  }\n  return layoutUpdate;\n}\nfunction handleHover3d(gd, ev) {\n  var layoutUpdate = getNextHover3d(gd, ev);\n  Registry.call('_guiRelayout', gd, layoutUpdate);\n}\nmodeBarButtons.zoomInGeo = {\n  name: 'zoomInGeo',\n  title: function title(gd) {\n    return _(gd, 'Zoom in');\n  },\n  attr: 'zoom',\n  val: 'in',\n  icon: Icons.zoom_plus,\n  click: handleGeo\n};\nmodeBarButtons.zoomOutGeo = {\n  name: 'zoomOutGeo',\n  title: function title(gd) {\n    return _(gd, 'Zoom out');\n  },\n  attr: 'zoom',\n  val: 'out',\n  icon: Icons.zoom_minus,\n  click: handleGeo\n};\nmodeBarButtons.resetGeo = {\n  name: 'resetGeo',\n  title: function title(gd) {\n    return _(gd, 'Reset');\n  },\n  attr: 'reset',\n  val: null,\n  icon: Icons.autoscale,\n  click: handleGeo\n};\nmodeBarButtons.hoverClosestGeo = {\n  name: 'hoverClosestGeo',\n  title: function title(gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: null,\n  toggle: true,\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: toggleHover\n};\nfunction handleGeo(gd, ev) {\n  var button = ev.currentTarget;\n  var attr = button.getAttribute('data-attr');\n  var val = button.getAttribute('data-val') || true;\n  var fullLayout = gd._fullLayout;\n  var geoIds = fullLayout._subplots.geo;\n  for (var i = 0; i < geoIds.length; i++) {\n    var id = geoIds[i];\n    var geoLayout = fullLayout[id];\n    if (attr === 'zoom') {\n      var scale = geoLayout.projection.scale;\n      var newScale = val === 'in' ? 2 * scale : 0.5 * scale;\n      Registry.call('_guiRelayout', gd, id + '.projection.scale', newScale);\n    } else if (attr === 'reset') {\n      resetView(gd, 'geo');\n    }\n  }\n}\nmodeBarButtons.hoverClosestGl2d = {\n  name: 'hoverClosestGl2d',\n  title: function title(gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: null,\n  toggle: true,\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: toggleHover\n};\nmodeBarButtons.hoverClosestPie = {\n  name: 'hoverClosestPie',\n  title: function title(gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: 'closest',\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: toggleHover\n};\nfunction getNextHover(gd) {\n  var fullLayout = gd._fullLayout;\n  if (fullLayout.hovermode) return false;\n  if (fullLayout._has('cartesian')) {\n    return fullLayout._isHoriz ? 'y' : 'x';\n  }\n  return 'closest';\n}\nfunction toggleHover(gd) {\n  var newHover = getNextHover(gd);\n  Registry.call('_guiRelayout', gd, 'hovermode', newHover);\n}\n\n// buttons when more then one plot types are present\n\nmodeBarButtons.toggleHover = {\n  name: 'toggleHover',\n  title: function title(gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: null,\n  toggle: true,\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: function click(gd, ev) {\n    var layoutUpdate = getNextHover3d(gd, ev);\n    layoutUpdate.hovermode = getNextHover(gd);\n    Registry.call('_guiRelayout', gd, layoutUpdate);\n  }\n};\nmodeBarButtons.resetViews = {\n  name: 'resetViews',\n  title: function title(gd) {\n    return _(gd, 'Reset views');\n  },\n  icon: Icons.home,\n  click: function click(gd, ev) {\n    var button = ev.currentTarget;\n    button.setAttribute('data-attr', 'zoom');\n    button.setAttribute('data-val', 'reset');\n    handleCartesian(gd, ev);\n    button.setAttribute('data-attr', 'resetLastSave');\n    handleCamera3d(gd, ev);\n    resetView(gd, 'geo');\n    resetView(gd, 'mapbox');\n  }\n};\nmodeBarButtons.toggleSpikelines = {\n  name: 'toggleSpikelines',\n  title: function title(gd) {\n    return _(gd, 'Toggle Spike Lines');\n  },\n  icon: Icons.spikeline,\n  attr: '_cartesianSpikesEnabled',\n  val: 'on',\n  click: function click(gd) {\n    var fullLayout = gd._fullLayout;\n    fullLayout._cartesianSpikesEnabled = fullLayout._cartesianSpikesEnabled === 'on' ? 'off' : 'on';\n    var aobj = setSpikelineVisibility(gd);\n    Registry.call('_guiRelayout', gd, aobj);\n  }\n};\nfunction setSpikelineVisibility(gd) {\n  var fullLayout = gd._fullLayout;\n  var axList = axisIds.list(gd, null, true);\n  var aobj = {};\n  var ax, axName;\n  for (var i = 0; i < axList.length; i++) {\n    ax = axList[i];\n    axName = ax._name;\n    aobj[axName + '.showspikes'] = fullLayout._cartesianSpikesEnabled === 'on' ? true : ax._showSpikeInitial;\n  }\n  return aobj;\n}\nmodeBarButtons.resetViewMapbox = {\n  name: 'resetViewMapbox',\n  title: function title(gd) {\n    return _(gd, 'Reset view');\n  },\n  attr: 'reset',\n  icon: Icons.home,\n  click: function click(gd) {\n    resetView(gd, 'mapbox');\n  }\n};\nfunction resetView(gd, subplotType) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots[subplotType];\n  var aObj = {};\n  for (var i = 0; i < subplotIds.length; i++) {\n    var id = subplotIds[i];\n    var subplotObj = fullLayout[id]._subplot;\n    var viewInitial = subplotObj.viewInitial;\n    var viewKeys = Object.keys(viewInitial);\n    for (var j = 0; j < viewKeys.length; j++) {\n      var key = viewKeys[j];\n      aObj[id + '.' + key] = viewInitial[key];\n    }\n  }\n  Registry.call('_guiRelayout', gd, aObj);\n}","map":{"version":3,"names":["Registry","require","Plots","axisIds","Lib","Icons","_","modeBarButtons","module","exports","toImage","name","title","gd","opts","_context","toImageButtonOptions","format","icon","camera","click","notifier","isIE","forEach","key","call","then","filename","catch","sendDataToCloud","disk","zoom2d","attr","val","zoombox","handleCartesian","pan2d","pan","select2d","selectbox","lasso2d","lasso","zoomIn2d","zoom_plus","zoomOut2d","zoom_minus","autoScale2d","autoscale","resetScale2d","home","hoverClosestCartesian","tooltip_basic","gravity","hoverCompareCartesian","_fullLayout","_isHoriz","tooltip_compare","ev","button","currentTarget","astr","getAttribute","fullLayout","aobj","axList","list","allSpikesEnabled","ax","i","mag","r0","r1","axName","length","fixedrange","_name","_rangeInitial","undefined","rangeInitial","slice","_showSpikeInitial","rangeNow","r2l","range","rangeNew","l2r","_cartesianSpikesEnabled","setAttribute","showspikes","zoom3d","handleDrag3d","pan3d","orbitRotation","tableRotation","sceneIds","_subplots","gl3d","layoutUpdate","parts","split","val2d","dragmode","resetCameraDefault3d","handleCamera3d","resetCameraLastSave3d","movie","sceneId","scene","_scene","extendDeep","cameraInitial","hoverClosest3d","toggle","handleHover3d","getNextHover3d","_previousVal","axes","currentSpikes","sceneLayout","hovermodeAStr","hovermode","j","axis","spikeAStr","zoomInGeo","handleGeo","zoomOutGeo","resetGeo","hoverClosestGeo","toggleHover","geoIds","geo","id","geoLayout","scale","projection","newScale","resetView","hoverClosestGl2d","hoverClosestPie","getNextHover","_has","newHover","resetViews","toggleSpikelines","spikeline","setSpikelineVisibility","resetViewMapbox","subplotType","subplotIds","aObj","subplotObj","_subplot","viewInitial","viewKeys","Object","keys"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/components/modebar/buttons.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar Plots = require('../../plots/plots');\nvar axisIds = require('../../plots/cartesian/axis_ids');\nvar Lib = require('../../lib');\nvar Icons = require('../../../build/ploticon');\n\nvar _ = Lib._;\n\nvar modeBarButtons = module.exports = {};\n\n/**\n * ModeBar buttons configuration\n *\n * @param {string} name\n *      name / id of the buttons (for tracking)\n * @param {string} title\n *      text that appears while hovering over the button,\n *      enter null, false or '' for no hover text\n * @param {string} icon\n *      svg icon object associated with the button\n *      can be linked to Plotly.Icons to use the default plotly icons\n * @param {string} [gravity]\n *      icon positioning\n * @param {function} click\n *      click handler associated with the button, a function of\n *      'gd' (the main graph object) and\n *      'ev' (the event object)\n * @param {string} [attr]\n *      attribute associated with button,\n *      use this with 'val' to keep track of the state\n * @param {*} [val]\n *      initial 'attr' value, can be a function of gd\n * @param {boolean} [toggle]\n *      is the button a toggle button?\n */\n\nmodeBarButtons.toImage = {\n    name: 'toImage',\n    title: function(gd) {\n        var opts = gd._context.toImageButtonOptions || {};\n        var format = opts.format || 'png';\n        return format === 'png' ?\n            _(gd, 'Download plot as a png') : // legacy text\n            _(gd, 'Download plot'); // generic non-PNG text\n    },\n    icon: Icons.camera,\n    click: function(gd) {\n        var toImageButtonOptions = gd._context.toImageButtonOptions;\n        var opts = {format: toImageButtonOptions.format || 'png'};\n\n        Lib.notifier(_(gd, 'Taking snapshot - this may take a few seconds'), 'long');\n\n        if(opts.format !== 'svg' && Lib.isIE()) {\n            Lib.notifier(_(gd, 'IE only supports svg.  Changing format to svg.'), 'long');\n            opts.format = 'svg';\n        }\n\n        ['filename', 'width', 'height', 'scale'].forEach(function(key) {\n            if(toImageButtonOptions[key]) {\n                opts[key] = toImageButtonOptions[key];\n            }\n        });\n\n        Registry.call('downloadImage', gd, opts)\n          .then(function(filename) {\n              Lib.notifier(_(gd, 'Snapshot succeeded') + ' - ' + filename, 'long');\n          })\n          .catch(function() {\n              Lib.notifier(_(gd, 'Sorry, there was a problem downloading your snapshot!'), 'long');\n          });\n    }\n};\n\nmodeBarButtons.sendDataToCloud = {\n    name: 'sendDataToCloud',\n    title: function(gd) { return _(gd, 'Edit in Chart Studio'); },\n    icon: Icons.disk,\n    click: function(gd) {\n        Plots.sendDataToCloud(gd);\n    }\n};\n\nmodeBarButtons.zoom2d = {\n    name: 'zoom2d',\n    title: function(gd) { return _(gd, 'Zoom'); },\n    attr: 'dragmode',\n    val: 'zoom',\n    icon: Icons.zoombox,\n    click: handleCartesian\n};\n\nmodeBarButtons.pan2d = {\n    name: 'pan2d',\n    title: function(gd) { return _(gd, 'Pan'); },\n    attr: 'dragmode',\n    val: 'pan',\n    icon: Icons.pan,\n    click: handleCartesian\n};\n\nmodeBarButtons.select2d = {\n    name: 'select2d',\n    title: function(gd) { return _(gd, 'Box Select'); },\n    attr: 'dragmode',\n    val: 'select',\n    icon: Icons.selectbox,\n    click: handleCartesian\n};\n\nmodeBarButtons.lasso2d = {\n    name: 'lasso2d',\n    title: function(gd) { return _(gd, 'Lasso Select'); },\n    attr: 'dragmode',\n    val: 'lasso',\n    icon: Icons.lasso,\n    click: handleCartesian\n};\n\nmodeBarButtons.zoomIn2d = {\n    name: 'zoomIn2d',\n    title: function(gd) { return _(gd, 'Zoom in'); },\n    attr: 'zoom',\n    val: 'in',\n    icon: Icons.zoom_plus,\n    click: handleCartesian\n};\n\nmodeBarButtons.zoomOut2d = {\n    name: 'zoomOut2d',\n    title: function(gd) { return _(gd, 'Zoom out'); },\n    attr: 'zoom',\n    val: 'out',\n    icon: Icons.zoom_minus,\n    click: handleCartesian\n};\n\nmodeBarButtons.autoScale2d = {\n    name: 'autoScale2d',\n    title: function(gd) { return _(gd, 'Autoscale'); },\n    attr: 'zoom',\n    val: 'auto',\n    icon: Icons.autoscale,\n    click: handleCartesian\n};\n\nmodeBarButtons.resetScale2d = {\n    name: 'resetScale2d',\n    title: function(gd) { return _(gd, 'Reset axes'); },\n    attr: 'zoom',\n    val: 'reset',\n    icon: Icons.home,\n    click: handleCartesian\n};\n\nmodeBarButtons.hoverClosestCartesian = {\n    name: 'hoverClosestCartesian',\n    title: function(gd) { return _(gd, 'Show closest data on hover'); },\n    attr: 'hovermode',\n    val: 'closest',\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: handleCartesian\n};\n\nmodeBarButtons.hoverCompareCartesian = {\n    name: 'hoverCompareCartesian',\n    title: function(gd) { return _(gd, 'Compare data on hover'); },\n    attr: 'hovermode',\n    val: function(gd) {\n        return gd._fullLayout._isHoriz ? 'y' : 'x';\n    },\n    icon: Icons.tooltip_compare,\n    gravity: 'ne',\n    click: handleCartesian\n};\n\nfunction handleCartesian(gd, ev) {\n    var button = ev.currentTarget;\n    var astr = button.getAttribute('data-attr');\n    var val = button.getAttribute('data-val') || true;\n    var fullLayout = gd._fullLayout;\n    var aobj = {};\n    var axList = axisIds.list(gd, null, true);\n    var allSpikesEnabled = 'on';\n\n    var ax, i;\n\n    if(astr === 'zoom') {\n        var mag = (val === 'in') ? 0.5 : 2;\n        var r0 = (1 + mag) / 2;\n        var r1 = (1 - mag) / 2;\n        var axName;\n\n        for(i = 0; i < axList.length; i++) {\n            ax = axList[i];\n\n            if(!ax.fixedrange) {\n                axName = ax._name;\n                if(val === 'auto') aobj[axName + '.autorange'] = true;\n                else if(val === 'reset') {\n                    if(ax._rangeInitial === undefined) {\n                        aobj[axName + '.autorange'] = true;\n                    }\n                    else {\n                        var rangeInitial = ax._rangeInitial.slice();\n                        aobj[axName + '.range[0]'] = rangeInitial[0];\n                        aobj[axName + '.range[1]'] = rangeInitial[1];\n                    }\n                    if(ax._showSpikeInitial !== undefined) {\n                        aobj[axName + '.showspikes'] = ax._showSpikeInitial;\n                        if(allSpikesEnabled === 'on' && !ax._showSpikeInitial) {\n                            allSpikesEnabled = 'off';\n                        }\n                    }\n                }\n                else {\n                    var rangeNow = [\n                        ax.r2l(ax.range[0]),\n                        ax.r2l(ax.range[1]),\n                    ];\n\n                    var rangeNew = [\n                        r0 * rangeNow[0] + r1 * rangeNow[1],\n                        r0 * rangeNow[1] + r1 * rangeNow[0]\n                    ];\n\n                    aobj[axName + '.range[0]'] = ax.l2r(rangeNew[0]);\n                    aobj[axName + '.range[1]'] = ax.l2r(rangeNew[1]);\n                }\n            }\n        }\n        fullLayout._cartesianSpikesEnabled = allSpikesEnabled;\n    }\n    else {\n        // if ALL traces have orientation 'h', 'hovermode': 'x' otherwise: 'y'\n        if(astr === 'hovermode' && (val === 'x' || val === 'y')) {\n            val = fullLayout._isHoriz ? 'y' : 'x';\n            button.setAttribute('data-val', val);\n        } else if(astr === 'hovermode' && val === 'closest') {\n            for(i = 0; i < axList.length; i++) {\n                ax = axList[i];\n                if(allSpikesEnabled === 'on' && !ax.showspikes) {\n                    allSpikesEnabled = 'off';\n                }\n            }\n            fullLayout._cartesianSpikesEnabled = allSpikesEnabled;\n        }\n\n        aobj[astr] = val;\n    }\n\n    Registry.call('_guiRelayout', gd, aobj);\n}\n\nmodeBarButtons.zoom3d = {\n    name: 'zoom3d',\n    title: function(gd) { return _(gd, 'Zoom'); },\n    attr: 'scene.dragmode',\n    val: 'zoom',\n    icon: Icons.zoombox,\n    click: handleDrag3d\n};\n\nmodeBarButtons.pan3d = {\n    name: 'pan3d',\n    title: function(gd) { return _(gd, 'Pan'); },\n    attr: 'scene.dragmode',\n    val: 'pan',\n    icon: Icons.pan,\n    click: handleDrag3d\n};\n\nmodeBarButtons.orbitRotation = {\n    name: 'orbitRotation',\n    title: function(gd) { return _(gd, 'Orbital rotation'); },\n    attr: 'scene.dragmode',\n    val: 'orbit',\n    icon: Icons['3d_rotate'],\n    click: handleDrag3d\n};\n\nmodeBarButtons.tableRotation = {\n    name: 'tableRotation',\n    title: function(gd) { return _(gd, 'Turntable rotation'); },\n    attr: 'scene.dragmode',\n    val: 'turntable',\n    icon: Icons['z-axis'],\n    click: handleDrag3d\n};\n\nfunction handleDrag3d(gd, ev) {\n    var button = ev.currentTarget;\n    var attr = button.getAttribute('data-attr');\n    var val = button.getAttribute('data-val') || true;\n    var sceneIds = gd._fullLayout._subplots.gl3d;\n    var layoutUpdate = {};\n\n    var parts = attr.split('.');\n\n    for(var i = 0; i < sceneIds.length; i++) {\n        layoutUpdate[sceneIds[i] + '.' + parts[1]] = val;\n    }\n\n    // for multi-type subplots\n    var val2d = (val === 'pan') ? val : 'zoom';\n    layoutUpdate.dragmode = val2d;\n\n    Registry.call('_guiRelayout', gd, layoutUpdate);\n}\n\nmodeBarButtons.resetCameraDefault3d = {\n    name: 'resetCameraDefault3d',\n    title: function(gd) { return _(gd, 'Reset camera to default'); },\n    attr: 'resetDefault',\n    icon: Icons.home,\n    click: handleCamera3d\n};\n\nmodeBarButtons.resetCameraLastSave3d = {\n    name: 'resetCameraLastSave3d',\n    title: function(gd) { return _(gd, 'Reset camera to last save'); },\n    attr: 'resetLastSave',\n    icon: Icons.movie,\n    click: handleCamera3d\n};\n\nfunction handleCamera3d(gd, ev) {\n    var button = ev.currentTarget;\n    var attr = button.getAttribute('data-attr');\n    var fullLayout = gd._fullLayout;\n    var sceneIds = fullLayout._subplots.gl3d;\n    var aobj = {};\n\n    for(var i = 0; i < sceneIds.length; i++) {\n        var sceneId = sceneIds[i];\n        var key = sceneId + '.camera';\n        var scene = fullLayout[sceneId]._scene;\n\n        if(attr === 'resetDefault') {\n            aobj[key] = null;\n        }\n        else if(attr === 'resetLastSave') {\n            aobj[key] = Lib.extendDeep({}, scene.cameraInitial);\n        }\n    }\n\n    Registry.call('_guiRelayout', gd, aobj);\n}\n\nmodeBarButtons.hoverClosest3d = {\n    name: 'hoverClosest3d',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: null,\n    toggle: true,\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: handleHover3d\n};\n\nfunction getNextHover3d(gd, ev) {\n    var button = ev.currentTarget;\n    var val = button._previousVal;\n    var fullLayout = gd._fullLayout;\n    var sceneIds = fullLayout._subplots.gl3d;\n\n    var axes = ['xaxis', 'yaxis', 'zaxis'];\n\n    // initialize 'current spike' object to be stored in the DOM\n    var currentSpikes = {};\n    var layoutUpdate = {};\n\n    if(val) {\n        layoutUpdate = val;\n        button._previousVal = null;\n    }\n    else {\n        for(var i = 0; i < sceneIds.length; i++) {\n            var sceneId = sceneIds[i];\n            var sceneLayout = fullLayout[sceneId];\n\n            var hovermodeAStr = sceneId + '.hovermode';\n            currentSpikes[hovermodeAStr] = sceneLayout.hovermode;\n            layoutUpdate[hovermodeAStr] = false;\n\n            // copy all the current spike attrs\n            for(var j = 0; j < 3; j++) {\n                var axis = axes[j];\n                var spikeAStr = sceneId + '.' + axis + '.showspikes';\n                layoutUpdate[spikeAStr] = false;\n                currentSpikes[spikeAStr] = sceneLayout[axis].showspikes;\n            }\n        }\n\n        button._previousVal = currentSpikes;\n    }\n    return layoutUpdate;\n}\n\nfunction handleHover3d(gd, ev) {\n    var layoutUpdate = getNextHover3d(gd, ev);\n    Registry.call('_guiRelayout', gd, layoutUpdate);\n}\n\nmodeBarButtons.zoomInGeo = {\n    name: 'zoomInGeo',\n    title: function(gd) { return _(gd, 'Zoom in'); },\n    attr: 'zoom',\n    val: 'in',\n    icon: Icons.zoom_plus,\n    click: handleGeo\n};\n\nmodeBarButtons.zoomOutGeo = {\n    name: 'zoomOutGeo',\n    title: function(gd) { return _(gd, 'Zoom out'); },\n    attr: 'zoom',\n    val: 'out',\n    icon: Icons.zoom_minus,\n    click: handleGeo\n};\n\nmodeBarButtons.resetGeo = {\n    name: 'resetGeo',\n    title: function(gd) { return _(gd, 'Reset'); },\n    attr: 'reset',\n    val: null,\n    icon: Icons.autoscale,\n    click: handleGeo\n};\n\nmodeBarButtons.hoverClosestGeo = {\n    name: 'hoverClosestGeo',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: null,\n    toggle: true,\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: toggleHover\n};\n\nfunction handleGeo(gd, ev) {\n    var button = ev.currentTarget;\n    var attr = button.getAttribute('data-attr');\n    var val = button.getAttribute('data-val') || true;\n    var fullLayout = gd._fullLayout;\n    var geoIds = fullLayout._subplots.geo;\n\n    for(var i = 0; i < geoIds.length; i++) {\n        var id = geoIds[i];\n        var geoLayout = fullLayout[id];\n\n        if(attr === 'zoom') {\n            var scale = geoLayout.projection.scale;\n            var newScale = (val === 'in') ? 2 * scale : 0.5 * scale;\n\n            Registry.call('_guiRelayout', gd, id + '.projection.scale', newScale);\n        } else if(attr === 'reset') {\n            resetView(gd, 'geo');\n        }\n    }\n}\n\nmodeBarButtons.hoverClosestGl2d = {\n    name: 'hoverClosestGl2d',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: null,\n    toggle: true,\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: toggleHover\n};\n\nmodeBarButtons.hoverClosestPie = {\n    name: 'hoverClosestPie',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: 'closest',\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: toggleHover\n};\n\nfunction getNextHover(gd) {\n    var fullLayout = gd._fullLayout;\n\n    if(fullLayout.hovermode) return false;\n\n    if(fullLayout._has('cartesian')) {\n        return fullLayout._isHoriz ? 'y' : 'x';\n    }\n    return 'closest';\n}\n\nfunction toggleHover(gd) {\n    var newHover = getNextHover(gd);\n    Registry.call('_guiRelayout', gd, 'hovermode', newHover);\n}\n\n// buttons when more then one plot types are present\n\nmodeBarButtons.toggleHover = {\n    name: 'toggleHover',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: null,\n    toggle: true,\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: function(gd, ev) {\n        var layoutUpdate = getNextHover3d(gd, ev);\n        layoutUpdate.hovermode = getNextHover(gd);\n\n        Registry.call('_guiRelayout', gd, layoutUpdate);\n    }\n};\n\nmodeBarButtons.resetViews = {\n    name: 'resetViews',\n    title: function(gd) { return _(gd, 'Reset views'); },\n    icon: Icons.home,\n    click: function(gd, ev) {\n        var button = ev.currentTarget;\n\n        button.setAttribute('data-attr', 'zoom');\n        button.setAttribute('data-val', 'reset');\n        handleCartesian(gd, ev);\n\n        button.setAttribute('data-attr', 'resetLastSave');\n        handleCamera3d(gd, ev);\n\n        resetView(gd, 'geo');\n        resetView(gd, 'mapbox');\n    }\n};\n\nmodeBarButtons.toggleSpikelines = {\n    name: 'toggleSpikelines',\n    title: function(gd) { return _(gd, 'Toggle Spike Lines'); },\n    icon: Icons.spikeline,\n    attr: '_cartesianSpikesEnabled',\n    val: 'on',\n    click: function(gd) {\n        var fullLayout = gd._fullLayout;\n\n        fullLayout._cartesianSpikesEnabled = fullLayout._cartesianSpikesEnabled === 'on' ? 'off' : 'on';\n\n        var aobj = setSpikelineVisibility(gd);\n\n        Registry.call('_guiRelayout', gd, aobj);\n    }\n};\n\nfunction setSpikelineVisibility(gd) {\n    var fullLayout = gd._fullLayout;\n    var axList = axisIds.list(gd, null, true);\n    var aobj = {};\n\n    var ax, axName;\n\n    for(var i = 0; i < axList.length; i++) {\n        ax = axList[i];\n        axName = ax._name;\n        aobj[axName + '.showspikes'] = fullLayout._cartesianSpikesEnabled === 'on' ? true : ax._showSpikeInitial;\n    }\n\n    return aobj;\n}\n\nmodeBarButtons.resetViewMapbox = {\n    name: 'resetViewMapbox',\n    title: function(gd) { return _(gd, 'Reset view'); },\n    attr: 'reset',\n    icon: Icons.home,\n    click: function(gd) {\n        resetView(gd, 'mapbox');\n    }\n};\n\nfunction resetView(gd, subplotType) {\n    var fullLayout = gd._fullLayout;\n    var subplotIds = fullLayout._subplots[subplotType];\n    var aObj = {};\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var id = subplotIds[i];\n        var subplotObj = fullLayout[id]._subplot;\n        var viewInitial = subplotObj.viewInitial;\n        var viewKeys = Object.keys(viewInitial);\n\n        for(var j = 0; j < viewKeys.length; j++) {\n            var key = viewKeys[j];\n            aObj[id + '.' + key] = viewInitial[key];\n        }\n    }\n\n    Registry.call('_guiRelayout', gd, aObj);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
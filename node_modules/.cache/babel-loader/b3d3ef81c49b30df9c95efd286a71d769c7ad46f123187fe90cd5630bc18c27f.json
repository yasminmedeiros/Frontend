{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar toImage = require('../plot_api/to_image');\nvar Lib = require('../lib'); // for isIE\nvar fileSaver = require('./filesaver');\n\n/** Plotly.downloadImage\n *\n * @param {object | string | HTML div} gd\n *   can either be a data/layout/config object\n *   or an existing graph <div>\n *   or an id to an existing graph <div>\n * @param {object} opts (see ../plot_api/to_image)\n * @return {promise}\n */\nfunction downloadImage(gd, opts) {\n  var _gd;\n  if (!Lib.isPlainObject(gd)) _gd = Lib.getGraphDiv(gd);\n\n  // check for undefined opts\n  opts = opts || {};\n  // default to png\n  opts.format = opts.format || 'png';\n  return new Promise(function (resolve, reject) {\n    if (_gd && _gd._snapshotInProgress) {\n      reject(new Error('Snapshotting already in progress.'));\n    }\n\n    // see comments within svgtoimg for additional\n    //   discussion of problems with IE\n    //   can now draw to canvas, but CORS tainted canvas\n    //   does not allow toDataURL\n    //   svg format will work though\n    if (Lib.isIE() && opts.format !== 'svg') {\n      reject(new Error('Sorry IE does not support downloading from canvas. Try {format:\\'svg\\'} instead.'));\n    }\n    if (_gd) _gd._snapshotInProgress = true;\n    var promise = toImage(gd, opts);\n    var filename = opts.filename || gd.fn || 'newplot';\n    filename += '.' + opts.format;\n    promise.then(function (result) {\n      if (_gd) _gd._snapshotInProgress = false;\n      return fileSaver(result, filename);\n    }).then(function (name) {\n      resolve(name);\n    }).catch(function (err) {\n      if (_gd) _gd._snapshotInProgress = false;\n      reject(err);\n    });\n  });\n}\nmodule.exports = downloadImage;","map":{"version":3,"names":["toImage","require","Lib","fileSaver","downloadImage","gd","opts","_gd","isPlainObject","getGraphDiv","format","Promise","resolve","reject","_snapshotInProgress","Error","isIE","promise","filename","fn","then","result","name","catch","err","module","exports"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/snapshot/download.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar toImage = require('../plot_api/to_image');\nvar Lib = require('../lib'); // for isIE\nvar fileSaver = require('./filesaver');\n\n/** Plotly.downloadImage\n *\n * @param {object | string | HTML div} gd\n *   can either be a data/layout/config object\n *   or an existing graph <div>\n *   or an id to an existing graph <div>\n * @param {object} opts (see ../plot_api/to_image)\n * @return {promise}\n */\nfunction downloadImage(gd, opts) {\n    var _gd;\n    if(!Lib.isPlainObject(gd)) _gd = Lib.getGraphDiv(gd);\n\n    // check for undefined opts\n    opts = opts || {};\n    // default to png\n    opts.format = opts.format || 'png';\n\n    return new Promise(function(resolve, reject) {\n        if(_gd && _gd._snapshotInProgress) {\n            reject(new Error('Snapshotting already in progress.'));\n        }\n\n        // see comments within svgtoimg for additional\n        //   discussion of problems with IE\n        //   can now draw to canvas, but CORS tainted canvas\n        //   does not allow toDataURL\n        //   svg format will work though\n        if(Lib.isIE() && opts.format !== 'svg') {\n            reject(new Error('Sorry IE does not support downloading from canvas. Try {format:\\'svg\\'} instead.'));\n        }\n\n        if(_gd) _gd._snapshotInProgress = true;\n        var promise = toImage(gd, opts);\n\n        var filename = opts.filename || gd.fn || 'newplot';\n        filename += '.' + opts.format;\n\n        promise.then(function(result) {\n            if(_gd) _gd._snapshotInProgress = false;\n            return fileSaver(result, filename);\n        }).then(function(name) {\n            resolve(name);\n        }).catch(function(err) {\n            if(_gd) _gd._snapshotInProgress = false;\n            reject(err);\n        });\n    });\n}\n\nmodule.exports = downloadImage;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC7C,IAAIC,GAAG,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC7B,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,aAAa,CAACC,EAAE,EAAEC,IAAI,EAAE;EAC7B,IAAIC,GAAG;EACP,IAAG,CAACL,GAAG,CAACM,aAAa,CAACH,EAAE,CAAC,EAAEE,GAAG,GAAGL,GAAG,CAACO,WAAW,CAACJ,EAAE,CAAC;;EAEpD;EACAC,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EACjB;EACAA,IAAI,CAACI,MAAM,GAAGJ,IAAI,CAACI,MAAM,IAAI,KAAK;EAElC,OAAO,IAAIC,OAAO,CAAC,UAASC,OAAO,EAAEC,MAAM,EAAE;IACzC,IAAGN,GAAG,IAAIA,GAAG,CAACO,mBAAmB,EAAE;MAC/BD,MAAM,CAAC,IAAIE,KAAK,CAAC,mCAAmC,CAAC,CAAC;IAC1D;;IAEA;IACA;IACA;IACA;IACA;IACA,IAAGb,GAAG,CAACc,IAAI,EAAE,IAAIV,IAAI,CAACI,MAAM,KAAK,KAAK,EAAE;MACpCG,MAAM,CAAC,IAAIE,KAAK,CAAC,kFAAkF,CAAC,CAAC;IACzG;IAEA,IAAGR,GAAG,EAAEA,GAAG,CAACO,mBAAmB,GAAG,IAAI;IACtC,IAAIG,OAAO,GAAGjB,OAAO,CAACK,EAAE,EAAEC,IAAI,CAAC;IAE/B,IAAIY,QAAQ,GAAGZ,IAAI,CAACY,QAAQ,IAAIb,EAAE,CAACc,EAAE,IAAI,SAAS;IAClDD,QAAQ,IAAI,GAAG,GAAGZ,IAAI,CAACI,MAAM;IAE7BO,OAAO,CAACG,IAAI,CAAC,UAASC,MAAM,EAAE;MAC1B,IAAGd,GAAG,EAAEA,GAAG,CAACO,mBAAmB,GAAG,KAAK;MACvC,OAAOX,SAAS,CAACkB,MAAM,EAAEH,QAAQ,CAAC;IACtC,CAAC,CAAC,CAACE,IAAI,CAAC,UAASE,IAAI,EAAE;MACnBV,OAAO,CAACU,IAAI,CAAC;IACjB,CAAC,CAAC,CAACC,KAAK,CAAC,UAASC,GAAG,EAAE;MACnB,IAAGjB,GAAG,EAAEA,GAAG,CAACO,mBAAmB,GAAG,KAAK;MACvCD,MAAM,CAACW,GAAG,CAAC;IACf,CAAC,CAAC;EACN,CAAC,CAAC;AACN;AAEAC,MAAM,CAACC,OAAO,GAAGtB,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}
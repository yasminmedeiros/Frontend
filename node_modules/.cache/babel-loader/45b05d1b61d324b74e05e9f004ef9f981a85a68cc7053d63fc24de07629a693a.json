{"ast":null,"code":"// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n\n//\n// used strictly for logging the processing of the algorithm... only useful if you intend on\n// looking under the covers (for pretty UI's or debugging)\n//\n\nfunction BuildLog() {\n  var my;\n  var nextSegmentId = 0;\n  var curVert = false;\n  function push(type, data) {\n    my.list.push({\n      type: type,\n      data: data ? JSON.parse(JSON.stringify(data)) : void 0\n    });\n    return my;\n  }\n  my = {\n    list: [],\n    segmentId: function segmentId() {\n      return nextSegmentId++;\n    },\n    checkIntersection: function checkIntersection(seg1, seg2) {\n      return push('check', {\n        seg1: seg1,\n        seg2: seg2\n      });\n    },\n    segmentChop: function segmentChop(seg, end) {\n      push('div_seg', {\n        seg: seg,\n        pt: end\n      });\n      return push('chop', {\n        seg: seg,\n        pt: end\n      });\n    },\n    statusRemove: function statusRemove(seg) {\n      return push('pop_seg', {\n        seg: seg\n      });\n    },\n    segmentUpdate: function segmentUpdate(seg) {\n      return push('seg_update', {\n        seg: seg\n      });\n    },\n    segmentNew: function segmentNew(seg, primary) {\n      return push('new_seg', {\n        seg: seg,\n        primary: primary\n      });\n    },\n    segmentRemove: function segmentRemove(seg) {\n      return push('rem_seg', {\n        seg: seg\n      });\n    },\n    tempStatus: function tempStatus(seg, above, below) {\n      return push('temp_status', {\n        seg: seg,\n        above: above,\n        below: below\n      });\n    },\n    rewind: function rewind(seg) {\n      return push('rewind', {\n        seg: seg\n      });\n    },\n    status: function status(seg, above, below) {\n      return push('status', {\n        seg: seg,\n        above: above,\n        below: below\n      });\n    },\n    vert: function vert(x) {\n      if (x === curVert) return my;\n      curVert = x;\n      return push('vert', {\n        x: x\n      });\n    },\n    log: function log(data) {\n      if (typeof data !== 'string') data = JSON.stringify(data, false, '  ');\n      return push('log', {\n        txt: data\n      });\n    },\n    reset: function reset() {\n      return push('reset');\n    },\n    selected: function selected(segs) {\n      return push('selected', {\n        segs: segs\n      });\n    },\n    chainStart: function chainStart(seg) {\n      return push('chain_start', {\n        seg: seg\n      });\n    },\n    chainRemoveHead: function chainRemoveHead(index, pt) {\n      return push('chain_rem_head', {\n        index: index,\n        pt: pt\n      });\n    },\n    chainRemoveTail: function chainRemoveTail(index, pt) {\n      return push('chain_rem_tail', {\n        index: index,\n        pt: pt\n      });\n    },\n    chainNew: function chainNew(pt1, pt2) {\n      return push('chain_new', {\n        pt1: pt1,\n        pt2: pt2\n      });\n    },\n    chainMatch: function chainMatch(index) {\n      return push('chain_match', {\n        index: index\n      });\n    },\n    chainClose: function chainClose(index) {\n      return push('chain_close', {\n        index: index\n      });\n    },\n    chainAddHead: function chainAddHead(index, pt) {\n      return push('chain_add_head', {\n        index: index,\n        pt: pt\n      });\n    },\n    chainAddTail: function chainAddTail(index, pt) {\n      return push('chain_add_tail', {\n        index: index,\n        pt: pt\n      });\n    },\n    chainConnect: function chainConnect(index1, index2) {\n      return push('chain_con', {\n        index1: index1,\n        index2: index2\n      });\n    },\n    chainReverse: function chainReverse(index) {\n      return push('chain_rev', {\n        index: index\n      });\n    },\n    chainJoin: function chainJoin(index1, index2) {\n      return push('chain_join', {\n        index1: index1,\n        index2: index2\n      });\n    },\n    done: function done() {\n      return push('done');\n    }\n  };\n  return my;\n}\nmodule.exports = BuildLog;","map":{"version":3,"names":["BuildLog","my","nextSegmentId","curVert","push","type","data","list","JSON","parse","stringify","segmentId","checkIntersection","seg1","seg2","segmentChop","seg","end","pt","statusRemove","segmentUpdate","segmentNew","primary","segmentRemove","tempStatus","above","below","rewind","status","vert","x","log","txt","reset","selected","segs","chainStart","chainRemoveHead","index","chainRemoveTail","chainNew","pt1","pt2","chainMatch","chainClose","chainAddHead","chainAddTail","chainConnect","index1","index2","chainReverse","chainJoin","done","module","exports"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/polybooljs/lib/build-log.js"],"sourcesContent":["// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n\n//\n// used strictly for logging the processing of the algorithm... only useful if you intend on\n// looking under the covers (for pretty UI's or debugging)\n//\n\nfunction BuildLog(){\n\tvar my;\n\tvar nextSegmentId = 0;\n\tvar curVert = false;\n\n\tfunction push(type, data){\n\t\tmy.list.push({\n\t\t\ttype: type,\n\t\t\tdata: data ? JSON.parse(JSON.stringify(data)) : void 0\n\t\t});\n\t\treturn my;\n\t}\n\n\tmy = {\n\t\tlist: [],\n\t\tsegmentId: function(){\n\t\t\treturn nextSegmentId++;\n\t\t},\n\t\tcheckIntersection: function(seg1, seg2){\n\t\t\treturn push('check', { seg1: seg1, seg2: seg2 });\n\t\t},\n\t\tsegmentChop: function(seg, end){\n\t\t\tpush('div_seg', { seg: seg, pt: end });\n\t\t\treturn push('chop', { seg: seg, pt: end });\n\t\t},\n\t\tstatusRemove: function(seg){\n\t\t\treturn push('pop_seg', { seg: seg });\n\t\t},\n\t\tsegmentUpdate: function(seg){\n\t\t\treturn push('seg_update', { seg: seg });\n\t\t},\n\t\tsegmentNew: function(seg, primary){\n\t\t\treturn push('new_seg', { seg: seg, primary: primary });\n\t\t},\n\t\tsegmentRemove: function(seg){\n\t\t\treturn push('rem_seg', { seg: seg });\n\t\t},\n\t\ttempStatus: function(seg, above, below){\n\t\t\treturn push('temp_status', { seg: seg, above: above, below: below });\n\t\t},\n\t\trewind: function(seg){\n\t\t\treturn push('rewind', { seg: seg });\n\t\t},\n\t\tstatus: function(seg, above, below){\n\t\t\treturn push('status', { seg: seg, above: above, below: below });\n\t\t},\n\t\tvert: function(x){\n\t\t\tif (x === curVert)\n\t\t\t\treturn my;\n\t\t\tcurVert = x;\n\t\t\treturn push('vert', { x: x });\n\t\t},\n\t\tlog: function(data){\n\t\t\tif (typeof data !== 'string')\n\t\t\t\tdata = JSON.stringify(data, false, '  ');\n\t\t\treturn push('log', { txt: data });\n\t\t},\n\t\treset: function(){\n\t\t\treturn push('reset');\n\t\t},\n\t\tselected: function(segs){\n\t\t\treturn push('selected', { segs: segs });\n\t\t},\n\t\tchainStart: function(seg){\n\t\t\treturn push('chain_start', { seg: seg });\n\t\t},\n\t\tchainRemoveHead: function(index, pt){\n\t\t\treturn push('chain_rem_head', { index: index, pt: pt });\n\t\t},\n\t\tchainRemoveTail: function(index, pt){\n\t\t\treturn push('chain_rem_tail', { index: index, pt: pt });\n\t\t},\n\t\tchainNew: function(pt1, pt2){\n\t\t\treturn push('chain_new', { pt1: pt1, pt2: pt2 });\n\t\t},\n\t\tchainMatch: function(index){\n\t\t\treturn push('chain_match', { index: index });\n\t\t},\n\t\tchainClose: function(index){\n\t\t\treturn push('chain_close', { index: index });\n\t\t},\n\t\tchainAddHead: function(index, pt){\n\t\t\treturn push('chain_add_head', { index: index, pt: pt });\n\t\t},\n\t\tchainAddTail: function(index, pt){\n\t\t\treturn push('chain_add_tail', { index: index, pt: pt, });\n\t\t},\n\t\tchainConnect: function(index1, index2){\n\t\t\treturn push('chain_con', { index1: index1, index2: index2 });\n\t\t},\n\t\tchainReverse: function(index){\n\t\t\treturn push('chain_rev', { index: index });\n\t\t},\n\t\tchainJoin: function(index1, index2){\n\t\t\treturn push('chain_join', { index1: index1, index2: index2 });\n\t\t},\n\t\tdone: function(){\n\t\t\treturn push('done');\n\t\t}\n\t};\n\treturn my;\n}\n\nmodule.exports = BuildLog;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"var lerp = require('gl-vec3/lerp');\nvar recompose = require('mat4-recompose');\nvar decompose = require('mat4-decompose');\nvar determinant = require('gl-mat4/determinant');\nvar slerp = require('quat-slerp');\nvar state0 = state();\nvar state1 = state();\nvar tmp = state();\nmodule.exports = interpolate;\nfunction interpolate(out, start, end, alpha) {\n  if (determinant(start) === 0 || determinant(end) === 0) return false;\n\n  //decompose the start and end matrices into individual components\n  var r0 = decompose(start, state0.translate, state0.scale, state0.skew, state0.perspective, state0.quaternion);\n  var r1 = decompose(end, state1.translate, state1.scale, state1.skew, state1.perspective, state1.quaternion);\n  if (!r0 || !r1) return false;\n\n  //now lerp/slerp the start and end components into a temporary     lerp(tmptranslate, state0.translate, state1.translate, alpha)\n  lerp(tmp.translate, state0.translate, state1.translate, alpha);\n  lerp(tmp.skew, state0.skew, state1.skew, alpha);\n  lerp(tmp.scale, state0.scale, state1.scale, alpha);\n  lerp(tmp.perspective, state0.perspective, state1.perspective, alpha);\n  slerp(tmp.quaternion, state0.quaternion, state1.quaternion, alpha);\n\n  //and recompose into our 'out' matrix\n  recompose(out, tmp.translate, tmp.scale, tmp.skew, tmp.perspective, tmp.quaternion);\n  return true;\n}\nfunction state() {\n  return {\n    translate: vec3(),\n    scale: vec3(1),\n    skew: vec3(),\n    perspective: vec4(),\n    quaternion: vec4()\n  };\n}\nfunction vec3(n) {\n  return [n || 0, n || 0, n || 0];\n}\nfunction vec4() {\n  return [0, 0, 0, 1];\n}","map":{"version":3,"names":["lerp","require","recompose","decompose","determinant","slerp","state0","state","state1","tmp","module","exports","interpolate","out","start","end","alpha","r0","translate","scale","skew","perspective","quaternion","r1","vec3","vec4","n"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/mat4-interpolate/index.js"],"sourcesContent":["var lerp = require('gl-vec3/lerp')\n\nvar recompose = require('mat4-recompose')\nvar decompose = require('mat4-decompose')\nvar determinant = require('gl-mat4/determinant')\nvar slerp = require('quat-slerp')\n\nvar state0 = state()\nvar state1 = state()\nvar tmp = state()\n\nmodule.exports = interpolate\nfunction interpolate(out, start, end, alpha) {\n    if (determinant(start) === 0 || determinant(end) === 0)\n        return false\n\n    //decompose the start and end matrices into individual components\n    var r0 = decompose(start, state0.translate, state0.scale, state0.skew, state0.perspective, state0.quaternion)\n    var r1 = decompose(end, state1.translate, state1.scale, state1.skew, state1.perspective, state1.quaternion)\n    if (!r0 || !r1)\n        return false    \n\n\n    //now lerp/slerp the start and end components into a temporary     lerp(tmptranslate, state0.translate, state1.translate, alpha)\n    lerp(tmp.translate, state0.translate, state1.translate, alpha)\n    lerp(tmp.skew, state0.skew, state1.skew, alpha)\n    lerp(tmp.scale, state0.scale, state1.scale, alpha)\n    lerp(tmp.perspective, state0.perspective, state1.perspective, alpha)\n    slerp(tmp.quaternion, state0.quaternion, state1.quaternion, alpha)\n\n    //and recompose into our 'out' matrix\n    recompose(out, tmp.translate, tmp.scale, tmp.skew, tmp.perspective, tmp.quaternion)\n    return true\n}\n\nfunction state() {\n    return {\n        translate: vec3(),\n        scale: vec3(1),\n        skew: vec3(),\n        perspective: vec4(),\n        quaternion: vec4()\n    }\n}\n\nfunction vec3(n) {\n    return [n||0,n||0,n||0]\n}\n\nfunction vec4() {\n    return [0,0,0,1]\n}"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,cAAc,CAAC;AAElC,IAAIC,SAAS,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACzC,IAAIE,SAAS,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AACzC,IAAIG,WAAW,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAChD,IAAII,KAAK,GAAGJ,OAAO,CAAC,YAAY,CAAC;AAEjC,IAAIK,MAAM,GAAGC,KAAK,EAAE;AACpB,IAAIC,MAAM,GAAGD,KAAK,EAAE;AACpB,IAAIE,GAAG,GAAGF,KAAK,EAAE;AAEjBG,MAAM,CAACC,OAAO,GAAGC,WAAW;AAC5B,SAASA,WAAW,CAACC,GAAG,EAAEC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAE;EACzC,IAAIZ,WAAW,CAACU,KAAK,CAAC,KAAK,CAAC,IAAIV,WAAW,CAACW,GAAG,CAAC,KAAK,CAAC,EAClD,OAAO,KAAK;;EAEhB;EACA,IAAIE,EAAE,GAAGd,SAAS,CAACW,KAAK,EAAER,MAAM,CAACY,SAAS,EAAEZ,MAAM,CAACa,KAAK,EAAEb,MAAM,CAACc,IAAI,EAAEd,MAAM,CAACe,WAAW,EAAEf,MAAM,CAACgB,UAAU,CAAC;EAC7G,IAAIC,EAAE,GAAGpB,SAAS,CAACY,GAAG,EAAEP,MAAM,CAACU,SAAS,EAAEV,MAAM,CAACW,KAAK,EAAEX,MAAM,CAACY,IAAI,EAAEZ,MAAM,CAACa,WAAW,EAAEb,MAAM,CAACc,UAAU,CAAC;EAC3G,IAAI,CAACL,EAAE,IAAI,CAACM,EAAE,EACV,OAAO,KAAK;;EAGhB;EACAvB,IAAI,CAACS,GAAG,CAACS,SAAS,EAAEZ,MAAM,CAACY,SAAS,EAAEV,MAAM,CAACU,SAAS,EAAEF,KAAK,CAAC;EAC9DhB,IAAI,CAACS,GAAG,CAACW,IAAI,EAAEd,MAAM,CAACc,IAAI,EAAEZ,MAAM,CAACY,IAAI,EAAEJ,KAAK,CAAC;EAC/ChB,IAAI,CAACS,GAAG,CAACU,KAAK,EAAEb,MAAM,CAACa,KAAK,EAAEX,MAAM,CAACW,KAAK,EAAEH,KAAK,CAAC;EAClDhB,IAAI,CAACS,GAAG,CAACY,WAAW,EAAEf,MAAM,CAACe,WAAW,EAAEb,MAAM,CAACa,WAAW,EAAEL,KAAK,CAAC;EACpEX,KAAK,CAACI,GAAG,CAACa,UAAU,EAAEhB,MAAM,CAACgB,UAAU,EAAEd,MAAM,CAACc,UAAU,EAAEN,KAAK,CAAC;;EAElE;EACAd,SAAS,CAACW,GAAG,EAAEJ,GAAG,CAACS,SAAS,EAAET,GAAG,CAACU,KAAK,EAAEV,GAAG,CAACW,IAAI,EAAEX,GAAG,CAACY,WAAW,EAAEZ,GAAG,CAACa,UAAU,CAAC;EACnF,OAAO,IAAI;AACf;AAEA,SAASf,KAAK,GAAG;EACb,OAAO;IACHW,SAAS,EAAEM,IAAI,EAAE;IACjBL,KAAK,EAAEK,IAAI,CAAC,CAAC,CAAC;IACdJ,IAAI,EAAEI,IAAI,EAAE;IACZH,WAAW,EAAEI,IAAI,EAAE;IACnBH,UAAU,EAAEG,IAAI;EACpB,CAAC;AACL;AAEA,SAASD,IAAI,CAACE,CAAC,EAAE;EACb,OAAO,CAACA,CAAC,IAAE,CAAC,EAACA,CAAC,IAAE,CAAC,EAACA,CAAC,IAAE,CAAC,CAAC;AAC3B;AAEA,SAASD,IAAI,GAAG;EACZ,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;AACpB"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\n//This code is extracted from ndarray-sort\n//It is inlined here as a temporary workaround\nmodule.exports = wrapper;\nvar INSERT_SORT_CUTOFF = 32;\nfunction wrapper(data, n0) {\n  if (n0 <= 4 * INSERT_SORT_CUTOFF) {\n    insertionSort(0, n0 - 1, data);\n  } else {\n    quickSort(0, n0 - 1, data);\n  }\n}\nfunction insertionSort(left, right, data) {\n  var ptr = 2 * (left + 1);\n  for (var i = left + 1; i <= right; ++i) {\n    var a = data[ptr++];\n    var b = data[ptr++];\n    var j = i;\n    var jptr = ptr - 2;\n    while (j-- > left) {\n      var x = data[jptr - 2];\n      var y = data[jptr - 1];\n      if (x < a) {\n        break;\n      } else if (x === a && y < b) {\n        break;\n      }\n      data[jptr] = x;\n      data[jptr + 1] = y;\n      jptr -= 2;\n    }\n    data[jptr] = a;\n    data[jptr + 1] = b;\n  }\n}\nfunction swap(i, j, data) {\n  i *= 2;\n  j *= 2;\n  var x = data[i];\n  var y = data[i + 1];\n  data[i] = data[j];\n  data[i + 1] = data[j + 1];\n  data[j] = x;\n  data[j + 1] = y;\n}\nfunction move(i, j, data) {\n  i *= 2;\n  j *= 2;\n  data[i] = data[j];\n  data[i + 1] = data[j + 1];\n}\nfunction rotate(i, j, k, data) {\n  i *= 2;\n  j *= 2;\n  k *= 2;\n  var x = data[i];\n  var y = data[i + 1];\n  data[i] = data[j];\n  data[i + 1] = data[j + 1];\n  data[j] = data[k];\n  data[j + 1] = data[k + 1];\n  data[k] = x;\n  data[k + 1] = y;\n}\nfunction shufflePivot(i, j, px, py, data) {\n  i *= 2;\n  j *= 2;\n  data[i] = data[j];\n  data[j] = px;\n  data[i + 1] = data[j + 1];\n  data[j + 1] = py;\n}\nfunction compare(i, j, data) {\n  i *= 2;\n  j *= 2;\n  var x = data[i],\n    y = data[j];\n  if (x < y) {\n    return false;\n  } else if (x === y) {\n    return data[i + 1] > data[j + 1];\n  }\n  return true;\n}\nfunction comparePivot(i, y, b, data) {\n  i *= 2;\n  var x = data[i];\n  if (x < y) {\n    return true;\n  } else if (x === y) {\n    return data[i + 1] < b;\n  }\n  return false;\n}\nfunction quickSort(left, right, data) {\n  var sixth = (right - left + 1) / 6 | 0,\n    index1 = left + sixth,\n    index5 = right - sixth,\n    index3 = left + right >> 1,\n    index2 = index3 - sixth,\n    index4 = index3 + sixth,\n    el1 = index1,\n    el2 = index2,\n    el3 = index3,\n    el4 = index4,\n    el5 = index5,\n    less = left + 1,\n    great = right - 1,\n    tmp = 0;\n  if (compare(el1, el2, data)) {\n    tmp = el1;\n    el1 = el2;\n    el2 = tmp;\n  }\n  if (compare(el4, el5, data)) {\n    tmp = el4;\n    el4 = el5;\n    el5 = tmp;\n  }\n  if (compare(el1, el3, data)) {\n    tmp = el1;\n    el1 = el3;\n    el3 = tmp;\n  }\n  if (compare(el2, el3, data)) {\n    tmp = el2;\n    el2 = el3;\n    el3 = tmp;\n  }\n  if (compare(el1, el4, data)) {\n    tmp = el1;\n    el1 = el4;\n    el4 = tmp;\n  }\n  if (compare(el3, el4, data)) {\n    tmp = el3;\n    el3 = el4;\n    el4 = tmp;\n  }\n  if (compare(el2, el5, data)) {\n    tmp = el2;\n    el2 = el5;\n    el5 = tmp;\n  }\n  if (compare(el2, el3, data)) {\n    tmp = el2;\n    el2 = el3;\n    el3 = tmp;\n  }\n  if (compare(el4, el5, data)) {\n    tmp = el4;\n    el4 = el5;\n    el5 = tmp;\n  }\n  var pivot1X = data[2 * el2];\n  var pivot1Y = data[2 * el2 + 1];\n  var pivot2X = data[2 * el4];\n  var pivot2Y = data[2 * el4 + 1];\n  var ptr0 = 2 * el1;\n  var ptr2 = 2 * el3;\n  var ptr4 = 2 * el5;\n  var ptr5 = 2 * index1;\n  var ptr6 = 2 * index3;\n  var ptr7 = 2 * index5;\n  for (var i1 = 0; i1 < 2; ++i1) {\n    var x = data[ptr0 + i1];\n    var y = data[ptr2 + i1];\n    var z = data[ptr4 + i1];\n    data[ptr5 + i1] = x;\n    data[ptr6 + i1] = y;\n    data[ptr7 + i1] = z;\n  }\n  move(index2, left, data);\n  move(index4, right, data);\n  for (var k = less; k <= great; ++k) {\n    if (comparePivot(k, pivot1X, pivot1Y, data)) {\n      if (k !== less) {\n        swap(k, less, data);\n      }\n      ++less;\n    } else {\n      if (!comparePivot(k, pivot2X, pivot2Y, data)) {\n        while (true) {\n          if (!comparePivot(great, pivot2X, pivot2Y, data)) {\n            if (--great < k) {\n              break;\n            }\n            continue;\n          } else {\n            if (comparePivot(great, pivot1X, pivot1Y, data)) {\n              rotate(k, less, great, data);\n              ++less;\n              --great;\n            } else {\n              swap(k, great, data);\n              --great;\n            }\n            break;\n          }\n        }\n      }\n    }\n  }\n  shufflePivot(left, less - 1, pivot1X, pivot1Y, data);\n  shufflePivot(right, great + 1, pivot2X, pivot2Y, data);\n  if (less - 2 - left <= INSERT_SORT_CUTOFF) {\n    insertionSort(left, less - 2, data);\n  } else {\n    quickSort(left, less - 2, data);\n  }\n  if (right - (great + 2) <= INSERT_SORT_CUTOFF) {\n    insertionSort(great + 2, right, data);\n  } else {\n    quickSort(great + 2, right, data);\n  }\n  if (great - less <= INSERT_SORT_CUTOFF) {\n    insertionSort(less, great, data);\n  } else {\n    quickSort(less, great, data);\n  }\n}","map":{"version":3,"names":["module","exports","wrapper","INSERT_SORT_CUTOFF","data","n0","insertionSort","quickSort","left","right","ptr","i","a","b","j","jptr","x","y","swap","move","rotate","k","shufflePivot","px","py","compare","comparePivot","sixth","index1","index5","index3","index2","index4","el1","el2","el3","el4","el5","less","great","tmp","pivot1X","pivot1Y","pivot2X","pivot2Y","ptr0","ptr2","ptr4","ptr5","ptr6","ptr7","i1","z"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/box-intersect/lib/sort.js"],"sourcesContent":["'use strict';\n\n//This code is extracted from ndarray-sort\n//It is inlined here as a temporary workaround\n\nmodule.exports = wrapper;\n\nvar INSERT_SORT_CUTOFF = 32\n\nfunction wrapper(data, n0) {\n  if (n0 <= 4*INSERT_SORT_CUTOFF) {\n    insertionSort(0, n0 - 1, data);\n  } else {\n    quickSort(0, n0 - 1, data);\n  }\n}\n\nfunction insertionSort(left, right, data) {\n  var ptr = 2*(left+1)\n  for(var i=left+1; i<=right; ++i) {\n    var a = data[ptr++]\n    var b = data[ptr++]\n    var j = i\n    var jptr = ptr-2\n    while(j-- > left) {\n      var x = data[jptr-2]\n      var y = data[jptr-1]\n      if(x < a) {\n        break\n      } else if(x === a && y < b) {\n        break\n      }\n      data[jptr]   = x\n      data[jptr+1] = y\n      jptr -= 2\n    }\n    data[jptr]   = a\n    data[jptr+1] = b\n  }\n}\n\nfunction swap(i, j, data) {\n  i *= 2\n  j *= 2\n  var x = data[i]\n  var y = data[i+1]\n  data[i] = data[j]\n  data[i+1] = data[j+1]\n  data[j] = x\n  data[j+1] = y\n}\n\nfunction move(i, j, data) {\n  i *= 2\n  j *= 2\n  data[i] = data[j]\n  data[i+1] = data[j+1]\n}\n\nfunction rotate(i, j, k, data) {\n  i *= 2\n  j *= 2\n  k *= 2\n  var x = data[i]\n  var y = data[i+1]\n  data[i] = data[j]\n  data[i+1] = data[j+1]\n  data[j] = data[k]\n  data[j+1] = data[k+1]\n  data[k] = x\n  data[k+1] = y\n}\n\nfunction shufflePivot(i, j, px, py, data) {\n  i *= 2\n  j *= 2\n  data[i] = data[j]\n  data[j] = px\n  data[i+1] = data[j+1]\n  data[j+1] = py\n}\n\nfunction compare(i, j, data) {\n  i *= 2\n  j *= 2\n  var x = data[i],\n      y = data[j]\n  if(x < y) {\n    return false\n  } else if(x === y) {\n    return data[i+1] > data[j+1]\n  }\n  return true\n}\n\nfunction comparePivot(i, y, b, data) {\n  i *= 2\n  var x = data[i]\n  if(x < y) {\n    return true\n  } else if(x === y) {\n    return data[i+1] < b\n  }\n  return false\n}\n\nfunction quickSort(left, right, data) {\n  var sixth = (right - left + 1) / 6 | 0, \n      index1 = left + sixth, \n      index5 = right - sixth, \n      index3 = left + right >> 1, \n      index2 = index3 - sixth, \n      index4 = index3 + sixth, \n      el1 = index1, \n      el2 = index2, \n      el3 = index3, \n      el4 = index4, \n      el5 = index5, \n      less = left + 1, \n      great = right - 1, \n      tmp = 0\n  if(compare(el1, el2, data)) {\n    tmp = el1\n    el1 = el2\n    el2 = tmp\n  }\n  if(compare(el4, el5, data)) {\n    tmp = el4\n    el4 = el5\n    el5 = tmp\n  }\n  if(compare(el1, el3, data)) {\n    tmp = el1\n    el1 = el3\n    el3 = tmp\n  }\n  if(compare(el2, el3, data)) {\n    tmp = el2\n    el2 = el3\n    el3 = tmp\n  }\n  if(compare(el1, el4, data)) {\n    tmp = el1\n    el1 = el4\n    el4 = tmp\n  }\n  if(compare(el3, el4, data)) {\n    tmp = el3\n    el3 = el4\n    el4 = tmp\n  }\n  if(compare(el2, el5, data)) {\n    tmp = el2\n    el2 = el5\n    el5 = tmp\n  }\n  if(compare(el2, el3, data)) {\n    tmp = el2\n    el2 = el3\n    el3 = tmp\n  }\n  if(compare(el4, el5, data)) {\n    tmp = el4\n    el4 = el5\n    el5 = tmp\n  }\n\n  var pivot1X = data[2*el2]\n  var pivot1Y = data[2*el2+1]\n  var pivot2X = data[2*el4]\n  var pivot2Y = data[2*el4+1]\n\n  var ptr0 = 2 * el1;\n  var ptr2 = 2 * el3;\n  var ptr4 = 2 * el5;\n  var ptr5 = 2 * index1;\n  var ptr6 = 2 * index3;\n  var ptr7 = 2 * index5;\n  for (var i1 = 0; i1 < 2; ++i1) {\n    var x = data[ptr0+i1];\n    var y = data[ptr2+i1];\n    var z = data[ptr4+i1];\n    data[ptr5+i1] = x;\n    data[ptr6+i1] = y;\n    data[ptr7+i1] = z;\n  }\n\n  move(index2, left, data)\n  move(index4, right, data)\n  for (var k = less; k <= great; ++k) {\n    if (comparePivot(k, pivot1X, pivot1Y, data)) {\n      if (k !== less) {\n        swap(k, less, data)\n      }\n      ++less;\n    } else {\n      if (!comparePivot(k, pivot2X, pivot2Y, data)) {\n        while (true) {\n          if (!comparePivot(great, pivot2X, pivot2Y, data)) {\n            if (--great < k) {\n              break;\n            }\n            continue;\n          } else {\n            if (comparePivot(great, pivot1X, pivot1Y, data)) {\n              rotate(k, less, great, data)\n              ++less;\n              --great;\n            } else {\n              swap(k, great, data)\n              --great;\n            }\n            break;\n          }\n        }\n      }\n    }\n  }\n  shufflePivot(left, less-1, pivot1X, pivot1Y, data)\n  shufflePivot(right, great+1, pivot2X, pivot2Y, data)\n  if (less - 2 - left <= INSERT_SORT_CUTOFF) {\n    insertionSort(left, less - 2, data);\n  } else {\n    quickSort(left, less - 2, data);\n  }\n  if (right - (great + 2) <= INSERT_SORT_CUTOFF) {\n    insertionSort(great + 2, right, data);\n  } else {\n    quickSort(great + 2, right, data);\n  }\n  if (great - less <= INSERT_SORT_CUTOFF) {\n    insertionSort(less, great, data);\n  } else {\n    quickSort(less, great, data);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\nvar inCircle = require('robust-in-sphere')[4];\nvar bsearch = require('binary-search-bounds');\nmodule.exports = delaunayRefine;\nfunction testFlip(points, triangulation, stack, a, b, x) {\n  var y = triangulation.opposite(a, b);\n\n  //Test boundary edge\n  if (y < 0) {\n    return;\n  }\n\n  //Swap edge if order flipped\n  if (b < a) {\n    var tmp = a;\n    a = b;\n    b = tmp;\n    tmp = x;\n    x = y;\n    y = tmp;\n  }\n\n  //Test if edge is constrained\n  if (triangulation.isConstraint(a, b)) {\n    return;\n  }\n\n  //Test if edge is delaunay\n  if (inCircle(points[a], points[b], points[x], points[y]) < 0) {\n    stack.push(a, b);\n  }\n}\n\n//Assume edges are sorted lexicographically\nfunction delaunayRefine(points, triangulation) {\n  var stack = [];\n  var numPoints = points.length;\n  var stars = triangulation.stars;\n  for (var a = 0; a < numPoints; ++a) {\n    var star = stars[a];\n    for (var j = 1; j < star.length; j += 2) {\n      var b = star[j];\n\n      //If order is not consistent, then skip edge\n      if (b < a) {\n        continue;\n      }\n\n      //Check if edge is constrained\n      if (triangulation.isConstraint(a, b)) {\n        continue;\n      }\n\n      //Find opposite edge\n      var x = star[j - 1],\n        y = -1;\n      for (var k = 1; k < star.length; k += 2) {\n        if (star[k - 1] === b) {\n          y = star[k];\n          break;\n        }\n      }\n\n      //If this is a boundary edge, don't flip it\n      if (y < 0) {\n        continue;\n      }\n\n      //If edge is in circle, flip it\n      if (inCircle(points[a], points[b], points[x], points[y]) < 0) {\n        stack.push(a, b);\n      }\n    }\n  }\n  while (stack.length > 0) {\n    var b = stack.pop();\n    var a = stack.pop();\n\n    //Find opposite pairs\n    var x = -1,\n      y = -1;\n    var star = stars[a];\n    for (var i = 1; i < star.length; i += 2) {\n      var s = star[i - 1];\n      var t = star[i];\n      if (s === b) {\n        y = t;\n      } else if (t === b) {\n        x = s;\n      }\n    }\n\n    //If x/y are both valid then skip edge\n    if (x < 0 || y < 0) {\n      continue;\n    }\n\n    //If edge is now delaunay, then don't flip it\n    if (inCircle(points[a], points[b], points[x], points[y]) >= 0) {\n      continue;\n    }\n\n    //Flip the edge\n    triangulation.flip(a, b);\n\n    //Test flipping neighboring edges\n    testFlip(points, triangulation, stack, x, a, y);\n    testFlip(points, triangulation, stack, a, y, x);\n    testFlip(points, triangulation, stack, y, b, x);\n    testFlip(points, triangulation, stack, b, x, y);\n  }\n}","map":{"version":3,"names":["inCircle","require","bsearch","module","exports","delaunayRefine","testFlip","points","triangulation","stack","a","b","x","y","opposite","tmp","isConstraint","push","numPoints","length","stars","star","j","k","pop","i","s","t","flip"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/cdt2d/lib/delaunay.js"],"sourcesContent":["'use strict'\n\nvar inCircle = require('robust-in-sphere')[4]\nvar bsearch = require('binary-search-bounds')\n\nmodule.exports = delaunayRefine\n\nfunction testFlip(points, triangulation, stack, a, b, x) {\n  var y = triangulation.opposite(a, b)\n\n  //Test boundary edge\n  if(y < 0) {\n    return\n  }\n\n  //Swap edge if order flipped\n  if(b < a) {\n    var tmp = a\n    a = b\n    b = tmp\n    tmp = x\n    x = y\n    y = tmp\n  }\n\n  //Test if edge is constrained\n  if(triangulation.isConstraint(a, b)) {\n    return\n  }\n\n  //Test if edge is delaunay\n  if(inCircle(points[a], points[b], points[x], points[y]) < 0) {\n    stack.push(a, b)\n  }\n}\n\n//Assume edges are sorted lexicographically\nfunction delaunayRefine(points, triangulation) {\n  var stack = []\n\n  var numPoints = points.length\n  var stars = triangulation.stars\n  for(var a=0; a<numPoints; ++a) {\n    var star = stars[a]\n    for(var j=1; j<star.length; j+=2) {\n      var b = star[j]\n\n      //If order is not consistent, then skip edge\n      if(b < a) {\n        continue\n      }\n\n      //Check if edge is constrained\n      if(triangulation.isConstraint(a, b)) {\n        continue\n      }\n\n      //Find opposite edge\n      var x = star[j-1], y = -1\n      for(var k=1; k<star.length; k+=2) {\n        if(star[k-1] === b) {\n          y = star[k]\n          break\n        }\n      }\n\n      //If this is a boundary edge, don't flip it\n      if(y < 0) {\n        continue\n      }\n\n      //If edge is in circle, flip it\n      if(inCircle(points[a], points[b], points[x], points[y]) < 0) {\n        stack.push(a, b)\n      }\n    }\n  }\n\n  while(stack.length > 0) {\n    var b = stack.pop()\n    var a = stack.pop()\n\n    //Find opposite pairs\n    var x = -1, y = -1\n    var star = stars[a]\n    for(var i=1; i<star.length; i+=2) {\n      var s = star[i-1]\n      var t = star[i]\n      if(s === b) {\n        y = t\n      } else if(t === b) {\n        x = s\n      }\n    }\n\n    //If x/y are both valid then skip edge\n    if(x < 0 || y < 0) {\n      continue\n    }\n\n    //If edge is now delaunay, then don't flip it\n    if(inCircle(points[a], points[b], points[x], points[y]) >= 0) {\n      continue\n    }\n\n    //Flip the edge\n    triangulation.flip(a, b)\n\n    //Test flipping neighboring edges\n    testFlip(points, triangulation, stack, x, a, y)\n    testFlip(points, triangulation, stack, a, y, x)\n    testFlip(points, triangulation, stack, y, b, x)\n    testFlip(points, triangulation, stack, b, x, y)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
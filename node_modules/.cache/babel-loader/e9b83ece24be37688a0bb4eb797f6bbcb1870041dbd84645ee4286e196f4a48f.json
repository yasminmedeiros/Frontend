{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\nvar draw = require('./draw').draw;\nmodule.exports = function calcAutorange(gd) {\n  var fullLayout = gd._fullLayout;\n  var annotationList = Lib.filterVisible(fullLayout.annotations);\n  if (annotationList.length && gd._fullData.length) {\n    return Lib.syncOrAsync([draw, annAutorange], gd);\n  }\n};\nfunction annAutorange(gd) {\n  var fullLayout = gd._fullLayout;\n\n  // find the bounding boxes for each of these annotations'\n  // relative to their anchor points\n  // use the arrow and the text bg rectangle,\n  // as the whole anno may include hidden text in its bbox\n  Lib.filterVisible(fullLayout.annotations).forEach(function (ann) {\n    var xa = Axes.getFromId(gd, ann.xref);\n    var ya = Axes.getFromId(gd, ann.yref);\n    ann._extremes = {};\n    if (xa) calcAxisExpansion(ann, xa);\n    if (ya) calcAxisExpansion(ann, ya);\n  });\n}\nfunction calcAxisExpansion(ann, ax) {\n  var axId = ax._id;\n  var letter = axId.charAt(0);\n  var pos = ann[letter];\n  var apos = ann['a' + letter];\n  var ref = ann[letter + 'ref'];\n  var aref = ann['a' + letter + 'ref'];\n  var padplus = ann['_' + letter + 'padplus'];\n  var padminus = ann['_' + letter + 'padminus'];\n  var shift = {\n    x: 1,\n    y: -1\n  }[letter] * ann[letter + 'shift'];\n  var headSize = 3 * ann.arrowsize * ann.arrowwidth || 0;\n  var headPlus = headSize + shift;\n  var headMinus = headSize - shift;\n  var startHeadSize = 3 * ann.startarrowsize * ann.arrowwidth || 0;\n  var startHeadPlus = startHeadSize + shift;\n  var startHeadMinus = startHeadSize - shift;\n  var extremes;\n  if (aref === ref) {\n    // expand for the arrowhead (padded by arrowhead)\n    var extremeArrowHead = Axes.findExtremes(ax, [ax.r2c(pos)], {\n      ppadplus: headPlus,\n      ppadminus: headMinus\n    });\n    // again for the textbox (padded by textbox)\n    var extremeText = Axes.findExtremes(ax, [ax.r2c(apos)], {\n      ppadplus: Math.max(padplus, startHeadPlus),\n      ppadminus: Math.max(padminus, startHeadMinus)\n    });\n    extremes = {\n      min: [extremeArrowHead.min[0], extremeText.min[0]],\n      max: [extremeArrowHead.max[0], extremeText.max[0]]\n    };\n  } else {\n    startHeadPlus = apos ? startHeadPlus + apos : startHeadPlus;\n    startHeadMinus = apos ? startHeadMinus - apos : startHeadMinus;\n    extremes = Axes.findExtremes(ax, [ax.r2c(pos)], {\n      ppadplus: Math.max(padplus, headPlus, startHeadPlus),\n      ppadminus: Math.max(padminus, headMinus, startHeadMinus)\n    });\n  }\n  ann._extremes[axId] = extremes;\n}","map":{"version":3,"names":["Lib","require","Axes","draw","module","exports","calcAutorange","gd","fullLayout","_fullLayout","annotationList","filterVisible","annotations","length","_fullData","syncOrAsync","annAutorange","forEach","ann","xa","getFromId","xref","ya","yref","_extremes","calcAxisExpansion","ax","axId","_id","letter","charAt","pos","apos","ref","aref","padplus","padminus","shift","x","y","headSize","arrowsize","arrowwidth","headPlus","headMinus","startHeadSize","startarrowsize","startHeadPlus","startHeadMinus","extremes","extremeArrowHead","findExtremes","r2c","ppadplus","ppadminus","extremeText","Math","max","min"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/components/annotations/calc_autorange.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\n\nvar draw = require('./draw').draw;\n\n\nmodule.exports = function calcAutorange(gd) {\n    var fullLayout = gd._fullLayout;\n    var annotationList = Lib.filterVisible(fullLayout.annotations);\n\n    if(annotationList.length && gd._fullData.length) {\n        return Lib.syncOrAsync([draw, annAutorange], gd);\n    }\n};\n\nfunction annAutorange(gd) {\n    var fullLayout = gd._fullLayout;\n\n    // find the bounding boxes for each of these annotations'\n    // relative to their anchor points\n    // use the arrow and the text bg rectangle,\n    // as the whole anno may include hidden text in its bbox\n    Lib.filterVisible(fullLayout.annotations).forEach(function(ann) {\n        var xa = Axes.getFromId(gd, ann.xref);\n        var ya = Axes.getFromId(gd, ann.yref);\n\n        ann._extremes = {};\n        if(xa) calcAxisExpansion(ann, xa);\n        if(ya) calcAxisExpansion(ann, ya);\n    });\n}\n\nfunction calcAxisExpansion(ann, ax) {\n    var axId = ax._id;\n    var letter = axId.charAt(0);\n    var pos = ann[letter];\n    var apos = ann['a' + letter];\n    var ref = ann[letter + 'ref'];\n    var aref = ann['a' + letter + 'ref'];\n    var padplus = ann['_' + letter + 'padplus'];\n    var padminus = ann['_' + letter + 'padminus'];\n    var shift = {x: 1, y: -1}[letter] * ann[letter + 'shift'];\n    var headSize = 3 * ann.arrowsize * ann.arrowwidth || 0;\n    var headPlus = headSize + shift;\n    var headMinus = headSize - shift;\n    var startHeadSize = 3 * ann.startarrowsize * ann.arrowwidth || 0;\n    var startHeadPlus = startHeadSize + shift;\n    var startHeadMinus = startHeadSize - shift;\n    var extremes;\n\n    if(aref === ref) {\n        // expand for the arrowhead (padded by arrowhead)\n        var extremeArrowHead = Axes.findExtremes(ax, [ax.r2c(pos)], {\n            ppadplus: headPlus,\n            ppadminus: headMinus\n        });\n        // again for the textbox (padded by textbox)\n        var extremeText = Axes.findExtremes(ax, [ax.r2c(apos)], {\n            ppadplus: Math.max(padplus, startHeadPlus),\n            ppadminus: Math.max(padminus, startHeadMinus)\n        });\n        extremes = {\n            min: [extremeArrowHead.min[0], extremeText.min[0]],\n            max: [extremeArrowHead.max[0], extremeText.max[0]]\n        };\n    } else {\n        startHeadPlus = apos ? startHeadPlus + apos : startHeadPlus;\n        startHeadMinus = apos ? startHeadMinus - apos : startHeadMinus;\n        extremes = Axes.findExtremes(ax, [ax.r2c(pos)], {\n            ppadplus: Math.max(padplus, headPlus, startHeadPlus),\n            ppadminus: Math.max(padminus, headMinus, startHeadMinus)\n        });\n    }\n\n    ann._extremes[axId] = extremes;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
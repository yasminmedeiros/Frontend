{"ast":null,"code":"var sprintf = require('sprintf-js').sprintf;\nvar glConstants = require('gl-constants/lookup');\nvar shaderName = require('glsl-shader-name');\nvar addLineNumbers = require('add-line-numbers');\nmodule.exports = formatCompilerError;\nfunction formatCompilerError(errLog, src, type) {\n  \"use strict\";\n\n  var name = shaderName(src) || 'of unknown name (see npm glsl-shader-name)';\n  var typeName = 'unknown type';\n  if (type !== undefined) {\n    typeName = type === glConstants.FRAGMENT_SHADER ? 'fragment' : 'vertex';\n  }\n  var longForm = sprintf('Error compiling %s shader %s:\\n', typeName, name);\n  var shortForm = sprintf(\"%s%s\", longForm, errLog);\n  var errorStrings = errLog.split('\\n');\n  var errors = {};\n  for (var i = 0; i < errorStrings.length; i++) {\n    var errorString = errorStrings[i];\n    if (errorString === '' || errorString === \"\\0\") continue;\n    var lineNo = parseInt(errorString.split(':')[2]);\n    if (isNaN(lineNo)) {\n      throw new Error(sprintf('Could not parse error: %s', errorString));\n    }\n    errors[lineNo] = errorString;\n  }\n  var lines = addLineNumbers(src).split('\\n');\n  for (var i = 0; i < lines.length; i++) {\n    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) continue;\n    var line = lines[i];\n    longForm += line + '\\n';\n    if (errors[i + 1]) {\n      var e = errors[i + 1];\n      e = e.substr(e.split(':', 3).join(':').length + 1).trim();\n      longForm += sprintf('^^^ %s\\n\\n', e);\n    }\n  }\n  return {\n    long: longForm.trim(),\n    short: shortForm.trim()\n  };\n}","map":{"version":3,"names":["sprintf","require","glConstants","shaderName","addLineNumbers","module","exports","formatCompilerError","errLog","src","type","name","typeName","undefined","FRAGMENT_SHADER","longForm","shortForm","errorStrings","split","errors","i","length","errorString","lineNo","parseInt","isNaN","Error","lines","line","e","substr","join","trim","long","short"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/gl-format-compiler-error/index.js"],"sourcesContent":["\nvar sprintf = require('sprintf-js').sprintf;\nvar glConstants = require('gl-constants/lookup');\nvar shaderName = require('glsl-shader-name');\nvar addLineNumbers = require('add-line-numbers');\n\nmodule.exports = formatCompilerError;\n\nfunction formatCompilerError(errLog, src, type) {\n    \"use strict\";\n\n    var name = shaderName(src) || 'of unknown name (see npm glsl-shader-name)';\n\n    var typeName = 'unknown type';\n    if (type !== undefined) {\n        typeName = type === glConstants.FRAGMENT_SHADER ? 'fragment' : 'vertex'\n    }\n\n    var longForm = sprintf('Error compiling %s shader %s:\\n', typeName, name);\n    var shortForm = sprintf(\"%s%s\", longForm, errLog);\n\n    var errorStrings = errLog.split('\\n');\n    var errors = {};\n\n    for (var i = 0; i < errorStrings.length; i++) {\n        var errorString = errorStrings[i];\n        if (errorString === '' || errorString === \"\\0\") continue;\n        var lineNo = parseInt(errorString.split(':')[2]);\n        if (isNaN(lineNo)) {\n            throw new Error(sprintf('Could not parse error: %s', errorString));\n        }\n        errors[lineNo] = errorString;\n    }\n\n    var lines = addLineNumbers(src).split('\\n');\n\n    for (var i = 0; i < lines.length; i++) {\n        if (!errors[i+3] && !errors[i+2] && !errors[i+1]) continue;\n        var line = lines[i];\n        longForm += line + '\\n';\n        if (errors[i+1]) {\n            var e = errors[i+1];\n            e = e.substr(e.split(':', 3).join(':').length + 1).trim();\n            longForm += sprintf('^^^ %s\\n\\n', e);\n        }\n    }\n\n    return {\n        long: longForm.trim(),\n        short: shortForm.trim()\n    };\n}\n\n"],"mappings":"AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAY,CAAC,CAACD,OAAO;AAC3C,IAAIE,WAAW,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAChD,IAAIE,UAAU,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC5C,IAAIG,cAAc,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAEhDI,MAAM,CAACC,OAAO,GAAGC,mBAAmB;AAEpC,SAASA,mBAAmB,CAACC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE;EAC5C,YAAY;;EAEZ,IAAIC,IAAI,GAAGR,UAAU,CAACM,GAAG,CAAC,IAAI,4CAA4C;EAE1E,IAAIG,QAAQ,GAAG,cAAc;EAC7B,IAAIF,IAAI,KAAKG,SAAS,EAAE;IACpBD,QAAQ,GAAGF,IAAI,KAAKR,WAAW,CAACY,eAAe,GAAG,UAAU,GAAG,QAAQ;EAC3E;EAEA,IAAIC,QAAQ,GAAGf,OAAO,CAAC,iCAAiC,EAAEY,QAAQ,EAAED,IAAI,CAAC;EACzE,IAAIK,SAAS,GAAGhB,OAAO,CAAC,MAAM,EAAEe,QAAQ,EAAEP,MAAM,CAAC;EAEjD,IAAIS,YAAY,GAAGT,MAAM,CAACU,KAAK,CAAC,IAAI,CAAC;EACrC,IAAIC,MAAM,GAAG,CAAC,CAAC;EAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,YAAY,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IAC1C,IAAIE,WAAW,GAAGL,YAAY,CAACG,CAAC,CAAC;IACjC,IAAIE,WAAW,KAAK,EAAE,IAAIA,WAAW,KAAK,IAAI,EAAE;IAChD,IAAIC,MAAM,GAAGC,QAAQ,CAACF,WAAW,CAACJ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,IAAIO,KAAK,CAACF,MAAM,CAAC,EAAE;MACf,MAAM,IAAIG,KAAK,CAAC1B,OAAO,CAAC,2BAA2B,EAAEsB,WAAW,CAAC,CAAC;IACtE;IACAH,MAAM,CAACI,MAAM,CAAC,GAAGD,WAAW;EAChC;EAEA,IAAIK,KAAK,GAAGvB,cAAc,CAACK,GAAG,CAAC,CAACS,KAAK,CAAC,IAAI,CAAC;EAE3C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,KAAK,CAACN,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,IAAI,CAACD,MAAM,CAACC,CAAC,GAAC,CAAC,CAAC,IAAI,CAACD,MAAM,CAACC,CAAC,GAAC,CAAC,CAAC,IAAI,CAACD,MAAM,CAACC,CAAC,GAAC,CAAC,CAAC,EAAE;IAClD,IAAIQ,IAAI,GAAGD,KAAK,CAACP,CAAC,CAAC;IACnBL,QAAQ,IAAIa,IAAI,GAAG,IAAI;IACvB,IAAIT,MAAM,CAACC,CAAC,GAAC,CAAC,CAAC,EAAE;MACb,IAAIS,CAAC,GAAGV,MAAM,CAACC,CAAC,GAAC,CAAC,CAAC;MACnBS,CAAC,GAAGA,CAAC,CAACC,MAAM,CAACD,CAAC,CAACX,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAACa,IAAI,CAAC,GAAG,CAAC,CAACV,MAAM,GAAG,CAAC,CAAC,CAACW,IAAI,EAAE;MACzDjB,QAAQ,IAAIf,OAAO,CAAC,YAAY,EAAE6B,CAAC,CAAC;IACxC;EACJ;EAEA,OAAO;IACHI,IAAI,EAAElB,QAAQ,CAACiB,IAAI,EAAE;IACrBE,KAAK,EAAElB,SAAS,CAACgB,IAAI;EACzB,CAAC;AACL"},"metadata":{},"sourceType":"script","externalDependencies":[]}
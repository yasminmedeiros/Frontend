{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar tinycolor = require('tinycolor2');\nvar supportsPassive = require('has-passive-events');\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar svgTextUtils = require('../../lib/svg_text_utils');\nvar Color = require('../../components/color');\nvar Drawing = require('../../components/drawing');\nvar Fx = require('../../components/fx');\nvar Axes = require('./axes');\nvar setCursor = require('../../lib/setcursor');\nvar dragElement = require('../../components/dragelement');\nvar FROM_TL = require('../../constants/alignment').FROM_TL;\nvar clearGlCanvases = require('../../lib/clear_gl_canvases');\nvar redrawReglTraces = require('../../plot_api/subroutines').redrawReglTraces;\nvar Plots = require('../plots');\nvar getFromId = require('./axis_ids').getFromId;\nvar prepSelect = require('./select').prepSelect;\nvar clearSelect = require('./select').clearSelect;\nvar selectOnClick = require('./select').selectOnClick;\nvar scaleZoom = require('./scale_zoom');\nvar constants = require('./constants');\nvar MINDRAG = constants.MINDRAG;\nvar MINZOOM = constants.MINZOOM;\n\n// flag for showing \"doubleclick to zoom out\" only at the beginning\nvar SHOWZOOMOUTTIP = true;\n\n// dragBox: create an element to drag one or more axis ends\n// inputs:\n//      plotinfo - which subplot are we making dragboxes on?\n//      x,y,w,h - left, top, width, height of the box\n//      ns - how does this drag the vertical axis?\n//          'n' - top only\n//          's' - bottom only\n//          'ns' - top and bottom together, difference unchanged\n//      ew - same for horizontal axis\nfunction makeDragBox(gd, plotinfo, x, y, w, h, ns, ew) {\n  // mouseDown stores ms of first mousedown event in the last\n  // DBLCLICKDELAY ms on the drag bars\n  // numClicks stores how many mousedowns have been seen\n  // within DBLCLICKDELAY so we can check for click or doubleclick events\n  // dragged stores whether a drag has occurred, so we don't have to\n  // redraw unnecessarily, ie if no move bigger than MINDRAG or MINZOOM px\n  var zoomlayer = gd._fullLayout._zoomlayer;\n  var isMainDrag = ns + ew === 'nsew';\n  var singleEnd = (ns + ew).length === 1;\n\n  // main subplot x and y (i.e. found in plotinfo - the main ones)\n  var xa0, ya0;\n  // {ax._id: ax} hash objects\n  var xaHash, yaHash;\n  // xaHash/yaHash values (arrays)\n  var xaxes, yaxes;\n  // main axis offsets\n  var xs, ys;\n  // main axis lengths\n  var pw, ph;\n  // contains keys 'xaHash', 'yaHash', 'xaxes', and 'yaxes'\n  // which are the x/y {ax._id: ax} hash objects and their values\n  // for linked axis relative to this subplot\n  var links;\n  // set to ew/ns val when active, set to '' when inactive\n  var xActive, yActive;\n  // are all axes in this subplot are fixed?\n  var allFixedRanges;\n  // is subplot constrained?\n  var isSubplotConstrained;\n  // do we need to edit x/y ranges?\n  var editX, editY;\n  // graph-wide optimization flags\n  var hasScatterGl, hasSplom, hasSVG;\n  // collected changes to be made to the plot by relayout at the end\n  var updates;\n  function recomputeAxisLists() {\n    xa0 = plotinfo.xaxis;\n    ya0 = plotinfo.yaxis;\n    pw = xa0._length;\n    ph = ya0._length;\n    xs = xa0._offset;\n    ys = ya0._offset;\n    xaHash = {};\n    xaHash[xa0._id] = xa0;\n    yaHash = {};\n    yaHash[ya0._id] = ya0;\n\n    // if we're dragging two axes at once, also drag overlays\n    if (ns && ew) {\n      var overlays = plotinfo.overlays;\n      for (var i = 0; i < overlays.length; i++) {\n        var xa = overlays[i].xaxis;\n        xaHash[xa._id] = xa;\n        var ya = overlays[i].yaxis;\n        yaHash[ya._id] = ya;\n      }\n    }\n    xaxes = hashValues(xaHash);\n    yaxes = hashValues(yaHash);\n    xActive = isDirectionActive(xaxes, ew);\n    yActive = isDirectionActive(yaxes, ns);\n    allFixedRanges = !yActive && !xActive;\n    links = calcLinks(gd, xaHash, yaHash);\n    isSubplotConstrained = links.isSubplotConstrained;\n    editX = ew || isSubplotConstrained;\n    editY = ns || isSubplotConstrained;\n    var fullLayout = gd._fullLayout;\n    hasScatterGl = fullLayout._has('scattergl');\n    hasSplom = fullLayout._has('splom');\n    hasSVG = fullLayout._has('svg');\n  }\n  recomputeAxisLists();\n  var cursor = getDragCursor(yActive + xActive, gd._fullLayout.dragmode, isMainDrag);\n  var dragger = makeRectDragger(plotinfo, ns + ew + 'drag', cursor, x, y, w, h);\n\n  // still need to make the element if the axes are disabled\n  // but nuke its events (except for maindrag which needs them for hover)\n  // and stop there\n  if (allFixedRanges && !isMainDrag) {\n    dragger.onmousedown = null;\n    dragger.style.pointerEvents = 'none';\n    return dragger;\n  }\n  var dragOptions = {\n    element: dragger,\n    gd: gd,\n    plotinfo: plotinfo\n  };\n  dragOptions.prepFn = function (e, startX, startY) {\n    var dragModePrev = dragOptions.dragmode;\n    var dragModeNow = gd._fullLayout.dragmode;\n    if (dragModeNow !== dragModePrev) {\n      dragOptions.dragmode = dragModeNow;\n    }\n    recomputeAxisLists();\n    if (!allFixedRanges) {\n      if (isMainDrag) {\n        // main dragger handles all drag modes, and changes\n        // to pan (or to zoom if it already is pan) on shift\n        if (e.shiftKey) {\n          if (dragModeNow === 'pan') dragModeNow = 'zoom';else if (!isSelectOrLasso(dragModeNow)) dragModeNow = 'pan';\n        } else if (e.ctrlKey) {\n          dragModeNow = 'pan';\n        }\n      }\n      // all other draggers just pan\n      else dragModeNow = 'pan';\n    }\n    if (dragModeNow === 'lasso') dragOptions.minDrag = 1;else dragOptions.minDrag = undefined;\n    if (isSelectOrLasso(dragModeNow)) {\n      dragOptions.xaxes = xaxes;\n      dragOptions.yaxes = yaxes;\n      // this attaches moveFn, clickFn, doneFn on dragOptions\n      prepSelect(e, startX, startY, dragOptions, dragModeNow);\n    } else {\n      dragOptions.clickFn = clickFn;\n      if (isSelectOrLasso(dragModePrev)) {\n        // TODO Fix potential bug\n        // Note: clearing / resetting selection state only happens, when user\n        // triggers at least one interaction in pan/zoom mode. Otherwise, the\n        // select/lasso outlines are deleted (in plots.js.cleanPlot) but the selection\n        // cache isn't cleared. So when the user switches back to select/lasso and\n        // 'adds to a selection' with Shift, the \"old\", seemingly removed outlines\n        // are redrawn again because the selection cache still holds their coordinates.\n        // However, this isn't easily solved, since plots.js would need\n        // to have a reference to the dragOptions object (which holds the\n        // selection cache).\n        clearAndResetSelect();\n      }\n      if (!allFixedRanges) {\n        if (dragModeNow === 'zoom') {\n          dragOptions.moveFn = zoomMove;\n          dragOptions.doneFn = zoomDone;\n\n          // zoomMove takes care of the threshold, but we need to\n          // minimize this so that constrained zoom boxes will flip\n          // orientation at the right place\n          dragOptions.minDrag = 1;\n          zoomPrep(e, startX, startY);\n        } else if (dragModeNow === 'pan') {\n          dragOptions.moveFn = plotDrag;\n          dragOptions.doneFn = dragTail;\n        }\n      }\n    }\n  };\n  function clearAndResetSelect() {\n    // clear selection polygon cache (if any)\n    dragOptions.plotinfo.selection = false;\n    // clear selection outlines\n    clearSelect(zoomlayer);\n  }\n  function clickFn(numClicks, evt) {\n    var clickmode = gd._fullLayout.clickmode;\n    removeZoombox(gd);\n    if (numClicks === 2 && !singleEnd) doubleClick();\n    if (isMainDrag) {\n      if (clickmode.indexOf('select') > -1) {\n        selectOnClick(evt, gd, xaxes, yaxes, plotinfo.id, dragOptions);\n      }\n      if (clickmode.indexOf('event') > -1) {\n        Fx.click(gd, evt, plotinfo.id);\n      }\n    } else if (numClicks === 1 && singleEnd) {\n      var ax = ns ? ya0 : xa0;\n      var end = ns === 's' || ew === 'w' ? 0 : 1;\n      var attrStr = ax._name + '.range[' + end + ']';\n      var initialText = getEndText(ax, end);\n      var hAlign = 'left';\n      var vAlign = 'middle';\n      if (ax.fixedrange) return;\n      if (ns) {\n        vAlign = ns === 'n' ? 'top' : 'bottom';\n        if (ax.side === 'right') hAlign = 'right';\n      } else if (ew === 'e') hAlign = 'right';\n      if (gd._context.showAxisRangeEntryBoxes) {\n        d3.select(dragger).call(svgTextUtils.makeEditable, {\n          gd: gd,\n          immediate: true,\n          background: gd._fullLayout.paper_bgcolor,\n          text: String(initialText),\n          fill: ax.tickfont ? ax.tickfont.color : '#444',\n          horizontalAlign: hAlign,\n          verticalAlign: vAlign\n        }).on('edit', function (text) {\n          var v = ax.d2r(text);\n          if (v !== undefined) {\n            Registry.call('_guiRelayout', gd, attrStr, v);\n          }\n        });\n      }\n    }\n  }\n  dragElement.init(dragOptions);\n  var x0, y0, box, lum, path0, dimmed, zoomMode, zb, corners;\n\n  // zoom takes over minDrag, so it also has to take over gd._dragged\n  var zoomDragged;\n  function zoomPrep(e, startX, startY) {\n    var dragBBox = dragger.getBoundingClientRect();\n    x0 = startX - dragBBox.left;\n    y0 = startY - dragBBox.top;\n    box = {\n      l: x0,\n      r: x0,\n      w: 0,\n      t: y0,\n      b: y0,\n      h: 0\n    };\n    lum = gd._hmpixcount ? gd._hmlumcount / gd._hmpixcount : tinycolor(gd._fullLayout.plot_bgcolor).getLuminance();\n    path0 = 'M0,0H' + pw + 'V' + ph + 'H0V0';\n    dimmed = false;\n    zoomMode = 'xy';\n    zoomDragged = false;\n    zb = makeZoombox(zoomlayer, lum, xs, ys, path0);\n    corners = makeCorners(zoomlayer, xs, ys);\n  }\n  function zoomMove(dx0, dy0) {\n    if (gd._transitioningWithDuration) {\n      return false;\n    }\n    var x1 = Math.max(0, Math.min(pw, dx0 + x0));\n    var y1 = Math.max(0, Math.min(ph, dy0 + y0));\n    var dx = Math.abs(x1 - x0);\n    var dy = Math.abs(y1 - y0);\n    box.l = Math.min(x0, x1);\n    box.r = Math.max(x0, x1);\n    box.t = Math.min(y0, y1);\n    box.b = Math.max(y0, y1);\n    function noZoom() {\n      zoomMode = '';\n      box.r = box.l;\n      box.t = box.b;\n      corners.attr('d', 'M0,0Z');\n    }\n    if (isSubplotConstrained) {\n      if (dx > MINZOOM || dy > MINZOOM) {\n        zoomMode = 'xy';\n        if (dx / pw > dy / ph) {\n          dy = dx * ph / pw;\n          if (y0 > y1) box.t = y0 - dy;else box.b = y0 + dy;\n        } else {\n          dx = dy * pw / ph;\n          if (x0 > x1) box.l = x0 - dx;else box.r = x0 + dx;\n        }\n        corners.attr('d', xyCorners(box));\n      } else {\n        noZoom();\n      }\n    }\n    // look for small drags in one direction or the other,\n    // and only drag the other axis\n    else if (!yActive || dy < Math.min(Math.max(dx * 0.6, MINDRAG), MINZOOM)) {\n      if (dx < MINDRAG || !xActive) {\n        noZoom();\n      } else {\n        box.t = 0;\n        box.b = ph;\n        zoomMode = 'x';\n        corners.attr('d', xCorners(box, y0));\n      }\n    } else if (!xActive || dx < Math.min(dy * 0.6, MINZOOM)) {\n      box.l = 0;\n      box.r = pw;\n      zoomMode = 'y';\n      corners.attr('d', yCorners(box, x0));\n    } else {\n      zoomMode = 'xy';\n      corners.attr('d', xyCorners(box));\n    }\n    box.w = box.r - box.l;\n    box.h = box.b - box.t;\n    if (zoomMode) zoomDragged = true;\n    gd._dragged = zoomDragged;\n    updateZoombox(zb, corners, box, path0, dimmed, lum);\n    dimmed = true;\n  }\n  function zoomDone() {\n    updates = {};\n\n    // more strict than dragged, which allows you to come back to where you started\n    // and still count as dragged\n    if (Math.min(box.h, box.w) < MINDRAG * 2) {\n      return removeZoombox(gd);\n    }\n\n    // TODO: edit linked axes in zoomAxRanges and in dragTail\n    if (zoomMode === 'xy' || zoomMode === 'x') {\n      zoomAxRanges(xaxes, box.l / pw, box.r / pw, updates, links.xaxes);\n    }\n    if (zoomMode === 'xy' || zoomMode === 'y') {\n      zoomAxRanges(yaxes, (ph - box.b) / ph, (ph - box.t) / ph, updates, links.yaxes);\n    }\n    removeZoombox(gd);\n    dragTail();\n    showDoubleClickNotifier(gd);\n  }\n\n  // scroll zoom, on all draggers except corners\n  var scrollViewBox = [0, 0, pw, ph];\n  // wait a little after scrolling before redrawing\n  var redrawTimer = null;\n  var REDRAWDELAY = constants.REDRAWDELAY;\n  var mainplot = plotinfo.mainplot ? gd._fullLayout._plots[plotinfo.mainplot] : plotinfo;\n  function zoomWheel(e) {\n    // deactivate mousewheel scrolling on embedded graphs\n    // devs can override this with layout._enablescrollzoom,\n    // but _ ensures this setting won't leave their page\n    if (!gd._context._scrollZoom.cartesian && !gd._fullLayout._enablescrollzoom) {\n      return;\n    }\n    clearAndResetSelect();\n\n    // If a transition is in progress, then disable any behavior:\n    if (gd._transitioningWithDuration) {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n    recomputeAxisLists();\n    clearTimeout(redrawTimer);\n    var wheelDelta = -e.deltaY;\n    if (!isFinite(wheelDelta)) wheelDelta = e.wheelDelta / 10;\n    if (!isFinite(wheelDelta)) {\n      Lib.log('Did not find wheel motion attributes: ', e);\n      return;\n    }\n    var zoom = Math.exp(-Math.min(Math.max(wheelDelta, -20), 20) / 200);\n    var gbb = mainplot.draglayer.select('.nsewdrag').node().getBoundingClientRect();\n    var xfrac = (e.clientX - gbb.left) / gbb.width;\n    var yfrac = (gbb.bottom - e.clientY) / gbb.height;\n    var i;\n    function zoomWheelOneAxis(ax, centerFraction, zoom) {\n      if (ax.fixedrange) return;\n      var axRange = Lib.simpleMap(ax.range, ax.r2l);\n      var v0 = axRange[0] + (axRange[1] - axRange[0]) * centerFraction;\n      function doZoom(v) {\n        return ax.l2r(v0 + (v - v0) * zoom);\n      }\n      ax.range = axRange.map(doZoom);\n    }\n    if (editX) {\n      // if we're only zooming this axis because of constraints,\n      // zoom it about the center\n      if (!ew) xfrac = 0.5;\n      for (i = 0; i < xaxes.length; i++) {\n        zoomWheelOneAxis(xaxes[i], xfrac, zoom);\n      }\n      scrollViewBox[2] *= zoom;\n      scrollViewBox[0] += scrollViewBox[2] * xfrac * (1 / zoom - 1);\n    }\n    if (editY) {\n      if (!ns) yfrac = 0.5;\n      for (i = 0; i < yaxes.length; i++) {\n        zoomWheelOneAxis(yaxes[i], yfrac, zoom);\n      }\n      scrollViewBox[3] *= zoom;\n      scrollViewBox[1] += scrollViewBox[3] * (1 - yfrac) * (1 / zoom - 1);\n    }\n\n    // viewbox redraw at first\n    updateSubplots(scrollViewBox);\n    ticksAndAnnotations();\n\n    // then replot after a delay to make sure\n    // no more scrolling is coming\n    redrawTimer = setTimeout(function () {\n      scrollViewBox = [0, 0, pw, ph];\n      dragTail();\n    }, REDRAWDELAY);\n    e.preventDefault();\n    return;\n  }\n\n  // everything but the corners gets wheel zoom\n  if (ns.length * ew.length !== 1) {\n    attachWheelEventHandler(dragger, zoomWheel);\n  }\n\n  // plotDrag: move the plot in response to a drag\n  function plotDrag(dx, dy) {\n    // If a transition is in progress, then disable any behavior:\n    if (gd._transitioningWithDuration) {\n      return;\n    }\n\n    // prevent axis drawing from monkeying with margins until we're done\n    gd._fullLayout._replotting = true;\n    if (xActive === 'ew' || yActive === 'ns') {\n      if (xActive) dragAxList(xaxes, dx);\n      if (yActive) dragAxList(yaxes, dy);\n      updateSubplots([xActive ? -dx : 0, yActive ? -dy : 0, pw, ph]);\n      ticksAndAnnotations();\n      return;\n    }\n\n    // dz: set a new value for one end (0 or 1) of an axis array axArray,\n    // and return a pixel shift for that end for the viewbox\n    // based on pixel drag distance d\n    // TODO: this makes (generally non-fatal) errors when you get\n    // near floating point limits\n    function dz(axArray, end, d) {\n      var otherEnd = 1 - end;\n      var movedAx;\n      var newLinearizedEnd;\n      for (var i = 0; i < axArray.length; i++) {\n        var axi = axArray[i];\n        if (axi.fixedrange) continue;\n        movedAx = axi;\n        newLinearizedEnd = axi._rl[otherEnd] + (axi._rl[end] - axi._rl[otherEnd]) / dZoom(d / axi._length);\n        var newEnd = axi.l2r(newLinearizedEnd);\n\n        // if l2r comes back false or undefined, it means we've dragged off\n        // the end of valid ranges - so stop.\n        if (newEnd !== false && newEnd !== undefined) axi.range[end] = newEnd;\n      }\n      return movedAx._length * (movedAx._rl[end] - newLinearizedEnd) / (movedAx._rl[end] - movedAx._rl[otherEnd]);\n    }\n    if (isSubplotConstrained && xActive && yActive) {\n      // dragging a corner of a constrained subplot:\n      // respect the fixed corner, but harmonize dx and dy\n      var dxySign = xActive === 'w' === (yActive === 'n') ? 1 : -1;\n      var dxyFraction = (dx / pw + dxySign * dy / ph) / 2;\n      dx = dxyFraction * pw;\n      dy = dxySign * dxyFraction * ph;\n    }\n    if (xActive === 'w') dx = dz(xaxes, 0, dx);else if (xActive === 'e') dx = dz(xaxes, 1, -dx);else if (!xActive) dx = 0;\n    if (yActive === 'n') dy = dz(yaxes, 1, dy);else if (yActive === 's') dy = dz(yaxes, 0, -dy);else if (!yActive) dy = 0;\n    var x0 = xActive === 'w' ? dx : 0;\n    var y0 = yActive === 'n' ? dy : 0;\n    if (isSubplotConstrained) {\n      var i;\n      if (!xActive && yActive.length === 1) {\n        // dragging one end of the y axis of a constrained subplot\n        // scale the other axis the same about its middle\n        for (i = 0; i < xaxes.length; i++) {\n          xaxes[i].range = xaxes[i]._r.slice();\n          scaleZoom(xaxes[i], 1 - dy / ph);\n        }\n        dx = dy * pw / ph;\n        x0 = dx / 2;\n      }\n      if (!yActive && xActive.length === 1) {\n        for (i = 0; i < yaxes.length; i++) {\n          yaxes[i].range = yaxes[i]._r.slice();\n          scaleZoom(yaxes[i], 1 - dx / pw);\n        }\n        dy = dx * ph / pw;\n        y0 = dy / 2;\n      }\n    }\n    updateSubplots([x0, y0, pw - dx, ph - dy]);\n    ticksAndAnnotations();\n  }\n\n  // Draw ticks and annotations (and other components) when ranges change.\n  // Also records the ranges that have changed for use by update at the end.\n  function ticksAndAnnotations() {\n    var activeAxIds = [];\n    var i;\n    function pushActiveAxIds(axList) {\n      for (i = 0; i < axList.length; i++) {\n        if (!axList[i].fixedrange) activeAxIds.push(axList[i]._id);\n      }\n    }\n    if (editX) {\n      pushActiveAxIds(xaxes);\n      pushActiveAxIds(links.xaxes);\n    }\n    if (editY) {\n      pushActiveAxIds(yaxes);\n      pushActiveAxIds(links.yaxes);\n    }\n    updates = {};\n    for (i = 0; i < activeAxIds.length; i++) {\n      var axId = activeAxIds[i];\n      var ax = getFromId(gd, axId);\n      Axes.drawOne(gd, ax, {\n        skipTitle: true\n      });\n      updates[ax._name + '.range[0]'] = ax.range[0];\n      updates[ax._name + '.range[1]'] = ax.range[1];\n    }\n    Axes.redrawComponents(gd, activeAxIds);\n  }\n  function doubleClick() {\n    if (gd._transitioningWithDuration) return;\n    var doubleClickConfig = gd._context.doubleClick;\n    var axList = (xActive ? xaxes : []).concat(yActive ? yaxes : []);\n    var attrs = {};\n    var ax, i, rangeInitial;\n\n    // For reset+autosize mode:\n    // If *any* of the main axes is not at its initial range\n    // (or autoranged, if we have no initial range, to match the logic in\n    // doubleClickConfig === 'reset' below), we reset.\n    // If they are *all* at their initial ranges, then we autosize.\n    if (doubleClickConfig === 'reset+autosize') {\n      doubleClickConfig = 'autosize';\n      for (i = 0; i < axList.length; i++) {\n        ax = axList[i];\n        if (ax._rangeInitial && (ax.range[0] !== ax._rangeInitial[0] || ax.range[1] !== ax._rangeInitial[1]) || !ax._rangeInitial && !ax.autorange) {\n          doubleClickConfig = 'reset';\n          break;\n        }\n      }\n    }\n    if (doubleClickConfig === 'autosize') {\n      // don't set the linked axes here, so relayout marks them as shrinkable\n      // and we autosize just to the requested axis/axes\n      for (i = 0; i < axList.length; i++) {\n        ax = axList[i];\n        if (!ax.fixedrange) attrs[ax._name + '.autorange'] = true;\n      }\n    } else if (doubleClickConfig === 'reset') {\n      // when we're resetting, reset all linked axes too, so we get back\n      // to the fully-auto-with-constraints situation\n      if (xActive || isSubplotConstrained) axList = axList.concat(links.xaxes);\n      if (yActive && !isSubplotConstrained) axList = axList.concat(links.yaxes);\n      if (isSubplotConstrained) {\n        if (!xActive) axList = axList.concat(xaxes);else if (!yActive) axList = axList.concat(yaxes);\n      }\n      for (i = 0; i < axList.length; i++) {\n        ax = axList[i];\n        if (!ax.fixedrange) {\n          if (!ax._rangeInitial) {\n            attrs[ax._name + '.autorange'] = true;\n          } else {\n            rangeInitial = ax._rangeInitial;\n            attrs[ax._name + '.range[0]'] = rangeInitial[0];\n            attrs[ax._name + '.range[1]'] = rangeInitial[1];\n          }\n        }\n      }\n    }\n    gd.emit('plotly_doubleclick', null);\n    Registry.call('_guiRelayout', gd, attrs);\n  }\n\n  // dragTail - finish a drag event with a redraw\n  function dragTail() {\n    // put the subplot viewboxes back to default (Because we're going to)\n    // be repositioning the data in the relayout. But DON'T call\n    // ticksAndAnnotations again - it's unnecessary and would overwrite `updates`\n    updateSubplots([0, 0, pw, ph]);\n\n    // since we may have been redrawing some things during the drag, we may have\n    // accumulated MathJax promises - wait for them before we relayout.\n    Lib.syncOrAsync([Plots.previousPromises, function () {\n      gd._fullLayout._replotting = false;\n      Registry.call('_guiRelayout', gd, updates);\n    }], gd);\n  }\n\n  // x/y scaleFactor stash,\n  // minimizes number of per-point DOM updates in updateSubplots below\n  var xScaleFactorOld, yScaleFactorOld;\n\n  // updateSubplots - find all plot viewboxes that should be\n  // affected by this drag, and update them. look for all plots\n  // sharing an affected axis (including the one being dragged),\n  // includes also scattergl and splom logic.\n  function updateSubplots(viewBox) {\n    var fullLayout = gd._fullLayout;\n    var plotinfos = fullLayout._plots;\n    var subplots = fullLayout._subplots.cartesian;\n    var i, sp, xa, ya;\n    if (hasSplom) {\n      Registry.subplotsRegistry.splom.drag(gd);\n    }\n    if (hasScatterGl) {\n      for (i = 0; i < subplots.length; i++) {\n        sp = plotinfos[subplots[i]];\n        xa = sp.xaxis;\n        ya = sp.yaxis;\n        if (sp._scene) {\n          var xrng = Lib.simpleMap(xa.range, xa.r2l);\n          var yrng = Lib.simpleMap(ya.range, ya.r2l);\n          sp._scene.update({\n            range: [xrng[0], yrng[0], xrng[1], yrng[1]]\n          });\n        }\n      }\n    }\n    if (hasSplom || hasScatterGl) {\n      clearGlCanvases(gd);\n      redrawReglTraces(gd);\n    }\n    if (hasSVG) {\n      var xScaleFactor = viewBox[2] / xa0._length;\n      var yScaleFactor = viewBox[3] / ya0._length;\n      for (i = 0; i < subplots.length; i++) {\n        sp = plotinfos[subplots[i]];\n        xa = sp.xaxis;\n        ya = sp.yaxis;\n        var editX2 = editX && !xa.fixedrange && xaHash[xa._id];\n        var editY2 = editY && !ya.fixedrange && yaHash[ya._id];\n        var xScaleFactor2, yScaleFactor2;\n        var clipDx, clipDy;\n        if (editX2) {\n          xScaleFactor2 = xScaleFactor;\n          clipDx = ew ? viewBox[0] : getShift(xa, xScaleFactor2);\n        } else {\n          xScaleFactor2 = getLinkedScaleFactor(xa, xScaleFactor, yScaleFactor);\n          clipDx = scaleAndGetShift(xa, xScaleFactor2);\n        }\n        if (editY2) {\n          yScaleFactor2 = yScaleFactor;\n          clipDy = ns ? viewBox[1] : getShift(ya, yScaleFactor2);\n        } else {\n          yScaleFactor2 = getLinkedScaleFactor(ya, xScaleFactor, yScaleFactor);\n          clipDy = scaleAndGetShift(ya, yScaleFactor2);\n        }\n\n        // don't scale at all if neither axis is scalable here\n        if (!xScaleFactor2 && !yScaleFactor2) {\n          continue;\n        }\n\n        // but if only one is, reset the other axis scaling\n        if (!xScaleFactor2) xScaleFactor2 = 1;\n        if (!yScaleFactor2) yScaleFactor2 = 1;\n        var plotDx = xa._offset - clipDx / xScaleFactor2;\n        var plotDy = ya._offset - clipDy / yScaleFactor2;\n\n        // TODO could be more efficient here:\n        // setTranslate and setScale do a lot of extra work\n        // when working independently, should perhaps combine\n        // them into a single routine.\n        sp.clipRect.call(Drawing.setTranslate, clipDx, clipDy).call(Drawing.setScale, xScaleFactor2, yScaleFactor2);\n        sp.plot.call(Drawing.setTranslate, plotDx, plotDy).call(Drawing.setScale, 1 / xScaleFactor2, 1 / yScaleFactor2);\n\n        // apply an inverse scale to individual points to counteract\n        // the scale of the trace group.\n        // apply only when scale changes, as adjusting the scale of\n        // all the points can be expansive.\n        if (xScaleFactor2 !== xScaleFactorOld || yScaleFactor2 !== yScaleFactorOld) {\n          Drawing.setPointGroupScale(sp.zoomScalePts, xScaleFactor2, yScaleFactor2);\n          Drawing.setTextPointsScale(sp.zoomScaleTxt, xScaleFactor2, yScaleFactor2);\n        }\n        Drawing.hideOutsideRangePoints(sp.clipOnAxisFalseTraces, sp);\n\n        // update x/y scaleFactor stash\n        xScaleFactorOld = xScaleFactor2;\n        yScaleFactorOld = yScaleFactor2;\n      }\n    }\n  }\n\n  // Find the appropriate scaling for this axis, if it's linked to the\n  // dragged axes by constraints. 0 is special, it means this axis shouldn't\n  // ever be scaled (will be converted to 1 if the other axis is scaled)\n  function getLinkedScaleFactor(ax, xScaleFactor, yScaleFactor) {\n    if (ax.fixedrange) return 0;\n    if (editX && links.xaHash[ax._id]) {\n      return xScaleFactor;\n    }\n    if (editY && (isSubplotConstrained ? links.xaHash : links.yaHash)[ax._id]) {\n      return yScaleFactor;\n    }\n    return 0;\n  }\n  function scaleAndGetShift(ax, scaleFactor) {\n    if (scaleFactor) {\n      ax.range = ax._r.slice();\n      scaleZoom(ax, scaleFactor);\n      return getShift(ax, scaleFactor);\n    }\n    return 0;\n  }\n  function getShift(ax, scaleFactor) {\n    return ax._length * (1 - scaleFactor) * FROM_TL[ax.constraintoward || 'middle'];\n  }\n  return dragger;\n}\nfunction makeDragger(plotinfo, nodeName, dragClass, cursor) {\n  var dragger3 = Lib.ensureSingle(plotinfo.draglayer, nodeName, dragClass, function (s) {\n    s.classed('drag', true).style({\n      fill: 'transparent',\n      'stroke-width': 0\n    }).attr('data-subplot', plotinfo.id);\n  });\n  dragger3.call(setCursor, cursor);\n  return dragger3.node();\n}\nfunction makeRectDragger(plotinfo, dragClass, cursor, x, y, w, h) {\n  var dragger = makeDragger(plotinfo, 'rect', dragClass, cursor);\n  d3.select(dragger).call(Drawing.setRect, x, y, w, h);\n  return dragger;\n}\nfunction isDirectionActive(axList, activeVal) {\n  for (var i = 0; i < axList.length; i++) {\n    if (!axList[i].fixedrange) return activeVal;\n  }\n  return '';\n}\nfunction getEndText(ax, end) {\n  var initialVal = ax.range[end];\n  var diff = Math.abs(initialVal - ax.range[1 - end]);\n  var dig;\n\n  // TODO: this should basically be ax.r2d but we're doing extra\n  // rounding here... can we clean up at all?\n  if (ax.type === 'date') {\n    return initialVal;\n  } else if (ax.type === 'log') {\n    dig = Math.ceil(Math.max(0, -Math.log(diff) / Math.LN10)) + 3;\n    return d3.format('.' + dig + 'g')(Math.pow(10, initialVal));\n  } else {\n    // linear numeric (or category... but just show numbers here)\n    dig = Math.floor(Math.log(Math.abs(initialVal)) / Math.LN10) - Math.floor(Math.log(diff) / Math.LN10) + 4;\n    return d3.format('.' + String(dig) + 'g')(initialVal);\n  }\n}\nfunction zoomAxRanges(axList, r0Fraction, r1Fraction, updates, linkedAxes) {\n  var i, axi, axRangeLinear0, axRangeLinearSpan;\n  for (i = 0; i < axList.length; i++) {\n    axi = axList[i];\n    if (axi.fixedrange) continue;\n    axRangeLinear0 = axi._rl[0];\n    axRangeLinearSpan = axi._rl[1] - axRangeLinear0;\n    axi.range = [axi.l2r(axRangeLinear0 + axRangeLinearSpan * r0Fraction), axi.l2r(axRangeLinear0 + axRangeLinearSpan * r1Fraction)];\n    updates[axi._name + '.range[0]'] = axi.range[0];\n    updates[axi._name + '.range[1]'] = axi.range[1];\n  }\n\n  // zoom linked axes about their centers\n  if (linkedAxes && linkedAxes.length) {\n    var linkedR0Fraction = (r0Fraction + (1 - r1Fraction)) / 2;\n    zoomAxRanges(linkedAxes, linkedR0Fraction, 1 - linkedR0Fraction, updates);\n  }\n}\nfunction dragAxList(axList, pix) {\n  for (var i = 0; i < axList.length; i++) {\n    var axi = axList[i];\n    if (!axi.fixedrange) {\n      axi.range = [axi.l2r(axi._rl[0] - pix / axi._m), axi.l2r(axi._rl[1] - pix / axi._m)];\n    }\n  }\n}\n\n// common transform for dragging one end of an axis\n// d>0 is compressing scale (cursor is over the plot,\n//  the axis end should move with the cursor)\n// d<0 is expanding (cursor is off the plot, axis end moves\n//  nonlinearly so you can expand far)\nfunction dZoom(d) {\n  return 1 - (d >= 0 ? Math.min(d, 0.9) : 1 / (1 / Math.max(d, -0.3) + 3.222));\n}\nfunction getDragCursor(nsew, dragmode, isMainDrag) {\n  if (!nsew) return 'pointer';\n  if (nsew === 'nsew') {\n    // in this case here, clear cursor and\n    // use the cursor style set on <g .draglayer>\n    if (isMainDrag) return '';\n    if (dragmode === 'pan') return 'move';\n    return 'crosshair';\n  }\n  return nsew.toLowerCase() + '-resize';\n}\nfunction makeZoombox(zoomlayer, lum, xs, ys, path0) {\n  return zoomlayer.append('path').attr('class', 'zoombox').style({\n    'fill': lum > 0.2 ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0)',\n    'stroke-width': 0\n  }).attr('transform', 'translate(' + xs + ', ' + ys + ')').attr('d', path0 + 'Z');\n}\nfunction makeCorners(zoomlayer, xs, ys) {\n  return zoomlayer.append('path').attr('class', 'zoombox-corners').style({\n    fill: Color.background,\n    stroke: Color.defaultLine,\n    'stroke-width': 1,\n    opacity: 0\n  }).attr('transform', 'translate(' + xs + ', ' + ys + ')').attr('d', 'M0,0Z');\n}\nfunction updateZoombox(zb, corners, box, path0, dimmed, lum) {\n  zb.attr('d', path0 + 'M' + box.l + ',' + box.t + 'v' + box.h + 'h' + box.w + 'v-' + box.h + 'h-' + box.w + 'Z');\n  transitionZoombox(zb, corners, dimmed, lum);\n}\nfunction transitionZoombox(zb, corners, dimmed, lum) {\n  if (!dimmed) {\n    zb.transition().style('fill', lum > 0.2 ? 'rgba(0,0,0,0.4)' : 'rgba(255,255,255,0.3)').duration(200);\n    corners.transition().style('opacity', 1).duration(200);\n  }\n}\nfunction removeZoombox(gd) {\n  d3.select(gd).selectAll('.zoombox,.js-zoombox-backdrop,.js-zoombox-menu,.zoombox-corners').remove();\n}\nfunction showDoubleClickNotifier(gd) {\n  if (SHOWZOOMOUTTIP && gd.data && gd._context.showTips) {\n    Lib.notifier(Lib._(gd, 'Double-click to zoom back out'), 'long');\n    SHOWZOOMOUTTIP = false;\n  }\n}\nfunction isSelectOrLasso(dragmode) {\n  return dragmode === 'lasso' || dragmode === 'select';\n}\nfunction xCorners(box, y0) {\n  return 'M' + (box.l - 0.5) + ',' + (y0 - MINZOOM - 0.5) + 'h-3v' + (2 * MINZOOM + 1) + 'h3ZM' + (box.r + 0.5) + ',' + (y0 - MINZOOM - 0.5) + 'h3v' + (2 * MINZOOM + 1) + 'h-3Z';\n}\nfunction yCorners(box, x0) {\n  return 'M' + (x0 - MINZOOM - 0.5) + ',' + (box.t - 0.5) + 'v-3h' + (2 * MINZOOM + 1) + 'v3ZM' + (x0 - MINZOOM - 0.5) + ',' + (box.b + 0.5) + 'v3h' + (2 * MINZOOM + 1) + 'v-3Z';\n}\nfunction xyCorners(box) {\n  var clen = Math.floor(Math.min(box.b - box.t, box.r - box.l, MINZOOM) / 2);\n  return 'M' + (box.l - 3.5) + ',' + (box.t - 0.5 + clen) + 'h3v' + -clen + 'h' + clen + 'v-3h-' + (clen + 3) + 'ZM' + (box.r + 3.5) + ',' + (box.t - 0.5 + clen) + 'h-3v' + -clen + 'h' + -clen + 'v-3h' + (clen + 3) + 'ZM' + (box.r + 3.5) + ',' + (box.b + 0.5 - clen) + 'h-3v' + clen + 'h' + -clen + 'v3h' + (clen + 3) + 'ZM' + (box.l - 3.5) + ',' + (box.b + 0.5 - clen) + 'h3v' + clen + 'h' + clen + 'v3h-' + (clen + 3) + 'Z';\n}\nfunction calcLinks(gd, xaHash, yaHash) {\n  var constraintGroups = gd._fullLayout._axisConstraintGroups;\n  var isSubplotConstrained = false;\n  var xLinks = {};\n  var yLinks = {};\n  var xID, yID, xLinkID, yLinkID;\n  for (var i = 0; i < constraintGroups.length; i++) {\n    var group = constraintGroups[i];\n    // check if any of the x axes we're dragging is in this constraint group\n    for (xID in xaHash) {\n      if (group[xID]) {\n        // put the rest of these axes into xLinks, if we're not already\n        // dragging them, so we know to scale these axes automatically too\n        // to match the changes in the dragged x axes\n        for (xLinkID in group) {\n          if (!(xLinkID.charAt(0) === 'x' ? xaHash : yaHash)[xLinkID]) {\n            xLinks[xLinkID] = 1;\n          }\n        }\n\n        // check if the x and y axes of THIS drag are linked\n        for (yID in yaHash) {\n          if (group[yID]) isSubplotConstrained = true;\n        }\n      }\n    }\n\n    // now check if any of the y axes we're dragging is in this constraint group\n    // only look for outside links, as we've already checked for links within the dragger\n    for (yID in yaHash) {\n      if (group[yID]) {\n        for (yLinkID in group) {\n          if (!(yLinkID.charAt(0) === 'x' ? xaHash : yaHash)[yLinkID]) {\n            yLinks[yLinkID] = 1;\n          }\n        }\n      }\n    }\n  }\n  if (isSubplotConstrained) {\n    // merge xLinks and yLinks if the subplot is constrained,\n    // since we'll always apply both anyway and the two will contain\n    // duplicates\n    Lib.extendFlat(xLinks, yLinks);\n    yLinks = {};\n  }\n  var xaHashLinked = {};\n  var xaxesLinked = [];\n  for (xLinkID in xLinks) {\n    var xa = getFromId(gd, xLinkID);\n    xaxesLinked.push(xa);\n    xaHashLinked[xa._id] = xa;\n  }\n  var yaHashLinked = {};\n  var yaxesLinked = [];\n  for (yLinkID in yLinks) {\n    var ya = getFromId(gd, yLinkID);\n    yaxesLinked.push(ya);\n    yaHashLinked[ya._id] = ya;\n  }\n  return {\n    xaHash: xaHashLinked,\n    yaHash: yaHashLinked,\n    xaxes: xaxesLinked,\n    yaxes: yaxesLinked,\n    isSubplotConstrained: isSubplotConstrained\n  };\n}\n\n// still seems to be some confusion about onwheel vs onmousewheel...\nfunction attachWheelEventHandler(element, handler) {\n  if (!supportsPassive) {\n    if (element.onwheel !== undefined) element.onwheel = handler;else if (element.onmousewheel !== undefined) element.onmousewheel = handler;\n  } else {\n    var wheelEventName = element.onwheel !== undefined ? 'wheel' : 'mousewheel';\n    if (element._onwheel) {\n      element.removeEventListener(wheelEventName, element._onwheel);\n    }\n    element._onwheel = handler;\n    element.addEventListener(wheelEventName, handler, {\n      passive: false\n    });\n  }\n}\nfunction hashValues(hash) {\n  var out = [];\n  for (var k in hash) {\n    out.push(hash[k]);\n  }\n  return out;\n}\nmodule.exports = {\n  makeDragBox: makeDragBox,\n  makeDragger: makeDragger,\n  makeRectDragger: makeRectDragger,\n  makeZoombox: makeZoombox,\n  makeCorners: makeCorners,\n  updateZoombox: updateZoombox,\n  xyCorners: xyCorners,\n  transitionZoombox: transitionZoombox,\n  removeZoombox: removeZoombox,\n  showDoubleClickNotifier: showDoubleClickNotifier,\n  attachWheelEventHandler: attachWheelEventHandler\n};","map":{"version":3,"names":["d3","require","tinycolor","supportsPassive","Registry","Lib","svgTextUtils","Color","Drawing","Fx","Axes","setCursor","dragElement","FROM_TL","clearGlCanvases","redrawReglTraces","Plots","getFromId","prepSelect","clearSelect","selectOnClick","scaleZoom","constants","MINDRAG","MINZOOM","SHOWZOOMOUTTIP","makeDragBox","gd","plotinfo","x","y","w","h","ns","ew","zoomlayer","_fullLayout","_zoomlayer","isMainDrag","singleEnd","length","xa0","ya0","xaHash","yaHash","xaxes","yaxes","xs","ys","pw","ph","links","xActive","yActive","allFixedRanges","isSubplotConstrained","editX","editY","hasScatterGl","hasSplom","hasSVG","updates","recomputeAxisLists","xaxis","yaxis","_length","_offset","_id","overlays","i","xa","ya","hashValues","isDirectionActive","calcLinks","fullLayout","_has","cursor","getDragCursor","dragmode","dragger","makeRectDragger","onmousedown","style","pointerEvents","dragOptions","element","prepFn","e","startX","startY","dragModePrev","dragModeNow","shiftKey","isSelectOrLasso","ctrlKey","minDrag","undefined","clickFn","clearAndResetSelect","moveFn","zoomMove","doneFn","zoomDone","zoomPrep","plotDrag","dragTail","selection","numClicks","evt","clickmode","removeZoombox","doubleClick","indexOf","id","click","ax","end","attrStr","_name","initialText","getEndText","hAlign","vAlign","fixedrange","side","_context","showAxisRangeEntryBoxes","select","call","makeEditable","immediate","background","paper_bgcolor","text","String","fill","tickfont","color","horizontalAlign","verticalAlign","on","v","d2r","init","x0","y0","box","lum","path0","dimmed","zoomMode","zb","corners","zoomDragged","dragBBox","getBoundingClientRect","left","top","l","r","t","b","_hmpixcount","_hmlumcount","plot_bgcolor","getLuminance","makeZoombox","makeCorners","dx0","dy0","_transitioningWithDuration","x1","Math","max","min","y1","dx","abs","dy","noZoom","attr","xyCorners","xCorners","yCorners","_dragged","updateZoombox","zoomAxRanges","showDoubleClickNotifier","scrollViewBox","redrawTimer","REDRAWDELAY","mainplot","_plots","zoomWheel","_scrollZoom","cartesian","_enablescrollzoom","preventDefault","stopPropagation","clearTimeout","wheelDelta","deltaY","isFinite","log","zoom","exp","gbb","draglayer","node","xfrac","clientX","width","yfrac","bottom","clientY","height","zoomWheelOneAxis","centerFraction","axRange","simpleMap","range","r2l","v0","doZoom","l2r","map","updateSubplots","ticksAndAnnotations","setTimeout","attachWheelEventHandler","_replotting","dragAxList","dz","axArray","d","otherEnd","movedAx","newLinearizedEnd","axi","_rl","dZoom","newEnd","dxySign","dxyFraction","_r","slice","activeAxIds","pushActiveAxIds","axList","push","axId","drawOne","skipTitle","redrawComponents","doubleClickConfig","concat","attrs","rangeInitial","_rangeInitial","autorange","emit","syncOrAsync","previousPromises","xScaleFactorOld","yScaleFactorOld","viewBox","plotinfos","subplots","_subplots","sp","subplotsRegistry","splom","drag","_scene","xrng","yrng","update","xScaleFactor","yScaleFactor","editX2","editY2","xScaleFactor2","yScaleFactor2","clipDx","clipDy","getShift","getLinkedScaleFactor","scaleAndGetShift","plotDx","plotDy","clipRect","setTranslate","setScale","plot","setPointGroupScale","zoomScalePts","setTextPointsScale","zoomScaleTxt","hideOutsideRangePoints","clipOnAxisFalseTraces","scaleFactor","constraintoward","makeDragger","nodeName","dragClass","dragger3","ensureSingle","s","classed","setRect","activeVal","initialVal","diff","dig","type","ceil","LN10","format","pow","floor","r0Fraction","r1Fraction","linkedAxes","axRangeLinear0","axRangeLinearSpan","linkedR0Fraction","pix","_m","nsew","toLowerCase","append","stroke","defaultLine","opacity","transitionZoombox","transition","duration","selectAll","remove","data","showTips","notifier","_","clen","constraintGroups","_axisConstraintGroups","xLinks","yLinks","xID","yID","xLinkID","yLinkID","group","charAt","extendFlat","xaHashLinked","xaxesLinked","yaHashLinked","yaxesLinked","handler","onwheel","onmousewheel","wheelEventName","_onwheel","removeEventListener","addEventListener","passive","hash","out","k","module","exports"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/plots/cartesian/dragbox.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar d3 = require('d3');\nvar tinycolor = require('tinycolor2');\nvar supportsPassive = require('has-passive-events');\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar svgTextUtils = require('../../lib/svg_text_utils');\nvar Color = require('../../components/color');\nvar Drawing = require('../../components/drawing');\nvar Fx = require('../../components/fx');\nvar Axes = require('./axes');\nvar setCursor = require('../../lib/setcursor');\nvar dragElement = require('../../components/dragelement');\nvar FROM_TL = require('../../constants/alignment').FROM_TL;\nvar clearGlCanvases = require('../../lib/clear_gl_canvases');\nvar redrawReglTraces = require('../../plot_api/subroutines').redrawReglTraces;\n\nvar Plots = require('../plots');\n\nvar getFromId = require('./axis_ids').getFromId;\nvar prepSelect = require('./select').prepSelect;\nvar clearSelect = require('./select').clearSelect;\nvar selectOnClick = require('./select').selectOnClick;\nvar scaleZoom = require('./scale_zoom');\n\nvar constants = require('./constants');\nvar MINDRAG = constants.MINDRAG;\nvar MINZOOM = constants.MINZOOM;\n\n\n// flag for showing \"doubleclick to zoom out\" only at the beginning\nvar SHOWZOOMOUTTIP = true;\n\n// dragBox: create an element to drag one or more axis ends\n// inputs:\n//      plotinfo - which subplot are we making dragboxes on?\n//      x,y,w,h - left, top, width, height of the box\n//      ns - how does this drag the vertical axis?\n//          'n' - top only\n//          's' - bottom only\n//          'ns' - top and bottom together, difference unchanged\n//      ew - same for horizontal axis\nfunction makeDragBox(gd, plotinfo, x, y, w, h, ns, ew) {\n    // mouseDown stores ms of first mousedown event in the last\n    // DBLCLICKDELAY ms on the drag bars\n    // numClicks stores how many mousedowns have been seen\n    // within DBLCLICKDELAY so we can check for click or doubleclick events\n    // dragged stores whether a drag has occurred, so we don't have to\n    // redraw unnecessarily, ie if no move bigger than MINDRAG or MINZOOM px\n    var zoomlayer = gd._fullLayout._zoomlayer;\n    var isMainDrag = (ns + ew === 'nsew');\n    var singleEnd = (ns + ew).length === 1;\n\n    // main subplot x and y (i.e. found in plotinfo - the main ones)\n    var xa0, ya0;\n    // {ax._id: ax} hash objects\n    var xaHash, yaHash;\n    // xaHash/yaHash values (arrays)\n    var xaxes, yaxes;\n    // main axis offsets\n    var xs, ys;\n    // main axis lengths\n    var pw, ph;\n    // contains keys 'xaHash', 'yaHash', 'xaxes', and 'yaxes'\n    // which are the x/y {ax._id: ax} hash objects and their values\n    // for linked axis relative to this subplot\n    var links;\n    // set to ew/ns val when active, set to '' when inactive\n    var xActive, yActive;\n    // are all axes in this subplot are fixed?\n    var allFixedRanges;\n    // is subplot constrained?\n    var isSubplotConstrained;\n    // do we need to edit x/y ranges?\n    var editX, editY;\n    // graph-wide optimization flags\n    var hasScatterGl, hasSplom, hasSVG;\n    // collected changes to be made to the plot by relayout at the end\n    var updates;\n\n    function recomputeAxisLists() {\n        xa0 = plotinfo.xaxis;\n        ya0 = plotinfo.yaxis;\n        pw = xa0._length;\n        ph = ya0._length;\n        xs = xa0._offset;\n        ys = ya0._offset;\n\n        xaHash = {};\n        xaHash[xa0._id] = xa0;\n        yaHash = {};\n        yaHash[ya0._id] = ya0;\n\n        // if we're dragging two axes at once, also drag overlays\n        if(ns && ew) {\n            var overlays = plotinfo.overlays;\n            for(var i = 0; i < overlays.length; i++) {\n                var xa = overlays[i].xaxis;\n                xaHash[xa._id] = xa;\n                var ya = overlays[i].yaxis;\n                yaHash[ya._id] = ya;\n            }\n        }\n\n        xaxes = hashValues(xaHash);\n        yaxes = hashValues(yaHash);\n        xActive = isDirectionActive(xaxes, ew);\n        yActive = isDirectionActive(yaxes, ns);\n        allFixedRanges = !yActive && !xActive;\n\n        links = calcLinks(gd, xaHash, yaHash);\n        isSubplotConstrained = links.isSubplotConstrained;\n        editX = ew || isSubplotConstrained;\n        editY = ns || isSubplotConstrained;\n\n        var fullLayout = gd._fullLayout;\n        hasScatterGl = fullLayout._has('scattergl');\n        hasSplom = fullLayout._has('splom');\n        hasSVG = fullLayout._has('svg');\n    }\n\n    recomputeAxisLists();\n\n    var cursor = getDragCursor(yActive + xActive, gd._fullLayout.dragmode, isMainDrag);\n    var dragger = makeRectDragger(plotinfo, ns + ew + 'drag', cursor, x, y, w, h);\n\n    // still need to make the element if the axes are disabled\n    // but nuke its events (except for maindrag which needs them for hover)\n    // and stop there\n    if(allFixedRanges && !isMainDrag) {\n        dragger.onmousedown = null;\n        dragger.style.pointerEvents = 'none';\n        return dragger;\n    }\n\n    var dragOptions = {\n        element: dragger,\n        gd: gd,\n        plotinfo: plotinfo\n    };\n\n    dragOptions.prepFn = function(e, startX, startY) {\n        var dragModePrev = dragOptions.dragmode;\n        var dragModeNow = gd._fullLayout.dragmode;\n        if(dragModeNow !== dragModePrev) {\n            dragOptions.dragmode = dragModeNow;\n        }\n\n        recomputeAxisLists();\n\n        if(!allFixedRanges) {\n            if(isMainDrag) {\n                // main dragger handles all drag modes, and changes\n                // to pan (or to zoom if it already is pan) on shift\n                if(e.shiftKey) {\n                    if(dragModeNow === 'pan') dragModeNow = 'zoom';\n                    else if(!isSelectOrLasso(dragModeNow)) dragModeNow = 'pan';\n                }\n                else if(e.ctrlKey) {\n                    dragModeNow = 'pan';\n                }\n            }\n            // all other draggers just pan\n            else dragModeNow = 'pan';\n        }\n\n        if(dragModeNow === 'lasso') dragOptions.minDrag = 1;\n        else dragOptions.minDrag = undefined;\n\n        if(isSelectOrLasso(dragModeNow)) {\n            dragOptions.xaxes = xaxes;\n            dragOptions.yaxes = yaxes;\n            // this attaches moveFn, clickFn, doneFn on dragOptions\n            prepSelect(e, startX, startY, dragOptions, dragModeNow);\n        } else {\n            dragOptions.clickFn = clickFn;\n            if(isSelectOrLasso(dragModePrev)) {\n                // TODO Fix potential bug\n                // Note: clearing / resetting selection state only happens, when user\n                // triggers at least one interaction in pan/zoom mode. Otherwise, the\n                // select/lasso outlines are deleted (in plots.js.cleanPlot) but the selection\n                // cache isn't cleared. So when the user switches back to select/lasso and\n                // 'adds to a selection' with Shift, the \"old\", seemingly removed outlines\n                // are redrawn again because the selection cache still holds their coordinates.\n                // However, this isn't easily solved, since plots.js would need\n                // to have a reference to the dragOptions object (which holds the\n                // selection cache).\n                clearAndResetSelect();\n            }\n\n            if(!allFixedRanges) {\n                if(dragModeNow === 'zoom') {\n                    dragOptions.moveFn = zoomMove;\n                    dragOptions.doneFn = zoomDone;\n\n                    // zoomMove takes care of the threshold, but we need to\n                    // minimize this so that constrained zoom boxes will flip\n                    // orientation at the right place\n                    dragOptions.minDrag = 1;\n\n                    zoomPrep(e, startX, startY);\n                } else if(dragModeNow === 'pan') {\n                    dragOptions.moveFn = plotDrag;\n                    dragOptions.doneFn = dragTail;\n                }\n            }\n        }\n    };\n\n    function clearAndResetSelect() {\n        // clear selection polygon cache (if any)\n        dragOptions.plotinfo.selection = false;\n        // clear selection outlines\n        clearSelect(zoomlayer);\n    }\n\n    function clickFn(numClicks, evt) {\n        var clickmode = gd._fullLayout.clickmode;\n\n        removeZoombox(gd);\n\n        if(numClicks === 2 && !singleEnd) doubleClick();\n\n        if(isMainDrag) {\n            if(clickmode.indexOf('select') > -1) {\n                selectOnClick(evt, gd, xaxes, yaxes, plotinfo.id, dragOptions);\n            }\n\n            if(clickmode.indexOf('event') > -1) {\n                Fx.click(gd, evt, plotinfo.id);\n            }\n        }\n        else if(numClicks === 1 && singleEnd) {\n            var ax = ns ? ya0 : xa0;\n            var end = (ns === 's' || ew === 'w') ? 0 : 1;\n            var attrStr = ax._name + '.range[' + end + ']';\n            var initialText = getEndText(ax, end);\n            var hAlign = 'left';\n            var vAlign = 'middle';\n\n            if(ax.fixedrange) return;\n\n            if(ns) {\n                vAlign = (ns === 'n') ? 'top' : 'bottom';\n                if(ax.side === 'right') hAlign = 'right';\n            }\n            else if(ew === 'e') hAlign = 'right';\n\n            if(gd._context.showAxisRangeEntryBoxes) {\n                d3.select(dragger)\n                    .call(svgTextUtils.makeEditable, {\n                        gd: gd,\n                        immediate: true,\n                        background: gd._fullLayout.paper_bgcolor,\n                        text: String(initialText),\n                        fill: ax.tickfont ? ax.tickfont.color : '#444',\n                        horizontalAlign: hAlign,\n                        verticalAlign: vAlign\n                    })\n                    .on('edit', function(text) {\n                        var v = ax.d2r(text);\n                        if(v !== undefined) {\n                            Registry.call('_guiRelayout', gd, attrStr, v);\n                        }\n                    });\n            }\n        }\n    }\n\n    dragElement.init(dragOptions);\n\n    var x0,\n        y0,\n        box,\n        lum,\n        path0,\n        dimmed,\n        zoomMode,\n        zb,\n        corners;\n\n    // zoom takes over minDrag, so it also has to take over gd._dragged\n    var zoomDragged;\n\n    function zoomPrep(e, startX, startY) {\n        var dragBBox = dragger.getBoundingClientRect();\n        x0 = startX - dragBBox.left;\n        y0 = startY - dragBBox.top;\n        box = {l: x0, r: x0, w: 0, t: y0, b: y0, h: 0};\n        lum = gd._hmpixcount ?\n            (gd._hmlumcount / gd._hmpixcount) :\n            tinycolor(gd._fullLayout.plot_bgcolor).getLuminance();\n        path0 = 'M0,0H' + pw + 'V' + ph + 'H0V0';\n        dimmed = false;\n        zoomMode = 'xy';\n        zoomDragged = false;\n\n        zb = makeZoombox(zoomlayer, lum, xs, ys, path0);\n\n        corners = makeCorners(zoomlayer, xs, ys);\n    }\n\n    function zoomMove(dx0, dy0) {\n        if(gd._transitioningWithDuration) {\n            return false;\n        }\n\n        var x1 = Math.max(0, Math.min(pw, dx0 + x0));\n        var y1 = Math.max(0, Math.min(ph, dy0 + y0));\n        var dx = Math.abs(x1 - x0);\n        var dy = Math.abs(y1 - y0);\n\n        box.l = Math.min(x0, x1);\n        box.r = Math.max(x0, x1);\n        box.t = Math.min(y0, y1);\n        box.b = Math.max(y0, y1);\n\n        function noZoom() {\n            zoomMode = '';\n            box.r = box.l;\n            box.t = box.b;\n            corners.attr('d', 'M0,0Z');\n        }\n\n        if(isSubplotConstrained) {\n            if(dx > MINZOOM || dy > MINZOOM) {\n                zoomMode = 'xy';\n                if(dx / pw > dy / ph) {\n                    dy = dx * ph / pw;\n                    if(y0 > y1) box.t = y0 - dy;\n                    else box.b = y0 + dy;\n                }\n                else {\n                    dx = dy * pw / ph;\n                    if(x0 > x1) box.l = x0 - dx;\n                    else box.r = x0 + dx;\n                }\n                corners.attr('d', xyCorners(box));\n            }\n            else {\n                noZoom();\n            }\n        }\n        // look for small drags in one direction or the other,\n        // and only drag the other axis\n        else if(!yActive || dy < Math.min(Math.max(dx * 0.6, MINDRAG), MINZOOM)) {\n            if(dx < MINDRAG || !xActive) {\n                noZoom();\n            } else {\n                box.t = 0;\n                box.b = ph;\n                zoomMode = 'x';\n                corners.attr('d', xCorners(box, y0));\n            }\n        }\n        else if(!xActive || dx < Math.min(dy * 0.6, MINZOOM)) {\n            box.l = 0;\n            box.r = pw;\n            zoomMode = 'y';\n            corners.attr('d', yCorners(box, x0));\n        }\n        else {\n            zoomMode = 'xy';\n            corners.attr('d', xyCorners(box));\n        }\n        box.w = box.r - box.l;\n        box.h = box.b - box.t;\n\n        if(zoomMode) zoomDragged = true;\n        gd._dragged = zoomDragged;\n\n        updateZoombox(zb, corners, box, path0, dimmed, lum);\n        dimmed = true;\n    }\n\n    function zoomDone() {\n        updates = {};\n\n        // more strict than dragged, which allows you to come back to where you started\n        // and still count as dragged\n        if(Math.min(box.h, box.w) < MINDRAG * 2) {\n            return removeZoombox(gd);\n        }\n\n        // TODO: edit linked axes in zoomAxRanges and in dragTail\n        if(zoomMode === 'xy' || zoomMode === 'x') {\n            zoomAxRanges(xaxes, box.l / pw, box.r / pw, updates, links.xaxes);\n        }\n        if(zoomMode === 'xy' || zoomMode === 'y') {\n            zoomAxRanges(yaxes, (ph - box.b) / ph, (ph - box.t) / ph, updates, links.yaxes);\n        }\n\n        removeZoombox(gd);\n        dragTail();\n        showDoubleClickNotifier(gd);\n    }\n\n    // scroll zoom, on all draggers except corners\n    var scrollViewBox = [0, 0, pw, ph];\n    // wait a little after scrolling before redrawing\n    var redrawTimer = null;\n    var REDRAWDELAY = constants.REDRAWDELAY;\n    var mainplot = plotinfo.mainplot ? gd._fullLayout._plots[plotinfo.mainplot] : plotinfo;\n\n    function zoomWheel(e) {\n        // deactivate mousewheel scrolling on embedded graphs\n        // devs can override this with layout._enablescrollzoom,\n        // but _ ensures this setting won't leave their page\n        if(!gd._context._scrollZoom.cartesian && !gd._fullLayout._enablescrollzoom) {\n            return;\n        }\n\n        clearAndResetSelect();\n\n        // If a transition is in progress, then disable any behavior:\n        if(gd._transitioningWithDuration) {\n            e.preventDefault();\n            e.stopPropagation();\n            return;\n        }\n\n        recomputeAxisLists();\n\n        clearTimeout(redrawTimer);\n\n        var wheelDelta = -e.deltaY;\n        if(!isFinite(wheelDelta)) wheelDelta = e.wheelDelta / 10;\n        if(!isFinite(wheelDelta)) {\n            Lib.log('Did not find wheel motion attributes: ', e);\n            return;\n        }\n\n        var zoom = Math.exp(-Math.min(Math.max(wheelDelta, -20), 20) / 200);\n        var gbb = mainplot.draglayer.select('.nsewdrag').node().getBoundingClientRect();\n        var xfrac = (e.clientX - gbb.left) / gbb.width;\n        var yfrac = (gbb.bottom - e.clientY) / gbb.height;\n        var i;\n\n        function zoomWheelOneAxis(ax, centerFraction, zoom) {\n            if(ax.fixedrange) return;\n\n            var axRange = Lib.simpleMap(ax.range, ax.r2l);\n            var v0 = axRange[0] + (axRange[1] - axRange[0]) * centerFraction;\n            function doZoom(v) { return ax.l2r(v0 + (v - v0) * zoom); }\n            ax.range = axRange.map(doZoom);\n        }\n\n        if(editX) {\n            // if we're only zooming this axis because of constraints,\n            // zoom it about the center\n            if(!ew) xfrac = 0.5;\n\n            for(i = 0; i < xaxes.length; i++) {\n                zoomWheelOneAxis(xaxes[i], xfrac, zoom);\n            }\n\n            scrollViewBox[2] *= zoom;\n            scrollViewBox[0] += scrollViewBox[2] * xfrac * (1 / zoom - 1);\n        }\n        if(editY) {\n            if(!ns) yfrac = 0.5;\n\n            for(i = 0; i < yaxes.length; i++) {\n                zoomWheelOneAxis(yaxes[i], yfrac, zoom);\n            }\n\n            scrollViewBox[3] *= zoom;\n            scrollViewBox[1] += scrollViewBox[3] * (1 - yfrac) * (1 / zoom - 1);\n        }\n\n        // viewbox redraw at first\n        updateSubplots(scrollViewBox);\n        ticksAndAnnotations();\n\n        // then replot after a delay to make sure\n        // no more scrolling is coming\n        redrawTimer = setTimeout(function() {\n            scrollViewBox = [0, 0, pw, ph];\n            dragTail();\n        }, REDRAWDELAY);\n\n        e.preventDefault();\n        return;\n    }\n\n    // everything but the corners gets wheel zoom\n    if(ns.length * ew.length !== 1) {\n        attachWheelEventHandler(dragger, zoomWheel);\n    }\n\n    // plotDrag: move the plot in response to a drag\n    function plotDrag(dx, dy) {\n        // If a transition is in progress, then disable any behavior:\n        if(gd._transitioningWithDuration) {\n            return;\n        }\n\n        // prevent axis drawing from monkeying with margins until we're done\n        gd._fullLayout._replotting = true;\n\n        if(xActive === 'ew' || yActive === 'ns') {\n            if(xActive) dragAxList(xaxes, dx);\n            if(yActive) dragAxList(yaxes, dy);\n            updateSubplots([xActive ? -dx : 0, yActive ? -dy : 0, pw, ph]);\n            ticksAndAnnotations();\n            return;\n        }\n\n        // dz: set a new value for one end (0 or 1) of an axis array axArray,\n        // and return a pixel shift for that end for the viewbox\n        // based on pixel drag distance d\n        // TODO: this makes (generally non-fatal) errors when you get\n        // near floating point limits\n        function dz(axArray, end, d) {\n            var otherEnd = 1 - end;\n            var movedAx;\n            var newLinearizedEnd;\n            for(var i = 0; i < axArray.length; i++) {\n                var axi = axArray[i];\n                if(axi.fixedrange) continue;\n                movedAx = axi;\n                newLinearizedEnd = axi._rl[otherEnd] +\n                    (axi._rl[end] - axi._rl[otherEnd]) / dZoom(d / axi._length);\n                var newEnd = axi.l2r(newLinearizedEnd);\n\n                // if l2r comes back false or undefined, it means we've dragged off\n                // the end of valid ranges - so stop.\n                if(newEnd !== false && newEnd !== undefined) axi.range[end] = newEnd;\n            }\n            return movedAx._length * (movedAx._rl[end] - newLinearizedEnd) /\n                (movedAx._rl[end] - movedAx._rl[otherEnd]);\n        }\n\n        if(isSubplotConstrained && xActive && yActive) {\n            // dragging a corner of a constrained subplot:\n            // respect the fixed corner, but harmonize dx and dy\n            var dxySign = ((xActive === 'w') === (yActive === 'n')) ? 1 : -1;\n            var dxyFraction = (dx / pw + dxySign * dy / ph) / 2;\n            dx = dxyFraction * pw;\n            dy = dxySign * dxyFraction * ph;\n        }\n\n        if(xActive === 'w') dx = dz(xaxes, 0, dx);\n        else if(xActive === 'e') dx = dz(xaxes, 1, -dx);\n        else if(!xActive) dx = 0;\n\n        if(yActive === 'n') dy = dz(yaxes, 1, dy);\n        else if(yActive === 's') dy = dz(yaxes, 0, -dy);\n        else if(!yActive) dy = 0;\n\n        var x0 = (xActive === 'w') ? dx : 0;\n        var y0 = (yActive === 'n') ? dy : 0;\n\n        if(isSubplotConstrained) {\n            var i;\n            if(!xActive && yActive.length === 1) {\n                // dragging one end of the y axis of a constrained subplot\n                // scale the other axis the same about its middle\n                for(i = 0; i < xaxes.length; i++) {\n                    xaxes[i].range = xaxes[i]._r.slice();\n                    scaleZoom(xaxes[i], 1 - dy / ph);\n                }\n                dx = dy * pw / ph;\n                x0 = dx / 2;\n            }\n            if(!yActive && xActive.length === 1) {\n                for(i = 0; i < yaxes.length; i++) {\n                    yaxes[i].range = yaxes[i]._r.slice();\n                    scaleZoom(yaxes[i], 1 - dx / pw);\n                }\n                dy = dx * ph / pw;\n                y0 = dy / 2;\n            }\n        }\n\n        updateSubplots([x0, y0, pw - dx, ph - dy]);\n        ticksAndAnnotations();\n    }\n\n    // Draw ticks and annotations (and other components) when ranges change.\n    // Also records the ranges that have changed for use by update at the end.\n    function ticksAndAnnotations() {\n        var activeAxIds = [];\n        var i;\n\n        function pushActiveAxIds(axList) {\n            for(i = 0; i < axList.length; i++) {\n                if(!axList[i].fixedrange) activeAxIds.push(axList[i]._id);\n            }\n        }\n\n        if(editX) {\n            pushActiveAxIds(xaxes);\n            pushActiveAxIds(links.xaxes);\n        }\n        if(editY) {\n            pushActiveAxIds(yaxes);\n            pushActiveAxIds(links.yaxes);\n        }\n\n        updates = {};\n        for(i = 0; i < activeAxIds.length; i++) {\n            var axId = activeAxIds[i];\n            var ax = getFromId(gd, axId);\n            Axes.drawOne(gd, ax, {skipTitle: true});\n            updates[ax._name + '.range[0]'] = ax.range[0];\n            updates[ax._name + '.range[1]'] = ax.range[1];\n        }\n\n        Axes.redrawComponents(gd, activeAxIds);\n    }\n\n    function doubleClick() {\n        if(gd._transitioningWithDuration) return;\n\n        var doubleClickConfig = gd._context.doubleClick;\n        var axList = (xActive ? xaxes : []).concat(yActive ? yaxes : []);\n        var attrs = {};\n\n        var ax, i, rangeInitial;\n\n        // For reset+autosize mode:\n        // If *any* of the main axes is not at its initial range\n        // (or autoranged, if we have no initial range, to match the logic in\n        // doubleClickConfig === 'reset' below), we reset.\n        // If they are *all* at their initial ranges, then we autosize.\n        if(doubleClickConfig === 'reset+autosize') {\n\n            doubleClickConfig = 'autosize';\n\n            for(i = 0; i < axList.length; i++) {\n                ax = axList[i];\n                if((ax._rangeInitial && (\n                        ax.range[0] !== ax._rangeInitial[0] ||\n                        ax.range[1] !== ax._rangeInitial[1]\n                    )) ||\n                    (!ax._rangeInitial && !ax.autorange)\n                ) {\n                    doubleClickConfig = 'reset';\n                    break;\n                }\n            }\n        }\n\n        if(doubleClickConfig === 'autosize') {\n            // don't set the linked axes here, so relayout marks them as shrinkable\n            // and we autosize just to the requested axis/axes\n            for(i = 0; i < axList.length; i++) {\n                ax = axList[i];\n                if(!ax.fixedrange) attrs[ax._name + '.autorange'] = true;\n            }\n        }\n        else if(doubleClickConfig === 'reset') {\n            // when we're resetting, reset all linked axes too, so we get back\n            // to the fully-auto-with-constraints situation\n            if(xActive || isSubplotConstrained) axList = axList.concat(links.xaxes);\n            if(yActive && !isSubplotConstrained) axList = axList.concat(links.yaxes);\n\n            if(isSubplotConstrained) {\n                if(!xActive) axList = axList.concat(xaxes);\n                else if(!yActive) axList = axList.concat(yaxes);\n            }\n\n            for(i = 0; i < axList.length; i++) {\n                ax = axList[i];\n\n                if(!ax.fixedrange) {\n                    if(!ax._rangeInitial) {\n                        attrs[ax._name + '.autorange'] = true;\n                    } else {\n                        rangeInitial = ax._rangeInitial;\n                        attrs[ax._name + '.range[0]'] = rangeInitial[0];\n                        attrs[ax._name + '.range[1]'] = rangeInitial[1];\n                    }\n                }\n            }\n        }\n\n        gd.emit('plotly_doubleclick', null);\n        Registry.call('_guiRelayout', gd, attrs);\n    }\n\n    // dragTail - finish a drag event with a redraw\n    function dragTail() {\n        // put the subplot viewboxes back to default (Because we're going to)\n        // be repositioning the data in the relayout. But DON'T call\n        // ticksAndAnnotations again - it's unnecessary and would overwrite `updates`\n        updateSubplots([0, 0, pw, ph]);\n\n        // since we may have been redrawing some things during the drag, we may have\n        // accumulated MathJax promises - wait for them before we relayout.\n        Lib.syncOrAsync([\n            Plots.previousPromises,\n            function() {\n                gd._fullLayout._replotting = false;\n                Registry.call('_guiRelayout', gd, updates);\n            }\n        ], gd);\n    }\n\n    // x/y scaleFactor stash,\n    // minimizes number of per-point DOM updates in updateSubplots below\n    var xScaleFactorOld, yScaleFactorOld;\n\n    // updateSubplots - find all plot viewboxes that should be\n    // affected by this drag, and update them. look for all plots\n    // sharing an affected axis (including the one being dragged),\n    // includes also scattergl and splom logic.\n    function updateSubplots(viewBox) {\n        var fullLayout = gd._fullLayout;\n        var plotinfos = fullLayout._plots;\n        var subplots = fullLayout._subplots.cartesian;\n        var i, sp, xa, ya;\n\n        if(hasSplom) {\n            Registry.subplotsRegistry.splom.drag(gd);\n        }\n\n        if(hasScatterGl) {\n            for(i = 0; i < subplots.length; i++) {\n                sp = plotinfos[subplots[i]];\n                xa = sp.xaxis;\n                ya = sp.yaxis;\n\n                if(sp._scene) {\n                    var xrng = Lib.simpleMap(xa.range, xa.r2l);\n                    var yrng = Lib.simpleMap(ya.range, ya.r2l);\n                    sp._scene.update({range: [xrng[0], yrng[0], xrng[1], yrng[1]]});\n                }\n            }\n        }\n\n        if(hasSplom || hasScatterGl) {\n            clearGlCanvases(gd);\n            redrawReglTraces(gd);\n        }\n\n        if(hasSVG) {\n            var xScaleFactor = viewBox[2] / xa0._length;\n            var yScaleFactor = viewBox[3] / ya0._length;\n\n            for(i = 0; i < subplots.length; i++) {\n                sp = plotinfos[subplots[i]];\n                xa = sp.xaxis;\n                ya = sp.yaxis;\n\n                var editX2 = editX && !xa.fixedrange && xaHash[xa._id];\n                var editY2 = editY && !ya.fixedrange && yaHash[ya._id];\n\n                var xScaleFactor2, yScaleFactor2;\n                var clipDx, clipDy;\n\n                if(editX2) {\n                    xScaleFactor2 = xScaleFactor;\n                    clipDx = ew ? viewBox[0] : getShift(xa, xScaleFactor2);\n                } else {\n                    xScaleFactor2 = getLinkedScaleFactor(xa, xScaleFactor, yScaleFactor);\n                    clipDx = scaleAndGetShift(xa, xScaleFactor2);\n                }\n\n                if(editY2) {\n                    yScaleFactor2 = yScaleFactor;\n                    clipDy = ns ? viewBox[1] : getShift(ya, yScaleFactor2);\n                } else {\n                    yScaleFactor2 = getLinkedScaleFactor(ya, xScaleFactor, yScaleFactor);\n                    clipDy = scaleAndGetShift(ya, yScaleFactor2);\n                }\n\n                // don't scale at all if neither axis is scalable here\n                if(!xScaleFactor2 && !yScaleFactor2) {\n                    continue;\n                }\n\n                // but if only one is, reset the other axis scaling\n                if(!xScaleFactor2) xScaleFactor2 = 1;\n                if(!yScaleFactor2) yScaleFactor2 = 1;\n\n                var plotDx = xa._offset - clipDx / xScaleFactor2;\n                var plotDy = ya._offset - clipDy / yScaleFactor2;\n\n                // TODO could be more efficient here:\n                // setTranslate and setScale do a lot of extra work\n                // when working independently, should perhaps combine\n                // them into a single routine.\n                sp.clipRect\n                    .call(Drawing.setTranslate, clipDx, clipDy)\n                    .call(Drawing.setScale, xScaleFactor2, yScaleFactor2);\n\n                sp.plot\n                    .call(Drawing.setTranslate, plotDx, plotDy)\n                    .call(Drawing.setScale, 1 / xScaleFactor2, 1 / yScaleFactor2);\n\n                // apply an inverse scale to individual points to counteract\n                // the scale of the trace group.\n                // apply only when scale changes, as adjusting the scale of\n                // all the points can be expansive.\n                if(xScaleFactor2 !== xScaleFactorOld || yScaleFactor2 !== yScaleFactorOld) {\n                    Drawing.setPointGroupScale(sp.zoomScalePts, xScaleFactor2, yScaleFactor2);\n                    Drawing.setTextPointsScale(sp.zoomScaleTxt, xScaleFactor2, yScaleFactor2);\n                }\n\n                Drawing.hideOutsideRangePoints(sp.clipOnAxisFalseTraces, sp);\n\n                // update x/y scaleFactor stash\n                xScaleFactorOld = xScaleFactor2;\n                yScaleFactorOld = yScaleFactor2;\n            }\n        }\n    }\n\n    // Find the appropriate scaling for this axis, if it's linked to the\n    // dragged axes by constraints. 0 is special, it means this axis shouldn't\n    // ever be scaled (will be converted to 1 if the other axis is scaled)\n    function getLinkedScaleFactor(ax, xScaleFactor, yScaleFactor) {\n        if(ax.fixedrange) return 0;\n\n        if(editX && links.xaHash[ax._id]) {\n            return xScaleFactor;\n        }\n        if(editY && (isSubplotConstrained ? links.xaHash : links.yaHash)[ax._id]) {\n            return yScaleFactor;\n        }\n        return 0;\n    }\n\n    function scaleAndGetShift(ax, scaleFactor) {\n        if(scaleFactor) {\n            ax.range = ax._r.slice();\n            scaleZoom(ax, scaleFactor);\n            return getShift(ax, scaleFactor);\n        }\n        return 0;\n    }\n\n    function getShift(ax, scaleFactor) {\n        return ax._length * (1 - scaleFactor) * FROM_TL[ax.constraintoward || 'middle'];\n    }\n\n    return dragger;\n}\n\nfunction makeDragger(plotinfo, nodeName, dragClass, cursor) {\n    var dragger3 = Lib.ensureSingle(plotinfo.draglayer, nodeName, dragClass, function(s) {\n        s.classed('drag', true)\n            .style({fill: 'transparent', 'stroke-width': 0})\n            .attr('data-subplot', plotinfo.id);\n    });\n\n    dragger3.call(setCursor, cursor);\n\n    return dragger3.node();\n}\n\nfunction makeRectDragger(plotinfo, dragClass, cursor, x, y, w, h) {\n    var dragger = makeDragger(plotinfo, 'rect', dragClass, cursor);\n    d3.select(dragger).call(Drawing.setRect, x, y, w, h);\n    return dragger;\n}\n\nfunction isDirectionActive(axList, activeVal) {\n    for(var i = 0; i < axList.length; i++) {\n        if(!axList[i].fixedrange) return activeVal;\n    }\n    return '';\n}\n\nfunction getEndText(ax, end) {\n    var initialVal = ax.range[end];\n    var diff = Math.abs(initialVal - ax.range[1 - end]);\n    var dig;\n\n    // TODO: this should basically be ax.r2d but we're doing extra\n    // rounding here... can we clean up at all?\n    if(ax.type === 'date') {\n        return initialVal;\n    }\n    else if(ax.type === 'log') {\n        dig = Math.ceil(Math.max(0, -Math.log(diff) / Math.LN10)) + 3;\n        return d3.format('.' + dig + 'g')(Math.pow(10, initialVal));\n    }\n    else { // linear numeric (or category... but just show numbers here)\n        dig = Math.floor(Math.log(Math.abs(initialVal)) / Math.LN10) -\n            Math.floor(Math.log(diff) / Math.LN10) + 4;\n        return d3.format('.' + String(dig) + 'g')(initialVal);\n    }\n}\n\nfunction zoomAxRanges(axList, r0Fraction, r1Fraction, updates, linkedAxes) {\n    var i,\n        axi,\n        axRangeLinear0,\n        axRangeLinearSpan;\n\n    for(i = 0; i < axList.length; i++) {\n        axi = axList[i];\n        if(axi.fixedrange) continue;\n\n        axRangeLinear0 = axi._rl[0];\n        axRangeLinearSpan = axi._rl[1] - axRangeLinear0;\n        axi.range = [\n            axi.l2r(axRangeLinear0 + axRangeLinearSpan * r0Fraction),\n            axi.l2r(axRangeLinear0 + axRangeLinearSpan * r1Fraction)\n        ];\n\n        updates[axi._name + '.range[0]'] = axi.range[0];\n        updates[axi._name + '.range[1]'] = axi.range[1];\n    }\n\n    // zoom linked axes about their centers\n    if(linkedAxes && linkedAxes.length) {\n        var linkedR0Fraction = (r0Fraction + (1 - r1Fraction)) / 2;\n\n        zoomAxRanges(linkedAxes, linkedR0Fraction, 1 - linkedR0Fraction, updates);\n    }\n}\n\nfunction dragAxList(axList, pix) {\n    for(var i = 0; i < axList.length; i++) {\n        var axi = axList[i];\n        if(!axi.fixedrange) {\n            axi.range = [\n                axi.l2r(axi._rl[0] - pix / axi._m),\n                axi.l2r(axi._rl[1] - pix / axi._m)\n            ];\n        }\n    }\n}\n\n// common transform for dragging one end of an axis\n// d>0 is compressing scale (cursor is over the plot,\n//  the axis end should move with the cursor)\n// d<0 is expanding (cursor is off the plot, axis end moves\n//  nonlinearly so you can expand far)\nfunction dZoom(d) {\n    return 1 - ((d >= 0) ? Math.min(d, 0.9) :\n        1 / (1 / Math.max(d, -0.3) + 3.222));\n}\n\nfunction getDragCursor(nsew, dragmode, isMainDrag) {\n    if(!nsew) return 'pointer';\n    if(nsew === 'nsew') {\n        // in this case here, clear cursor and\n        // use the cursor style set on <g .draglayer>\n        if(isMainDrag) return '';\n        if(dragmode === 'pan') return 'move';\n        return 'crosshair';\n    }\n    return nsew.toLowerCase() + '-resize';\n}\n\nfunction makeZoombox(zoomlayer, lum, xs, ys, path0) {\n    return zoomlayer.append('path')\n        .attr('class', 'zoombox')\n        .style({\n            'fill': lum > 0.2 ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0)',\n            'stroke-width': 0\n        })\n        .attr('transform', 'translate(' + xs + ', ' + ys + ')')\n        .attr('d', path0 + 'Z');\n}\n\nfunction makeCorners(zoomlayer, xs, ys) {\n    return zoomlayer.append('path')\n        .attr('class', 'zoombox-corners')\n        .style({\n            fill: Color.background,\n            stroke: Color.defaultLine,\n            'stroke-width': 1,\n            opacity: 0\n        })\n        .attr('transform', 'translate(' + xs + ', ' + ys + ')')\n        .attr('d', 'M0,0Z');\n}\n\nfunction updateZoombox(zb, corners, box, path0, dimmed, lum) {\n    zb.attr('d',\n        path0 + 'M' + (box.l) + ',' + (box.t) + 'v' + (box.h) +\n        'h' + (box.w) + 'v-' + (box.h) + 'h-' + (box.w) + 'Z');\n    transitionZoombox(zb, corners, dimmed, lum);\n}\n\nfunction transitionZoombox(zb, corners, dimmed, lum) {\n    if(!dimmed) {\n        zb.transition()\n            .style('fill', lum > 0.2 ? 'rgba(0,0,0,0.4)' :\n                'rgba(255,255,255,0.3)')\n            .duration(200);\n        corners.transition()\n            .style('opacity', 1)\n            .duration(200);\n    }\n}\n\nfunction removeZoombox(gd) {\n    d3.select(gd)\n        .selectAll('.zoombox,.js-zoombox-backdrop,.js-zoombox-menu,.zoombox-corners')\n        .remove();\n}\n\nfunction showDoubleClickNotifier(gd) {\n    if(SHOWZOOMOUTTIP && gd.data && gd._context.showTips) {\n        Lib.notifier(Lib._(gd, 'Double-click to zoom back out'), 'long');\n        SHOWZOOMOUTTIP = false;\n    }\n}\n\nfunction isSelectOrLasso(dragmode) {\n    return dragmode === 'lasso' || dragmode === 'select';\n}\n\nfunction xCorners(box, y0) {\n    return 'M' +\n        (box.l - 0.5) + ',' + (y0 - MINZOOM - 0.5) +\n        'h-3v' + (2 * MINZOOM + 1) + 'h3ZM' +\n        (box.r + 0.5) + ',' + (y0 - MINZOOM - 0.5) +\n        'h3v' + (2 * MINZOOM + 1) + 'h-3Z';\n}\n\nfunction yCorners(box, x0) {\n    return 'M' +\n        (x0 - MINZOOM - 0.5) + ',' + (box.t - 0.5) +\n        'v-3h' + (2 * MINZOOM + 1) + 'v3ZM' +\n        (x0 - MINZOOM - 0.5) + ',' + (box.b + 0.5) +\n        'v3h' + (2 * MINZOOM + 1) + 'v-3Z';\n}\n\nfunction xyCorners(box) {\n    var clen = Math.floor(Math.min(box.b - box.t, box.r - box.l, MINZOOM) / 2);\n    return 'M' +\n        (box.l - 3.5) + ',' + (box.t - 0.5 + clen) + 'h3v' + (-clen) +\n            'h' + clen + 'v-3h-' + (clen + 3) + 'ZM' +\n        (box.r + 3.5) + ',' + (box.t - 0.5 + clen) + 'h-3v' + (-clen) +\n            'h' + (-clen) + 'v-3h' + (clen + 3) + 'ZM' +\n        (box.r + 3.5) + ',' + (box.b + 0.5 - clen) + 'h-3v' + clen +\n            'h' + (-clen) + 'v3h' + (clen + 3) + 'ZM' +\n        (box.l - 3.5) + ',' + (box.b + 0.5 - clen) + 'h3v' + clen +\n            'h' + clen + 'v3h-' + (clen + 3) + 'Z';\n}\n\nfunction calcLinks(gd, xaHash, yaHash) {\n    var constraintGroups = gd._fullLayout._axisConstraintGroups;\n    var isSubplotConstrained = false;\n    var xLinks = {};\n    var yLinks = {};\n    var xID, yID, xLinkID, yLinkID;\n\n    for(var i = 0; i < constraintGroups.length; i++) {\n        var group = constraintGroups[i];\n        // check if any of the x axes we're dragging is in this constraint group\n        for(xID in xaHash) {\n            if(group[xID]) {\n                // put the rest of these axes into xLinks, if we're not already\n                // dragging them, so we know to scale these axes automatically too\n                // to match the changes in the dragged x axes\n                for(xLinkID in group) {\n                    if(!(xLinkID.charAt(0) === 'x' ? xaHash : yaHash)[xLinkID]) {\n                        xLinks[xLinkID] = 1;\n                    }\n                }\n\n                // check if the x and y axes of THIS drag are linked\n                for(yID in yaHash) {\n                    if(group[yID]) isSubplotConstrained = true;\n                }\n            }\n        }\n\n        // now check if any of the y axes we're dragging is in this constraint group\n        // only look for outside links, as we've already checked for links within the dragger\n        for(yID in yaHash) {\n            if(group[yID]) {\n                for(yLinkID in group) {\n                    if(!(yLinkID.charAt(0) === 'x' ? xaHash : yaHash)[yLinkID]) {\n                        yLinks[yLinkID] = 1;\n                    }\n                }\n            }\n        }\n    }\n\n    if(isSubplotConstrained) {\n        // merge xLinks and yLinks if the subplot is constrained,\n        // since we'll always apply both anyway and the two will contain\n        // duplicates\n        Lib.extendFlat(xLinks, yLinks);\n        yLinks = {};\n    }\n\n    var xaHashLinked = {};\n    var xaxesLinked = [];\n    for(xLinkID in xLinks) {\n        var xa = getFromId(gd, xLinkID);\n        xaxesLinked.push(xa);\n        xaHashLinked[xa._id] = xa;\n    }\n\n    var yaHashLinked = {};\n    var yaxesLinked = [];\n    for(yLinkID in yLinks) {\n        var ya = getFromId(gd, yLinkID);\n        yaxesLinked.push(ya);\n        yaHashLinked[ya._id] = ya;\n    }\n\n    return {\n        xaHash: xaHashLinked,\n        yaHash: yaHashLinked,\n        xaxes: xaxesLinked,\n        yaxes: yaxesLinked,\n        isSubplotConstrained: isSubplotConstrained\n    };\n}\n\n// still seems to be some confusion about onwheel vs onmousewheel...\nfunction attachWheelEventHandler(element, handler) {\n    if(!supportsPassive) {\n        if(element.onwheel !== undefined) element.onwheel = handler;\n        else if(element.onmousewheel !== undefined) element.onmousewheel = handler;\n    }\n    else {\n        var wheelEventName = element.onwheel !== undefined ? 'wheel' : 'mousewheel';\n\n        if(element._onwheel) {\n            element.removeEventListener(wheelEventName, element._onwheel);\n        }\n        element._onwheel = handler;\n\n        element.addEventListener(wheelEventName, handler, {passive: false});\n    }\n}\n\nfunction hashValues(hash) {\n    var out = [];\n    for(var k in hash) out.push(hash[k]);\n    return out;\n}\n\nmodule.exports = {\n    makeDragBox: makeDragBox,\n\n    makeDragger: makeDragger,\n    makeRectDragger: makeRectDragger,\n    makeZoombox: makeZoombox,\n    makeCorners: makeCorners,\n\n    updateZoombox: updateZoombox,\n    xyCorners: xyCorners,\n    transitionZoombox: transitionZoombox,\n    removeZoombox: removeZoombox,\n    showDoubleClickNotifier: showDoubleClickNotifier,\n\n    attachWheelEventHandler: attachWheelEventHandler\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
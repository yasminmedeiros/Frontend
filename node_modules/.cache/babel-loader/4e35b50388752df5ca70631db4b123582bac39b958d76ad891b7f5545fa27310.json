{"ast":null,"code":"module.exports = rotate;\n\n/**\n * Rotates a mat4 by the given angle\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nfunction rotate(out, a, rad, axis) {\n  var x = axis[0],\n    y = axis[1],\n    z = axis[2],\n    len = Math.sqrt(x * x + y * y + z * z),\n    s,\n    c,\n    t,\n    a00,\n    a01,\n    a02,\n    a03,\n    a10,\n    a11,\n    a12,\n    a13,\n    a20,\n    a21,\n    a22,\n    a23,\n    b00,\n    b01,\n    b02,\n    b10,\n    b11,\n    b12,\n    b20,\n    b21,\n    b22;\n  if (Math.abs(len) < 0.000001) {\n    return null;\n  }\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n;","map":{"version":3,"names":["module","exports","rotate","out","a","rad","axis","x","y","z","len","Math","sqrt","s","c","t","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","b00","b01","b02","b10","b11","b12","b20","b21","b22","abs","sin","cos"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/gl-mat4/rotate.js"],"sourcesContent":["module.exports = rotate;\n\n/**\n * Rotates a mat4 by the given angle\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nfunction rotate(out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < 0.000001) { return null; }\n    \n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\nvar paren = require('parenthesis');\nmodule.exports = function splitBy(string, separator, o) {\n  if (string == null) throw Error('First argument should be a string');\n  if (separator == null) throw Error('Separator should be a string or a RegExp');\n  if (!o) o = {};else if (typeof o === 'string' || Array.isArray(o)) {\n    o = {\n      ignore: o\n    };\n  }\n  if (o.escape == null) o.escape = true;\n  if (o.ignore == null) o.ignore = ['[]', '()', '{}', '<>', '\"\"', \"''\", '``', '“”', '«»'];else {\n    if (typeof o.ignore === 'string') {\n      o.ignore = [o.ignore];\n    }\n    o.ignore = o.ignore.map(function (pair) {\n      // '\"' → '\"\"'\n      if (pair.length === 1) pair = pair + pair;\n      return pair;\n    });\n  }\n  var tokens = paren.parse(string, {\n    flat: true,\n    brackets: o.ignore\n  });\n  var str = tokens[0];\n  var parts = str.split(separator);\n\n  // join parts separated by escape\n  if (o.escape) {\n    var cleanParts = [];\n    for (var i = 0; i < parts.length; i++) {\n      var prev = parts[i];\n      var part = parts[i + 1];\n      if (prev[prev.length - 1] === '\\\\' && prev[prev.length - 2] !== '\\\\') {\n        cleanParts.push(prev + separator + part);\n        i++;\n      } else {\n        cleanParts.push(prev);\n      }\n    }\n    parts = cleanParts;\n  }\n\n  // open parens pack & apply unquotes, if any\n  for (var i = 0; i < parts.length; i++) {\n    tokens[0] = parts[i];\n    parts[i] = paren.stringify(tokens, {\n      flat: true\n    });\n  }\n  return parts;\n};","map":{"version":3,"names":["paren","require","module","exports","splitBy","string","separator","o","Error","Array","isArray","ignore","escape","map","pair","length","tokens","parse","flat","brackets","str","parts","split","cleanParts","i","prev","part","push","stringify"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/string-split-by/index.js"],"sourcesContent":["'use strict'\r\n\r\nvar paren = require('parenthesis')\r\n\r\nmodule.exports = function splitBy (string, separator, o) {\r\n\tif (string == null) throw Error('First argument should be a string')\r\n\tif (separator == null) throw Error('Separator should be a string or a RegExp')\r\n\r\n\tif (!o) o = {}\r\n\telse if (typeof o === 'string' || Array.isArray(o)) {\r\n\t\to = {ignore: o}\r\n\t}\r\n\r\n\tif (o.escape == null) o.escape = true\r\n\tif (o.ignore == null) o.ignore = ['[]', '()', '{}', '<>', '\"\"', \"''\", '``', '“”', '«»']\r\n\telse {\r\n\t\tif (typeof o.ignore === 'string') {o.ignore = [o.ignore]}\r\n\r\n\t\to.ignore = o.ignore.map(function (pair) {\r\n\t\t\t// '\"' → '\"\"'\r\n\t\t\tif (pair.length === 1) pair = pair + pair\r\n\t\t\treturn pair\r\n\t\t})\r\n\t}\r\n\r\n\tvar tokens = paren.parse(string, {flat: true, brackets: o.ignore})\r\n\tvar str = tokens[0]\r\n\r\n\tvar parts = str.split(separator)\r\n\r\n\t// join parts separated by escape\r\n\tif (o.escape) {\r\n\t\tvar cleanParts = []\r\n\t\tfor (var i = 0; i < parts.length; i++) {\r\n\t\t\tvar prev = parts[i]\r\n\t\t\tvar part = parts[i + 1]\r\n\r\n\t\t\tif (prev[prev.length - 1] === '\\\\' && prev[prev.length - 2] !== '\\\\') {\r\n\t\t\t\tcleanParts.push(prev + separator + part)\r\n\t\t\t\ti++\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcleanParts.push(prev)\r\n\t\t\t}\r\n\t\t}\r\n\t\tparts = cleanParts\r\n\t}\r\n\r\n\t// open parens pack & apply unquotes, if any\r\n\tfor (var i = 0; i < parts.length; i++) {\r\n\t\ttokens[0] = parts[i]\r\n\t\tparts[i] = paren.stringify(tokens, {flat: true})\r\n\t}\r\n\r\n\treturn parts\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,aAAa,CAAC;AAElCC,MAAM,CAACC,OAAO,GAAG,SAASC,OAAO,CAAEC,MAAM,EAAEC,SAAS,EAAEC,CAAC,EAAE;EACxD,IAAIF,MAAM,IAAI,IAAI,EAAE,MAAMG,KAAK,CAAC,mCAAmC,CAAC;EACpE,IAAIF,SAAS,IAAI,IAAI,EAAE,MAAME,KAAK,CAAC,0CAA0C,CAAC;EAE9E,IAAI,CAACD,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,MACT,IAAI,OAAOA,CAAC,KAAK,QAAQ,IAAIE,KAAK,CAACC,OAAO,CAACH,CAAC,CAAC,EAAE;IACnDA,CAAC,GAAG;MAACI,MAAM,EAAEJ;IAAC,CAAC;EAChB;EAEA,IAAIA,CAAC,CAACK,MAAM,IAAI,IAAI,EAAEL,CAAC,CAACK,MAAM,GAAG,IAAI;EACrC,IAAIL,CAAC,CAACI,MAAM,IAAI,IAAI,EAAEJ,CAAC,CAACI,MAAM,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,MAClF;IACJ,IAAI,OAAOJ,CAAC,CAACI,MAAM,KAAK,QAAQ,EAAE;MAACJ,CAAC,CAACI,MAAM,GAAG,CAACJ,CAAC,CAACI,MAAM,CAAC;IAAA;IAExDJ,CAAC,CAACI,MAAM,GAAGJ,CAAC,CAACI,MAAM,CAACE,GAAG,CAAC,UAAUC,IAAI,EAAE;MACvC;MACA,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAED,IAAI,GAAGA,IAAI,GAAGA,IAAI;MACzC,OAAOA,IAAI;IACZ,CAAC,CAAC;EACH;EAEA,IAAIE,MAAM,GAAGhB,KAAK,CAACiB,KAAK,CAACZ,MAAM,EAAE;IAACa,IAAI,EAAE,IAAI;IAAEC,QAAQ,EAAEZ,CAAC,CAACI;EAAM,CAAC,CAAC;EAClE,IAAIS,GAAG,GAAGJ,MAAM,CAAC,CAAC,CAAC;EAEnB,IAAIK,KAAK,GAAGD,GAAG,CAACE,KAAK,CAAChB,SAAS,CAAC;;EAEhC;EACA,IAAIC,CAAC,CAACK,MAAM,EAAE;IACb,IAAIW,UAAU,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACN,MAAM,EAAES,CAAC,EAAE,EAAE;MACtC,IAAIC,IAAI,GAAGJ,KAAK,CAACG,CAAC,CAAC;MACnB,IAAIE,IAAI,GAAGL,KAAK,CAACG,CAAC,GAAG,CAAC,CAAC;MAEvB,IAAIC,IAAI,CAACA,IAAI,CAACV,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,IAAIU,IAAI,CAACA,IAAI,CAACV,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;QACrEQ,UAAU,CAACI,IAAI,CAACF,IAAI,GAAGnB,SAAS,GAAGoB,IAAI,CAAC;QACxCF,CAAC,EAAE;MACJ,CAAC,MACI;QACJD,UAAU,CAACI,IAAI,CAACF,IAAI,CAAC;MACtB;IACD;IACAJ,KAAK,GAAGE,UAAU;EACnB;;EAEA;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACN,MAAM,EAAES,CAAC,EAAE,EAAE;IACtCR,MAAM,CAAC,CAAC,CAAC,GAAGK,KAAK,CAACG,CAAC,CAAC;IACpBH,KAAK,CAACG,CAAC,CAAC,GAAGxB,KAAK,CAAC4B,SAAS,CAACZ,MAAM,EAAE;MAACE,IAAI,EAAE;IAAI,CAAC,CAAC;EACjD;EAEA,OAAOG,KAAK;AACb,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
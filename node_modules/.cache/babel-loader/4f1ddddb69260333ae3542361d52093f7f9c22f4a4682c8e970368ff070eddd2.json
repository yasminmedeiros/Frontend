{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\nvar BADNUM = require('../../constants/numerical').BADNUM;\nvar subTypes = require('./subtypes');\nvar calcColorscale = require('./colorscale_calc');\nvar arraysToCalcdata = require('./arrays_to_calcdata');\nvar calcSelection = require('./calc_selection');\nfunction calc(gd, trace) {\n  var fullLayout = gd._fullLayout;\n  var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n  var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n  var x = xa.makeCalcdata(trace, 'x');\n  var y = ya.makeCalcdata(trace, 'y');\n  var serieslen = trace._length;\n  var cd = new Array(serieslen);\n  var ids = trace.ids;\n  var stackGroupOpts = getStackOpts(trace, fullLayout, xa, ya);\n  var interpolateGaps = false;\n  var isV, i, j, k, interpolate, vali;\n  setFirstScatter(fullLayout, trace);\n  var xAttr = 'x';\n  var yAttr = 'y';\n  var posAttr;\n  if (stackGroupOpts) {\n    stackGroupOpts.traceIndices.push(trace.index);\n    isV = stackGroupOpts.orientation === 'v';\n    // size, like we use for bar\n    if (isV) {\n      yAttr = 's';\n      posAttr = 'x';\n    } else {\n      xAttr = 's';\n      posAttr = 'y';\n    }\n    interpolate = stackGroupOpts.stackgaps === 'interpolate';\n  } else {\n    var ppad = calcMarkerSize(trace, serieslen);\n    calcAxisExpansion(gd, trace, xa, ya, x, y, ppad);\n  }\n  for (i = 0; i < serieslen; i++) {\n    var cdi = cd[i] = {};\n    var xValid = isNumeric(x[i]);\n    var yValid = isNumeric(y[i]);\n    if (xValid && yValid) {\n      cdi[xAttr] = x[i];\n      cdi[yAttr] = y[i];\n    }\n    // if we're stacking we need to hold on to all valid positions\n    // even with invalid sizes\n    else if (stackGroupOpts && (isV ? xValid : yValid)) {\n      cdi[posAttr] = isV ? x[i] : y[i];\n      cdi.gap = true;\n      if (interpolate) {\n        cdi.s = BADNUM;\n        interpolateGaps = true;\n      } else {\n        cdi.s = 0;\n      }\n    } else {\n      cdi[xAttr] = cdi[yAttr] = BADNUM;\n    }\n    if (ids) {\n      cdi.id = String(ids[i]);\n    }\n  }\n  arraysToCalcdata(cd, trace);\n  calcColorscale(gd, trace);\n  calcSelection(cd, trace);\n  if (stackGroupOpts) {\n    // remove bad positions and sort\n    // note that original indices get added to cd in arraysToCalcdata\n    i = 0;\n    while (i < cd.length) {\n      if (cd[i][posAttr] === BADNUM) {\n        cd.splice(i, 1);\n      } else i++;\n    }\n    Lib.sort(cd, function (a, b) {\n      return a[posAttr] - b[posAttr] || a.i - b.i;\n    });\n    if (interpolateGaps) {\n      // first fill the beginning with constant from the first point\n      i = 0;\n      while (i < cd.length - 1 && cd[i].gap) {\n        i++;\n      }\n      vali = cd[i].s;\n      if (!vali) vali = cd[i].s = 0; // in case of no data AT ALL in this trace - use 0\n      for (j = 0; j < i; j++) {\n        cd[j].s = vali;\n      }\n      // then fill the end with constant from the last point\n      k = cd.length - 1;\n      while (k > i && cd[k].gap) {\n        k--;\n      }\n      vali = cd[k].s;\n      for (j = cd.length - 1; j > k; j--) {\n        cd[j].s = vali;\n      }\n      // now interpolate internal gaps linearly\n      while (i < k) {\n        i++;\n        if (cd[i].gap) {\n          j = i + 1;\n          while (cd[j].gap) {\n            j++;\n          }\n          var pos0 = cd[i - 1][posAttr];\n          var size0 = cd[i - 1].s;\n          var m = (cd[j].s - size0) / (cd[j][posAttr] - pos0);\n          while (i < j) {\n            cd[i].s = size0 + (cd[i][posAttr] - pos0) * m;\n            i++;\n          }\n        }\n      }\n    }\n  }\n  return cd;\n}\nfunction calcAxisExpansion(gd, trace, xa, ya, x, y, ppad) {\n  var serieslen = trace._length;\n  var fullLayout = gd._fullLayout;\n  var xId = xa._id;\n  var yId = ya._id;\n  var firstScatter = fullLayout._firstScatter[firstScatterGroup(trace)] === trace.uid;\n  var stackOrientation = (getStackOpts(trace, fullLayout, xa, ya) || {}).orientation;\n  var fill = trace.fill;\n\n  // cancel minimum tick spacings (only applies to bars and boxes)\n  xa._minDtick = 0;\n  ya._minDtick = 0;\n\n  // check whether bounds should be tight, padded, extended to zero...\n  // most cases both should be padded on both ends, so start with that.\n  var xOptions = {\n    padded: true\n  };\n  var yOptions = {\n    padded: true\n  };\n  if (ppad) {\n    xOptions.ppad = yOptions.ppad = ppad;\n  }\n\n  // TODO: text size\n\n  var openEnded = serieslen < 2 || x[0] !== x[serieslen - 1] || y[0] !== y[serieslen - 1];\n\n  // include zero (tight) and extremes (padded) if fill to zero\n  // (unless the shape is closed, then it's just filling the shape regardless)\n  if (openEnded && (fill === 'tozerox' || fill === 'tonextx' && (firstScatter || stackOrientation === 'h'))) {\n    xOptions.tozero = true;\n  }\n\n  // if no error bars, markers or text, or fill to y=0 remove x padding\n  else if (!(trace.error_y || {}).visible && (fill === 'tonexty' || fill === 'tozeroy' || !subTypes.hasMarkers(trace) && !subTypes.hasText(trace))) {\n    xOptions.padded = false;\n    xOptions.ppad = 0;\n  }\n\n  // now check for y - rather different logic, though still mostly padded both ends\n  // include zero (tight) and extremes (padded) if fill to zero\n  // (unless the shape is closed, then it's just filling the shape regardless)\n  if (openEnded && (fill === 'tozeroy' || fill === 'tonexty' && (firstScatter || stackOrientation === 'v'))) {\n    yOptions.tozero = true;\n  }\n\n  // tight y: any x fill\n  else if (fill === 'tonextx' || fill === 'tozerox') {\n    yOptions.padded = false;\n  }\n\n  // N.B. asymmetric splom traces call this with blank {} xa or ya\n  if (xId) trace._extremes[xId] = Axes.findExtremes(xa, x, xOptions);\n  if (yId) trace._extremes[yId] = Axes.findExtremes(ya, y, yOptions);\n}\nfunction calcMarkerSize(trace, serieslen) {\n  if (!subTypes.hasMarkers(trace)) return;\n\n  // Treat size like x or y arrays --- Run d2c\n  // this needs to go before ppad computation\n  var marker = trace.marker;\n  var sizeref = 1.6 * (trace.marker.sizeref || 1);\n  var markerTrans;\n  if (trace.marker.sizemode === 'area') {\n    markerTrans = function markerTrans(v) {\n      return Math.max(Math.sqrt((v || 0) / sizeref), 3);\n    };\n  } else {\n    markerTrans = function markerTrans(v) {\n      return Math.max((v || 0) / sizeref, 3);\n    };\n  }\n  if (Lib.isArrayOrTypedArray(marker.size)) {\n    // I tried auto-type but category and dates dont make much sense.\n    var ax = {\n      type: 'linear'\n    };\n    Axes.setConvert(ax);\n    var s = ax.makeCalcdata(trace.marker, 'size');\n    var sizeOut = new Array(serieslen);\n    for (var i = 0; i < serieslen; i++) {\n      sizeOut[i] = markerTrans(s[i]);\n    }\n    return sizeOut;\n  } else {\n    return markerTrans(marker.size);\n  }\n}\n\n/**\n * mark the first scatter trace for each subplot\n * note that scatter and scattergl each get their own first trace\n * note also that I'm doing this during calc rather than supplyDefaults\n * so I don't need to worry about transforms, but if we ever do\n * per-trace calc this will get confused.\n */\nfunction setFirstScatter(fullLayout, trace) {\n  var group = firstScatterGroup(trace);\n  var firstScatter = fullLayout._firstScatter;\n  if (!firstScatter[group]) firstScatter[group] = trace.uid;\n}\nfunction firstScatterGroup(trace) {\n  var stackGroup = trace.stackgroup;\n  return trace.xaxis + trace.yaxis + trace.type + (stackGroup ? '-' + stackGroup : '');\n}\nfunction getStackOpts(trace, fullLayout, xa, ya) {\n  var stackGroup = trace.stackgroup;\n  if (!stackGroup) return;\n  var stackOpts = fullLayout._scatterStackOpts[xa._id + ya._id][stackGroup];\n  var stackAx = stackOpts.orientation === 'v' ? ya : xa;\n  // Allow stacking only on numeric axes\n  // calc is a little late to be figuring this out, but during supplyDefaults\n  // we don't know the axis type yet\n  if (stackAx.type === 'linear' || stackAx.type === 'log') return stackOpts;\n}\nmodule.exports = {\n  calc: calc,\n  calcMarkerSize: calcMarkerSize,\n  calcAxisExpansion: calcAxisExpansion,\n  setFirstScatter: setFirstScatter,\n  getStackOpts: getStackOpts\n};","map":{"version":3,"names":["isNumeric","require","Lib","Axes","BADNUM","subTypes","calcColorscale","arraysToCalcdata","calcSelection","calc","gd","trace","fullLayout","_fullLayout","xa","getFromId","xaxis","ya","yaxis","x","makeCalcdata","y","serieslen","_length","cd","Array","ids","stackGroupOpts","getStackOpts","interpolateGaps","isV","i","j","k","interpolate","vali","setFirstScatter","xAttr","yAttr","posAttr","traceIndices","push","index","orientation","stackgaps","ppad","calcMarkerSize","calcAxisExpansion","cdi","xValid","yValid","gap","s","id","String","length","splice","sort","a","b","pos0","size0","m","xId","_id","yId","firstScatter","_firstScatter","firstScatterGroup","uid","stackOrientation","fill","_minDtick","xOptions","padded","yOptions","openEnded","tozero","error_y","visible","hasMarkers","hasText","_extremes","findExtremes","marker","sizeref","markerTrans","sizemode","v","Math","max","sqrt","isArrayOrTypedArray","size","ax","type","setConvert","sizeOut","group","stackGroup","stackgroup","stackOpts","_scatterStackOpts","stackAx","module","exports"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/scatter/calc.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar subTypes = require('./subtypes');\nvar calcColorscale = require('./colorscale_calc');\nvar arraysToCalcdata = require('./arrays_to_calcdata');\nvar calcSelection = require('./calc_selection');\n\nfunction calc(gd, trace) {\n    var fullLayout = gd._fullLayout;\n    var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n    var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n    var x = xa.makeCalcdata(trace, 'x');\n    var y = ya.makeCalcdata(trace, 'y');\n    var serieslen = trace._length;\n    var cd = new Array(serieslen);\n    var ids = trace.ids;\n    var stackGroupOpts = getStackOpts(trace, fullLayout, xa, ya);\n    var interpolateGaps = false;\n    var isV, i, j, k, interpolate, vali;\n\n    setFirstScatter(fullLayout, trace);\n\n    var xAttr = 'x';\n    var yAttr = 'y';\n    var posAttr;\n    if(stackGroupOpts) {\n        stackGroupOpts.traceIndices.push(trace.index);\n        isV = stackGroupOpts.orientation === 'v';\n        // size, like we use for bar\n        if(isV) {\n            yAttr = 's';\n            posAttr = 'x';\n        }\n        else {\n            xAttr = 's';\n            posAttr = 'y';\n        }\n        interpolate = stackGroupOpts.stackgaps === 'interpolate';\n    }\n    else {\n        var ppad = calcMarkerSize(trace, serieslen);\n        calcAxisExpansion(gd, trace, xa, ya, x, y, ppad);\n    }\n\n    for(i = 0; i < serieslen; i++) {\n        var cdi = cd[i] = {};\n        var xValid = isNumeric(x[i]);\n        var yValid = isNumeric(y[i]);\n        if(xValid && yValid) {\n            cdi[xAttr] = x[i];\n            cdi[yAttr] = y[i];\n        }\n        // if we're stacking we need to hold on to all valid positions\n        // even with invalid sizes\n        else if(stackGroupOpts && (isV ? xValid : yValid)) {\n            cdi[posAttr] = isV ? x[i] : y[i];\n            cdi.gap = true;\n            if(interpolate) {\n                cdi.s = BADNUM;\n                interpolateGaps = true;\n            }\n            else {\n                cdi.s = 0;\n            }\n        }\n        else {\n            cdi[xAttr] = cdi[yAttr] = BADNUM;\n        }\n\n        if(ids) {\n            cdi.id = String(ids[i]);\n        }\n    }\n\n    arraysToCalcdata(cd, trace);\n    calcColorscale(gd, trace);\n    calcSelection(cd, trace);\n\n    if(stackGroupOpts) {\n        // remove bad positions and sort\n        // note that original indices get added to cd in arraysToCalcdata\n        i = 0;\n        while(i < cd.length) {\n            if(cd[i][posAttr] === BADNUM) {\n                cd.splice(i, 1);\n            }\n            else i++;\n        }\n\n        Lib.sort(cd, function(a, b) {\n            return (a[posAttr] - b[posAttr]) || (a.i - b.i);\n        });\n\n        if(interpolateGaps) {\n            // first fill the beginning with constant from the first point\n            i = 0;\n            while(i < cd.length - 1 && cd[i].gap) {\n                i++;\n            }\n            vali = cd[i].s;\n            if(!vali) vali = cd[i].s = 0; // in case of no data AT ALL in this trace - use 0\n            for(j = 0; j < i; j++) {\n                cd[j].s = vali;\n            }\n            // then fill the end with constant from the last point\n            k = cd.length - 1;\n            while(k > i && cd[k].gap) {\n                k--;\n            }\n            vali = cd[k].s;\n            for(j = cd.length - 1; j > k; j--) {\n                cd[j].s = vali;\n            }\n            // now interpolate internal gaps linearly\n            while(i < k) {\n                i++;\n                if(cd[i].gap) {\n                    j = i + 1;\n                    while(cd[j].gap) {\n                        j++;\n                    }\n                    var pos0 = cd[i - 1][posAttr];\n                    var size0 = cd[i - 1].s;\n                    var m = (cd[j].s - size0) / (cd[j][posAttr] - pos0);\n                    while(i < j) {\n                        cd[i].s = size0 + (cd[i][posAttr] - pos0) * m;\n                        i++;\n                    }\n                }\n            }\n        }\n    }\n\n    return cd;\n}\n\nfunction calcAxisExpansion(gd, trace, xa, ya, x, y, ppad) {\n    var serieslen = trace._length;\n    var fullLayout = gd._fullLayout;\n    var xId = xa._id;\n    var yId = ya._id;\n    var firstScatter = fullLayout._firstScatter[firstScatterGroup(trace)] === trace.uid;\n    var stackOrientation = (getStackOpts(trace, fullLayout, xa, ya) || {}).orientation;\n    var fill = trace.fill;\n\n    // cancel minimum tick spacings (only applies to bars and boxes)\n    xa._minDtick = 0;\n    ya._minDtick = 0;\n\n    // check whether bounds should be tight, padded, extended to zero...\n    // most cases both should be padded on both ends, so start with that.\n    var xOptions = {padded: true};\n    var yOptions = {padded: true};\n\n    if(ppad) {\n        xOptions.ppad = yOptions.ppad = ppad;\n    }\n\n    // TODO: text size\n\n    var openEnded = serieslen < 2 || (x[0] !== x[serieslen - 1]) || (y[0] !== y[serieslen - 1]);\n\n    // include zero (tight) and extremes (padded) if fill to zero\n    // (unless the shape is closed, then it's just filling the shape regardless)\n    if(openEnded && (\n        (fill === 'tozerox') ||\n        ((fill === 'tonextx') && (firstScatter || stackOrientation === 'h'))\n    )) {\n        xOptions.tozero = true;\n    }\n\n    // if no error bars, markers or text, or fill to y=0 remove x padding\n    else if(!(trace.error_y || {}).visible && (\n            (fill === 'tonexty' || fill === 'tozeroy') ||\n            (!subTypes.hasMarkers(trace) && !subTypes.hasText(trace))\n        )) {\n        xOptions.padded = false;\n        xOptions.ppad = 0;\n    }\n\n    // now check for y - rather different logic, though still mostly padded both ends\n    // include zero (tight) and extremes (padded) if fill to zero\n    // (unless the shape is closed, then it's just filling the shape regardless)\n    if(openEnded && (\n        (fill === 'tozeroy') ||\n        ((fill === 'tonexty') && (firstScatter || stackOrientation === 'v'))\n    )) {\n        yOptions.tozero = true;\n    }\n\n    // tight y: any x fill\n    else if(fill === 'tonextx' || fill === 'tozerox') {\n        yOptions.padded = false;\n    }\n\n    // N.B. asymmetric splom traces call this with blank {} xa or ya\n    if(xId) trace._extremes[xId] = Axes.findExtremes(xa, x, xOptions);\n    if(yId) trace._extremes[yId] = Axes.findExtremes(ya, y, yOptions);\n}\n\nfunction calcMarkerSize(trace, serieslen) {\n    if(!subTypes.hasMarkers(trace)) return;\n\n    // Treat size like x or y arrays --- Run d2c\n    // this needs to go before ppad computation\n    var marker = trace.marker;\n    var sizeref = 1.6 * (trace.marker.sizeref || 1);\n    var markerTrans;\n\n    if(trace.marker.sizemode === 'area') {\n        markerTrans = function(v) {\n            return Math.max(Math.sqrt((v || 0) / sizeref), 3);\n        };\n    } else {\n        markerTrans = function(v) {\n            return Math.max((v || 0) / sizeref, 3);\n        };\n    }\n\n    if(Lib.isArrayOrTypedArray(marker.size)) {\n        // I tried auto-type but category and dates dont make much sense.\n        var ax = {type: 'linear'};\n        Axes.setConvert(ax);\n\n        var s = ax.makeCalcdata(trace.marker, 'size');\n\n        var sizeOut = new Array(serieslen);\n        for(var i = 0; i < serieslen; i++) {\n            sizeOut[i] = markerTrans(s[i]);\n        }\n        return sizeOut;\n\n    } else {\n        return markerTrans(marker.size);\n    }\n}\n\n/**\n * mark the first scatter trace for each subplot\n * note that scatter and scattergl each get their own first trace\n * note also that I'm doing this during calc rather than supplyDefaults\n * so I don't need to worry about transforms, but if we ever do\n * per-trace calc this will get confused.\n */\nfunction setFirstScatter(fullLayout, trace) {\n    var group = firstScatterGroup(trace);\n    var firstScatter = fullLayout._firstScatter;\n    if(!firstScatter[group]) firstScatter[group] = trace.uid;\n}\n\nfunction firstScatterGroup(trace) {\n    var stackGroup = trace.stackgroup;\n    return trace.xaxis + trace.yaxis + trace.type +\n        (stackGroup ? '-' + stackGroup : '');\n}\n\nfunction getStackOpts(trace, fullLayout, xa, ya) {\n    var stackGroup = trace.stackgroup;\n    if(!stackGroup) return;\n    var stackOpts = fullLayout._scatterStackOpts[xa._id + ya._id][stackGroup];\n    var stackAx = stackOpts.orientation === 'v' ? ya : xa;\n    // Allow stacking only on numeric axes\n    // calc is a little late to be figuring this out, but during supplyDefaults\n    // we don't know the axis type yet\n    if(stackAx.type === 'linear' || stackAx.type === 'log') return stackOpts;\n}\n\nmodule.exports = {\n    calc: calc,\n    calcMarkerSize: calcMarkerSize,\n    calcAxisExpansion: calcAxisExpansion,\n    setFirstScatter: setFirstScatter,\n    getStackOpts: getStackOpts\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
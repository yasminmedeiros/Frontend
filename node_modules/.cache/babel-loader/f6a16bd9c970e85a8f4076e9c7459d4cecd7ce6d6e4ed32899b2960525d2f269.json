{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isArrayOrTypedArray = require('../../lib').isArrayOrTypedArray;\n\n/*\n * Construct a 2D array of cheater values given a, b, and a slope.\n * If\n */\nmodule.exports = function (a, b, cheaterslope) {\n  var i, j, ascal, bscal, aval, bval;\n  var data = [];\n  var na = isArrayOrTypedArray(a) ? a.length : a;\n  var nb = isArrayOrTypedArray(b) ? b.length : b;\n  var adata = isArrayOrTypedArray(a) ? a : null;\n  var bdata = isArrayOrTypedArray(b) ? b : null;\n\n  // If we're using data, scale it so that for data that's just barely\n  // not evenly spaced, the switch to value-based indexing is continuous.\n  // This means evenly spaced data should look the same whether value\n  // or index cheatertype.\n  if (adata) {\n    ascal = (adata.length - 1) / (adata[adata.length - 1] - adata[0]) / (na - 1);\n  }\n  if (bdata) {\n    bscal = (bdata.length - 1) / (bdata[bdata.length - 1] - bdata[0]) / (nb - 1);\n  }\n  var xval;\n  var xmin = Infinity;\n  var xmax = -Infinity;\n  for (j = 0; j < nb; j++) {\n    data[j] = [];\n    bval = bdata ? (bdata[j] - bdata[0]) * bscal : j / (nb - 1);\n    for (i = 0; i < na; i++) {\n      aval = adata ? (adata[i] - adata[0]) * ascal : i / (na - 1);\n      xval = aval - bval * cheaterslope;\n      xmin = Math.min(xval, xmin);\n      xmax = Math.max(xval, xmax);\n      data[j][i] = xval;\n    }\n  }\n\n  // Normalize cheater values to the 0-1 range. This comes into play when you have\n  // multiple cheater plots. After careful consideration, it seems better if cheater\n  // values are normalized to a consistent range. Otherwise one cheater affects the\n  // layout of other cheaters on the same axis.\n  var slope = 1.0 / (xmax - xmin);\n  var offset = -xmin * slope;\n  for (j = 0; j < nb; j++) {\n    for (i = 0; i < na; i++) {\n      data[j][i] = slope * data[j][i] + offset;\n    }\n  }\n  return data;\n};","map":{"version":3,"names":["isArrayOrTypedArray","require","module","exports","a","b","cheaterslope","i","j","ascal","bscal","aval","bval","data","na","length","nb","adata","bdata","xval","xmin","Infinity","xmax","Math","min","max","slope","offset"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/carpet/cheater_basis.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isArrayOrTypedArray = require('../../lib').isArrayOrTypedArray;\n\n/*\n * Construct a 2D array of cheater values given a, b, and a slope.\n * If\n */\nmodule.exports = function(a, b, cheaterslope) {\n    var i, j, ascal, bscal, aval, bval;\n    var data = [];\n\n    var na = isArrayOrTypedArray(a) ? a.length : a;\n    var nb = isArrayOrTypedArray(b) ? b.length : b;\n    var adata = isArrayOrTypedArray(a) ? a : null;\n    var bdata = isArrayOrTypedArray(b) ? b : null;\n\n    // If we're using data, scale it so that for data that's just barely\n    // not evenly spaced, the switch to value-based indexing is continuous.\n    // This means evenly spaced data should look the same whether value\n    // or index cheatertype.\n    if(adata) {\n        ascal = (adata.length - 1) / (adata[adata.length - 1] - adata[0]) / (na - 1);\n    }\n\n    if(bdata) {\n        bscal = (bdata.length - 1) / (bdata[bdata.length - 1] - bdata[0]) / (nb - 1);\n    }\n\n    var xval;\n    var xmin = Infinity;\n    var xmax = -Infinity;\n    for(j = 0; j < nb; j++) {\n        data[j] = [];\n        bval = bdata ? (bdata[j] - bdata[0]) * bscal : j / (nb - 1);\n        for(i = 0; i < na; i++) {\n            aval = adata ? (adata[i] - adata[0]) * ascal : i / (na - 1);\n            xval = aval - bval * cheaterslope;\n            xmin = Math.min(xval, xmin);\n            xmax = Math.max(xval, xmax);\n            data[j][i] = xval;\n        }\n    }\n\n    // Normalize cheater values to the 0-1 range. This comes into play when you have\n    // multiple cheater plots. After careful consideration, it seems better if cheater\n    // values are normalized to a consistent range. Otherwise one cheater affects the\n    // layout of other cheaters on the same axis.\n    var slope = 1.0 / (xmax - xmin);\n    var offset = -xmin * slope;\n    for(j = 0; j < nb; j++) {\n        for(i = 0; i < na; i++) {\n            data[j][i] = slope * data[j][i] + offset;\n        }\n    }\n\n    return data;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
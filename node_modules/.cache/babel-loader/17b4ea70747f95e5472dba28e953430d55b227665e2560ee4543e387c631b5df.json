{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n// projection names to d3 function name\nexports.projNames = {\n  // d3.geo.projection\n  'equirectangular': 'equirectangular',\n  'mercator': 'mercator',\n  'orthographic': 'orthographic',\n  'natural earth': 'naturalEarth',\n  'kavrayskiy7': 'kavrayskiy7',\n  'miller': 'miller',\n  'robinson': 'robinson',\n  'eckert4': 'eckert4',\n  'azimuthal equal area': 'azimuthalEqualArea',\n  'azimuthal equidistant': 'azimuthalEquidistant',\n  'conic equal area': 'conicEqualArea',\n  'conic conformal': 'conicConformal',\n  'conic equidistant': 'conicEquidistant',\n  'gnomonic': 'gnomonic',\n  'stereographic': 'stereographic',\n  'mollweide': 'mollweide',\n  'hammer': 'hammer',\n  'transverse mercator': 'transverseMercator',\n  'albers usa': 'albersUsa',\n  'winkel tripel': 'winkel3',\n  'aitoff': 'aitoff',\n  'sinusoidal': 'sinusoidal'\n};\n\n// name of the axes\nexports.axesNames = ['lonaxis', 'lataxis'];\n\n// max longitudinal angular span (EXPERIMENTAL)\nexports.lonaxisSpan = {\n  'orthographic': 180,\n  'azimuthal equal area': 360,\n  'azimuthal equidistant': 360,\n  'conic conformal': 180,\n  'gnomonic': 160,\n  'stereographic': 180,\n  'transverse mercator': 180,\n  '*': 360\n};\n\n// max latitudinal angular span (EXPERIMENTAL)\nexports.lataxisSpan = {\n  'conic conformal': 150,\n  'stereographic': 179.5,\n  '*': 180\n};\n\n// defaults for each scope\nexports.scopeDefaults = {\n  world: {\n    lonaxisRange: [-180, 180],\n    lataxisRange: [-90, 90],\n    projType: 'equirectangular',\n    projRotate: [0, 0, 0]\n  },\n  usa: {\n    lonaxisRange: [-180, -50],\n    lataxisRange: [15, 80],\n    projType: 'albers usa'\n  },\n  europe: {\n    lonaxisRange: [-30, 60],\n    lataxisRange: [30, 85],\n    projType: 'conic conformal',\n    projRotate: [15, 0, 0],\n    projParallels: [0, 60]\n  },\n  asia: {\n    lonaxisRange: [22, 160],\n    lataxisRange: [-15, 55],\n    projType: 'mercator',\n    projRotate: [0, 0, 0]\n  },\n  africa: {\n    lonaxisRange: [-30, 60],\n    lataxisRange: [-40, 40],\n    projType: 'mercator',\n    projRotate: [0, 0, 0]\n  },\n  'north america': {\n    lonaxisRange: [-180, -45],\n    lataxisRange: [5, 85],\n    projType: 'conic conformal',\n    projRotate: [-100, 0, 0],\n    projParallels: [29.5, 45.5]\n  },\n  'south america': {\n    lonaxisRange: [-100, -30],\n    lataxisRange: [-60, 15],\n    projType: 'mercator',\n    projRotate: [0, 0, 0]\n  }\n};\n\n// angular pad to avoid rounding error around clip angles\nexports.clipPad = 1e-3;\n\n// map projection precision\nexports.precision = 0.1;\n\n// default land and water fill colors\nexports.landColor = '#F0DC82';\nexports.waterColor = '#3399FF';\n\n// locationmode to layer name\nexports.locationmodeToLayer = {\n  'ISO-3': 'countries',\n  'USA-states': 'subunits',\n  'country names': 'countries'\n};\n\n// SVG element for a sphere (use to frame maps)\nexports.sphereSVG = {\n  type: 'Sphere'\n};\n\n// N.B. base layer names must be the same as in the topojson files\n\n// base layer with a fill color\nexports.fillLayers = {\n  ocean: 1,\n  land: 1,\n  lakes: 1\n};\n\n// base layer with a only a line color\nexports.lineLayers = {\n  subunits: 1,\n  countries: 1,\n  coastlines: 1,\n  rivers: 1,\n  frame: 1\n};\nexports.layers = ['bg', 'ocean', 'land', 'lakes', 'subunits', 'countries', 'coastlines', 'rivers', 'lataxis', 'lonaxis', 'frame', 'backplot', 'frontplot'];\nexports.layersForChoropleth = ['bg', 'ocean', 'land', 'subunits', 'countries', 'coastlines', 'lataxis', 'lonaxis', 'frame', 'backplot', 'rivers', 'lakes', 'frontplot'];\nexports.layerNameToAdjective = {\n  ocean: 'ocean',\n  land: 'land',\n  lakes: 'lake',\n  subunits: 'subunit',\n  countries: 'country',\n  coastlines: 'coastline',\n  rivers: 'river',\n  frame: 'frame'\n};","map":{"version":3,"names":["exports","projNames","axesNames","lonaxisSpan","lataxisSpan","scopeDefaults","world","lonaxisRange","lataxisRange","projType","projRotate","usa","europe","projParallels","asia","africa","clipPad","precision","landColor","waterColor","locationmodeToLayer","sphereSVG","type","fillLayers","ocean","land","lakes","lineLayers","subunits","countries","coastlines","rivers","frame","layers","layersForChoropleth","layerNameToAdjective"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/plots/geo/constants.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n// projection names to d3 function name\nexports.projNames = {\n    // d3.geo.projection\n    'equirectangular': 'equirectangular',\n    'mercator': 'mercator',\n    'orthographic': 'orthographic',\n    'natural earth': 'naturalEarth',\n    'kavrayskiy7': 'kavrayskiy7',\n    'miller': 'miller',\n    'robinson': 'robinson',\n    'eckert4': 'eckert4',\n    'azimuthal equal area': 'azimuthalEqualArea',\n    'azimuthal equidistant': 'azimuthalEquidistant',\n    'conic equal area': 'conicEqualArea',\n    'conic conformal': 'conicConformal',\n    'conic equidistant': 'conicEquidistant',\n    'gnomonic': 'gnomonic',\n    'stereographic': 'stereographic',\n    'mollweide': 'mollweide',\n    'hammer': 'hammer',\n    'transverse mercator': 'transverseMercator',\n    'albers usa': 'albersUsa',\n    'winkel tripel': 'winkel3',\n    'aitoff': 'aitoff',\n    'sinusoidal': 'sinusoidal'\n};\n\n// name of the axes\nexports.axesNames = ['lonaxis', 'lataxis'];\n\n// max longitudinal angular span (EXPERIMENTAL)\nexports.lonaxisSpan = {\n    'orthographic': 180,\n    'azimuthal equal area': 360,\n    'azimuthal equidistant': 360,\n    'conic conformal': 180,\n    'gnomonic': 160,\n    'stereographic': 180,\n    'transverse mercator': 180,\n    '*': 360\n};\n\n// max latitudinal angular span (EXPERIMENTAL)\nexports.lataxisSpan = {\n    'conic conformal': 150,\n    'stereographic': 179.5,\n    '*': 180\n};\n\n// defaults for each scope\nexports.scopeDefaults = {\n    world: {\n        lonaxisRange: [-180, 180],\n        lataxisRange: [-90, 90],\n        projType: 'equirectangular',\n        projRotate: [0, 0, 0]\n    },\n    usa: {\n        lonaxisRange: [-180, -50],\n        lataxisRange: [15, 80],\n        projType: 'albers usa'\n    },\n    europe: {\n        lonaxisRange: [-30, 60],\n        lataxisRange: [30, 85],\n        projType: 'conic conformal',\n        projRotate: [15, 0, 0],\n        projParallels: [0, 60]\n    },\n    asia: {\n        lonaxisRange: [22, 160],\n        lataxisRange: [-15, 55],\n        projType: 'mercator',\n        projRotate: [0, 0, 0]\n    },\n    africa: {\n        lonaxisRange: [-30, 60],\n        lataxisRange: [-40, 40],\n        projType: 'mercator',\n        projRotate: [0, 0, 0]\n    },\n    'north america': {\n        lonaxisRange: [-180, -45],\n        lataxisRange: [5, 85],\n        projType: 'conic conformal',\n        projRotate: [-100, 0, 0],\n        projParallels: [29.5, 45.5]\n    },\n    'south america': {\n        lonaxisRange: [-100, -30],\n        lataxisRange: [-60, 15],\n        projType: 'mercator',\n        projRotate: [0, 0, 0]\n    }\n};\n\n// angular pad to avoid rounding error around clip angles\nexports.clipPad = 1e-3;\n\n// map projection precision\nexports.precision = 0.1;\n\n// default land and water fill colors\nexports.landColor = '#F0DC82';\nexports.waterColor = '#3399FF';\n\n// locationmode to layer name\nexports.locationmodeToLayer = {\n    'ISO-3': 'countries',\n    'USA-states': 'subunits',\n    'country names': 'countries'\n};\n\n// SVG element for a sphere (use to frame maps)\nexports.sphereSVG = {type: 'Sphere'};\n\n// N.B. base layer names must be the same as in the topojson files\n\n// base layer with a fill color\nexports.fillLayers = {\n    ocean: 1,\n    land: 1,\n    lakes: 1\n};\n\n// base layer with a only a line color\nexports.lineLayers = {\n    subunits: 1,\n    countries: 1,\n    coastlines: 1,\n    rivers: 1,\n    frame: 1\n};\n\nexports.layers = [\n    'bg',\n    'ocean', 'land', 'lakes',\n    'subunits', 'countries', 'coastlines', 'rivers',\n    'lataxis', 'lonaxis', 'frame',\n    'backplot',\n    'frontplot'\n];\n\nexports.layersForChoropleth = [\n    'bg',\n    'ocean', 'land',\n    'subunits', 'countries', 'coastlines',\n    'lataxis', 'lonaxis', 'frame',\n    'backplot',\n    'rivers', 'lakes',\n    'frontplot'\n];\n\nexports.layerNameToAdjective = {\n    ocean: 'ocean',\n    land: 'land',\n    lakes: 'lake',\n    subunits: 'subunit',\n    countries: 'country',\n    coastlines: 'coastline',\n    rivers: 'river',\n    frame: 'frame'\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
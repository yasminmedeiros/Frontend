{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Fx = require('../../components/fx');\nvar Registry = require('../../registry');\nvar getTraceColor = require('./get_trace_color');\nvar Color = require('../../components/color');\nvar fillHoverText = require('./fill_hover_text');\nmodule.exports = function hoverPoints(pointData, xval, yval, hovermode) {\n  var cd = pointData.cd;\n  var trace = cd[0].trace;\n  var xa = pointData.xa;\n  var ya = pointData.ya;\n  var xpx = xa.c2p(xval);\n  var ypx = ya.c2p(yval);\n  var pt = [xpx, ypx];\n  var hoveron = trace.hoveron || '';\n  var minRad = trace.mode.indexOf('markers') !== -1 ? 3 : 0.5;\n\n  // look for points to hover on first, then take fills only if we\n  // didn't find a point\n  if (hoveron.indexOf('points') !== -1) {\n    var dx = function dx(di) {\n      // dx and dy are used in compare modes - here we want to always\n      // prioritize the closest data point, at least as long as markers are\n      // the same size or nonexistent, but still try to prioritize small markers too.\n      var rad = Math.max(3, di.mrc || 0);\n      var kink = 1 - 1 / rad;\n      var dxRaw = Math.abs(xa.c2p(di.x) - xpx);\n      var d = dxRaw < rad ? kink * dxRaw / rad : dxRaw - rad + kink;\n      return d;\n    };\n    var dy = function dy(di) {\n      var rad = Math.max(3, di.mrc || 0);\n      var kink = 1 - 1 / rad;\n      var dyRaw = Math.abs(ya.c2p(di.y) - ypx);\n      return dyRaw < rad ? kink * dyRaw / rad : dyRaw - rad + kink;\n    };\n    var dxy = function dxy(di) {\n      // scatter points: d.mrc is the calculated marker radius\n      // adjust the distance so if you're inside the marker it\n      // always will show up regardless of point size, but\n      // prioritize smaller points\n      var rad = Math.max(minRad, di.mrc || 0);\n      var dx = xa.c2p(di.x) - xpx;\n      var dy = ya.c2p(di.y) - ypx;\n      return Math.max(Math.sqrt(dx * dx + dy * dy) - rad, 1 - minRad / rad);\n    };\n    var distfn = Fx.getDistanceFunction(hovermode, dx, dy, dxy);\n    Fx.getClosest(cd, distfn, pointData);\n\n    // skip the rest (for this trace) if we didn't find a close point\n    if (pointData.index !== false) {\n      // the closest data point\n      var di = cd[pointData.index];\n      var xc = xa.c2p(di.x, true);\n      var yc = ya.c2p(di.y, true);\n      var rad = di.mrc || 1;\n\n      // now we're done using the whole `calcdata` array, replace the\n      // index with the original index (in case of inserted point from\n      // stacked area)\n      pointData.index = di.i;\n      var orientation = cd[0].t.orientation;\n      // TODO: for scatter and bar, option to show (sub)totals and\n      // raw data? Currently stacked and/or normalized bars just show\n      // the normalized individual sizes, so that's what I'm doing here\n      // for now.\n      var sizeVal = orientation && (di.sNorm || di.s);\n      var xLabelVal = orientation === 'h' ? sizeVal : di.x;\n      var yLabelVal = orientation === 'v' ? sizeVal : di.y;\n      Lib.extendFlat(pointData, {\n        color: getTraceColor(trace, di),\n        x0: xc - rad,\n        x1: xc + rad,\n        xLabelVal: xLabelVal,\n        y0: yc - rad,\n        y1: yc + rad,\n        yLabelVal: yLabelVal,\n        spikeDistance: dxy(di),\n        hovertemplate: trace.hovertemplate\n      });\n      fillHoverText(di, trace, pointData);\n      Registry.getComponentMethod('errorbars', 'hoverInfo')(di, trace, pointData);\n      return [pointData];\n    }\n  }\n\n  // even if hoveron is 'fills', only use it if we have polygons too\n  if (hoveron.indexOf('fills') !== -1 && trace._polygons) {\n    var polygons = trace._polygons;\n    var polygonsIn = [];\n    var inside = false;\n    var xmin = Infinity;\n    var xmax = -Infinity;\n    var ymin = Infinity;\n    var ymax = -Infinity;\n    var i, j, polygon, pts, xCross, x0, x1, y0, y1;\n    for (i = 0; i < polygons.length; i++) {\n      polygon = polygons[i];\n      // TODO: this is not going to work right for curved edges, it will\n      // act as though they're straight. That's probably going to need\n      // the elements themselves to capture the events. Worth it?\n      if (polygon.contains(pt)) {\n        inside = !inside;\n        // TODO: need better than just the overall bounding box\n        polygonsIn.push(polygon);\n        ymin = Math.min(ymin, polygon.ymin);\n        ymax = Math.max(ymax, polygon.ymax);\n      }\n    }\n    if (inside) {\n      // constrain ymin/max to the visible plot, so the label goes\n      // at the middle of the piece you can see\n      ymin = Math.max(ymin, 0);\n      ymax = Math.min(ymax, ya._length);\n\n      // find the overall left-most and right-most points of the\n      // polygon(s) we're inside at their combined vertical midpoint.\n      // This is where we will draw the hover label.\n      // Note that this might not be the vertical midpoint of the\n      // whole trace, if it's disjoint.\n      var yAvg = (ymin + ymax) / 2;\n      for (i = 0; i < polygonsIn.length; i++) {\n        pts = polygonsIn[i].pts;\n        for (j = 1; j < pts.length; j++) {\n          y0 = pts[j - 1][1];\n          y1 = pts[j][1];\n          if (y0 > yAvg !== y1 >= yAvg) {\n            x0 = pts[j - 1][0];\n            x1 = pts[j][0];\n            if (y1 - y0) {\n              xCross = x0 + (x1 - x0) * (yAvg - y0) / (y1 - y0);\n              xmin = Math.min(xmin, xCross);\n              xmax = Math.max(xmax, xCross);\n            }\n          }\n        }\n      }\n\n      // constrain xmin/max to the visible plot now too\n      xmin = Math.max(xmin, 0);\n      xmax = Math.min(xmax, xa._length);\n\n      // get only fill or line color for the hover color\n      var color = Color.defaultLine;\n      if (Color.opacity(trace.fillcolor)) color = trace.fillcolor;else if (Color.opacity((trace.line || {}).color)) {\n        color = trace.line.color;\n      }\n      Lib.extendFlat(pointData, {\n        // never let a 2D override 1D type as closest point\n        // also: no spikeDistance, it's not allowed for fills\n        distance: pointData.maxHoverDistance,\n        x0: xmin,\n        x1: xmax,\n        y0: yAvg,\n        y1: yAvg,\n        color: color,\n        hovertemplate: '%{name}'\n      });\n      delete pointData.index;\n      if (trace.text && !Array.isArray(trace.text)) {\n        pointData.text = String(trace.text);\n      } else pointData.text = trace.name;\n      return [pointData];\n    }\n  }\n};","map":{"version":3,"names":["Lib","require","Fx","Registry","getTraceColor","Color","fillHoverText","module","exports","hoverPoints","pointData","xval","yval","hovermode","cd","trace","xa","ya","xpx","c2p","ypx","pt","hoveron","minRad","mode","indexOf","dx","di","rad","Math","max","mrc","kink","dxRaw","abs","x","d","dy","dyRaw","y","dxy","sqrt","distfn","getDistanceFunction","getClosest","index","xc","yc","i","orientation","t","sizeVal","sNorm","s","xLabelVal","yLabelVal","extendFlat","color","x0","x1","y0","y1","spikeDistance","hovertemplate","getComponentMethod","_polygons","polygons","polygonsIn","inside","xmin","Infinity","xmax","ymin","ymax","j","polygon","pts","xCross","length","contains","push","min","_length","yAvg","defaultLine","opacity","fillcolor","line","distance","maxHoverDistance","text","Array","isArray","String","name"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/scatter/hover.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Fx = require('../../components/fx');\nvar Registry = require('../../registry');\nvar getTraceColor = require('./get_trace_color');\nvar Color = require('../../components/color');\nvar fillHoverText = require('./fill_hover_text');\n\nmodule.exports = function hoverPoints(pointData, xval, yval, hovermode) {\n    var cd = pointData.cd;\n    var trace = cd[0].trace;\n    var xa = pointData.xa;\n    var ya = pointData.ya;\n    var xpx = xa.c2p(xval);\n    var ypx = ya.c2p(yval);\n    var pt = [xpx, ypx];\n    var hoveron = trace.hoveron || '';\n    var minRad = (trace.mode.indexOf('markers') !== -1) ? 3 : 0.5;\n\n    // look for points to hover on first, then take fills only if we\n    // didn't find a point\n    if(hoveron.indexOf('points') !== -1) {\n        var dx = function(di) {\n            // dx and dy are used in compare modes - here we want to always\n            // prioritize the closest data point, at least as long as markers are\n            // the same size or nonexistent, but still try to prioritize small markers too.\n            var rad = Math.max(3, di.mrc || 0);\n            var kink = 1 - 1 / rad;\n            var dxRaw = Math.abs(xa.c2p(di.x) - xpx);\n            var d = (dxRaw < rad) ? (kink * dxRaw / rad) : (dxRaw - rad + kink);\n            return d;\n        };\n        var dy = function(di) {\n            var rad = Math.max(3, di.mrc || 0);\n            var kink = 1 - 1 / rad;\n            var dyRaw = Math.abs(ya.c2p(di.y) - ypx);\n            return (dyRaw < rad) ? (kink * dyRaw / rad) : (dyRaw - rad + kink);\n        };\n        var dxy = function(di) {\n            // scatter points: d.mrc is the calculated marker radius\n            // adjust the distance so if you're inside the marker it\n            // always will show up regardless of point size, but\n            // prioritize smaller points\n            var rad = Math.max(minRad, di.mrc || 0);\n            var dx = xa.c2p(di.x) - xpx;\n            var dy = ya.c2p(di.y) - ypx;\n            return Math.max(Math.sqrt(dx * dx + dy * dy) - rad, 1 - minRad / rad);\n        };\n        var distfn = Fx.getDistanceFunction(hovermode, dx, dy, dxy);\n\n        Fx.getClosest(cd, distfn, pointData);\n\n        // skip the rest (for this trace) if we didn't find a close point\n        if(pointData.index !== false) {\n\n            // the closest data point\n            var di = cd[pointData.index];\n            var xc = xa.c2p(di.x, true);\n            var yc = ya.c2p(di.y, true);\n            var rad = di.mrc || 1;\n\n            // now we're done using the whole `calcdata` array, replace the\n            // index with the original index (in case of inserted point from\n            // stacked area)\n            pointData.index = di.i;\n\n            var orientation = cd[0].t.orientation;\n            // TODO: for scatter and bar, option to show (sub)totals and\n            // raw data? Currently stacked and/or normalized bars just show\n            // the normalized individual sizes, so that's what I'm doing here\n            // for now.\n            var sizeVal = orientation && (di.sNorm || di.s);\n            var xLabelVal = (orientation === 'h') ? sizeVal : di.x;\n            var yLabelVal = (orientation === 'v') ? sizeVal : di.y;\n\n            Lib.extendFlat(pointData, {\n                color: getTraceColor(trace, di),\n\n                x0: xc - rad,\n                x1: xc + rad,\n                xLabelVal: xLabelVal,\n\n                y0: yc - rad,\n                y1: yc + rad,\n                yLabelVal: yLabelVal,\n\n                spikeDistance: dxy(di),\n                hovertemplate: trace.hovertemplate\n            });\n\n            fillHoverText(di, trace, pointData);\n            Registry.getComponentMethod('errorbars', 'hoverInfo')(di, trace, pointData);\n\n            return [pointData];\n        }\n    }\n\n    // even if hoveron is 'fills', only use it if we have polygons too\n    if(hoveron.indexOf('fills') !== -1 && trace._polygons) {\n        var polygons = trace._polygons;\n        var polygonsIn = [];\n        var inside = false;\n        var xmin = Infinity;\n        var xmax = -Infinity;\n        var ymin = Infinity;\n        var ymax = -Infinity;\n\n        var i, j, polygon, pts, xCross, x0, x1, y0, y1;\n\n        for(i = 0; i < polygons.length; i++) {\n            polygon = polygons[i];\n            // TODO: this is not going to work right for curved edges, it will\n            // act as though they're straight. That's probably going to need\n            // the elements themselves to capture the events. Worth it?\n            if(polygon.contains(pt)) {\n                inside = !inside;\n                // TODO: need better than just the overall bounding box\n                polygonsIn.push(polygon);\n                ymin = Math.min(ymin, polygon.ymin);\n                ymax = Math.max(ymax, polygon.ymax);\n            }\n        }\n\n        if(inside) {\n            // constrain ymin/max to the visible plot, so the label goes\n            // at the middle of the piece you can see\n            ymin = Math.max(ymin, 0);\n            ymax = Math.min(ymax, ya._length);\n\n            // find the overall left-most and right-most points of the\n            // polygon(s) we're inside at their combined vertical midpoint.\n            // This is where we will draw the hover label.\n            // Note that this might not be the vertical midpoint of the\n            // whole trace, if it's disjoint.\n            var yAvg = (ymin + ymax) / 2;\n            for(i = 0; i < polygonsIn.length; i++) {\n                pts = polygonsIn[i].pts;\n                for(j = 1; j < pts.length; j++) {\n                    y0 = pts[j - 1][1];\n                    y1 = pts[j][1];\n                    if((y0 > yAvg) !== (y1 >= yAvg)) {\n                        x0 = pts[j - 1][0];\n                        x1 = pts[j][0];\n                        if(y1 - y0) {\n                            xCross = x0 + (x1 - x0) * (yAvg - y0) / (y1 - y0);\n                            xmin = Math.min(xmin, xCross);\n                            xmax = Math.max(xmax, xCross);\n                        }\n                    }\n                }\n            }\n\n            // constrain xmin/max to the visible plot now too\n            xmin = Math.max(xmin, 0);\n            xmax = Math.min(xmax, xa._length);\n\n            // get only fill or line color for the hover color\n            var color = Color.defaultLine;\n            if(Color.opacity(trace.fillcolor)) color = trace.fillcolor;\n            else if(Color.opacity((trace.line || {}).color)) {\n                color = trace.line.color;\n            }\n\n            Lib.extendFlat(pointData, {\n                // never let a 2D override 1D type as closest point\n                // also: no spikeDistance, it's not allowed for fills\n                distance: pointData.maxHoverDistance,\n                x0: xmin,\n                x1: xmax,\n                y0: yAvg,\n                y1: yAvg,\n                color: color,\n                hovertemplate: '%{name}'\n            });\n\n            delete pointData.index;\n\n            if(trace.text && !Array.isArray(trace.text)) {\n                pointData.text = String(trace.text);\n            }\n            else pointData.text = trace.name;\n\n            return [pointData];\n        }\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC9B,IAAIC,EAAE,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AACvC,IAAIE,QAAQ,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AACxC,IAAIG,aAAa,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAChD,IAAII,KAAK,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;AAC7C,IAAIK,aAAa,GAAGL,OAAO,CAAC,mBAAmB,CAAC;AAEhDM,MAAM,CAACC,OAAO,GAAG,SAASC,WAAW,CAACC,SAAS,EAAEC,IAAI,EAAEC,IAAI,EAAEC,SAAS,EAAE;EACpE,IAAIC,EAAE,GAAGJ,SAAS,CAACI,EAAE;EACrB,IAAIC,KAAK,GAAGD,EAAE,CAAC,CAAC,CAAC,CAACC,KAAK;EACvB,IAAIC,EAAE,GAAGN,SAAS,CAACM,EAAE;EACrB,IAAIC,EAAE,GAAGP,SAAS,CAACO,EAAE;EACrB,IAAIC,GAAG,GAAGF,EAAE,CAACG,GAAG,CAACR,IAAI,CAAC;EACtB,IAAIS,GAAG,GAAGH,EAAE,CAACE,GAAG,CAACP,IAAI,CAAC;EACtB,IAAIS,EAAE,GAAG,CAACH,GAAG,EAAEE,GAAG,CAAC;EACnB,IAAIE,OAAO,GAAGP,KAAK,CAACO,OAAO,IAAI,EAAE;EACjC,IAAIC,MAAM,GAAIR,KAAK,CAACS,IAAI,CAACC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,GAAI,CAAC,GAAG,GAAG;;EAE7D;EACA;EACA,IAAGH,OAAO,CAACG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;IACjC,IAAIC,EAAE,GAAG,SAALA,EAAE,CAAYC,EAAE,EAAE;MAClB;MACA;MACA;MACA,IAAIC,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,EAAE,CAACI,GAAG,IAAI,CAAC,CAAC;MAClC,IAAIC,IAAI,GAAG,CAAC,GAAG,CAAC,GAAGJ,GAAG;MACtB,IAAIK,KAAK,GAAGJ,IAAI,CAACK,GAAG,CAAClB,EAAE,CAACG,GAAG,CAACQ,EAAE,CAACQ,CAAC,CAAC,GAAGjB,GAAG,CAAC;MACxC,IAAIkB,CAAC,GAAIH,KAAK,GAAGL,GAAG,GAAKI,IAAI,GAAGC,KAAK,GAAGL,GAAG,GAAKK,KAAK,GAAGL,GAAG,GAAGI,IAAK;MACnE,OAAOI,CAAC;IACZ,CAAC;IACD,IAAIC,EAAE,GAAG,SAALA,EAAE,CAAYV,EAAE,EAAE;MAClB,IAAIC,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,EAAE,CAACI,GAAG,IAAI,CAAC,CAAC;MAClC,IAAIC,IAAI,GAAG,CAAC,GAAG,CAAC,GAAGJ,GAAG;MACtB,IAAIU,KAAK,GAAGT,IAAI,CAACK,GAAG,CAACjB,EAAE,CAACE,GAAG,CAACQ,EAAE,CAACY,CAAC,CAAC,GAAGnB,GAAG,CAAC;MACxC,OAAQkB,KAAK,GAAGV,GAAG,GAAKI,IAAI,GAAGM,KAAK,GAAGV,GAAG,GAAKU,KAAK,GAAGV,GAAG,GAAGI,IAAK;IACtE,CAAC;IACD,IAAIQ,GAAG,GAAG,SAANA,GAAG,CAAYb,EAAE,EAAE;MACnB;MACA;MACA;MACA;MACA,IAAIC,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACP,MAAM,EAAEI,EAAE,CAACI,GAAG,IAAI,CAAC,CAAC;MACvC,IAAIL,EAAE,GAAGV,EAAE,CAACG,GAAG,CAACQ,EAAE,CAACQ,CAAC,CAAC,GAAGjB,GAAG;MAC3B,IAAImB,EAAE,GAAGpB,EAAE,CAACE,GAAG,CAACQ,EAAE,CAACY,CAAC,CAAC,GAAGnB,GAAG;MAC3B,OAAOS,IAAI,CAACC,GAAG,CAACD,IAAI,CAACY,IAAI,CAACf,EAAE,GAAGA,EAAE,GAAGW,EAAE,GAAGA,EAAE,CAAC,GAAGT,GAAG,EAAE,CAAC,GAAGL,MAAM,GAAGK,GAAG,CAAC;IACzE,CAAC;IACD,IAAIc,MAAM,GAAGxC,EAAE,CAACyC,mBAAmB,CAAC9B,SAAS,EAAEa,EAAE,EAAEW,EAAE,EAAEG,GAAG,CAAC;IAE3DtC,EAAE,CAAC0C,UAAU,CAAC9B,EAAE,EAAE4B,MAAM,EAAEhC,SAAS,CAAC;;IAEpC;IACA,IAAGA,SAAS,CAACmC,KAAK,KAAK,KAAK,EAAE;MAE1B;MACA,IAAIlB,EAAE,GAAGb,EAAE,CAACJ,SAAS,CAACmC,KAAK,CAAC;MAC5B,IAAIC,EAAE,GAAG9B,EAAE,CAACG,GAAG,CAACQ,EAAE,CAACQ,CAAC,EAAE,IAAI,CAAC;MAC3B,IAAIY,EAAE,GAAG9B,EAAE,CAACE,GAAG,CAACQ,EAAE,CAACY,CAAC,EAAE,IAAI,CAAC;MAC3B,IAAIX,GAAG,GAAGD,EAAE,CAACI,GAAG,IAAI,CAAC;;MAErB;MACA;MACA;MACArB,SAAS,CAACmC,KAAK,GAAGlB,EAAE,CAACqB,CAAC;MAEtB,IAAIC,WAAW,GAAGnC,EAAE,CAAC,CAAC,CAAC,CAACoC,CAAC,CAACD,WAAW;MACrC;MACA;MACA;MACA;MACA,IAAIE,OAAO,GAAGF,WAAW,KAAKtB,EAAE,CAACyB,KAAK,IAAIzB,EAAE,CAAC0B,CAAC,CAAC;MAC/C,IAAIC,SAAS,GAAIL,WAAW,KAAK,GAAG,GAAIE,OAAO,GAAGxB,EAAE,CAACQ,CAAC;MACtD,IAAIoB,SAAS,GAAIN,WAAW,KAAK,GAAG,GAAIE,OAAO,GAAGxB,EAAE,CAACY,CAAC;MAEtDvC,GAAG,CAACwD,UAAU,CAAC9C,SAAS,EAAE;QACtB+C,KAAK,EAAErD,aAAa,CAACW,KAAK,EAAEY,EAAE,CAAC;QAE/B+B,EAAE,EAAEZ,EAAE,GAAGlB,GAAG;QACZ+B,EAAE,EAAEb,EAAE,GAAGlB,GAAG;QACZ0B,SAAS,EAAEA,SAAS;QAEpBM,EAAE,EAAEb,EAAE,GAAGnB,GAAG;QACZiC,EAAE,EAAEd,EAAE,GAAGnB,GAAG;QACZ2B,SAAS,EAAEA,SAAS;QAEpBO,aAAa,EAAEtB,GAAG,CAACb,EAAE,CAAC;QACtBoC,aAAa,EAAEhD,KAAK,CAACgD;MACzB,CAAC,CAAC;MAEFzD,aAAa,CAACqB,EAAE,EAAEZ,KAAK,EAAEL,SAAS,CAAC;MACnCP,QAAQ,CAAC6D,kBAAkB,CAAC,WAAW,EAAE,WAAW,CAAC,CAACrC,EAAE,EAAEZ,KAAK,EAAEL,SAAS,CAAC;MAE3E,OAAO,CAACA,SAAS,CAAC;IACtB;EACJ;;EAEA;EACA,IAAGY,OAAO,CAACG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAIV,KAAK,CAACkD,SAAS,EAAE;IACnD,IAAIC,QAAQ,GAAGnD,KAAK,CAACkD,SAAS;IAC9B,IAAIE,UAAU,GAAG,EAAE;IACnB,IAAIC,MAAM,GAAG,KAAK;IAClB,IAAIC,IAAI,GAAGC,QAAQ;IACnB,IAAIC,IAAI,GAAG,CAACD,QAAQ;IACpB,IAAIE,IAAI,GAAGF,QAAQ;IACnB,IAAIG,IAAI,GAAG,CAACH,QAAQ;IAEpB,IAAItB,CAAC,EAAE0B,CAAC,EAAEC,OAAO,EAAEC,GAAG,EAAEC,MAAM,EAAEnB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;IAE9C,KAAIb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkB,QAAQ,CAACY,MAAM,EAAE9B,CAAC,EAAE,EAAE;MACjC2B,OAAO,GAAGT,QAAQ,CAAClB,CAAC,CAAC;MACrB;MACA;MACA;MACA,IAAG2B,OAAO,CAACI,QAAQ,CAAC1D,EAAE,CAAC,EAAE;QACrB+C,MAAM,GAAG,CAACA,MAAM;QAChB;QACAD,UAAU,CAACa,IAAI,CAACL,OAAO,CAAC;QACxBH,IAAI,GAAG3C,IAAI,CAACoD,GAAG,CAACT,IAAI,EAAEG,OAAO,CAACH,IAAI,CAAC;QACnCC,IAAI,GAAG5C,IAAI,CAACC,GAAG,CAAC2C,IAAI,EAAEE,OAAO,CAACF,IAAI,CAAC;MACvC;IACJ;IAEA,IAAGL,MAAM,EAAE;MACP;MACA;MACAI,IAAI,GAAG3C,IAAI,CAACC,GAAG,CAAC0C,IAAI,EAAE,CAAC,CAAC;MACxBC,IAAI,GAAG5C,IAAI,CAACoD,GAAG,CAACR,IAAI,EAAExD,EAAE,CAACiE,OAAO,CAAC;;MAEjC;MACA;MACA;MACA;MACA;MACA,IAAIC,IAAI,GAAG,CAACX,IAAI,GAAGC,IAAI,IAAI,CAAC;MAC5B,KAAIzB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmB,UAAU,CAACW,MAAM,EAAE9B,CAAC,EAAE,EAAE;QACnC4B,GAAG,GAAGT,UAAU,CAACnB,CAAC,CAAC,CAAC4B,GAAG;QACvB,KAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,GAAG,CAACE,MAAM,EAAEJ,CAAC,EAAE,EAAE;UAC5Bd,EAAE,GAAGgB,GAAG,CAACF,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;UAClBb,EAAE,GAAGe,GAAG,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC;UACd,IAAId,EAAE,GAAGuB,IAAI,KAAOtB,EAAE,IAAIsB,IAAK,EAAE;YAC7BzB,EAAE,GAAGkB,GAAG,CAACF,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAClBf,EAAE,GAAGiB,GAAG,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC;YACd,IAAGb,EAAE,GAAGD,EAAE,EAAE;cACRiB,MAAM,GAAGnB,EAAE,GAAG,CAACC,EAAE,GAAGD,EAAE,KAAKyB,IAAI,GAAGvB,EAAE,CAAC,IAAIC,EAAE,GAAGD,EAAE,CAAC;cACjDS,IAAI,GAAGxC,IAAI,CAACoD,GAAG,CAACZ,IAAI,EAAEQ,MAAM,CAAC;cAC7BN,IAAI,GAAG1C,IAAI,CAACC,GAAG,CAACyC,IAAI,EAAEM,MAAM,CAAC;YACjC;UACJ;QACJ;MACJ;;MAEA;MACAR,IAAI,GAAGxC,IAAI,CAACC,GAAG,CAACuC,IAAI,EAAE,CAAC,CAAC;MACxBE,IAAI,GAAG1C,IAAI,CAACoD,GAAG,CAACV,IAAI,EAAEvD,EAAE,CAACkE,OAAO,CAAC;;MAEjC;MACA,IAAIzB,KAAK,GAAGpD,KAAK,CAAC+E,WAAW;MAC7B,IAAG/E,KAAK,CAACgF,OAAO,CAACtE,KAAK,CAACuE,SAAS,CAAC,EAAE7B,KAAK,GAAG1C,KAAK,CAACuE,SAAS,CAAC,KACtD,IAAGjF,KAAK,CAACgF,OAAO,CAAC,CAACtE,KAAK,CAACwE,IAAI,IAAI,CAAC,CAAC,EAAE9B,KAAK,CAAC,EAAE;QAC7CA,KAAK,GAAG1C,KAAK,CAACwE,IAAI,CAAC9B,KAAK;MAC5B;MAEAzD,GAAG,CAACwD,UAAU,CAAC9C,SAAS,EAAE;QACtB;QACA;QACA8E,QAAQ,EAAE9E,SAAS,CAAC+E,gBAAgB;QACpC/B,EAAE,EAAEW,IAAI;QACRV,EAAE,EAAEY,IAAI;QACRX,EAAE,EAAEuB,IAAI;QACRtB,EAAE,EAAEsB,IAAI;QACR1B,KAAK,EAAEA,KAAK;QACZM,aAAa,EAAE;MACnB,CAAC,CAAC;MAEF,OAAOrD,SAAS,CAACmC,KAAK;MAEtB,IAAG9B,KAAK,CAAC2E,IAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAAC7E,KAAK,CAAC2E,IAAI,CAAC,EAAE;QACzChF,SAAS,CAACgF,IAAI,GAAGG,MAAM,CAAC9E,KAAK,CAAC2E,IAAI,CAAC;MACvC,CAAC,MACIhF,SAAS,CAACgF,IAAI,GAAG3E,KAAK,CAAC+E,IAAI;MAEhC,OAAO,CAACpF,SAAS,CAAC;IACtB;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
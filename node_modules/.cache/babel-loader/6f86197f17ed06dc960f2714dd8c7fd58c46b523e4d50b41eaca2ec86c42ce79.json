{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n/*\n * Evaluates the derivative of a list of control point arrays. That is, it expects an array or arrays\n * that are expanded relative to the raw data to include the bicubic control points, if applicable. If\n * only linear interpolation is desired, then the data points correspond 1-1 along that axis to the\n * data itself. Since it's catmull-rom splines in either direction note in particular that the\n * derivatives are discontinuous across cell boundaries. That's the reason you need both the *cell*\n * and the *point within the cell*.\n *\n * Also note that the discontinuity of the derivative is in magnitude only. The direction *is*\n * continuous across cell boundaries.\n *\n * For example, to compute the derivative of the xcoordinate halfway betwen the 7 and 8th i-gridpoints\n * and the 10th and 11th j-gridpoints given bicubic smoothing in both dimensions, you'd write:\n *\n *     var deriv = createIDerivativeEvaluator([x], 1, 1);\n *\n *     var dxdi = deriv([], 7, 10, 0.5, 0.5);\n *     // => [0.12345]\n *\n * Since there'd be a bunch of duplicate computation to compute multiple derivatives, you can double\n * this up by providing more arrays:\n *\n *     var deriv = createIDerivativeEvaluator([x, y], 1, 1);\n *\n *     var dxdi = deriv([], 7, 10, 0.5, 0.5);\n *     // => [0.12345, 0.78910]\n *\n * NB: It's presumed that at this point all data has been sanitized and is valid numerical data arrays\n * of the correct dimension.\n */\nmodule.exports = function (arrays, asmoothing, bsmoothing) {\n  if (asmoothing && bsmoothing) {\n    return function (out, i0, j0, u, v) {\n      if (!out) out = [];\n      var f0, f1, f2, f3, ak, k;\n\n      // Since it's a grid of control points, the actual indices are * 3:\n      i0 *= 3;\n      j0 *= 3;\n\n      // Precompute some numbers:\n      var u2 = u * u;\n      var ou = 1 - u;\n      var ou2 = ou * ou;\n      var ouu2 = ou * u * 2;\n      var a = -3 * ou2;\n      var b = 3 * (ou2 - ouu2);\n      var c = 3 * (ouu2 - u2);\n      var d = 3 * u2;\n      var v2 = v * v;\n      var v3 = v2 * v;\n      var ov = 1 - v;\n      var ov2 = ov * ov;\n      var ov3 = ov2 * ov;\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        // Compute the derivatives in the u-direction:\n        f0 = a * ak[j0][i0] + b * ak[j0][i0 + 1] + c * ak[j0][i0 + 2] + d * ak[j0][i0 + 3];\n        f1 = a * ak[j0 + 1][i0] + b * ak[j0 + 1][i0 + 1] + c * ak[j0 + 1][i0 + 2] + d * ak[j0 + 1][i0 + 3];\n        f2 = a * ak[j0 + 2][i0] + b * ak[j0 + 2][i0 + 1] + c * ak[j0 + 2][i0 + 2] + d * ak[j0 + 2][i0 + 3];\n        f3 = a * ak[j0 + 3][i0] + b * ak[j0 + 3][i0 + 1] + c * ak[j0 + 3][i0 + 2] + d * ak[j0 + 3][i0 + 3];\n\n        // Now just interpolate in the v-direction since it's all separable:\n        out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n      }\n      return out;\n    };\n  } else if (asmoothing) {\n    // Handle smooth in the a-direction but linear in the b-direction by performing four\n    // linear interpolations followed by one cubic interpolation of the result\n    return function (out, i0, j0, u, v) {\n      if (!out) out = [];\n      var f0, f1, k, ak;\n      i0 *= 3;\n      var u2 = u * u;\n      var ou = 1 - u;\n      var ou2 = ou * ou;\n      var ouu2 = ou * u * 2;\n      var a = -3 * ou2;\n      var b = 3 * (ou2 - ouu2);\n      var c = 3 * (ouu2 - u2);\n      var d = 3 * u2;\n      var ov = 1 - v;\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = a * ak[j0][i0] + b * ak[j0][i0 + 1] + c * ak[j0][i0 + 2] + d * ak[j0][i0 + 3];\n        f1 = a * ak[j0 + 1][i0] + b * ak[j0 + 1][i0 + 1] + c * ak[j0 + 1][i0 + 2] + d * ak[j0 + 1][i0 + 3];\n        out[k] = ov * f0 + v * f1;\n      }\n      return out;\n    };\n  } else if (bsmoothing) {\n    // Same as the above case, except reversed. I've disabled the no-unused vars rule\n    // so that this function is fully interpolation-agnostic. Otherwise it would need\n    // to be called differently in different cases. Which wouldn't be the worst, but\n    /* eslint-disable no-unused-vars */\n    return function (out, i0, j0, u, v) {\n      /* eslint-enable no-unused-vars */\n      if (!out) out = [];\n      var f0, f1, f2, f3, k, ak;\n      j0 *= 3;\n      var v2 = v * v;\n      var v3 = v2 * v;\n      var ov = 1 - v;\n      var ov2 = ov * ov;\n      var ov3 = ov2 * ov;\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ak[j0][i0 + 1] - ak[j0][i0];\n        f1 = ak[j0 + 1][i0 + 1] - ak[j0 + 1][i0];\n        f2 = ak[j0 + 2][i0 + 1] - ak[j0 + 2][i0];\n        f3 = ak[j0 + 3][i0 + 1] - ak[j0 + 3][i0];\n        out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n      }\n      return out;\n    };\n  } else {\n    // Finally, both directions are linear:\n    /* eslint-disable no-unused-vars */\n    return function (out, i0, j0, u, v) {\n      /* eslint-enable no-unused-vars */\n      if (!out) out = [];\n      var f0, f1, k, ak;\n      var ov = 1 - v;\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ak[j0][i0 + 1] - ak[j0][i0];\n        f1 = ak[j0 + 1][i0 + 1] - ak[j0 + 1][i0];\n        out[k] = ov * f0 + v * f1;\n      }\n      return out;\n    };\n  }\n};","map":{"version":3,"names":["module","exports","arrays","asmoothing","bsmoothing","out","i0","j0","u","v","f0","f1","f2","f3","ak","k","u2","ou","ou2","ouu2","a","b","c","d","v2","v3","ov","ov2","ov3","length"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/carpet/create_i_derivative_evaluator.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n/*\n * Evaluates the derivative of a list of control point arrays. That is, it expects an array or arrays\n * that are expanded relative to the raw data to include the bicubic control points, if applicable. If\n * only linear interpolation is desired, then the data points correspond 1-1 along that axis to the\n * data itself. Since it's catmull-rom splines in either direction note in particular that the\n * derivatives are discontinuous across cell boundaries. That's the reason you need both the *cell*\n * and the *point within the cell*.\n *\n * Also note that the discontinuity of the derivative is in magnitude only. The direction *is*\n * continuous across cell boundaries.\n *\n * For example, to compute the derivative of the xcoordinate halfway betwen the 7 and 8th i-gridpoints\n * and the 10th and 11th j-gridpoints given bicubic smoothing in both dimensions, you'd write:\n *\n *     var deriv = createIDerivativeEvaluator([x], 1, 1);\n *\n *     var dxdi = deriv([], 7, 10, 0.5, 0.5);\n *     // => [0.12345]\n *\n * Since there'd be a bunch of duplicate computation to compute multiple derivatives, you can double\n * this up by providing more arrays:\n *\n *     var deriv = createIDerivativeEvaluator([x, y], 1, 1);\n *\n *     var dxdi = deriv([], 7, 10, 0.5, 0.5);\n *     // => [0.12345, 0.78910]\n *\n * NB: It's presumed that at this point all data has been sanitized and is valid numerical data arrays\n * of the correct dimension.\n */\nmodule.exports = function(arrays, asmoothing, bsmoothing) {\n    if(asmoothing && bsmoothing) {\n        return function(out, i0, j0, u, v) {\n            if(!out) out = [];\n            var f0, f1, f2, f3, ak, k;\n\n            // Since it's a grid of control points, the actual indices are * 3:\n            i0 *= 3;\n            j0 *= 3;\n\n            // Precompute some numbers:\n            var u2 = u * u;\n            var ou = 1 - u;\n            var ou2 = ou * ou;\n            var ouu2 = ou * u * 2;\n            var a = -3 * ou2;\n            var b = 3 * (ou2 - ouu2);\n            var c = 3 * (ouu2 - u2);\n            var d = 3 * u2;\n\n            var v2 = v * v;\n            var v3 = v2 * v;\n            var ov = 1 - v;\n            var ov2 = ov * ov;\n            var ov3 = ov2 * ov;\n\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                // Compute the derivatives in the u-direction:\n                f0 = a * ak[j0 ][i0] + b * ak[j0 ][i0 + 1] + c * ak[j0 ][i0 + 2] + d * ak[j0 ][i0 + 3];\n                f1 = a * ak[j0 + 1][i0] + b * ak[j0 + 1][i0 + 1] + c * ak[j0 + 1][i0 + 2] + d * ak[j0 + 1][i0 + 3];\n                f2 = a * ak[j0 + 2][i0] + b * ak[j0 + 2][i0 + 1] + c * ak[j0 + 2][i0 + 2] + d * ak[j0 + 2][i0 + 3];\n                f3 = a * ak[j0 + 3][i0] + b * ak[j0 + 3][i0 + 1] + c * ak[j0 + 3][i0 + 2] + d * ak[j0 + 3][i0 + 3];\n\n                // Now just interpolate in the v-direction since it's all separable:\n                out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n            }\n\n            return out;\n        };\n    } else if(asmoothing) {\n        // Handle smooth in the a-direction but linear in the b-direction by performing four\n        // linear interpolations followed by one cubic interpolation of the result\n        return function(out, i0, j0, u, v) {\n            if(!out) out = [];\n            var f0, f1, k, ak;\n            i0 *= 3;\n            var u2 = u * u;\n            var ou = 1 - u;\n            var ou2 = ou * ou;\n            var ouu2 = ou * u * 2;\n            var a = -3 * ou2;\n            var b = 3 * (ou2 - ouu2);\n            var c = 3 * (ouu2 - u2);\n            var d = 3 * u2;\n            var ov = 1 - v;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = a * ak[j0 ][i0] + b * ak[j0 ][i0 + 1] + c * ak[j0 ][i0 + 2] + d * ak[j0 ][i0 + 3];\n                f1 = a * ak[j0 + 1][i0] + b * ak[j0 + 1][i0 + 1] + c * ak[j0 + 1][i0 + 2] + d * ak[j0 + 1][i0 + 3];\n\n                out[k] = ov * f0 + v * f1;\n            }\n            return out;\n        };\n    } else if(bsmoothing) {\n        // Same as the above case, except reversed. I've disabled the no-unused vars rule\n        // so that this function is fully interpolation-agnostic. Otherwise it would need\n        // to be called differently in different cases. Which wouldn't be the worst, but\n        /* eslint-disable no-unused-vars */\n        return function(out, i0, j0, u, v) {\n        /* eslint-enable no-unused-vars */\n            if(!out) out = [];\n            var f0, f1, f2, f3, k, ak;\n            j0 *= 3;\n            var v2 = v * v;\n            var v3 = v2 * v;\n            var ov = 1 - v;\n            var ov2 = ov * ov;\n            var ov3 = ov2 * ov;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = ak[j0][i0 + 1] - ak[j0][i0];\n                f1 = ak[j0 + 1][i0 + 1] - ak[j0 + 1][i0];\n                f2 = ak[j0 + 2][i0 + 1] - ak[j0 + 2][i0];\n                f3 = ak[j0 + 3][i0 + 1] - ak[j0 + 3][i0];\n\n                out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n            }\n            return out;\n        };\n    } else {\n        // Finally, both directions are linear:\n        /* eslint-disable no-unused-vars */\n        return function(out, i0, j0, u, v) {\n        /* eslint-enable no-unused-vars */\n            if(!out) out = [];\n            var f0, f1, k, ak;\n            var ov = 1 - v;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = ak[j0][i0 + 1] - ak[j0][i0];\n                f1 = ak[j0 + 1][i0 + 1] - ak[j0 + 1][i0];\n\n                out[k] = ov * f0 + v * f1;\n            }\n            return out;\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../registry');\nvar Lib = require('../lib');\nvar baseAttributes = require('../plots/attributes');\nvar baseLayoutAttributes = require('../plots/layout_attributes');\nvar frameAttributes = require('../plots/frame_attributes');\nvar animationAttributes = require('../plots/animation_attributes');\nvar configAttributes = require('./plot_config').configAttributes;\n\n// polar attributes are not part of the Registry yet\nvar polarAreaAttrs = require('../plots/polar/legacy/area_attributes');\nvar polarAxisAttrs = require('../plots/polar/legacy/axis_attributes');\nvar editTypes = require('./edit_types');\nvar extendFlat = Lib.extendFlat;\nvar extendDeepAll = Lib.extendDeepAll;\nvar isPlainObject = Lib.isPlainObject;\nvar IS_SUBPLOT_OBJ = '_isSubplotObj';\nvar IS_LINKED_TO_ARRAY = '_isLinkedToArray';\nvar ARRAY_ATTR_REGEXPS = '_arrayAttrRegexps';\nvar DEPRECATED = '_deprecated';\nvar UNDERSCORE_ATTRS = [IS_SUBPLOT_OBJ, IS_LINKED_TO_ARRAY, ARRAY_ATTR_REGEXPS, DEPRECATED];\nexports.IS_SUBPLOT_OBJ = IS_SUBPLOT_OBJ;\nexports.IS_LINKED_TO_ARRAY = IS_LINKED_TO_ARRAY;\nexports.DEPRECATED = DEPRECATED;\nexports.UNDERSCORE_ATTRS = UNDERSCORE_ATTRS;\n\n/** Outputs the full plotly.js plot schema\n *\n * @return {object}\n *  - defs\n *  - traces\n *  - layout\n *  - transforms\n *  - frames\n *  - animations\n *  - config\n */\nexports.get = function () {\n  var traces = {};\n  Registry.allTypes.concat('area').forEach(function (type) {\n    traces[type] = getTraceAttributes(type);\n  });\n  var transforms = {};\n  Object.keys(Registry.transformsRegistry).forEach(function (type) {\n    transforms[type] = getTransformAttributes(type);\n  });\n  return {\n    defs: {\n      valObjects: Lib.valObjectMeta,\n      metaKeys: UNDERSCORE_ATTRS.concat(['description', 'role', 'editType', 'impliedEdits']),\n      editType: {\n        traces: editTypes.traces,\n        layout: editTypes.layout\n      },\n      impliedEdits: {\n        description: ['Sometimes when an attribute is changed, other attributes', 'must be altered as well in order to achieve the intended', 'result. For example, when `range` is specified, it is', 'important to set `autorange` to `false` or the new `range`', 'value would be lost in the redraw. `impliedEdits` is the', 'mechanism to do this: `impliedEdits: {autorange: false}`.', 'Each key is a relative paths to the attribute string to', 'change, using *^* to ascend into the parent container,', 'for example `range[0]` has `impliedEdits: {*^autorange*: false}`.', 'A value of `undefined` means that the attribute will not be', 'changed, but its previous value should be recorded in case', 'we want to reverse this change later. For example, `autorange`', 'has `impliedEdits: {*range[0]*: undefined, *range[1]*:undefined}', 'because the range will likely be changed by redraw.'].join(' ')\n      }\n    },\n    traces: traces,\n    layout: getLayoutAttributes(),\n    transforms: transforms,\n    frames: getFramesAttributes(),\n    animation: formatAttributes(animationAttributes),\n    config: formatAttributes(configAttributes)\n  };\n};\n\n/**\n * Crawl the attribute tree, recursively calling a callback function\n *\n * @param {object} attrs\n *  The node of the attribute tree (e.g. the root) from which recursion originates\n * @param {Function} callback\n *  A callback function with the signature:\n *          @callback callback\n *          @param {object} attr an attribute\n *          @param {String} attrName name string\n *          @param {object[]} attrs all the attributes\n *          @param {Number} level the recursion level, 0 at the root\n *          @param {String} fullAttrString full attribute name (ie 'marker.line')\n * @param {Number} [specifiedLevel]\n *  The level in the tree, in order to let the callback function detect descend or backtrack,\n *  typically unsupplied (implied 0), just used by the self-recursive call.\n *  The necessity arises because the tree traversal is not controlled by callback return values.\n *  The decision to not use callback return values for controlling tree pruning arose from\n *  the goal of keeping the crawler backwards compatible. Observe that one of the pruning conditions\n *  precedes the callback call.\n * @param {string} [attrString]\n *  the path to the current attribute, as an attribute string (ie 'marker.line')\n *  typically unsupplied, but you may supply it if you want to disambiguate which attrs tree you\n *  are starting from\n *\n * @return {object} transformOut\n *  copy of transformIn that contains attribute defaults\n */\nexports.crawl = function (attrs, callback, specifiedLevel, attrString) {\n  var level = specifiedLevel || 0;\n  attrString = attrString || '';\n  Object.keys(attrs).forEach(function (attrName) {\n    var attr = attrs[attrName];\n    if (UNDERSCORE_ATTRS.indexOf(attrName) !== -1) return;\n    var fullAttrString = (attrString ? attrString + '.' : '') + attrName;\n    callback(attr, attrName, attrs, level, fullAttrString);\n    if (exports.isValObject(attr)) return;\n    if (isPlainObject(attr) && attrName !== 'impliedEdits') {\n      exports.crawl(attr, callback, level + 1, fullAttrString);\n    }\n  });\n};\n\n/** Is object a value object (or a container object)?\n *\n * @param {object} obj\n * @return {boolean}\n *  returns true for a valid value object and\n *  false for tree nodes in the attribute hierarchy\n */\nexports.isValObject = function (obj) {\n  return obj && obj.valType !== undefined;\n};\n\n/**\n * Find all data array attributes in a given trace object - including\n * `arrayOk` attributes.\n *\n * @param {object} trace\n *  full trace object that contains a reference to `_module.attributes`\n *\n * @return {array} arrayAttributes\n *  list of array attributes for the given trace\n */\nexports.findArrayAttributes = function (trace) {\n  var arrayAttributes = [];\n  var stack = [];\n  var isArrayStack = [];\n  var baseContainer, baseAttrName;\n  function callback(attr, attrName, attrs, level) {\n    stack = stack.slice(0, level).concat([attrName]);\n    isArrayStack = isArrayStack.slice(0, level).concat([attr && attr._isLinkedToArray]);\n    var splittableAttr = attr && (attr.valType === 'data_array' || attr.arrayOk === true) && !(stack[level - 1] === 'colorbar' && (attrName === 'ticktext' || attrName === 'tickvals'));\n\n    // Manually exclude 'colorbar.tickvals' and 'colorbar.ticktext' for now\n    // which are declared as `valType: 'data_array'` but scale independently of\n    // the coordinate arrays.\n    //\n    // Down the road, we might want to add a schema field (e.g `uncorrelatedArray: true`)\n    // to distinguish attributes of the likes.\n\n    if (!splittableAttr) return;\n    crawlIntoTrace(baseContainer, 0, '');\n  }\n  function crawlIntoTrace(container, i, astrPartial) {\n    var item = container[stack[i]];\n    var newAstrPartial = astrPartial + stack[i];\n    if (i === stack.length - 1) {\n      if (Lib.isArrayOrTypedArray(item)) {\n        arrayAttributes.push(baseAttrName + newAstrPartial);\n      }\n    } else {\n      if (isArrayStack[i]) {\n        if (Array.isArray(item)) {\n          for (var j = 0; j < item.length; j++) {\n            if (Lib.isPlainObject(item[j])) {\n              crawlIntoTrace(item[j], i + 1, newAstrPartial + '[' + j + '].');\n            }\n          }\n        }\n      } else if (Lib.isPlainObject(item)) {\n        crawlIntoTrace(item, i + 1, newAstrPartial + '.');\n      }\n    }\n  }\n  baseContainer = trace;\n  baseAttrName = '';\n  exports.crawl(baseAttributes, callback);\n  if (trace._module && trace._module.attributes) {\n    exports.crawl(trace._module.attributes, callback);\n  }\n  var transforms = trace.transforms;\n  if (transforms) {\n    for (var i = 0; i < transforms.length; i++) {\n      var transform = transforms[i];\n      var module = transform._module;\n      if (module) {\n        baseAttrName = 'transforms[' + i + '].';\n        baseContainer = transform;\n        exports.crawl(module.attributes, callback);\n      }\n    }\n  }\n  return arrayAttributes;\n};\n\n/*\n * Find the valObject for one attribute in an existing trace\n *\n * @param {object} trace\n *  full trace object that contains a reference to `_module.attributes`\n * @param {object} parts\n *  an array of parts, like ['transforms', 1, 'value']\n *  typically from nestedProperty(...).parts\n *\n * @return {object|false}\n *  the valObject for this attribute, or the last found parent\n *  in some cases the innermost valObject will not exist, for example\n *  `valType: 'any'` attributes where we might set a part of the attribute.\n *  In that case, stop at the deepest valObject we *do* find.\n */\nexports.getTraceValObject = function (trace, parts) {\n  var head = parts[0];\n  var i = 1; // index to start recursing from\n  var moduleAttrs, valObject;\n  if (head === 'transforms') {\n    if (parts.length === 1) {\n      return baseAttributes.transforms;\n    }\n    var transforms = trace.transforms;\n    if (!Array.isArray(transforms) || !transforms.length) return false;\n    var tNum = parts[1];\n    if (!isIndex(tNum) || tNum >= transforms.length) {\n      return false;\n    }\n    moduleAttrs = (Registry.transformsRegistry[transforms[tNum].type] || {}).attributes;\n    valObject = moduleAttrs && moduleAttrs[parts[2]];\n    i = 3; // start recursing only inside the transform\n  } else if (trace.type === 'area') {\n    valObject = polarAreaAttrs[head];\n  } else {\n    // first look in the module for this trace\n    // components have already merged their trace attributes in here\n    var _module = trace._module;\n    if (!_module) _module = (Registry.modules[trace.type || baseAttributes.type.dflt] || {})._module;\n    if (!_module) return false;\n    moduleAttrs = _module.attributes;\n    valObject = moduleAttrs && moduleAttrs[head];\n\n    // then look in the subplot attributes\n    if (!valObject) {\n      var subplotModule = _module.basePlotModule;\n      if (subplotModule && subplotModule.attributes) {\n        valObject = subplotModule.attributes[head];\n      }\n    }\n\n    // finally look in the global attributes\n    if (!valObject) valObject = baseAttributes[head];\n  }\n  return recurseIntoValObject(valObject, parts, i);\n};\n\n/*\n * Find the valObject for one layout attribute\n *\n * @param {array} parts\n *  an array of parts, like ['annotations', 1, 'x']\n *  typically from nestedProperty(...).parts\n *\n * @return {object|false}\n *  the valObject for this attribute, or the last found parent\n *  in some cases the innermost valObject will not exist, for example\n *  `valType: 'any'` attributes where we might set a part of the attribute.\n *  In that case, stop at the deepest valObject we *do* find.\n */\nexports.getLayoutValObject = function (fullLayout, parts) {\n  var valObject = layoutHeadAttr(fullLayout, parts[0]);\n  return recurseIntoValObject(valObject, parts, 1);\n};\nfunction layoutHeadAttr(fullLayout, head) {\n  var i, key, _module, attributes;\n\n  // look for attributes of the subplot types used on the plot\n  var basePlotModules = fullLayout._basePlotModules;\n  if (basePlotModules) {\n    var out;\n    for (i = 0; i < basePlotModules.length; i++) {\n      _module = basePlotModules[i];\n      if (_module.attrRegex && _module.attrRegex.test(head)) {\n        // if a module defines overrides, these take precedence\n        // initially this is to allow gl2d different editTypes from svg cartesian\n        if (_module.layoutAttrOverrides) return _module.layoutAttrOverrides;\n\n        // otherwise take the first attributes we find\n        if (!out && _module.layoutAttributes) out = _module.layoutAttributes;\n      }\n\n      // a module can also override the behavior of base (and component) module layout attrs\n      // again see gl2d for initial use case\n      var baseOverrides = _module.baseLayoutAttrOverrides;\n      if (baseOverrides && head in baseOverrides) return baseOverrides[head];\n    }\n    if (out) return out;\n  }\n\n  // look for layout attributes contributed by traces on the plot\n  var modules = fullLayout._modules;\n  if (modules) {\n    for (i = 0; i < modules.length; i++) {\n      attributes = modules[i].layoutAttributes;\n      if (attributes && head in attributes) {\n        return attributes[head];\n      }\n    }\n  }\n\n  /*\n   * Next look in components.\n   * Components that define a schema have already merged this into\n   * base and subplot attribute defs, so ignore these.\n   * Others (older style) all put all their attributes\n   * inside a container matching the module `name`\n   * eg `attributes` (array) or `legend` (object)\n   */\n  for (key in Registry.componentsRegistry) {\n    _module = Registry.componentsRegistry[key];\n    if (!_module.schema && head === _module.name) {\n      return _module.layoutAttributes;\n    }\n  }\n  if (head in baseLayoutAttributes) return baseLayoutAttributes[head];\n\n  // Polar doesn't populate _modules or _basePlotModules\n  // just fall back on these when the others fail\n  if (head === 'radialaxis' || head === 'angularaxis') {\n    return polarAxisAttrs[head];\n  }\n  return polarAxisAttrs.layout[head] || false;\n}\nfunction recurseIntoValObject(valObject, parts, i) {\n  if (!valObject) return false;\n  if (valObject._isLinkedToArray) {\n    // skip array index, abort if we try to dive into an array without an index\n    if (isIndex(parts[i])) i++;else if (i < parts.length) return false;\n  }\n\n  // now recurse as far as we can. Occasionally we have an attribute\n  // setting an internal part below what's in the schema; just return\n  // the innermost schema item we find.\n  for (; i < parts.length; i++) {\n    var newValObject = valObject[parts[i]];\n    if (isPlainObject(newValObject)) valObject = newValObject;else break;\n    if (i === parts.length - 1) break;\n    if (valObject._isLinkedToArray) {\n      i++;\n      if (!isIndex(parts[i])) return false;\n    } else if (valObject.valType === 'info_array') {\n      i++;\n      var index = parts[i];\n      if (!isIndex(index)) return false;\n      var items = valObject.items;\n      if (Array.isArray(items)) {\n        if (index >= items.length) return false;\n        if (valObject.dimensions === 2) {\n          i++;\n          if (parts.length === i) return valObject;\n          var index2 = parts[i];\n          if (!isIndex(index2)) return false;\n          valObject = items[index][index2];\n        } else valObject = items[index];\n      } else {\n        valObject = items;\n      }\n    }\n  }\n  return valObject;\n}\n\n// note: this is different from Lib.isIndex, this one doesn't accept numeric\n// strings, only actual numbers.\nfunction isIndex(val) {\n  return val === Math.round(val) && val >= 0;\n}\nfunction getTraceAttributes(type) {\n  var _module, basePlotModule;\n  if (type === 'area') {\n    _module = {\n      attributes: polarAreaAttrs\n    };\n    basePlotModule = {};\n  } else {\n    _module = Registry.modules[type]._module, basePlotModule = _module.basePlotModule;\n  }\n  var attributes = {};\n\n  // make 'type' the first attribute in the object\n  attributes.type = null;\n  var copyBaseAttributes = extendDeepAll({}, baseAttributes);\n  var copyModuleAttributes = extendDeepAll({}, _module.attributes);\n\n  // prune global-level trace attributes that are already defined in a trace\n  exports.crawl(copyModuleAttributes, function (attr, attrName, attrs, level, fullAttrString) {\n    Lib.nestedProperty(copyBaseAttributes, fullAttrString).set(undefined);\n    // Prune undefined attributes\n    if (attr === undefined) Lib.nestedProperty(copyModuleAttributes, fullAttrString).set(undefined);\n  });\n\n  // base attributes (same for all trace types)\n  extendDeepAll(attributes, copyBaseAttributes);\n\n  // module attributes\n  extendDeepAll(attributes, copyModuleAttributes);\n\n  // subplot attributes\n  if (basePlotModule.attributes) {\n    extendDeepAll(attributes, basePlotModule.attributes);\n  }\n\n  // 'type' gets overwritten by baseAttributes; reset it here\n  attributes.type = type;\n  var out = {\n    meta: _module.meta || {},\n    attributes: formatAttributes(attributes)\n  };\n\n  // trace-specific layout attributes\n  if (_module.layoutAttributes) {\n    var layoutAttributes = {};\n    extendDeepAll(layoutAttributes, _module.layoutAttributes);\n    out.layoutAttributes = formatAttributes(layoutAttributes);\n  }\n  return out;\n}\nfunction getLayoutAttributes() {\n  var layoutAttributes = {};\n  var key, _module;\n\n  // global layout attributes\n  extendDeepAll(layoutAttributes, baseLayoutAttributes);\n\n  // add base plot module layout attributes\n  for (key in Registry.subplotsRegistry) {\n    _module = Registry.subplotsRegistry[key];\n    if (!_module.layoutAttributes) continue;\n    if (Array.isArray(_module.attr)) {\n      for (var i = 0; i < _module.attr.length; i++) {\n        handleBasePlotModule(layoutAttributes, _module, _module.attr[i]);\n      }\n    } else {\n      var astr = _module.attr === 'subplot' ? _module.name : _module.attr;\n      handleBasePlotModule(layoutAttributes, _module, astr);\n    }\n  }\n\n  // polar layout attributes\n  layoutAttributes = assignPolarLayoutAttrs(layoutAttributes);\n\n  // add registered components layout attributes\n  for (key in Registry.componentsRegistry) {\n    _module = Registry.componentsRegistry[key];\n    var schema = _module.schema;\n\n    /*\n     * Components with defined schema have already been merged in at register time\n     * but a few components define attributes that apply only to xaxis\n     * not yaxis (rangeselector, rangeslider) - delete from y schema.\n     * Note that the input attributes for xaxis/yaxis are the same object\n     * so it's not possible to only add them to xaxis from the start.\n     * If we ever have such asymmetry the other way, or anywhere else,\n     * we will need to extend both this code and mergeComponentAttrsToSubplot\n     * (which will not find yaxis only for example)\n     */\n    if (schema && (schema.subplots || schema.layout)) {\n      var subplots = schema.subplots;\n      if (subplots && subplots.xaxis && !subplots.yaxis) {\n        for (var xkey in subplots.xaxis) {\n          delete layoutAttributes.yaxis[xkey];\n        }\n      }\n    }\n    // older style without schema need to be explicitly merged in now\n    else if (_module.layoutAttributes) {\n      insertAttrs(layoutAttributes, _module.layoutAttributes, _module.name);\n    }\n  }\n  return {\n    layoutAttributes: formatAttributes(layoutAttributes)\n  };\n}\nfunction getTransformAttributes(type) {\n  var _module = Registry.transformsRegistry[type];\n  var attributes = extendDeepAll({}, _module.attributes);\n\n  // add registered components transform attributes\n  Object.keys(Registry.componentsRegistry).forEach(function (k) {\n    var _module = Registry.componentsRegistry[k];\n    if (_module.schema && _module.schema.transforms && _module.schema.transforms[type]) {\n      Object.keys(_module.schema.transforms[type]).forEach(function (v) {\n        insertAttrs(attributes, _module.schema.transforms[type][v], v);\n      });\n    }\n  });\n  return {\n    attributes: formatAttributes(attributes)\n  };\n}\nfunction getFramesAttributes() {\n  var attrs = {\n    frames: Lib.extendDeepAll({}, frameAttributes)\n  };\n  formatAttributes(attrs);\n  return attrs.frames;\n}\nfunction formatAttributes(attrs) {\n  mergeValTypeAndRole(attrs);\n  formatArrayContainers(attrs);\n  stringify(attrs);\n  return attrs;\n}\nfunction mergeValTypeAndRole(attrs) {\n  function makeSrcAttr(attrName) {\n    return {\n      valType: 'string',\n      role: 'info',\n      description: ['Sets the source reference on plot.ly for ', attrName, '.'].join(' '),\n      editType: 'none'\n    };\n  }\n  function callback(attr, attrName, attrs) {\n    if (exports.isValObject(attr)) {\n      if (attr.valType === 'data_array') {\n        // all 'data_array' attrs have role 'data'\n        attr.role = 'data';\n        // all 'data_array' attrs have a corresponding 'src' attr\n        attrs[attrName + 'src'] = makeSrcAttr(attrName);\n      } else if (attr.arrayOk === true) {\n        // all 'arrayOk' attrs have a corresponding 'src' attr\n        attrs[attrName + 'src'] = makeSrcAttr(attrName);\n      }\n    } else if (isPlainObject(attr)) {\n      // all attrs container objects get role 'object'\n      attr.role = 'object';\n    }\n  }\n  exports.crawl(attrs, callback);\n}\nfunction formatArrayContainers(attrs) {\n  function callback(attr, attrName, attrs) {\n    if (!attr) return;\n    var itemName = attr[IS_LINKED_TO_ARRAY];\n    if (!itemName) return;\n    delete attr[IS_LINKED_TO_ARRAY];\n    attrs[attrName] = {\n      items: {}\n    };\n    attrs[attrName].items[itemName] = attr;\n    attrs[attrName].role = 'object';\n  }\n  exports.crawl(attrs, callback);\n}\n\n// this can take around 10ms and should only be run from PlotSchema.get(),\n// to ensure JSON.stringify(PlotSchema.get()) gives the intended result.\nfunction stringify(attrs) {\n  function walk(attr) {\n    for (var k in attr) {\n      if (isPlainObject(attr[k])) {\n        walk(attr[k]);\n      } else if (Array.isArray(attr[k])) {\n        for (var i = 0; i < attr[k].length; i++) {\n          walk(attr[k][i]);\n        }\n      } else {\n        // as JSON.stringify(/test/) // => {}\n        if (attr[k] instanceof RegExp) {\n          attr[k] = attr[k].toString();\n        }\n      }\n    }\n  }\n  walk(attrs);\n}\nfunction assignPolarLayoutAttrs(layoutAttributes) {\n  extendFlat(layoutAttributes, {\n    radialaxis: polarAxisAttrs.radialaxis,\n    angularaxis: polarAxisAttrs.angularaxis\n  });\n  extendFlat(layoutAttributes, polarAxisAttrs.layout);\n  return layoutAttributes;\n}\nfunction handleBasePlotModule(layoutAttributes, _module, astr) {\n  var np = Lib.nestedProperty(layoutAttributes, astr);\n  var attrs = extendDeepAll({}, _module.layoutAttributes);\n  attrs[IS_SUBPLOT_OBJ] = true;\n  np.set(attrs);\n}\nfunction insertAttrs(baseAttrs, newAttrs, astr) {\n  var np = Lib.nestedProperty(baseAttrs, astr);\n  np.set(extendDeepAll(np.get() || {}, newAttrs));\n}","map":{"version":3,"names":["Registry","require","Lib","baseAttributes","baseLayoutAttributes","frameAttributes","animationAttributes","configAttributes","polarAreaAttrs","polarAxisAttrs","editTypes","extendFlat","extendDeepAll","isPlainObject","IS_SUBPLOT_OBJ","IS_LINKED_TO_ARRAY","ARRAY_ATTR_REGEXPS","DEPRECATED","UNDERSCORE_ATTRS","exports","get","traces","allTypes","concat","forEach","type","getTraceAttributes","transforms","Object","keys","transformsRegistry","getTransformAttributes","defs","valObjects","valObjectMeta","metaKeys","editType","layout","impliedEdits","description","join","getLayoutAttributes","frames","getFramesAttributes","animation","formatAttributes","config","crawl","attrs","callback","specifiedLevel","attrString","level","attrName","attr","indexOf","fullAttrString","isValObject","obj","valType","undefined","findArrayAttributes","trace","arrayAttributes","stack","isArrayStack","baseContainer","baseAttrName","slice","_isLinkedToArray","splittableAttr","arrayOk","crawlIntoTrace","container","i","astrPartial","item","newAstrPartial","length","isArrayOrTypedArray","push","Array","isArray","j","_module","attributes","transform","module","getTraceValObject","parts","head","moduleAttrs","valObject","tNum","isIndex","modules","dflt","subplotModule","basePlotModule","recurseIntoValObject","getLayoutValObject","fullLayout","layoutHeadAttr","key","basePlotModules","_basePlotModules","out","attrRegex","test","layoutAttrOverrides","layoutAttributes","baseOverrides","baseLayoutAttrOverrides","_modules","componentsRegistry","schema","name","newValObject","index","items","dimensions","index2","val","Math","round","copyBaseAttributes","copyModuleAttributes","nestedProperty","set","meta","subplotsRegistry","handleBasePlotModule","astr","assignPolarLayoutAttrs","subplots","xaxis","yaxis","xkey","insertAttrs","k","v","mergeValTypeAndRole","formatArrayContainers","stringify","makeSrcAttr","role","itemName","walk","RegExp","toString","radialaxis","angularaxis","np","baseAttrs","newAttrs"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/plot_api/plot_schema.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Registry = require('../registry');\nvar Lib = require('../lib');\n\nvar baseAttributes = require('../plots/attributes');\nvar baseLayoutAttributes = require('../plots/layout_attributes');\nvar frameAttributes = require('../plots/frame_attributes');\nvar animationAttributes = require('../plots/animation_attributes');\nvar configAttributes = require('./plot_config').configAttributes;\n\n// polar attributes are not part of the Registry yet\nvar polarAreaAttrs = require('../plots/polar/legacy/area_attributes');\nvar polarAxisAttrs = require('../plots/polar/legacy/axis_attributes');\n\nvar editTypes = require('./edit_types');\n\nvar extendFlat = Lib.extendFlat;\nvar extendDeepAll = Lib.extendDeepAll;\nvar isPlainObject = Lib.isPlainObject;\n\nvar IS_SUBPLOT_OBJ = '_isSubplotObj';\nvar IS_LINKED_TO_ARRAY = '_isLinkedToArray';\nvar ARRAY_ATTR_REGEXPS = '_arrayAttrRegexps';\nvar DEPRECATED = '_deprecated';\nvar UNDERSCORE_ATTRS = [IS_SUBPLOT_OBJ, IS_LINKED_TO_ARRAY, ARRAY_ATTR_REGEXPS, DEPRECATED];\n\nexports.IS_SUBPLOT_OBJ = IS_SUBPLOT_OBJ;\nexports.IS_LINKED_TO_ARRAY = IS_LINKED_TO_ARRAY;\nexports.DEPRECATED = DEPRECATED;\nexports.UNDERSCORE_ATTRS = UNDERSCORE_ATTRS;\n\n/** Outputs the full plotly.js plot schema\n *\n * @return {object}\n *  - defs\n *  - traces\n *  - layout\n *  - transforms\n *  - frames\n *  - animations\n *  - config\n */\nexports.get = function() {\n    var traces = {};\n\n    Registry.allTypes.concat('area').forEach(function(type) {\n        traces[type] = getTraceAttributes(type);\n    });\n\n    var transforms = {};\n\n    Object.keys(Registry.transformsRegistry).forEach(function(type) {\n        transforms[type] = getTransformAttributes(type);\n    });\n\n    return {\n        defs: {\n            valObjects: Lib.valObjectMeta,\n            metaKeys: UNDERSCORE_ATTRS.concat(['description', 'role', 'editType', 'impliedEdits']),\n            editType: {\n                traces: editTypes.traces,\n                layout: editTypes.layout\n            },\n            impliedEdits: {\n                description: [\n                    'Sometimes when an attribute is changed, other attributes',\n                    'must be altered as well in order to achieve the intended',\n                    'result. For example, when `range` is specified, it is',\n                    'important to set `autorange` to `false` or the new `range`',\n                    'value would be lost in the redraw. `impliedEdits` is the',\n                    'mechanism to do this: `impliedEdits: {autorange: false}`.',\n                    'Each key is a relative paths to the attribute string to',\n                    'change, using *^* to ascend into the parent container,',\n                    'for example `range[0]` has `impliedEdits: {*^autorange*: false}`.',\n                    'A value of `undefined` means that the attribute will not be',\n                    'changed, but its previous value should be recorded in case',\n                    'we want to reverse this change later. For example, `autorange`',\n                    'has `impliedEdits: {*range[0]*: undefined, *range[1]*:undefined}',\n                    'because the range will likely be changed by redraw.'\n                ].join(' ')\n            }\n        },\n\n        traces: traces,\n        layout: getLayoutAttributes(),\n\n        transforms: transforms,\n\n        frames: getFramesAttributes(),\n        animation: formatAttributes(animationAttributes),\n\n        config: formatAttributes(configAttributes)\n    };\n};\n\n/**\n * Crawl the attribute tree, recursively calling a callback function\n *\n * @param {object} attrs\n *  The node of the attribute tree (e.g. the root) from which recursion originates\n * @param {Function} callback\n *  A callback function with the signature:\n *          @callback callback\n *          @param {object} attr an attribute\n *          @param {String} attrName name string\n *          @param {object[]} attrs all the attributes\n *          @param {Number} level the recursion level, 0 at the root\n *          @param {String} fullAttrString full attribute name (ie 'marker.line')\n * @param {Number} [specifiedLevel]\n *  The level in the tree, in order to let the callback function detect descend or backtrack,\n *  typically unsupplied (implied 0), just used by the self-recursive call.\n *  The necessity arises because the tree traversal is not controlled by callback return values.\n *  The decision to not use callback return values for controlling tree pruning arose from\n *  the goal of keeping the crawler backwards compatible. Observe that one of the pruning conditions\n *  precedes the callback call.\n * @param {string} [attrString]\n *  the path to the current attribute, as an attribute string (ie 'marker.line')\n *  typically unsupplied, but you may supply it if you want to disambiguate which attrs tree you\n *  are starting from\n *\n * @return {object} transformOut\n *  copy of transformIn that contains attribute defaults\n */\nexports.crawl = function(attrs, callback, specifiedLevel, attrString) {\n    var level = specifiedLevel || 0;\n    attrString = attrString || '';\n\n    Object.keys(attrs).forEach(function(attrName) {\n        var attr = attrs[attrName];\n\n        if(UNDERSCORE_ATTRS.indexOf(attrName) !== -1) return;\n\n        var fullAttrString = (attrString ? attrString + '.' : '') + attrName;\n        callback(attr, attrName, attrs, level, fullAttrString);\n\n        if(exports.isValObject(attr)) return;\n\n        if(isPlainObject(attr) && attrName !== 'impliedEdits') {\n            exports.crawl(attr, callback, level + 1, fullAttrString);\n        }\n    });\n};\n\n/** Is object a value object (or a container object)?\n *\n * @param {object} obj\n * @return {boolean}\n *  returns true for a valid value object and\n *  false for tree nodes in the attribute hierarchy\n */\nexports.isValObject = function(obj) {\n    return obj && obj.valType !== undefined;\n};\n\n/**\n * Find all data array attributes in a given trace object - including\n * `arrayOk` attributes.\n *\n * @param {object} trace\n *  full trace object that contains a reference to `_module.attributes`\n *\n * @return {array} arrayAttributes\n *  list of array attributes for the given trace\n */\nexports.findArrayAttributes = function(trace) {\n    var arrayAttributes = [];\n    var stack = [];\n    var isArrayStack = [];\n    var baseContainer, baseAttrName;\n\n    function callback(attr, attrName, attrs, level) {\n        stack = stack.slice(0, level).concat([attrName]);\n        isArrayStack = isArrayStack.slice(0, level).concat([attr && attr._isLinkedToArray]);\n\n        var splittableAttr = (\n            attr &&\n            (attr.valType === 'data_array' || attr.arrayOk === true) &&\n            !(stack[level - 1] === 'colorbar' && (attrName === 'ticktext' || attrName === 'tickvals'))\n        );\n\n        // Manually exclude 'colorbar.tickvals' and 'colorbar.ticktext' for now\n        // which are declared as `valType: 'data_array'` but scale independently of\n        // the coordinate arrays.\n        //\n        // Down the road, we might want to add a schema field (e.g `uncorrelatedArray: true`)\n        // to distinguish attributes of the likes.\n\n        if(!splittableAttr) return;\n\n        crawlIntoTrace(baseContainer, 0, '');\n    }\n\n    function crawlIntoTrace(container, i, astrPartial) {\n        var item = container[stack[i]];\n        var newAstrPartial = astrPartial + stack[i];\n        if(i === stack.length - 1) {\n            if(Lib.isArrayOrTypedArray(item)) {\n                arrayAttributes.push(baseAttrName + newAstrPartial);\n            }\n        }\n        else {\n            if(isArrayStack[i]) {\n                if(Array.isArray(item)) {\n                    for(var j = 0; j < item.length; j++) {\n                        if(Lib.isPlainObject(item[j])) {\n                            crawlIntoTrace(item[j], i + 1, newAstrPartial + '[' + j + '].');\n                        }\n                    }\n                }\n            }\n            else if(Lib.isPlainObject(item)) {\n                crawlIntoTrace(item, i + 1, newAstrPartial + '.');\n            }\n        }\n    }\n\n    baseContainer = trace;\n    baseAttrName = '';\n    exports.crawl(baseAttributes, callback);\n    if(trace._module && trace._module.attributes) {\n        exports.crawl(trace._module.attributes, callback);\n    }\n\n    var transforms = trace.transforms;\n    if(transforms) {\n        for(var i = 0; i < transforms.length; i++) {\n            var transform = transforms[i];\n            var module = transform._module;\n\n            if(module) {\n                baseAttrName = 'transforms[' + i + '].';\n                baseContainer = transform;\n\n                exports.crawl(module.attributes, callback);\n            }\n        }\n    }\n\n    return arrayAttributes;\n};\n\n/*\n * Find the valObject for one attribute in an existing trace\n *\n * @param {object} trace\n *  full trace object that contains a reference to `_module.attributes`\n * @param {object} parts\n *  an array of parts, like ['transforms', 1, 'value']\n *  typically from nestedProperty(...).parts\n *\n * @return {object|false}\n *  the valObject for this attribute, or the last found parent\n *  in some cases the innermost valObject will not exist, for example\n *  `valType: 'any'` attributes where we might set a part of the attribute.\n *  In that case, stop at the deepest valObject we *do* find.\n */\nexports.getTraceValObject = function(trace, parts) {\n    var head = parts[0];\n    var i = 1; // index to start recursing from\n    var moduleAttrs, valObject;\n\n    if(head === 'transforms') {\n        if(parts.length === 1) {\n            return baseAttributes.transforms;\n        }\n        var transforms = trace.transforms;\n        if(!Array.isArray(transforms) || !transforms.length) return false;\n        var tNum = parts[1];\n        if(!isIndex(tNum) || tNum >= transforms.length) {\n            return false;\n        }\n        moduleAttrs = (Registry.transformsRegistry[transforms[tNum].type] || {}).attributes;\n        valObject = moduleAttrs && moduleAttrs[parts[2]];\n        i = 3; // start recursing only inside the transform\n    }\n    else if(trace.type === 'area') {\n        valObject = polarAreaAttrs[head];\n    }\n    else {\n        // first look in the module for this trace\n        // components have already merged their trace attributes in here\n        var _module = trace._module;\n        if(!_module) _module = (Registry.modules[trace.type || baseAttributes.type.dflt] || {})._module;\n        if(!_module) return false;\n\n        moduleAttrs = _module.attributes;\n        valObject = moduleAttrs && moduleAttrs[head];\n\n        // then look in the subplot attributes\n        if(!valObject) {\n            var subplotModule = _module.basePlotModule;\n            if(subplotModule && subplotModule.attributes) {\n                valObject = subplotModule.attributes[head];\n            }\n        }\n\n        // finally look in the global attributes\n        if(!valObject) valObject = baseAttributes[head];\n    }\n\n    return recurseIntoValObject(valObject, parts, i);\n};\n\n/*\n * Find the valObject for one layout attribute\n *\n * @param {array} parts\n *  an array of parts, like ['annotations', 1, 'x']\n *  typically from nestedProperty(...).parts\n *\n * @return {object|false}\n *  the valObject for this attribute, or the last found parent\n *  in some cases the innermost valObject will not exist, for example\n *  `valType: 'any'` attributes where we might set a part of the attribute.\n *  In that case, stop at the deepest valObject we *do* find.\n */\nexports.getLayoutValObject = function(fullLayout, parts) {\n    var valObject = layoutHeadAttr(fullLayout, parts[0]);\n\n    return recurseIntoValObject(valObject, parts, 1);\n};\n\nfunction layoutHeadAttr(fullLayout, head) {\n    var i, key, _module, attributes;\n\n    // look for attributes of the subplot types used on the plot\n    var basePlotModules = fullLayout._basePlotModules;\n    if(basePlotModules) {\n        var out;\n        for(i = 0; i < basePlotModules.length; i++) {\n            _module = basePlotModules[i];\n            if(_module.attrRegex && _module.attrRegex.test(head)) {\n                // if a module defines overrides, these take precedence\n                // initially this is to allow gl2d different editTypes from svg cartesian\n                if(_module.layoutAttrOverrides) return _module.layoutAttrOverrides;\n\n                // otherwise take the first attributes we find\n                if(!out && _module.layoutAttributes) out = _module.layoutAttributes;\n            }\n\n            // a module can also override the behavior of base (and component) module layout attrs\n            // again see gl2d for initial use case\n            var baseOverrides = _module.baseLayoutAttrOverrides;\n            if(baseOverrides && head in baseOverrides) return baseOverrides[head];\n        }\n        if(out) return out;\n    }\n\n    // look for layout attributes contributed by traces on the plot\n    var modules = fullLayout._modules;\n    if(modules) {\n        for(i = 0; i < modules.length; i++) {\n            attributes = modules[i].layoutAttributes;\n            if(attributes && head in attributes) {\n                return attributes[head];\n            }\n        }\n    }\n\n    /*\n     * Next look in components.\n     * Components that define a schema have already merged this into\n     * base and subplot attribute defs, so ignore these.\n     * Others (older style) all put all their attributes\n     * inside a container matching the module `name`\n     * eg `attributes` (array) or `legend` (object)\n     */\n    for(key in Registry.componentsRegistry) {\n        _module = Registry.componentsRegistry[key];\n        if(!_module.schema && (head === _module.name)) {\n            return _module.layoutAttributes;\n        }\n    }\n\n    if(head in baseLayoutAttributes) return baseLayoutAttributes[head];\n\n    // Polar doesn't populate _modules or _basePlotModules\n    // just fall back on these when the others fail\n    if(head === 'radialaxis' || head === 'angularaxis') {\n        return polarAxisAttrs[head];\n    }\n    return polarAxisAttrs.layout[head] || false;\n}\n\nfunction recurseIntoValObject(valObject, parts, i) {\n    if(!valObject) return false;\n\n    if(valObject._isLinkedToArray) {\n        // skip array index, abort if we try to dive into an array without an index\n        if(isIndex(parts[i])) i++;\n        else if(i < parts.length) return false;\n    }\n\n    // now recurse as far as we can. Occasionally we have an attribute\n    // setting an internal part below what's in the schema; just return\n    // the innermost schema item we find.\n    for(; i < parts.length; i++) {\n        var newValObject = valObject[parts[i]];\n        if(isPlainObject(newValObject)) valObject = newValObject;\n        else break;\n\n        if(i === parts.length - 1) break;\n\n        if(valObject._isLinkedToArray) {\n            i++;\n            if(!isIndex(parts[i])) return false;\n        }\n        else if(valObject.valType === 'info_array') {\n            i++;\n            var index = parts[i];\n            if(!isIndex(index)) return false;\n\n            var items = valObject.items;\n            if(Array.isArray(items)) {\n                if(index >= items.length) return false;\n                if(valObject.dimensions === 2) {\n                    i++;\n                    if(parts.length === i) return valObject;\n                    var index2 = parts[i];\n                    if(!isIndex(index2)) return false;\n                    valObject = items[index][index2];\n                }\n                else valObject = items[index];\n            }\n            else {\n                valObject = items;\n            }\n        }\n    }\n\n    return valObject;\n}\n\n// note: this is different from Lib.isIndex, this one doesn't accept numeric\n// strings, only actual numbers.\nfunction isIndex(val) {\n    return val === Math.round(val) && val >= 0;\n}\n\nfunction getTraceAttributes(type) {\n    var _module, basePlotModule;\n\n    if(type === 'area') {\n        _module = { attributes: polarAreaAttrs };\n        basePlotModule = {};\n    }\n    else {\n        _module = Registry.modules[type]._module,\n        basePlotModule = _module.basePlotModule;\n    }\n\n    var attributes = {};\n\n    // make 'type' the first attribute in the object\n    attributes.type = null;\n\n\n    var copyBaseAttributes = extendDeepAll({}, baseAttributes);\n    var copyModuleAttributes = extendDeepAll({}, _module.attributes);\n\n    // prune global-level trace attributes that are already defined in a trace\n    exports.crawl(copyModuleAttributes, function(attr, attrName, attrs, level, fullAttrString) {\n        Lib.nestedProperty(copyBaseAttributes, fullAttrString).set(undefined);\n        // Prune undefined attributes\n        if(attr === undefined) Lib.nestedProperty(copyModuleAttributes, fullAttrString).set(undefined);\n    });\n\n    // base attributes (same for all trace types)\n    extendDeepAll(attributes, copyBaseAttributes);\n\n    // module attributes\n    extendDeepAll(attributes, copyModuleAttributes);\n\n    // subplot attributes\n    if(basePlotModule.attributes) {\n        extendDeepAll(attributes, basePlotModule.attributes);\n    }\n\n    // 'type' gets overwritten by baseAttributes; reset it here\n    attributes.type = type;\n\n    var out = {\n        meta: _module.meta || {},\n        attributes: formatAttributes(attributes),\n    };\n\n    // trace-specific layout attributes\n    if(_module.layoutAttributes) {\n        var layoutAttributes = {};\n\n        extendDeepAll(layoutAttributes, _module.layoutAttributes);\n        out.layoutAttributes = formatAttributes(layoutAttributes);\n    }\n\n    return out;\n}\n\nfunction getLayoutAttributes() {\n    var layoutAttributes = {};\n    var key, _module;\n\n    // global layout attributes\n    extendDeepAll(layoutAttributes, baseLayoutAttributes);\n\n    // add base plot module layout attributes\n    for(key in Registry.subplotsRegistry) {\n        _module = Registry.subplotsRegistry[key];\n\n        if(!_module.layoutAttributes) continue;\n\n        if(Array.isArray(_module.attr)) {\n            for(var i = 0; i < _module.attr.length; i++) {\n                handleBasePlotModule(layoutAttributes, _module, _module.attr[i]);\n            }\n        } else {\n            var astr = _module.attr === 'subplot' ? _module.name : _module.attr;\n            handleBasePlotModule(layoutAttributes, _module, astr);\n        }\n    }\n\n    // polar layout attributes\n    layoutAttributes = assignPolarLayoutAttrs(layoutAttributes);\n\n    // add registered components layout attributes\n    for(key in Registry.componentsRegistry) {\n        _module = Registry.componentsRegistry[key];\n        var schema = _module.schema;\n\n        /*\n         * Components with defined schema have already been merged in at register time\n         * but a few components define attributes that apply only to xaxis\n         * not yaxis (rangeselector, rangeslider) - delete from y schema.\n         * Note that the input attributes for xaxis/yaxis are the same object\n         * so it's not possible to only add them to xaxis from the start.\n         * If we ever have such asymmetry the other way, or anywhere else,\n         * we will need to extend both this code and mergeComponentAttrsToSubplot\n         * (which will not find yaxis only for example)\n         */\n        if(schema && (schema.subplots || schema.layout)) {\n            var subplots = schema.subplots;\n            if(subplots && subplots.xaxis && !subplots.yaxis) {\n                for(var xkey in subplots.xaxis) delete layoutAttributes.yaxis[xkey];\n            }\n        }\n        // older style without schema need to be explicitly merged in now\n        else if(_module.layoutAttributes) {\n            insertAttrs(layoutAttributes, _module.layoutAttributes, _module.name);\n        }\n    }\n\n    return {\n        layoutAttributes: formatAttributes(layoutAttributes)\n    };\n}\n\nfunction getTransformAttributes(type) {\n    var _module = Registry.transformsRegistry[type];\n    var attributes = extendDeepAll({}, _module.attributes);\n\n    // add registered components transform attributes\n    Object.keys(Registry.componentsRegistry).forEach(function(k) {\n        var _module = Registry.componentsRegistry[k];\n\n        if(_module.schema && _module.schema.transforms && _module.schema.transforms[type]) {\n            Object.keys(_module.schema.transforms[type]).forEach(function(v) {\n                insertAttrs(attributes, _module.schema.transforms[type][v], v);\n            });\n        }\n    });\n\n    return {\n        attributes: formatAttributes(attributes)\n    };\n}\n\nfunction getFramesAttributes() {\n    var attrs = {\n        frames: Lib.extendDeepAll({}, frameAttributes)\n    };\n\n    formatAttributes(attrs);\n\n    return attrs.frames;\n}\n\nfunction formatAttributes(attrs) {\n    mergeValTypeAndRole(attrs);\n    formatArrayContainers(attrs);\n    stringify(attrs);\n\n    return attrs;\n}\n\nfunction mergeValTypeAndRole(attrs) {\n\n    function makeSrcAttr(attrName) {\n        return {\n            valType: 'string',\n            role: 'info',\n            description: [\n                'Sets the source reference on plot.ly for ',\n                attrName, '.'\n            ].join(' '),\n            editType: 'none'\n        };\n    }\n\n    function callback(attr, attrName, attrs) {\n        if(exports.isValObject(attr)) {\n            if(attr.valType === 'data_array') {\n                // all 'data_array' attrs have role 'data'\n                attr.role = 'data';\n                // all 'data_array' attrs have a corresponding 'src' attr\n                attrs[attrName + 'src'] = makeSrcAttr(attrName);\n            }\n            else if(attr.arrayOk === true) {\n                // all 'arrayOk' attrs have a corresponding 'src' attr\n                attrs[attrName + 'src'] = makeSrcAttr(attrName);\n            }\n        }\n        else if(isPlainObject(attr)) {\n            // all attrs container objects get role 'object'\n            attr.role = 'object';\n        }\n    }\n\n    exports.crawl(attrs, callback);\n}\n\nfunction formatArrayContainers(attrs) {\n\n    function callback(attr, attrName, attrs) {\n        if(!attr) return;\n\n        var itemName = attr[IS_LINKED_TO_ARRAY];\n\n        if(!itemName) return;\n\n        delete attr[IS_LINKED_TO_ARRAY];\n\n        attrs[attrName] = { items: {} };\n        attrs[attrName].items[itemName] = attr;\n        attrs[attrName].role = 'object';\n    }\n\n    exports.crawl(attrs, callback);\n}\n\n// this can take around 10ms and should only be run from PlotSchema.get(),\n// to ensure JSON.stringify(PlotSchema.get()) gives the intended result.\nfunction stringify(attrs) {\n    function walk(attr) {\n        for(var k in attr) {\n            if(isPlainObject(attr[k])) {\n                walk(attr[k]);\n            } else if(Array.isArray(attr[k])) {\n                for(var i = 0; i < attr[k].length; i++) {\n                    walk(attr[k][i]);\n                }\n            } else {\n                // as JSON.stringify(/test/) // => {}\n                if(attr[k] instanceof RegExp) {\n                    attr[k] = attr[k].toString();\n                }\n            }\n        }\n    }\n\n    walk(attrs);\n}\n\nfunction assignPolarLayoutAttrs(layoutAttributes) {\n    extendFlat(layoutAttributes, {\n        radialaxis: polarAxisAttrs.radialaxis,\n        angularaxis: polarAxisAttrs.angularaxis\n    });\n\n    extendFlat(layoutAttributes, polarAxisAttrs.layout);\n\n    return layoutAttributes;\n}\n\nfunction handleBasePlotModule(layoutAttributes, _module, astr) {\n    var np = Lib.nestedProperty(layoutAttributes, astr);\n    var attrs = extendDeepAll({}, _module.layoutAttributes);\n\n    attrs[IS_SUBPLOT_OBJ] = true;\n    np.set(attrs);\n}\n\nfunction insertAttrs(baseAttrs, newAttrs, astr) {\n    var np = Lib.nestedProperty(baseAttrs, astr);\n\n    np.set(extendDeepAll(np.get() || {}, newAttrs));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/yasmin/\\xC1rea de Trabalho/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"/home/yasmin/\\xC1rea de Trabalho/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import'plotly.js';import Plotly from'react-plotly.js';import{useEffect}from\"react\";import{useState}from\"react\";import{Spinner}from\"../Spinner\";import'./styles.css';import{NoDataMessage}from\"../NoDataMessage\";import{jsx as _jsx}from\"react/jsx-runtime\";var PlotlyMapBox=function PlotlyMapBox(props){var _useState=useState(),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),config=_useState4[0],setConfig=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),layout=_useState6[0],setLayout=_useState6[1];function verifyEmptyData(data){var _iterator=_createForOfIteratorHelper(data),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var item=_step.value;var value=parseInt(item.data);if(value>0||value!=\"0\")return true;}}catch(err){_iterator.e(err);}finally{_iterator.f();}return false;}useEffect(function(){var lon=[];var lat=[];var z=[];props.locations.forEach(function(school){lon.push(parseFloat(school.longitude));lat.push(parseFloat(school.latitude));z.push(parseInt(school.data));});setData([{lon:lon,lat:lat,radius:10,z:z,type:\"densitymapbox\",coloraxis:'coloraxis',zmin:0,zmax:10000// hoverinfo: 'skip'\n}]);setLayout({mapbox:{center:{lon:-37.2779,lat:-7.02556},style:\"outdoors\",zoom:6},// width: 1000,\ncoloraxis:{colorscale:\"Viridis\"},title:{text:\"<b>\".concat(props.title,\"</b>\"),font:{family:'Helvetica, Arial, sans-serif',size:18,color:'#000000'}},margin:{t:30,b:30}});setConfig({mapboxAccessToken:\"pk.eyJ1IjoiYW5uaWViZWx0cmFvIiwiYSI6ImNrajdpZGlhODF1aTkzMG5wcjJrN2w0dWsifQ.w5XFiBxyFEbkQwRtekWV7Q\",responsive:true});},[props.locations,props.title]);return/*#__PURE__*/_jsx(\"div\",{id:\"plotly\",children:props.locations.length>0?verifyEmptyData(props.locations)?/*#__PURE__*/_jsx(Plotly,{data:data,layout:layout,config:config,style:{width:'100%',height:'100%'}}):/*#__PURE__*/_jsx(NoDataMessage,{}):/*#__PURE__*/_jsx(Spinner,{className:\"spinner-plotly\"})});};export default PlotlyMapBox;","map":{"version":3,"sources":["/home/yasmin/Área de Trabalho/Frontend/src/components/PlotlyMapBox/index.jsx"],"names":["React","Plotly","useEffect","useState","Spinner","NoDataMessage","PlotlyMapBox","props","data","setData","config","setConfig","layout","setLayout","verifyEmptyData","item","value","parseInt","lon","lat","z","locations","forEach","school","push","parseFloat","longitude","latitude","radius","type","coloraxis","zmin","zmax","mapbox","center","style","zoom","colorscale","title","text","font","family","size","color","margin","t","b","mapboxAccessToken","responsive","length","width","height"],"mappings":"wVAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CACA,OAASC,SAAT,KAA0B,OAA1B,CACA,OAASC,QAAT,KAAyB,OAAzB,CACA,OAASC,OAAT,KAAwB,YAAxB,CACA,MAAO,cAAP,CACA,OAASC,aAAT,KAA8B,kBAA9B,C,2CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,eACJJ,QAAQ,EADJ,wCACrBK,IADqB,eACfC,OADe,8BAEAN,QAAQ,EAFR,yCAErBO,MAFqB,eAEbC,SAFa,8BAGAR,QAAQ,EAHR,yCAGrBS,MAHqB,eAGbC,SAHa,eAK5B,QAASC,CAAAA,eAAT,CAAyBN,IAAzB,CAA+B,0CACRA,IADQ,YAC3B,+CAAyB,IAAdO,CAAAA,IAAc,aACrB,GAAIC,CAAAA,KAAK,CAAGC,QAAQ,CAACF,IAAI,CAACP,IAAN,CAApB,CACA,GAAIQ,KAAK,CAAG,CAAR,EAAaA,KAAK,EAAI,GAA1B,CAA+B,MAAO,KAAP,CAClC,CAJ0B,qDAM3B,MAAO,MAAP,CACH,CAEDd,SAAS,CAAC,UAAM,CACZ,GAAIgB,CAAAA,GAAG,CAAG,EAAV,CACA,GAAIC,CAAAA,GAAG,CAAG,EAAV,CACA,GAAIC,CAAAA,CAAC,CAAG,EAAR,CAEAb,KAAK,CAACc,SAAN,CAAgBC,OAAhB,CAAwB,SAAAC,MAAM,CAAI,CAC9BL,GAAG,CAACM,IAAJ,CAASC,UAAU,CAACF,MAAM,CAACG,SAAR,CAAnB,EACAP,GAAG,CAACK,IAAJ,CAASC,UAAU,CAACF,MAAM,CAACI,QAAR,CAAnB,EACAP,CAAC,CAACI,IAAF,CAAOP,QAAQ,CAACM,MAAM,CAACf,IAAR,CAAf,EACH,CAJD,EAMAC,OAAO,CAAC,CAAC,CACLS,GAAG,CAAEA,GADA,CACKC,GAAG,CAAEA,GADV,CACeS,MAAM,CAAE,EADvB,CAELR,CAAC,CAAEA,CAFE,CAGLS,IAAI,CAAE,eAHD,CAILC,SAAS,CAAE,WAJN,CAImBC,IAAI,CAAE,CAJzB,CAI4BC,IAAI,CAAE,KACvC;AALK,CAAD,CAAD,CAAP,CAQAnB,SAAS,CAAC,CACNoB,MAAM,CAAE,CACJC,MAAM,CAAE,CAAEhB,GAAG,CAAE,CAAC,OAAR,CAAiBC,GAAG,CAAE,CAAC,OAAvB,CADJ,CAEJgB,KAAK,CAAE,UAFH,CAGJC,IAAI,CAAE,CAHF,CADF,CAMN;AACAN,SAAS,CAAE,CAAEO,UAAU,CAAE,SAAd,CAPL,CAQNC,KAAK,CAAE,CACHC,IAAI,cAAQhC,KAAK,CAAC+B,KAAd,QADD,CAEHE,IAAI,CAAE,CACFC,MAAM,CAAE,8BADN,CAEFC,IAAI,CAAE,EAFJ,CAGFC,KAAK,CAAE,SAHL,CAFH,CARD,CAgBNC,MAAM,CAAE,CAAEC,CAAC,CAAE,EAAL,CAASC,CAAC,CAAE,EAAZ,CAhBF,CAAD,CAAT,CAmBAnC,SAAS,CAAC,CACNoC,iBAAiB,CAAE,kGADb,CAENC,UAAU,CAAE,IAFN,CAAD,CAAT,CAKH,CA3CQ,CA2CN,CAACzC,KAAK,CAACc,SAAP,CAAkBd,KAAK,CAAC+B,KAAxB,CA3CM,CAAT,CA6CA,mBACI,YAAK,EAAE,CAAC,QAAR,UACM/B,KAAK,CAACc,SAAN,CAAgB4B,MAAhB,CAAyB,CAAzB,CACEnC,eAAe,CAACP,KAAK,CAACc,SAAP,CAAf,cACI,KAAC,MAAD,EACA,IAAI,CAAEb,IADN,CAEA,MAAM,CAAEI,MAFR,CAGA,MAAM,CAAEF,MAHR,CAIA,KAAK,CAAE,CAAEwC,KAAK,CAAE,MAAT,CAAiBC,MAAM,CAAE,MAAzB,CAJP,EADJ,cAQI,KAAC,aAAD,IATN,cAYE,KAAC,OAAD,EAAS,SAAS,CAAC,gBAAnB,EAbR,EADJ,CAkBH,CA7ED,CA+EA,cAAe7C,CAAAA,YAAf","sourcesContent":["import React from \"react\";\nimport 'plotly.js';\nimport Plotly from 'react-plotly.js';\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { Spinner } from \"../Spinner\";\nimport './styles.css';\nimport { NoDataMessage } from \"../NoDataMessage\";\n\nconst PlotlyMapBox = (props) => {\n    const [data, setData] = useState();\n    const [config, setConfig] = useState();\n    const [layout, setLayout] = useState();\n\n    function verifyEmptyData(data) {\n        for (const item of data) {\n            let value = parseInt(item.data);\n            if (value > 0 || value != \"0\") return true;\n        }\n\n        return false;\n    }\n\n    useEffect(() => {\n        let lon = [];\n        let lat = [];\n        let z = [];\n    \n        props.locations.forEach(school => {\n            lon.push(parseFloat(school.longitude));\n            lat.push(parseFloat(school.latitude));\n            z.push(parseInt(school.data));\n        });\n\n        setData([{\n            lon: lon, lat: lat, radius: 10,\n            z: z,\n            type: \"densitymapbox\",\n            coloraxis: 'coloraxis', zmin: 0, zmax: 10000,\n            // hoverinfo: 'skip'\n        }]);\n\n        setLayout({\n            mapbox: {\n                center: { lon: -37.2779, lat: -7.02556 },\n                style: \"outdoors\",\n                zoom: 6,\n            },\n            // width: 1000,\n            coloraxis: { colorscale: \"Viridis\" },\n            title: {\n                text: `<b>${props.title}</b>`,\n                font: {\n                    family: 'Helvetica, Arial, sans-serif',\n                    size: 18,\n                    color: '#000000'\n                }\n            },\n            margin: { t: 30, b: 30 }\n        });\n\n        setConfig({\n            mapboxAccessToken: \"pk.eyJ1IjoiYW5uaWViZWx0cmFvIiwiYSI6ImNrajdpZGlhODF1aTkzMG5wcjJrN2w0dWsifQ.w5XFiBxyFEbkQwRtekWV7Q\",\n            responsive: true \n        });\n\n    }, [props.locations, props.title]);\n\n    return (\n        <div id=\"plotly\">\n            { props.locations.length > 0 ? (\n                verifyEmptyData(props.locations) ? (\n                    <Plotly\n                    data={data}\n                    layout={layout}\n                    config={config}\n                    style={{ width: '100%', height: '100%' }}\n                />\n                ) : (\n                    <NoDataMessage />\n                )\n            ) : (\n                <Spinner className=\"spinner-plotly\" />\n            )}\n        </div>\n    );\n};\n\nexport default PlotlyMapBox;"]},"metadata":{},"sourceType":"module"}
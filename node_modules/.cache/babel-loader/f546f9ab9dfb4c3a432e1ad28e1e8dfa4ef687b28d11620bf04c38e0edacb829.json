{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\n\n// The contour extraction is great, except it totally fails for constraints because we\n// need weird range loops and flipped contours instead of the usual format. This function\n// does some weird manipulation of the extracted pathinfo data such that it magically\n// draws contours correctly *as* constraints.\nmodule.exports = function (pathinfo, operation) {\n  var i, pi0, pi1;\n  var op0 = function op0(arr) {\n    return arr.reverse();\n  };\n  var op1 = function op1(arr) {\n    return arr;\n  };\n  switch (operation) {\n    case '=':\n    case '<':\n      return pathinfo;\n    case '>':\n      if (pathinfo.length !== 1) {\n        Lib.warn('Contour data invalid for the specified inequality operation.');\n      }\n\n      // In this case there should be exactly two contour levels in pathinfo. We\n      // simply concatenate the info into one pathinfo and flip all of the data\n      // in one. This will draw the contour as closed.\n      pi0 = pathinfo[0];\n      for (i = 0; i < pi0.edgepaths.length; i++) {\n        pi0.edgepaths[i] = op0(pi0.edgepaths[i]);\n      }\n      for (i = 0; i < pi0.paths.length; i++) {\n        pi0.paths[i] = op0(pi0.paths[i]);\n      }\n      return pathinfo;\n    case '][':\n      var tmp = op0;\n      op0 = op1;\n      op1 = tmp;\n    // It's a nice rule, except this definitely *is* what's intended here.\n    /* eslint-disable: no-fallthrough */\n    case '[]':\n      /* eslint-enable: no-fallthrough */\n      if (pathinfo.length !== 2) {\n        Lib.warn('Contour data invalid for the specified inequality range operation.');\n      }\n\n      // In this case there should be exactly two contour levels in pathinfo. We\n      // simply concatenate the info into one pathinfo and flip all of the data\n      // in one. This will draw the contour as closed.\n      pi0 = copyPathinfo(pathinfo[0]);\n      pi1 = copyPathinfo(pathinfo[1]);\n      for (i = 0; i < pi0.edgepaths.length; i++) {\n        pi0.edgepaths[i] = op0(pi0.edgepaths[i]);\n      }\n      for (i = 0; i < pi0.paths.length; i++) {\n        pi0.paths[i] = op0(pi0.paths[i]);\n      }\n      while (pi1.edgepaths.length) {\n        pi0.edgepaths.push(op1(pi1.edgepaths.shift()));\n      }\n      while (pi1.paths.length) {\n        pi0.paths.push(op1(pi1.paths.shift()));\n      }\n      return [pi0];\n  }\n};\nfunction copyPathinfo(pi) {\n  return Lib.extendFlat({}, pi, {\n    edgepaths: Lib.extendDeep([], pi.edgepaths),\n    paths: Lib.extendDeep([], pi.paths)\n  });\n}","map":{"version":3,"names":["Lib","require","module","exports","pathinfo","operation","i","pi0","pi1","op0","arr","reverse","op1","length","warn","edgepaths","paths","tmp","copyPathinfo","push","shift","pi","extendFlat","extendDeep"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/contour/convert_to_constraints.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\n\n// The contour extraction is great, except it totally fails for constraints because we\n// need weird range loops and flipped contours instead of the usual format. This function\n// does some weird manipulation of the extracted pathinfo data such that it magically\n// draws contours correctly *as* constraints.\nmodule.exports = function(pathinfo, operation) {\n    var i, pi0, pi1;\n\n    var op0 = function(arr) { return arr.reverse(); };\n    var op1 = function(arr) { return arr; };\n\n    switch(operation) {\n        case '=':\n        case '<':\n            return pathinfo;\n        case '>':\n            if(pathinfo.length !== 1) {\n                Lib.warn('Contour data invalid for the specified inequality operation.');\n            }\n\n            // In this case there should be exactly two contour levels in pathinfo. We\n            // simply concatenate the info into one pathinfo and flip all of the data\n            // in one. This will draw the contour as closed.\n            pi0 = pathinfo[0];\n\n            for(i = 0; i < pi0.edgepaths.length; i++) {\n                pi0.edgepaths[i] = op0(pi0.edgepaths[i]);\n            }\n\n            for(i = 0; i < pi0.paths.length; i++) {\n                pi0.paths[i] = op0(pi0.paths[i]);\n            }\n            return pathinfo;\n        case '][':\n            var tmp = op0;\n            op0 = op1;\n            op1 = tmp;\n            // It's a nice rule, except this definitely *is* what's intended here.\n            /* eslint-disable: no-fallthrough */\n        case '[]':\n            /* eslint-enable: no-fallthrough */\n            if(pathinfo.length !== 2) {\n                Lib.warn('Contour data invalid for the specified inequality range operation.');\n            }\n\n            // In this case there should be exactly two contour levels in pathinfo. We\n            // simply concatenate the info into one pathinfo and flip all of the data\n            // in one. This will draw the contour as closed.\n            pi0 = copyPathinfo(pathinfo[0]);\n            pi1 = copyPathinfo(pathinfo[1]);\n\n            for(i = 0; i < pi0.edgepaths.length; i++) {\n                pi0.edgepaths[i] = op0(pi0.edgepaths[i]);\n            }\n\n            for(i = 0; i < pi0.paths.length; i++) {\n                pi0.paths[i] = op0(pi0.paths[i]);\n            }\n\n            while(pi1.edgepaths.length) {\n                pi0.edgepaths.push(op1(pi1.edgepaths.shift()));\n            }\n            while(pi1.paths.length) {\n                pi0.paths.push(op1(pi1.paths.shift()));\n            }\n            return [pi0];\n    }\n};\n\nfunction copyPathinfo(pi) {\n    return Lib.extendFlat({}, pi, {\n        edgepaths: Lib.extendDeep([], pi.edgepaths),\n        paths: Lib.extendDeep([], pi.paths)\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar LINKEDFILLS = {\n  tonextx: 1,\n  tonexty: 1,\n  tonext: 1\n};\nmodule.exports = function linkTraces(gd, plotinfo, cdscatter) {\n  var trace, i, group, prevtrace, groupIndex;\n\n  // first sort traces to keep stacks & filled-together groups together\n  var groupIndices = {};\n  var needsSort = false;\n  var prevGroupIndex = -1;\n  var nextGroupIndex = 0;\n  var prevUnstackedGroupIndex = -1;\n  for (i = 0; i < cdscatter.length; i++) {\n    trace = cdscatter[i][0].trace;\n    group = trace.stackgroup || '';\n    if (group) {\n      if (group in groupIndices) {\n        groupIndex = groupIndices[group];\n      } else {\n        groupIndex = groupIndices[group] = nextGroupIndex;\n        nextGroupIndex++;\n      }\n    } else if (trace.fill in LINKEDFILLS && prevUnstackedGroupIndex >= 0) {\n      groupIndex = prevUnstackedGroupIndex;\n    } else {\n      groupIndex = prevUnstackedGroupIndex = nextGroupIndex;\n      nextGroupIndex++;\n    }\n    if (groupIndex < prevGroupIndex) needsSort = true;\n    trace._groupIndex = prevGroupIndex = groupIndex;\n  }\n  var cdscatterSorted = cdscatter.slice();\n  if (needsSort) {\n    cdscatterSorted.sort(function (a, b) {\n      var traceA = a[0].trace;\n      var traceB = b[0].trace;\n      return traceA._groupIndex - traceB._groupIndex || traceA.index - traceB.index;\n    });\n  }\n\n  // now link traces to each other\n  var prevtraces = {};\n  for (i = 0; i < cdscatterSorted.length; i++) {\n    trace = cdscatterSorted[i][0].trace;\n    group = trace.stackgroup || '';\n\n    // Note: The check which ensures all cdscatter here are for the same axis and\n    // are either cartesian or scatterternary has been removed. This code assumes\n    // the passed scattertraces have been filtered to the proper plot types and\n    // the proper subplots.\n    if (trace.visible === true) {\n      trace._nexttrace = null;\n      if (trace.fill in LINKEDFILLS) {\n        prevtrace = prevtraces[group];\n        trace._prevtrace = prevtrace || null;\n        if (prevtrace) {\n          prevtrace._nexttrace = trace;\n        }\n      }\n      trace._ownfill = trace.fill && (trace.fill.substr(0, 6) === 'tozero' || trace.fill === 'toself' || trace.fill.substr(0, 2) === 'to' && !trace._prevtrace);\n      prevtraces[group] = trace;\n    } else {\n      trace._prevtrace = trace._nexttrace = trace._ownfill = null;\n    }\n  }\n  return cdscatterSorted;\n};","map":{"version":3,"names":["LINKEDFILLS","tonextx","tonexty","tonext","module","exports","linkTraces","gd","plotinfo","cdscatter","trace","i","group","prevtrace","groupIndex","groupIndices","needsSort","prevGroupIndex","nextGroupIndex","prevUnstackedGroupIndex","length","stackgroup","fill","_groupIndex","cdscatterSorted","slice","sort","a","b","traceA","traceB","index","prevtraces","visible","_nexttrace","_prevtrace","_ownfill","substr"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/scatter/link_traces.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar LINKEDFILLS = {tonextx: 1, tonexty: 1, tonext: 1};\n\nmodule.exports = function linkTraces(gd, plotinfo, cdscatter) {\n    var trace, i, group, prevtrace, groupIndex;\n\n    // first sort traces to keep stacks & filled-together groups together\n    var groupIndices = {};\n    var needsSort = false;\n    var prevGroupIndex = -1;\n    var nextGroupIndex = 0;\n    var prevUnstackedGroupIndex = -1;\n    for(i = 0; i < cdscatter.length; i++) {\n        trace = cdscatter[i][0].trace;\n        group = trace.stackgroup || '';\n        if(group) {\n            if(group in groupIndices) {\n                groupIndex = groupIndices[group];\n            }\n            else {\n                groupIndex = groupIndices[group] = nextGroupIndex;\n                nextGroupIndex++;\n            }\n        }\n        else if(trace.fill in LINKEDFILLS && prevUnstackedGroupIndex >= 0) {\n            groupIndex = prevUnstackedGroupIndex;\n        }\n        else {\n            groupIndex = prevUnstackedGroupIndex = nextGroupIndex;\n            nextGroupIndex++;\n        }\n\n        if(groupIndex < prevGroupIndex) needsSort = true;\n        trace._groupIndex = prevGroupIndex = groupIndex;\n    }\n\n    var cdscatterSorted = cdscatter.slice();\n    if(needsSort) {\n        cdscatterSorted.sort(function(a, b) {\n            var traceA = a[0].trace;\n            var traceB = b[0].trace;\n            return (traceA._groupIndex - traceB._groupIndex) ||\n                (traceA.index - traceB.index);\n        });\n    }\n\n    // now link traces to each other\n    var prevtraces = {};\n    for(i = 0; i < cdscatterSorted.length; i++) {\n        trace = cdscatterSorted[i][0].trace;\n        group = trace.stackgroup || '';\n\n        // Note: The check which ensures all cdscatter here are for the same axis and\n        // are either cartesian or scatterternary has been removed. This code assumes\n        // the passed scattertraces have been filtered to the proper plot types and\n        // the proper subplots.\n        if(trace.visible === true) {\n            trace._nexttrace = null;\n\n            if(trace.fill in LINKEDFILLS) {\n                prevtrace = prevtraces[group];\n                trace._prevtrace = prevtrace || null;\n\n                if(prevtrace) {\n                    prevtrace._nexttrace = trace;\n                }\n            }\n\n            trace._ownfill = (trace.fill && (\n                trace.fill.substr(0, 6) === 'tozero' ||\n                trace.fill === 'toself' ||\n                (trace.fill.substr(0, 2) === 'to' && !trace._prevtrace)\n            ));\n\n            prevtraces[group] = trace;\n        } else {\n            trace._prevtrace = trace._nexttrace = trace._ownfill = null;\n        }\n    }\n\n    return cdscatterSorted;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
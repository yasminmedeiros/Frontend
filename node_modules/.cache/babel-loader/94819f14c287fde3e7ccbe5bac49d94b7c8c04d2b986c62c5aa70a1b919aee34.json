{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nmodule.exports = function calcGridlines(trace, axisLetter, crossAxisLetter) {\n  var i, j, j0;\n  var eps, bounds, n1, n2, n, value, v;\n  var j1, v0, v1, d;\n  var data = trace['_' + axisLetter];\n  var axis = trace[axisLetter + 'axis'];\n  var gridlines = axis._gridlines = [];\n  var minorgridlines = axis._minorgridlines = [];\n  var boundarylines = axis._boundarylines = [];\n  var crossData = trace['_' + crossAxisLetter];\n  var crossAxis = trace[crossAxisLetter + 'axis'];\n  if (axis.tickmode === 'array') {\n    axis.tickvals = data.slice();\n  }\n  var xcp = trace._xctrl;\n  var ycp = trace._yctrl;\n  var nea = xcp[0].length;\n  var neb = xcp.length;\n  var na = trace._a.length;\n  var nb = trace._b.length;\n  Axes.prepTicks(axis);\n\n  // don't leave tickvals in axis looking like an attribute\n  if (axis.tickmode === 'array') delete axis.tickvals;\n\n  // The default is an empty array that will cause the join to remove the gridline if\n  // it's just disappeared:\n  // axis._startline = axis._endline = [];\n\n  // If the cross axis uses bicubic interpolation, then the grid\n  // lines fall once every three expanded grid row/cols:\n  var stride = axis.smoothing ? 3 : 1;\n  function constructValueGridline(value) {\n    var i, j, j0, tj, pxy, i0, ti, xy, dxydi0, dxydi1, dxydj0, dxydj1;\n    var xpoints = [];\n    var ypoints = [];\n    var ret = {};\n    // Search for the fractional grid index giving this line:\n    if (axisLetter === 'b') {\n      // For the position we use just the i-j coordinates:\n      j = trace.b2j(value);\n\n      // The derivatives for catmull-rom splines are discontinuous across cell\n      // boundaries though, so we need to provide both the cell and the position\n      // within the cell separately:\n      j0 = Math.floor(Math.max(0, Math.min(nb - 2, j)));\n      tj = j - j0;\n      ret.length = nb;\n      ret.crossLength = na;\n      ret.xy = function (i) {\n        return trace.evalxy([], i, j);\n      };\n      ret.dxy = function (i0, ti) {\n        return trace.dxydi([], i0, j0, ti, tj);\n      };\n      for (i = 0; i < na; i++) {\n        i0 = Math.min(na - 2, i);\n        ti = i - i0;\n        xy = trace.evalxy([], i, j);\n        if (crossAxis.smoothing && i > 0) {\n          // First control point:\n          dxydi0 = trace.dxydi([], i - 1, j0, 0, tj);\n          xpoints.push(pxy[0] + dxydi0[0] / 3);\n          ypoints.push(pxy[1] + dxydi0[1] / 3);\n\n          // Second control point:\n          dxydi1 = trace.dxydi([], i - 1, j0, 1, tj);\n          xpoints.push(xy[0] - dxydi1[0] / 3);\n          ypoints.push(xy[1] - dxydi1[1] / 3);\n        }\n        xpoints.push(xy[0]);\n        ypoints.push(xy[1]);\n        pxy = xy;\n      }\n    } else {\n      i = trace.a2i(value);\n      i0 = Math.floor(Math.max(0, Math.min(na - 2, i)));\n      ti = i - i0;\n      ret.length = na;\n      ret.crossLength = nb;\n      ret.xy = function (j) {\n        return trace.evalxy([], i, j);\n      };\n      ret.dxy = function (j0, tj) {\n        return trace.dxydj([], i0, j0, ti, tj);\n      };\n      for (j = 0; j < nb; j++) {\n        j0 = Math.min(nb - 2, j);\n        tj = j - j0;\n        xy = trace.evalxy([], i, j);\n        if (crossAxis.smoothing && j > 0) {\n          // First control point:\n          dxydj0 = trace.dxydj([], i0, j - 1, ti, 0);\n          xpoints.push(pxy[0] + dxydj0[0] / 3);\n          ypoints.push(pxy[1] + dxydj0[1] / 3);\n\n          // Second control point:\n          dxydj1 = trace.dxydj([], i0, j - 1, ti, 1);\n          xpoints.push(xy[0] - dxydj1[0] / 3);\n          ypoints.push(xy[1] - dxydj1[1] / 3);\n        }\n        xpoints.push(xy[0]);\n        ypoints.push(xy[1]);\n        pxy = xy;\n      }\n    }\n    ret.axisLetter = axisLetter;\n    ret.axis = axis;\n    ret.crossAxis = crossAxis;\n    ret.value = value;\n    ret.constvar = crossAxisLetter;\n    ret.index = n;\n    ret.x = xpoints;\n    ret.y = ypoints;\n    ret.smoothing = crossAxis.smoothing;\n    return ret;\n  }\n  function constructArrayGridline(idx) {\n    var j, i0, j0, ti, tj;\n    var xpoints = [];\n    var ypoints = [];\n    var ret = {};\n    ret.length = data.length;\n    ret.crossLength = crossData.length;\n    if (axisLetter === 'b') {\n      j0 = Math.max(0, Math.min(nb - 2, idx));\n      tj = Math.min(1, Math.max(0, idx - j0));\n      ret.xy = function (i) {\n        return trace.evalxy([], i, idx);\n      };\n      ret.dxy = function (i0, ti) {\n        return trace.dxydi([], i0, j0, ti, tj);\n      };\n\n      // In the tickmode: array case, this operation is a simple\n      // transfer of data:\n      for (j = 0; j < nea; j++) {\n        xpoints[j] = xcp[idx * stride][j];\n        ypoints[j] = ycp[idx * stride][j];\n      }\n    } else {\n      i0 = Math.max(0, Math.min(na - 2, idx));\n      ti = Math.min(1, Math.max(0, idx - i0));\n      ret.xy = function (j) {\n        return trace.evalxy([], idx, j);\n      };\n      ret.dxy = function (j0, tj) {\n        return trace.dxydj([], i0, j0, ti, tj);\n      };\n\n      // In the tickmode: array case, this operation is a simple\n      // transfer of data:\n      for (j = 0; j < neb; j++) {\n        xpoints[j] = xcp[j][idx * stride];\n        ypoints[j] = ycp[j][idx * stride];\n      }\n    }\n    ret.axisLetter = axisLetter;\n    ret.axis = axis;\n    ret.crossAxis = crossAxis;\n    ret.value = data[idx];\n    ret.constvar = crossAxisLetter;\n    ret.index = idx;\n    ret.x = xpoints;\n    ret.y = ypoints;\n    ret.smoothing = crossAxis.smoothing;\n    return ret;\n  }\n  if (axis.tickmode === 'array') {\n    // var j0 = axis.startline ? 1 : 0;\n    // var j1 = data.length - (axis.endline ? 1 : 0);\n\n    eps = 5e-15;\n    bounds = [Math.floor((data.length - 1 - axis.arraytick0) / axis.arraydtick * (1 + eps)), Math.ceil(-axis.arraytick0 / axis.arraydtick / (1 + eps))].sort(function (a, b) {\n      return a - b;\n    });\n\n    // Unpack sorted values so we can be sure to avoid infinite loops if something\n    // is backwards:\n    n1 = bounds[0] - 1;\n    n2 = bounds[1] + 1;\n\n    // If the axes fall along array lines, then this is a much simpler process since\n    // we already have all the control points we need\n    for (n = n1; n < n2; n++) {\n      j = axis.arraytick0 + axis.arraydtick * n;\n      if (j < 0 || j > data.length - 1) continue;\n      gridlines.push(extendFlat(constructArrayGridline(j), {\n        color: axis.gridcolor,\n        width: axis.gridwidth\n      }));\n    }\n    for (n = n1; n < n2; n++) {\n      j0 = axis.arraytick0 + axis.arraydtick * n;\n      j1 = Math.min(j0 + axis.arraydtick, data.length - 1);\n\n      // TODO: fix the bounds computation so we don't have to do a large range and then throw\n      // out unneeded numbers\n      if (j0 < 0 || j0 > data.length - 1) continue;\n      if (j1 < 0 || j1 > data.length - 1) continue;\n      v0 = data[j0];\n      v1 = data[j1];\n      for (i = 0; i < axis.minorgridcount; i++) {\n        d = j1 - j0;\n\n        // TODO: fix the bounds computation so we don't have to do a large range and then throw\n        // out unneeded numbers\n        if (d <= 0) continue;\n\n        // XXX: This calculation isn't quite right. Off by one somewhere?\n        v = v0 + (v1 - v0) * (i + 1) / (axis.minorgridcount + 1) * (axis.arraydtick / d);\n\n        // TODO: fix the bounds computation so we don't have to do a large range and then throw\n        // out unneeded numbers\n        if (v < data[0] || v > data[data.length - 1]) continue;\n        minorgridlines.push(extendFlat(constructValueGridline(v), {\n          color: axis.minorgridcolor,\n          width: axis.minorgridwidth\n        }));\n      }\n    }\n    if (axis.startline) {\n      boundarylines.push(extendFlat(constructArrayGridline(0), {\n        color: axis.startlinecolor,\n        width: axis.startlinewidth\n      }));\n    }\n    if (axis.endline) {\n      boundarylines.push(extendFlat(constructArrayGridline(data.length - 1), {\n        color: axis.endlinecolor,\n        width: axis.endlinewidth\n      }));\n    }\n  } else {\n    // If the lines do not fall along the axes, then we have to interpolate\n    // the contro points and so some math to figure out where the lines are\n    // in the first place.\n\n    // Compute the integer boudns of tick0 + n * dtick that fall within the range\n    // (roughly speaking):\n    // Give this a nice generous epsilon. We use at as * (1 + eps) in order to make\n    // inequalities a little tolerant in a more or less correct manner:\n    eps = 5e-15;\n    bounds = [Math.floor((data[data.length - 1] - axis.tick0) / axis.dtick * (1 + eps)), Math.ceil((data[0] - axis.tick0) / axis.dtick / (1 + eps))].sort(function (a, b) {\n      return a - b;\n    });\n\n    // Unpack sorted values so we can be sure to avoid infinite loops if something\n    // is backwards:\n    n1 = bounds[0];\n    n2 = bounds[1];\n    for (n = n1; n <= n2; n++) {\n      value = axis.tick0 + axis.dtick * n;\n      gridlines.push(extendFlat(constructValueGridline(value), {\n        color: axis.gridcolor,\n        width: axis.gridwidth\n      }));\n    }\n    for (n = n1 - 1; n < n2 + 1; n++) {\n      value = axis.tick0 + axis.dtick * n;\n      for (i = 0; i < axis.minorgridcount; i++) {\n        v = value + axis.dtick * (i + 1) / (axis.minorgridcount + 1);\n        if (v < data[0] || v > data[data.length - 1]) continue;\n        minorgridlines.push(extendFlat(constructValueGridline(v), {\n          color: axis.minorgridcolor,\n          width: axis.minorgridwidth\n        }));\n      }\n    }\n    if (axis.startline) {\n      boundarylines.push(extendFlat(constructValueGridline(data[0]), {\n        color: axis.startlinecolor,\n        width: axis.startlinewidth\n      }));\n    }\n    if (axis.endline) {\n      boundarylines.push(extendFlat(constructValueGridline(data[data.length - 1]), {\n        color: axis.endlinecolor,\n        width: axis.endlinewidth\n      }));\n    }\n  }\n};","map":{"version":3,"names":["Axes","require","extendFlat","module","exports","calcGridlines","trace","axisLetter","crossAxisLetter","i","j","j0","eps","bounds","n1","n2","n","value","v","j1","v0","v1","d","data","axis","gridlines","_gridlines","minorgridlines","_minorgridlines","boundarylines","_boundarylines","crossData","crossAxis","tickmode","tickvals","slice","xcp","_xctrl","ycp","_yctrl","nea","length","neb","na","_a","nb","_b","prepTicks","stride","smoothing","constructValueGridline","tj","pxy","i0","ti","xy","dxydi0","dxydi1","dxydj0","dxydj1","xpoints","ypoints","ret","b2j","Math","floor","max","min","crossLength","evalxy","dxy","dxydi","push","a2i","dxydj","constvar","index","x","y","constructArrayGridline","idx","arraytick0","arraydtick","ceil","sort","a","b","color","gridcolor","width","gridwidth","minorgridcount","minorgridcolor","minorgridwidth","startline","startlinecolor","startlinewidth","endline","endlinecolor","endlinewidth","tick0","dtick"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/carpet/calc_gridlines.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = function calcGridlines(trace, axisLetter, crossAxisLetter) {\n    var i, j, j0;\n    var eps, bounds, n1, n2, n, value, v;\n    var j1, v0, v1, d;\n\n    var data = trace['_' + axisLetter];\n    var axis = trace[axisLetter + 'axis'];\n\n    var gridlines = axis._gridlines = [];\n    var minorgridlines = axis._minorgridlines = [];\n    var boundarylines = axis._boundarylines = [];\n\n    var crossData = trace['_' + crossAxisLetter];\n    var crossAxis = trace[crossAxisLetter + 'axis'];\n\n    if(axis.tickmode === 'array') {\n        axis.tickvals = data.slice();\n    }\n\n    var xcp = trace._xctrl;\n    var ycp = trace._yctrl;\n    var nea = xcp[0].length;\n    var neb = xcp.length;\n    var na = trace._a.length;\n    var nb = trace._b.length;\n\n    Axes.prepTicks(axis);\n\n    // don't leave tickvals in axis looking like an attribute\n    if(axis.tickmode === 'array') delete axis.tickvals;\n\n    // The default is an empty array that will cause the join to remove the gridline if\n    // it's just disappeared:\n    // axis._startline = axis._endline = [];\n\n    // If the cross axis uses bicubic interpolation, then the grid\n    // lines fall once every three expanded grid row/cols:\n    var stride = axis.smoothing ? 3 : 1;\n\n    function constructValueGridline(value) {\n        var i, j, j0, tj, pxy, i0, ti, xy, dxydi0, dxydi1, dxydj0, dxydj1;\n        var xpoints = [];\n        var ypoints = [];\n        var ret = {};\n        // Search for the fractional grid index giving this line:\n        if(axisLetter === 'b') {\n            // For the position we use just the i-j coordinates:\n            j = trace.b2j(value);\n\n            // The derivatives for catmull-rom splines are discontinuous across cell\n            // boundaries though, so we need to provide both the cell and the position\n            // within the cell separately:\n            j0 = Math.floor(Math.max(0, Math.min(nb - 2, j)));\n            tj = j - j0;\n\n            ret.length = nb;\n            ret.crossLength = na;\n\n            ret.xy = function(i) {\n                return trace.evalxy([], i, j);\n            };\n\n            ret.dxy = function(i0, ti) {\n                return trace.dxydi([], i0, j0, ti, tj);\n            };\n\n            for(i = 0; i < na; i++) {\n                i0 = Math.min(na - 2, i);\n                ti = i - i0;\n                xy = trace.evalxy([], i, j);\n\n                if(crossAxis.smoothing && i > 0) {\n                    // First control point:\n                    dxydi0 = trace.dxydi([], i - 1, j0, 0, tj);\n                    xpoints.push(pxy[0] + dxydi0[0] / 3);\n                    ypoints.push(pxy[1] + dxydi0[1] / 3);\n\n                    // Second control point:\n                    dxydi1 = trace.dxydi([], i - 1, j0, 1, tj);\n                    xpoints.push(xy[0] - dxydi1[0] / 3);\n                    ypoints.push(xy[1] - dxydi1[1] / 3);\n                }\n\n                xpoints.push(xy[0]);\n                ypoints.push(xy[1]);\n\n                pxy = xy;\n            }\n        } else {\n            i = trace.a2i(value);\n            i0 = Math.floor(Math.max(0, Math.min(na - 2, i)));\n            ti = i - i0;\n\n            ret.length = na;\n            ret.crossLength = nb;\n\n            ret.xy = function(j) {\n                return trace.evalxy([], i, j);\n            };\n\n            ret.dxy = function(j0, tj) {\n                return trace.dxydj([], i0, j0, ti, tj);\n            };\n\n            for(j = 0; j < nb; j++) {\n                j0 = Math.min(nb - 2, j);\n                tj = j - j0;\n                xy = trace.evalxy([], i, j);\n\n                if(crossAxis.smoothing && j > 0) {\n                    // First control point:\n                    dxydj0 = trace.dxydj([], i0, j - 1, ti, 0);\n                    xpoints.push(pxy[0] + dxydj0[0] / 3);\n                    ypoints.push(pxy[1] + dxydj0[1] / 3);\n\n                    // Second control point:\n                    dxydj1 = trace.dxydj([], i0, j - 1, ti, 1);\n                    xpoints.push(xy[0] - dxydj1[0] / 3);\n                    ypoints.push(xy[1] - dxydj1[1] / 3);\n                }\n\n                xpoints.push(xy[0]);\n                ypoints.push(xy[1]);\n\n                pxy = xy;\n            }\n        }\n\n        ret.axisLetter = axisLetter;\n        ret.axis = axis;\n        ret.crossAxis = crossAxis;\n        ret.value = value;\n        ret.constvar = crossAxisLetter;\n        ret.index = n;\n        ret.x = xpoints;\n        ret.y = ypoints;\n        ret.smoothing = crossAxis.smoothing;\n\n        return ret;\n    }\n\n    function constructArrayGridline(idx) {\n        var j, i0, j0, ti, tj;\n        var xpoints = [];\n        var ypoints = [];\n        var ret = {};\n        ret.length = data.length;\n        ret.crossLength = crossData.length;\n\n        if(axisLetter === 'b') {\n            j0 = Math.max(0, Math.min(nb - 2, idx));\n            tj = Math.min(1, Math.max(0, idx - j0));\n\n            ret.xy = function(i) {\n                return trace.evalxy([], i, idx);\n            };\n\n            ret.dxy = function(i0, ti) {\n                return trace.dxydi([], i0, j0, ti, tj);\n            };\n\n            // In the tickmode: array case, this operation is a simple\n            // transfer of data:\n            for(j = 0; j < nea; j++) {\n                xpoints[j] = xcp[idx * stride][j];\n                ypoints[j] = ycp[idx * stride][j];\n            }\n        } else {\n            i0 = Math.max(0, Math.min(na - 2, idx));\n            ti = Math.min(1, Math.max(0, idx - i0));\n\n            ret.xy = function(j) {\n                return trace.evalxy([], idx, j);\n            };\n\n            ret.dxy = function(j0, tj) {\n                return trace.dxydj([], i0, j0, ti, tj);\n            };\n\n            // In the tickmode: array case, this operation is a simple\n            // transfer of data:\n            for(j = 0; j < neb; j++) {\n                xpoints[j] = xcp[j][idx * stride];\n                ypoints[j] = ycp[j][idx * stride];\n            }\n        }\n\n        ret.axisLetter = axisLetter;\n        ret.axis = axis;\n        ret.crossAxis = crossAxis;\n        ret.value = data[idx];\n        ret.constvar = crossAxisLetter;\n        ret.index = idx;\n        ret.x = xpoints;\n        ret.y = ypoints;\n        ret.smoothing = crossAxis.smoothing;\n\n        return ret;\n    }\n\n    if(axis.tickmode === 'array') {\n        // var j0 = axis.startline ? 1 : 0;\n        // var j1 = data.length - (axis.endline ? 1 : 0);\n\n        eps = 5e-15;\n        bounds = [\n            Math.floor(((data.length - 1) - axis.arraytick0) / axis.arraydtick * (1 + eps)),\n            Math.ceil((- axis.arraytick0) / axis.arraydtick / (1 + eps))\n        ].sort(function(a, b) {return a - b;});\n\n        // Unpack sorted values so we can be sure to avoid infinite loops if something\n        // is backwards:\n        n1 = bounds[0] - 1;\n        n2 = bounds[1] + 1;\n\n        // If the axes fall along array lines, then this is a much simpler process since\n        // we already have all the control points we need\n        for(n = n1; n < n2; n++) {\n            j = axis.arraytick0 + axis.arraydtick * n;\n            if(j < 0 || j > data.length - 1) continue;\n            gridlines.push(extendFlat(constructArrayGridline(j), {\n                color: axis.gridcolor,\n                width: axis.gridwidth\n            }));\n        }\n\n        for(n = n1; n < n2; n++) {\n            j0 = axis.arraytick0 + axis.arraydtick * n;\n            j1 = Math.min(j0 + axis.arraydtick, data.length - 1);\n\n            // TODO: fix the bounds computation so we don't have to do a large range and then throw\n            // out unneeded numbers\n            if(j0 < 0 || j0 > data.length - 1) continue;\n            if(j1 < 0 || j1 > data.length - 1) continue;\n\n            v0 = data[j0];\n            v1 = data[j1];\n\n            for(i = 0; i < axis.minorgridcount; i++) {\n                d = j1 - j0;\n\n                // TODO: fix the bounds computation so we don't have to do a large range and then throw\n                // out unneeded numbers\n                if(d <= 0) continue;\n\n                // XXX: This calculation isn't quite right. Off by one somewhere?\n                v = v0 + (v1 - v0) * (i + 1) / (axis.minorgridcount + 1) * (axis.arraydtick / d);\n\n                // TODO: fix the bounds computation so we don't have to do a large range and then throw\n                // out unneeded numbers\n                if(v < data[0] || v > data[data.length - 1]) continue;\n                minorgridlines.push(extendFlat(constructValueGridline(v), {\n                    color: axis.minorgridcolor,\n                    width: axis.minorgridwidth\n                }));\n            }\n        }\n\n        if(axis.startline) {\n            boundarylines.push(extendFlat(constructArrayGridline(0), {\n                color: axis.startlinecolor,\n                width: axis.startlinewidth\n            }));\n        }\n\n        if(axis.endline) {\n            boundarylines.push(extendFlat(constructArrayGridline(data.length - 1), {\n                color: axis.endlinecolor,\n                width: axis.endlinewidth\n            }));\n        }\n    } else {\n        // If the lines do not fall along the axes, then we have to interpolate\n        // the contro points and so some math to figure out where the lines are\n        // in the first place.\n\n        // Compute the integer boudns of tick0 + n * dtick that fall within the range\n        // (roughly speaking):\n        // Give this a nice generous epsilon. We use at as * (1 + eps) in order to make\n        // inequalities a little tolerant in a more or less correct manner:\n        eps = 5e-15;\n        bounds = [\n            Math.floor((data[data.length - 1] - axis.tick0) / axis.dtick * (1 + eps)),\n            Math.ceil((data[0] - axis.tick0) / axis.dtick / (1 + eps))\n        ].sort(function(a, b) {return a - b;});\n\n        // Unpack sorted values so we can be sure to avoid infinite loops if something\n        // is backwards:\n        n1 = bounds[0];\n        n2 = bounds[1];\n\n        for(n = n1; n <= n2; n++) {\n            value = axis.tick0 + axis.dtick * n;\n\n            gridlines.push(extendFlat(constructValueGridline(value), {\n                color: axis.gridcolor,\n                width: axis.gridwidth\n            }));\n        }\n\n        for(n = n1 - 1; n < n2 + 1; n++) {\n            value = axis.tick0 + axis.dtick * n;\n\n            for(i = 0; i < axis.minorgridcount; i++) {\n                v = value + axis.dtick * (i + 1) / (axis.minorgridcount + 1);\n                if(v < data[0] || v > data[data.length - 1]) continue;\n                minorgridlines.push(extendFlat(constructValueGridline(v), {\n                    color: axis.minorgridcolor,\n                    width: axis.minorgridwidth\n                }));\n            }\n        }\n\n        if(axis.startline) {\n            boundarylines.push(extendFlat(constructValueGridline(data[0]), {\n                color: axis.startlinecolor,\n                width: axis.startlinewidth\n            }));\n        }\n\n        if(axis.endline) {\n            boundarylines.push(extendFlat(constructValueGridline(data[data.length - 1]), {\n                color: axis.endlinecolor,\n                width: axis.endlinewidth\n            }));\n        }\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AAChD,IAAIC,UAAU,GAAGD,OAAO,CAAC,kBAAkB,CAAC,CAACC,UAAU;AAEvDC,MAAM,CAACC,OAAO,GAAG,SAASC,aAAa,CAACC,KAAK,EAAEC,UAAU,EAAEC,eAAe,EAAE;EACxE,IAAIC,CAAC,EAAEC,CAAC,EAAEC,EAAE;EACZ,IAAIC,GAAG,EAAEC,MAAM,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,EAAEC,KAAK,EAAEC,CAAC;EACpC,IAAIC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC;EAEjB,IAAIC,IAAI,GAAGjB,KAAK,CAAC,GAAG,GAAGC,UAAU,CAAC;EAClC,IAAIiB,IAAI,GAAGlB,KAAK,CAACC,UAAU,GAAG,MAAM,CAAC;EAErC,IAAIkB,SAAS,GAAGD,IAAI,CAACE,UAAU,GAAG,EAAE;EACpC,IAAIC,cAAc,GAAGH,IAAI,CAACI,eAAe,GAAG,EAAE;EAC9C,IAAIC,aAAa,GAAGL,IAAI,CAACM,cAAc,GAAG,EAAE;EAE5C,IAAIC,SAAS,GAAGzB,KAAK,CAAC,GAAG,GAAGE,eAAe,CAAC;EAC5C,IAAIwB,SAAS,GAAG1B,KAAK,CAACE,eAAe,GAAG,MAAM,CAAC;EAE/C,IAAGgB,IAAI,CAACS,QAAQ,KAAK,OAAO,EAAE;IAC1BT,IAAI,CAACU,QAAQ,GAAGX,IAAI,CAACY,KAAK,EAAE;EAChC;EAEA,IAAIC,GAAG,GAAG9B,KAAK,CAAC+B,MAAM;EACtB,IAAIC,GAAG,GAAGhC,KAAK,CAACiC,MAAM;EACtB,IAAIC,GAAG,GAAGJ,GAAG,CAAC,CAAC,CAAC,CAACK,MAAM;EACvB,IAAIC,GAAG,GAAGN,GAAG,CAACK,MAAM;EACpB,IAAIE,EAAE,GAAGrC,KAAK,CAACsC,EAAE,CAACH,MAAM;EACxB,IAAII,EAAE,GAAGvC,KAAK,CAACwC,EAAE,CAACL,MAAM;EAExBzC,IAAI,CAAC+C,SAAS,CAACvB,IAAI,CAAC;;EAEpB;EACA,IAAGA,IAAI,CAACS,QAAQ,KAAK,OAAO,EAAE,OAAOT,IAAI,CAACU,QAAQ;;EAElD;EACA;EACA;;EAEA;EACA;EACA,IAAIc,MAAM,GAAGxB,IAAI,CAACyB,SAAS,GAAG,CAAC,GAAG,CAAC;EAEnC,SAASC,sBAAsB,CAACjC,KAAK,EAAE;IACnC,IAAIR,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEwC,EAAE,EAAEC,GAAG,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM;IACjE,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAIC,GAAG,GAAG,CAAC,CAAC;IACZ;IACA,IAAGvD,UAAU,KAAK,GAAG,EAAE;MACnB;MACAG,CAAC,GAAGJ,KAAK,CAACyD,GAAG,CAAC9C,KAAK,CAAC;;MAEpB;MACA;MACA;MACAN,EAAE,GAAGqD,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEF,IAAI,CAACG,GAAG,CAACtB,EAAE,GAAG,CAAC,EAAEnC,CAAC,CAAC,CAAC,CAAC;MACjDyC,EAAE,GAAGzC,CAAC,GAAGC,EAAE;MAEXmD,GAAG,CAACrB,MAAM,GAAGI,EAAE;MACfiB,GAAG,CAACM,WAAW,GAAGzB,EAAE;MAEpBmB,GAAG,CAACP,EAAE,GAAG,UAAS9C,CAAC,EAAE;QACjB,OAAOH,KAAK,CAAC+D,MAAM,CAAC,EAAE,EAAE5D,CAAC,EAAEC,CAAC,CAAC;MACjC,CAAC;MAEDoD,GAAG,CAACQ,GAAG,GAAG,UAASjB,EAAE,EAAEC,EAAE,EAAE;QACvB,OAAOhD,KAAK,CAACiE,KAAK,CAAC,EAAE,EAAElB,EAAE,EAAE1C,EAAE,EAAE2C,EAAE,EAAEH,EAAE,CAAC;MAC1C,CAAC;MAED,KAAI1C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkC,EAAE,EAAElC,CAAC,EAAE,EAAE;QACpB4C,EAAE,GAAGW,IAAI,CAACG,GAAG,CAACxB,EAAE,GAAG,CAAC,EAAElC,CAAC,CAAC;QACxB6C,EAAE,GAAG7C,CAAC,GAAG4C,EAAE;QACXE,EAAE,GAAGjD,KAAK,CAAC+D,MAAM,CAAC,EAAE,EAAE5D,CAAC,EAAEC,CAAC,CAAC;QAE3B,IAAGsB,SAAS,CAACiB,SAAS,IAAIxC,CAAC,GAAG,CAAC,EAAE;UAC7B;UACA+C,MAAM,GAAGlD,KAAK,CAACiE,KAAK,CAAC,EAAE,EAAE9D,CAAC,GAAG,CAAC,EAAEE,EAAE,EAAE,CAAC,EAAEwC,EAAE,CAAC;UAC1CS,OAAO,CAACY,IAAI,CAACpB,GAAG,CAAC,CAAC,CAAC,GAAGI,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;UACpCK,OAAO,CAACW,IAAI,CAACpB,GAAG,CAAC,CAAC,CAAC,GAAGI,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;;UAEpC;UACAC,MAAM,GAAGnD,KAAK,CAACiE,KAAK,CAAC,EAAE,EAAE9D,CAAC,GAAG,CAAC,EAAEE,EAAE,EAAE,CAAC,EAAEwC,EAAE,CAAC;UAC1CS,OAAO,CAACY,IAAI,CAACjB,EAAE,CAAC,CAAC,CAAC,GAAGE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;UACnCI,OAAO,CAACW,IAAI,CAACjB,EAAE,CAAC,CAAC,CAAC,GAAGE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACvC;QAEAG,OAAO,CAACY,IAAI,CAACjB,EAAE,CAAC,CAAC,CAAC,CAAC;QACnBM,OAAO,CAACW,IAAI,CAACjB,EAAE,CAAC,CAAC,CAAC,CAAC;QAEnBH,GAAG,GAAGG,EAAE;MACZ;IACJ,CAAC,MAAM;MACH9C,CAAC,GAAGH,KAAK,CAACmE,GAAG,CAACxD,KAAK,CAAC;MACpBoC,EAAE,GAAGW,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEF,IAAI,CAACG,GAAG,CAACxB,EAAE,GAAG,CAAC,EAAElC,CAAC,CAAC,CAAC,CAAC;MACjD6C,EAAE,GAAG7C,CAAC,GAAG4C,EAAE;MAEXS,GAAG,CAACrB,MAAM,GAAGE,EAAE;MACfmB,GAAG,CAACM,WAAW,GAAGvB,EAAE;MAEpBiB,GAAG,CAACP,EAAE,GAAG,UAAS7C,CAAC,EAAE;QACjB,OAAOJ,KAAK,CAAC+D,MAAM,CAAC,EAAE,EAAE5D,CAAC,EAAEC,CAAC,CAAC;MACjC,CAAC;MAEDoD,GAAG,CAACQ,GAAG,GAAG,UAAS3D,EAAE,EAAEwC,EAAE,EAAE;QACvB,OAAO7C,KAAK,CAACoE,KAAK,CAAC,EAAE,EAAErB,EAAE,EAAE1C,EAAE,EAAE2C,EAAE,EAAEH,EAAE,CAAC;MAC1C,CAAC;MAED,KAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmC,EAAE,EAAEnC,CAAC,EAAE,EAAE;QACpBC,EAAE,GAAGqD,IAAI,CAACG,GAAG,CAACtB,EAAE,GAAG,CAAC,EAAEnC,CAAC,CAAC;QACxByC,EAAE,GAAGzC,CAAC,GAAGC,EAAE;QACX4C,EAAE,GAAGjD,KAAK,CAAC+D,MAAM,CAAC,EAAE,EAAE5D,CAAC,EAAEC,CAAC,CAAC;QAE3B,IAAGsB,SAAS,CAACiB,SAAS,IAAIvC,CAAC,GAAG,CAAC,EAAE;UAC7B;UACAgD,MAAM,GAAGpD,KAAK,CAACoE,KAAK,CAAC,EAAE,EAAErB,EAAE,EAAE3C,CAAC,GAAG,CAAC,EAAE4C,EAAE,EAAE,CAAC,CAAC;UAC1CM,OAAO,CAACY,IAAI,CAACpB,GAAG,CAAC,CAAC,CAAC,GAAGM,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;UACpCG,OAAO,CAACW,IAAI,CAACpB,GAAG,CAAC,CAAC,CAAC,GAAGM,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;;UAEpC;UACAC,MAAM,GAAGrD,KAAK,CAACoE,KAAK,CAAC,EAAE,EAAErB,EAAE,EAAE3C,CAAC,GAAG,CAAC,EAAE4C,EAAE,EAAE,CAAC,CAAC;UAC1CM,OAAO,CAACY,IAAI,CAACjB,EAAE,CAAC,CAAC,CAAC,GAAGI,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;UACnCE,OAAO,CAACW,IAAI,CAACjB,EAAE,CAAC,CAAC,CAAC,GAAGI,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACvC;QAEAC,OAAO,CAACY,IAAI,CAACjB,EAAE,CAAC,CAAC,CAAC,CAAC;QACnBM,OAAO,CAACW,IAAI,CAACjB,EAAE,CAAC,CAAC,CAAC,CAAC;QAEnBH,GAAG,GAAGG,EAAE;MACZ;IACJ;IAEAO,GAAG,CAACvD,UAAU,GAAGA,UAAU;IAC3BuD,GAAG,CAACtC,IAAI,GAAGA,IAAI;IACfsC,GAAG,CAAC9B,SAAS,GAAGA,SAAS;IACzB8B,GAAG,CAAC7C,KAAK,GAAGA,KAAK;IACjB6C,GAAG,CAACa,QAAQ,GAAGnE,eAAe;IAC9BsD,GAAG,CAACc,KAAK,GAAG5D,CAAC;IACb8C,GAAG,CAACe,CAAC,GAAGjB,OAAO;IACfE,GAAG,CAACgB,CAAC,GAAGjB,OAAO;IACfC,GAAG,CAACb,SAAS,GAAGjB,SAAS,CAACiB,SAAS;IAEnC,OAAOa,GAAG;EACd;EAEA,SAASiB,sBAAsB,CAACC,GAAG,EAAE;IACjC,IAAItE,CAAC,EAAE2C,EAAE,EAAE1C,EAAE,EAAE2C,EAAE,EAAEH,EAAE;IACrB,IAAIS,OAAO,GAAG,EAAE;IAChB,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAIC,GAAG,GAAG,CAAC,CAAC;IACZA,GAAG,CAACrB,MAAM,GAAGlB,IAAI,CAACkB,MAAM;IACxBqB,GAAG,CAACM,WAAW,GAAGrC,SAAS,CAACU,MAAM;IAElC,IAAGlC,UAAU,KAAK,GAAG,EAAE;MACnBI,EAAE,GAAGqD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEF,IAAI,CAACG,GAAG,CAACtB,EAAE,GAAG,CAAC,EAAEmC,GAAG,CAAC,CAAC;MACvC7B,EAAE,GAAGa,IAAI,CAACG,GAAG,CAAC,CAAC,EAAEH,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEc,GAAG,GAAGrE,EAAE,CAAC,CAAC;MAEvCmD,GAAG,CAACP,EAAE,GAAG,UAAS9C,CAAC,EAAE;QACjB,OAAOH,KAAK,CAAC+D,MAAM,CAAC,EAAE,EAAE5D,CAAC,EAAEuE,GAAG,CAAC;MACnC,CAAC;MAEDlB,GAAG,CAACQ,GAAG,GAAG,UAASjB,EAAE,EAAEC,EAAE,EAAE;QACvB,OAAOhD,KAAK,CAACiE,KAAK,CAAC,EAAE,EAAElB,EAAE,EAAE1C,EAAE,EAAE2C,EAAE,EAAEH,EAAE,CAAC;MAC1C,CAAC;;MAED;MACA;MACA,KAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8B,GAAG,EAAE9B,CAAC,EAAE,EAAE;QACrBkD,OAAO,CAAClD,CAAC,CAAC,GAAG0B,GAAG,CAAC4C,GAAG,GAAGhC,MAAM,CAAC,CAACtC,CAAC,CAAC;QACjCmD,OAAO,CAACnD,CAAC,CAAC,GAAG4B,GAAG,CAAC0C,GAAG,GAAGhC,MAAM,CAAC,CAACtC,CAAC,CAAC;MACrC;IACJ,CAAC,MAAM;MACH2C,EAAE,GAAGW,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEF,IAAI,CAACG,GAAG,CAACxB,EAAE,GAAG,CAAC,EAAEqC,GAAG,CAAC,CAAC;MACvC1B,EAAE,GAAGU,IAAI,CAACG,GAAG,CAAC,CAAC,EAAEH,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEc,GAAG,GAAG3B,EAAE,CAAC,CAAC;MAEvCS,GAAG,CAACP,EAAE,GAAG,UAAS7C,CAAC,EAAE;QACjB,OAAOJ,KAAK,CAAC+D,MAAM,CAAC,EAAE,EAAEW,GAAG,EAAEtE,CAAC,CAAC;MACnC,CAAC;MAEDoD,GAAG,CAACQ,GAAG,GAAG,UAAS3D,EAAE,EAAEwC,EAAE,EAAE;QACvB,OAAO7C,KAAK,CAACoE,KAAK,CAAC,EAAE,EAAErB,EAAE,EAAE1C,EAAE,EAAE2C,EAAE,EAAEH,EAAE,CAAC;MAC1C,CAAC;;MAED;MACA;MACA,KAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgC,GAAG,EAAEhC,CAAC,EAAE,EAAE;QACrBkD,OAAO,CAAClD,CAAC,CAAC,GAAG0B,GAAG,CAAC1B,CAAC,CAAC,CAACsE,GAAG,GAAGhC,MAAM,CAAC;QACjCa,OAAO,CAACnD,CAAC,CAAC,GAAG4B,GAAG,CAAC5B,CAAC,CAAC,CAACsE,GAAG,GAAGhC,MAAM,CAAC;MACrC;IACJ;IAEAc,GAAG,CAACvD,UAAU,GAAGA,UAAU;IAC3BuD,GAAG,CAACtC,IAAI,GAAGA,IAAI;IACfsC,GAAG,CAAC9B,SAAS,GAAGA,SAAS;IACzB8B,GAAG,CAAC7C,KAAK,GAAGM,IAAI,CAACyD,GAAG,CAAC;IACrBlB,GAAG,CAACa,QAAQ,GAAGnE,eAAe;IAC9BsD,GAAG,CAACc,KAAK,GAAGI,GAAG;IACflB,GAAG,CAACe,CAAC,GAAGjB,OAAO;IACfE,GAAG,CAACgB,CAAC,GAAGjB,OAAO;IACfC,GAAG,CAACb,SAAS,GAAGjB,SAAS,CAACiB,SAAS;IAEnC,OAAOa,GAAG;EACd;EAEA,IAAGtC,IAAI,CAACS,QAAQ,KAAK,OAAO,EAAE;IAC1B;IACA;;IAEArB,GAAG,GAAG,KAAK;IACXC,MAAM,GAAG,CACLmD,IAAI,CAACC,KAAK,CAAC,CAAE1C,IAAI,CAACkB,MAAM,GAAG,CAAC,GAAIjB,IAAI,CAACyD,UAAU,IAAIzD,IAAI,CAAC0D,UAAU,IAAI,CAAC,GAAGtE,GAAG,CAAC,CAAC,EAC/EoD,IAAI,CAACmB,IAAI,CAAE,CAAE3D,IAAI,CAACyD,UAAU,GAAIzD,IAAI,CAAC0D,UAAU,IAAI,CAAC,GAAGtE,GAAG,CAAC,CAAC,CAC/D,CAACwE,IAAI,CAAC,UAASC,CAAC,EAAEC,CAAC,EAAE;MAAC,OAAOD,CAAC,GAAGC,CAAC;IAAC,CAAC,CAAC;;IAEtC;IACA;IACAxE,EAAE,GAAGD,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAClBE,EAAE,GAAGF,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;;IAElB;IACA;IACA,KAAIG,CAAC,GAAGF,EAAE,EAAEE,CAAC,GAAGD,EAAE,EAAEC,CAAC,EAAE,EAAE;MACrBN,CAAC,GAAGc,IAAI,CAACyD,UAAU,GAAGzD,IAAI,CAAC0D,UAAU,GAAGlE,CAAC;MACzC,IAAGN,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAGa,IAAI,CAACkB,MAAM,GAAG,CAAC,EAAE;MACjChB,SAAS,CAAC+C,IAAI,CAACtE,UAAU,CAAC6E,sBAAsB,CAACrE,CAAC,CAAC,EAAE;QACjD6E,KAAK,EAAE/D,IAAI,CAACgE,SAAS;QACrBC,KAAK,EAAEjE,IAAI,CAACkE;MAChB,CAAC,CAAC,CAAC;IACP;IAEA,KAAI1E,CAAC,GAAGF,EAAE,EAAEE,CAAC,GAAGD,EAAE,EAAEC,CAAC,EAAE,EAAE;MACrBL,EAAE,GAAGa,IAAI,CAACyD,UAAU,GAAGzD,IAAI,CAAC0D,UAAU,GAAGlE,CAAC;MAC1CG,EAAE,GAAG6C,IAAI,CAACG,GAAG,CAACxD,EAAE,GAAGa,IAAI,CAAC0D,UAAU,EAAE3D,IAAI,CAACkB,MAAM,GAAG,CAAC,CAAC;;MAEpD;MACA;MACA,IAAG9B,EAAE,GAAG,CAAC,IAAIA,EAAE,GAAGY,IAAI,CAACkB,MAAM,GAAG,CAAC,EAAE;MACnC,IAAGtB,EAAE,GAAG,CAAC,IAAIA,EAAE,GAAGI,IAAI,CAACkB,MAAM,GAAG,CAAC,EAAE;MAEnCrB,EAAE,GAAGG,IAAI,CAACZ,EAAE,CAAC;MACbU,EAAE,GAAGE,IAAI,CAACJ,EAAE,CAAC;MAEb,KAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGe,IAAI,CAACmE,cAAc,EAAElF,CAAC,EAAE,EAAE;QACrCa,CAAC,GAAGH,EAAE,GAAGR,EAAE;;QAEX;QACA;QACA,IAAGW,CAAC,IAAI,CAAC,EAAE;;QAEX;QACAJ,CAAC,GAAGE,EAAE,GAAG,CAACC,EAAE,GAAGD,EAAE,KAAKX,CAAC,GAAG,CAAC,CAAC,IAAIe,IAAI,CAACmE,cAAc,GAAG,CAAC,CAAC,IAAInE,IAAI,CAAC0D,UAAU,GAAG5D,CAAC,CAAC;;QAEhF;QACA;QACA,IAAGJ,CAAC,GAAGK,IAAI,CAAC,CAAC,CAAC,IAAIL,CAAC,GAAGK,IAAI,CAACA,IAAI,CAACkB,MAAM,GAAG,CAAC,CAAC,EAAE;QAC7Cd,cAAc,CAAC6C,IAAI,CAACtE,UAAU,CAACgD,sBAAsB,CAAChC,CAAC,CAAC,EAAE;UACtDqE,KAAK,EAAE/D,IAAI,CAACoE,cAAc;UAC1BH,KAAK,EAAEjE,IAAI,CAACqE;QAChB,CAAC,CAAC,CAAC;MACP;IACJ;IAEA,IAAGrE,IAAI,CAACsE,SAAS,EAAE;MACfjE,aAAa,CAAC2C,IAAI,CAACtE,UAAU,CAAC6E,sBAAsB,CAAC,CAAC,CAAC,EAAE;QACrDQ,KAAK,EAAE/D,IAAI,CAACuE,cAAc;QAC1BN,KAAK,EAAEjE,IAAI,CAACwE;MAChB,CAAC,CAAC,CAAC;IACP;IAEA,IAAGxE,IAAI,CAACyE,OAAO,EAAE;MACbpE,aAAa,CAAC2C,IAAI,CAACtE,UAAU,CAAC6E,sBAAsB,CAACxD,IAAI,CAACkB,MAAM,GAAG,CAAC,CAAC,EAAE;QACnE8C,KAAK,EAAE/D,IAAI,CAAC0E,YAAY;QACxBT,KAAK,EAAEjE,IAAI,CAAC2E;MAChB,CAAC,CAAC,CAAC;IACP;EACJ,CAAC,MAAM;IACH;IACA;IACA;;IAEA;IACA;IACA;IACA;IACAvF,GAAG,GAAG,KAAK;IACXC,MAAM,GAAG,CACLmD,IAAI,CAACC,KAAK,CAAC,CAAC1C,IAAI,CAACA,IAAI,CAACkB,MAAM,GAAG,CAAC,CAAC,GAAGjB,IAAI,CAAC4E,KAAK,IAAI5E,IAAI,CAAC6E,KAAK,IAAI,CAAC,GAAGzF,GAAG,CAAC,CAAC,EACzEoD,IAAI,CAACmB,IAAI,CAAC,CAAC5D,IAAI,CAAC,CAAC,CAAC,GAAGC,IAAI,CAAC4E,KAAK,IAAI5E,IAAI,CAAC6E,KAAK,IAAI,CAAC,GAAGzF,GAAG,CAAC,CAAC,CAC7D,CAACwE,IAAI,CAAC,UAASC,CAAC,EAAEC,CAAC,EAAE;MAAC,OAAOD,CAAC,GAAGC,CAAC;IAAC,CAAC,CAAC;;IAEtC;IACA;IACAxE,EAAE,GAAGD,MAAM,CAAC,CAAC,CAAC;IACdE,EAAE,GAAGF,MAAM,CAAC,CAAC,CAAC;IAEd,KAAIG,CAAC,GAAGF,EAAE,EAAEE,CAAC,IAAID,EAAE,EAAEC,CAAC,EAAE,EAAE;MACtBC,KAAK,GAAGO,IAAI,CAAC4E,KAAK,GAAG5E,IAAI,CAAC6E,KAAK,GAAGrF,CAAC;MAEnCS,SAAS,CAAC+C,IAAI,CAACtE,UAAU,CAACgD,sBAAsB,CAACjC,KAAK,CAAC,EAAE;QACrDsE,KAAK,EAAE/D,IAAI,CAACgE,SAAS;QACrBC,KAAK,EAAEjE,IAAI,CAACkE;MAChB,CAAC,CAAC,CAAC;IACP;IAEA,KAAI1E,CAAC,GAAGF,EAAE,GAAG,CAAC,EAAEE,CAAC,GAAGD,EAAE,GAAG,CAAC,EAAEC,CAAC,EAAE,EAAE;MAC7BC,KAAK,GAAGO,IAAI,CAAC4E,KAAK,GAAG5E,IAAI,CAAC6E,KAAK,GAAGrF,CAAC;MAEnC,KAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGe,IAAI,CAACmE,cAAc,EAAElF,CAAC,EAAE,EAAE;QACrCS,CAAC,GAAGD,KAAK,GAAGO,IAAI,CAAC6E,KAAK,IAAI5F,CAAC,GAAG,CAAC,CAAC,IAAIe,IAAI,CAACmE,cAAc,GAAG,CAAC,CAAC;QAC5D,IAAGzE,CAAC,GAAGK,IAAI,CAAC,CAAC,CAAC,IAAIL,CAAC,GAAGK,IAAI,CAACA,IAAI,CAACkB,MAAM,GAAG,CAAC,CAAC,EAAE;QAC7Cd,cAAc,CAAC6C,IAAI,CAACtE,UAAU,CAACgD,sBAAsB,CAAChC,CAAC,CAAC,EAAE;UACtDqE,KAAK,EAAE/D,IAAI,CAACoE,cAAc;UAC1BH,KAAK,EAAEjE,IAAI,CAACqE;QAChB,CAAC,CAAC,CAAC;MACP;IACJ;IAEA,IAAGrE,IAAI,CAACsE,SAAS,EAAE;MACfjE,aAAa,CAAC2C,IAAI,CAACtE,UAAU,CAACgD,sBAAsB,CAAC3B,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QAC3DgE,KAAK,EAAE/D,IAAI,CAACuE,cAAc;QAC1BN,KAAK,EAAEjE,IAAI,CAACwE;MAChB,CAAC,CAAC,CAAC;IACP;IAEA,IAAGxE,IAAI,CAACyE,OAAO,EAAE;MACbpE,aAAa,CAAC2C,IAAI,CAACtE,UAAU,CAACgD,sBAAsB,CAAC3B,IAAI,CAACA,IAAI,CAACkB,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;QACzE8C,KAAK,EAAE/D,IAAI,CAAC0E,YAAY;QACxBT,KAAK,EAAEjE,IAAI,CAAC2E;MAChB,CAAC,CAAC,CAAC;IACP;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
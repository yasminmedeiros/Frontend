{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar gl3dAxisAttrs = require('./axis_attributes');\nvar domainAttrs = require('../../domain').attributes;\nvar extendFlat = require('../../../lib/extend').extendFlat;\nvar counterRegex = require('../../../lib').counterRegex;\nfunction makeCameraVector(x, y, z) {\n  return {\n    x: {\n      valType: 'number',\n      role: 'info',\n      dflt: x,\n      editType: 'camera'\n    },\n    y: {\n      valType: 'number',\n      role: 'info',\n      dflt: y,\n      editType: 'camera'\n    },\n    z: {\n      valType: 'number',\n      role: 'info',\n      dflt: z,\n      editType: 'camera'\n    },\n    editType: 'camera'\n  };\n}\nmodule.exports = {\n  _arrayAttrRegexps: [counterRegex('scene', '.annotations', true)],\n  bgcolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: 'rgba(0,0,0,0)',\n    editType: 'plot'\n  },\n  camera: {\n    up: extendFlat(makeCameraVector(0, 0, 1), {\n      description: ['Sets the (x,y,z) components of the \\'up\\' camera vector.', 'This vector determines the up direction of this scene', 'with respect to the page.', 'The default is *{x: 0, y: 0, z: 1}* which means that', 'the z axis points up.'].join(' ')\n    }),\n    center: extendFlat(makeCameraVector(0, 0, 0), {\n      description: ['Sets the (x,y,z) components of the \\'center\\' camera vector', 'This vector determines the translation (x,y,z) space', 'about the center of this scene.', 'By default, there is no such translation.'].join(' ')\n    }),\n    eye: extendFlat(makeCameraVector(1.25, 1.25, 1.25), {\n      description: ['Sets the (x,y,z) components of the \\'eye\\' camera vector.', 'This vector determines the view point about the origin', 'of this scene.'].join(' ')\n    }),\n    editType: 'camera'\n  },\n  domain: domainAttrs({\n    name: 'scene',\n    editType: 'plot'\n  }),\n  aspectmode: {\n    valType: 'enumerated',\n    role: 'info',\n    values: ['auto', 'cube', 'data', 'manual'],\n    dflt: 'auto',\n    editType: 'plot',\n    impliedEdits: {\n      'aspectratio.x': undefined,\n      'aspectratio.y': undefined,\n      'aspectratio.z': undefined\n    },\n    description: ['If *cube*, this scene\\'s axes are drawn as a cube,', 'regardless of the axes\\' ranges.', 'If *data*, this scene\\'s axes are drawn', 'in proportion with the axes\\' ranges.', 'If *manual*, this scene\\'s axes are drawn', 'in proportion with the input of *aspectratio*', '(the default behavior if *aspectratio* is provided).', 'If *auto*, this scene\\'s axes are drawn', 'using the results of *data* except when one axis', 'is more than four times the size of the two others,', 'where in that case the results of *cube* are used.'].join(' ')\n  },\n  aspectratio: {\n    // must be positive (0's are coerced to 1)\n    x: {\n      valType: 'number',\n      role: 'info',\n      min: 0,\n      editType: 'plot',\n      impliedEdits: {\n        '^aspectmode': 'manual'\n      }\n    },\n    y: {\n      valType: 'number',\n      role: 'info',\n      min: 0,\n      editType: 'plot',\n      impliedEdits: {\n        '^aspectmode': 'manual'\n      }\n    },\n    z: {\n      valType: 'number',\n      role: 'info',\n      min: 0,\n      editType: 'plot',\n      impliedEdits: {\n        '^aspectmode': 'manual'\n      }\n    },\n    editType: 'plot',\n    impliedEdits: {\n      aspectmode: 'manual'\n    },\n    description: ['Sets this scene\\'s axis aspectratio.'].join(' ')\n  },\n  xaxis: gl3dAxisAttrs,\n  yaxis: gl3dAxisAttrs,\n  zaxis: gl3dAxisAttrs,\n  dragmode: {\n    valType: 'enumerated',\n    role: 'info',\n    values: ['orbit', 'turntable', 'zoom', 'pan', false],\n    editType: 'plot',\n    description: ['Determines the mode of drag interactions for this scene.'].join(' ')\n  },\n  hovermode: {\n    valType: 'enumerated',\n    role: 'info',\n    values: ['closest', false],\n    dflt: 'closest',\n    editType: 'modebar',\n    description: ['Determines the mode of hover interactions for this scene.'].join(' ')\n  },\n  uirevision: {\n    valType: 'any',\n    role: 'info',\n    editType: 'none',\n    description: ['Controls persistence of user-driven changes in camera attributes.', 'Defaults to `layout.uirevision`.'].join(' ')\n  },\n  editType: 'plot',\n  _deprecated: {\n    cameraposition: {\n      valType: 'info_array',\n      role: 'info',\n      editType: 'camera',\n      description: 'Obsolete. Use `camera` instead.'\n    }\n  }\n};","map":{"version":3,"names":["gl3dAxisAttrs","require","domainAttrs","attributes","extendFlat","counterRegex","makeCameraVector","x","y","z","valType","role","dflt","editType","module","exports","_arrayAttrRegexps","bgcolor","camera","up","description","join","center","eye","domain","name","aspectmode","values","impliedEdits","undefined","aspectratio","min","xaxis","yaxis","zaxis","dragmode","hovermode","uirevision","_deprecated","cameraposition"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/plots/gl3d/layout/layout_attributes.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar gl3dAxisAttrs = require('./axis_attributes');\nvar domainAttrs = require('../../domain').attributes;\nvar extendFlat = require('../../../lib/extend').extendFlat;\nvar counterRegex = require('../../../lib').counterRegex;\n\nfunction makeCameraVector(x, y, z) {\n    return {\n        x: {\n            valType: 'number',\n            role: 'info',\n            dflt: x,\n            editType: 'camera'\n        },\n        y: {\n            valType: 'number',\n            role: 'info',\n            dflt: y,\n            editType: 'camera'\n        },\n        z: {\n            valType: 'number',\n            role: 'info',\n            dflt: z,\n            editType: 'camera'\n        },\n        editType: 'camera'\n    };\n}\n\nmodule.exports = {\n    _arrayAttrRegexps: [counterRegex('scene', '.annotations', true)],\n\n    bgcolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: 'rgba(0,0,0,0)',\n        editType: 'plot'\n    },\n    camera: {\n        up: extendFlat(makeCameraVector(0, 0, 1), {\n            description: [\n                'Sets the (x,y,z) components of the \\'up\\' camera vector.',\n                'This vector determines the up direction of this scene',\n                'with respect to the page.',\n                'The default is *{x: 0, y: 0, z: 1}* which means that',\n                'the z axis points up.'\n            ].join(' ')\n        }),\n        center: extendFlat(makeCameraVector(0, 0, 0), {\n            description: [\n                'Sets the (x,y,z) components of the \\'center\\' camera vector',\n                'This vector determines the translation (x,y,z) space',\n                'about the center of this scene.',\n                'By default, there is no such translation.'\n            ].join(' ')\n        }),\n        eye: extendFlat(makeCameraVector(1.25, 1.25, 1.25), {\n            description: [\n                'Sets the (x,y,z) components of the \\'eye\\' camera vector.',\n                'This vector determines the view point about the origin',\n                'of this scene.'\n            ].join(' ')\n        }),\n        editType: 'camera'\n    },\n    domain: domainAttrs({name: 'scene', editType: 'plot'}),\n    aspectmode: {\n        valType: 'enumerated',\n        role: 'info',\n        values: ['auto', 'cube', 'data', 'manual'],\n        dflt: 'auto',\n        editType: 'plot',\n        impliedEdits: {\n            'aspectratio.x': undefined,\n            'aspectratio.y': undefined,\n            'aspectratio.z': undefined\n        },\n        description: [\n            'If *cube*, this scene\\'s axes are drawn as a cube,',\n            'regardless of the axes\\' ranges.',\n\n            'If *data*, this scene\\'s axes are drawn',\n            'in proportion with the axes\\' ranges.',\n\n            'If *manual*, this scene\\'s axes are drawn',\n            'in proportion with the input of *aspectratio*',\n            '(the default behavior if *aspectratio* is provided).',\n\n            'If *auto*, this scene\\'s axes are drawn',\n            'using the results of *data* except when one axis',\n            'is more than four times the size of the two others,',\n            'where in that case the results of *cube* are used.'\n        ].join(' ')\n    },\n    aspectratio: { // must be positive (0's are coerced to 1)\n        x: {\n            valType: 'number',\n            role: 'info',\n            min: 0,\n            editType: 'plot',\n            impliedEdits: {'^aspectmode': 'manual'}\n        },\n        y: {\n            valType: 'number',\n            role: 'info',\n            min: 0,\n            editType: 'plot',\n            impliedEdits: {'^aspectmode': 'manual'}\n        },\n        z: {\n            valType: 'number',\n            role: 'info',\n            min: 0,\n            editType: 'plot',\n            impliedEdits: {'^aspectmode': 'manual'}\n        },\n        editType: 'plot',\n        impliedEdits: {aspectmode: 'manual'},\n        description: [\n            'Sets this scene\\'s axis aspectratio.'\n        ].join(' ')\n    },\n\n    xaxis: gl3dAxisAttrs,\n    yaxis: gl3dAxisAttrs,\n    zaxis: gl3dAxisAttrs,\n\n    dragmode: {\n        valType: 'enumerated',\n        role: 'info',\n        values: ['orbit', 'turntable', 'zoom', 'pan', false],\n        editType: 'plot',\n        description: [\n            'Determines the mode of drag interactions for this scene.'\n        ].join(' ')\n    },\n    hovermode: {\n        valType: 'enumerated',\n        role: 'info',\n        values: ['closest', false],\n        dflt: 'closest',\n        editType: 'modebar',\n        description: [\n            'Determines the mode of hover interactions for this scene.'\n        ].join(' ')\n    },\n    uirevision: {\n        valType: 'any',\n        role: 'info',\n        editType: 'none',\n        description: [\n            'Controls persistence of user-driven changes in camera attributes.',\n            'Defaults to `layout.uirevision`.'\n        ].join(' ')\n    },\n    editType: 'plot',\n\n    _deprecated: {\n        cameraposition: {\n            valType: 'info_array',\n            role: 'info',\n            editType: 'camera',\n            description: 'Obsolete. Use `camera` instead.'\n        }\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
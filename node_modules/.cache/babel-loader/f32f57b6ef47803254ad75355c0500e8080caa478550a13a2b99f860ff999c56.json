{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Hebrew calendar for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n/** Implementation of the Hebrew civil calendar.\n    Based on code from <a href=\"http://www.fourmilab.ch/documents/calendar/\">http://www.fourmilab.ch/documents/calendar/</a>.\n    See also <a href=\"http://en.wikipedia.org/wiki/Hebrew_calendar\">http://en.wikipedia.org/wiki/Hebrew_calendar</a>.\n    @class HebrewCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction HebrewCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\nHebrewCalendar.prototype = new main.baseCalendar();\nassign(HebrewCalendar.prototype, {\n  /** The calendar name.\n      @memberof HebrewCalendar */\n  name: 'Hebrew',\n  /** Julian date of start of Hebrew epoch: 7 October 3761 BCE.\n      @memberof HebrewCalendar */\n  jdEpoch: 347995.5,\n  /** Days per month in a common year.\n      @memberof HebrewCalendar */\n  daysPerMonth: [30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 29],\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof HebrewCalendar */\n  hasYearZero: false,\n  /** The minimum month number.\n      @memberof HebrewCalendar */\n  minMonth: 1,\n  /** The first month in the year.\n      @memberof HebrewCalendar */\n  firstMonth: 7,\n  /** The minimum day number.\n      @memberof HebrewCalendar */\n  minDay: 1,\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof HebrewCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Hebrew',\n      epochs: ['BAM', 'AM'],\n      monthNames: ['Nisan', 'Iyar', 'Sivan', 'Tammuz', 'Av', 'Elul', 'Tishrei', 'Cheshvan', 'Kislev', 'Tevet', 'Shevat', 'Adar', 'Adar II'],\n      monthNamesShort: ['Nis', 'Iya', 'Siv', 'Tam', 'Av', 'Elu', 'Tis', 'Che', 'Kis', 'Tev', 'She', 'Ada', 'Ad2'],\n      dayNames: ['Yom Rishon', 'Yom Sheni', 'Yom Shlishi', 'Yom Revi\\'i', 'Yom Chamishi', 'Yom Shishi', 'Yom Shabbat'],\n      dayNamesShort: ['Ris', 'She', 'Shl', 'Rev', 'Cha', 'Shi', 'Sha'],\n      dayNamesMin: ['Ri', 'She', 'Shl', 'Re', 'Ch', 'Shi', 'Sha'],\n      digits: null,\n      dateFormat: 'dd/mm/yyyy',\n      firstDay: 0,\n      isRTL: false\n    }\n  },\n  /** Determine whether this date is in a leap year.\n      @memberof HebrewCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n    return this._leapYear(date.year());\n  },\n  /** Determine whether this date is in a leap year.\n      @memberof HebrewCalendar\n      @private\n      @param year {number} The year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  _leapYear: function _leapYear(year) {\n    year = year < 0 ? year + 1 : year;\n    return mod(year * 7 + 1, 19) < 7;\n  },\n  /** Retrieve the number of months in a year.\n      @memberof HebrewCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {number} The number of months.\n      @throws Error if an invalid year or a different calendar used. */\n  monthsInYear: function monthsInYear(year) {\n    this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n    return this._leapYear(year.year ? year.year() : year) ? 13 : 12;\n  },\n  /** Determine the week of the year for a date.\n      @memberof HebrewCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Sunday of this week starting on Sunday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(-checkDate.dayOfWeek(), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n  /** Retrieve the number of days in a year.\n      @memberof HebrewCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {number} The number of days.\n      @throws Error if an invalid year or a different calendar used. */\n  daysInYear: function daysInYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n    year = date.year();\n    return this.toJD(year === -1 ? +1 : year + 1, 7, 1) - this.toJD(year, 7, 1);\n  },\n  /** Retrieve the number of days in a month.\n      @memberof HebrewCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    if (year.year) {\n      month = year.month();\n      year = year.year();\n    }\n    this._validate(year, month, this.minDay, main.local.invalidMonth);\n    return month === 12 && this.leapYear(year) ? 30 :\n    // Adar I\n    month === 8 && mod(this.daysInYear(year), 10) === 5 ? 30 :\n    // Cheshvan in shlemah year\n    month === 9 && mod(this.daysInYear(year), 10) === 3 ? 29 :\n    // Kislev in chaserah year\n    this.daysPerMonth[month - 1];\n  },\n  /** Determine whether this date is a week day.\n      @memberof HebrewCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return this.dayOfWeek(year, month, day) !== 6;\n  },\n  /** Retrieve additional information about a date - year type.\n      @memberof HebrewCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {object} Additional information - contents depends on calendar.\n      @throws Error if an invalid date or a different calendar used. */\n  extraInfo: function extraInfo(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n    return {\n      yearType: (this.leapYear(date) ? 'embolismic' : 'common') + ' ' + ['deficient', 'regular', 'complete'][this.daysInYear(date) % 10 - 3]\n    };\n  },\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof HebrewCalendar\n      @param year {CDate)|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n    year = date.year();\n    month = date.month();\n    day = date.day();\n    var adjYear = year <= 0 ? year + 1 : year;\n    var jd = this.jdEpoch + this._delay1(adjYear) + this._delay2(adjYear) + day + 1;\n    if (month < 7) {\n      for (var m = 7; m <= this.monthsInYear(year); m++) {\n        jd += this.daysInMonth(year, m);\n      }\n      for (var m = 1; m < month; m++) {\n        jd += this.daysInMonth(year, m);\n      }\n    } else {\n      for (var m = 7; m < month; m++) {\n        jd += this.daysInMonth(year, m);\n      }\n    }\n    return jd;\n  },\n  /** Test for delay of start of new year and to avoid\n      Sunday, Wednesday, or Friday as start of the new year.\n      @memberof HebrewCalendar\n      @private\n      @param year {number} The year to examine.\n      @return {number} The days to offset by. */\n  _delay1: function _delay1(year) {\n    var months = Math.floor((235 * year - 234) / 19);\n    var parts = 12084 + 13753 * months;\n    var day = months * 29 + Math.floor(parts / 25920);\n    if (mod(3 * (day + 1), 7) < 3) {\n      day++;\n    }\n    return day;\n  },\n  /** Check for delay in start of new year due to length of adjacent years.\n      @memberof HebrewCalendar\n      @private\n      @param year {number} The year to examine.\n      @return {number} The days to offset by. */\n  _delay2: function _delay2(year) {\n    var last = this._delay1(year - 1);\n    var present = this._delay1(year);\n    var next = this._delay1(year + 1);\n    return next - present === 356 ? 2 : present - last === 382 ? 1 : 0;\n  },\n  /** Create a new date from a Julian date.\n      @memberof HebrewCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    jd = Math.floor(jd) + 0.5;\n    var year = Math.floor((jd - this.jdEpoch) * 98496.0 / 35975351.0) - 1;\n    while (jd >= this.toJD(year === -1 ? +1 : year + 1, 7, 1)) {\n      year++;\n    }\n    var month = jd < this.toJD(year, 1, 1) ? 7 : 1;\n    while (jd > this.toJD(year, month, this.daysInMonth(year, month))) {\n      month++;\n    }\n    var day = jd - this.toJD(year, month, 1) + 1;\n    return this.newDate(year, month, day);\n  }\n});\n\n// Modulus function which works for non-integers.\nfunction mod(a, b) {\n  return a - b * Math.floor(a / b);\n}\n\n// Hebrew calendar implementation\nmain.calendars.hebrew = HebrewCalendar;","map":{"version":3,"names":["main","require","assign","HebrewCalendar","language","local","regionalOptions","prototype","baseCalendar","name","jdEpoch","daysPerMonth","hasYearZero","minMonth","firstMonth","minDay","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","dateFormat","firstDay","isRTL","leapYear","year","date","_validate","invalidYear","_leapYear","mod","monthsInYear","weekOfYear","month","day","checkDate","newDate","add","dayOfWeek","Math","floor","dayOfYear","daysInYear","toJD","daysInMonth","invalidMonth","weekDay","extraInfo","invalidDate","yearType","adjYear","jd","_delay1","_delay2","m","months","parts","last","present","next","fromJD","a","b","calendars","hebrew"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/world-calendars/dist/calendars/hebrew.js"],"sourcesContent":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n﻿/* http://keith-wood.name/calendars.html\n   Hebrew calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Hebrew civil calendar.\n    Based on code from <a href=\"http://www.fourmilab.ch/documents/calendar/\">http://www.fourmilab.ch/documents/calendar/</a>.\n    See also <a href=\"http://en.wikipedia.org/wiki/Hebrew_calendar\">http://en.wikipedia.org/wiki/Hebrew_calendar</a>.\n    @class HebrewCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction HebrewCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nHebrewCalendar.prototype = new main.baseCalendar;\n\nassign(HebrewCalendar.prototype, {\n    /** The calendar name.\n        @memberof HebrewCalendar */\n    name: 'Hebrew',\n    /** Julian date of start of Hebrew epoch: 7 October 3761 BCE.\n        @memberof HebrewCalendar */\n    jdEpoch: 347995.5,\n    /** Days per month in a common year.\n        @memberof HebrewCalendar */\n    daysPerMonth: [30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 29],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof HebrewCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof HebrewCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof HebrewCalendar */\n    firstMonth: 7,\n    /** The minimum day number.\n        @memberof HebrewCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof HebrewCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Hebrew',\n            epochs: ['BAM', 'AM'],\n            monthNames: ['Nisan', 'Iyar', 'Sivan', 'Tammuz', 'Av', 'Elul',\n            'Tishrei', 'Cheshvan', 'Kislev', 'Tevet', 'Shevat', 'Adar', 'Adar II'],\n            monthNamesShort: ['Nis', 'Iya', 'Siv', 'Tam', 'Av', 'Elu', 'Tis', 'Che', 'Kis', 'Tev', 'She', 'Ada', 'Ad2'],\n            dayNames: ['Yom Rishon', 'Yom Sheni', 'Yom Shlishi', 'Yom Revi\\'i', 'Yom Chamishi', 'Yom Shishi', 'Yom Shabbat'],\n            dayNamesShort: ['Ris', 'She', 'Shl', 'Rev', 'Cha', 'Shi', 'Sha'],\n            dayNamesMin: ['Ri','She','Shl','Re','Ch','Shi','Sha'],\n            digits: null,\n            dateFormat: 'dd/mm/yyyy',\n            firstDay: 0,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        return this._leapYear(date.year());\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof HebrewCalendar\n        @private\n        @param year {number} The year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    _leapYear: function(year) {\n        year = (year < 0 ? year + 1 : year);\n        return mod(year * 7 + 1, 19) < 7;\n    },\n\n    /** Retrieve the number of months in a year.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of months.\n        @throws Error if an invalid year or a different calendar used. */\n    monthsInYear: function(year) {\n        this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        return this._leapYear(year.year ? year.year() : year) ? 13 : 12;\n    },\n\n    /** Determine the week of the year for a date.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Sunday of this week starting on Sunday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(-checkDate.dayOfWeek(), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a year.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of days.\n        @throws Error if an invalid year or a different calendar used. */\n    daysInYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        year = date.year();\n        return this.toJD((year === -1 ? +1 : year + 1), 7, 1) - this.toJD(year, 7, 1);\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        if (year.year) {\n            month = year.month();\n            year = year.year();\n        }\n        this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return (month === 12 && this.leapYear(year) ? 30 : // Adar I\n                (month === 8 && mod(this.daysInYear(year), 10) === 5 ? 30 : // Cheshvan in shlemah year\n                (month === 9 && mod(this.daysInYear(year), 10) === 3 ? 29 : // Kislev in chaserah year\n                this.daysPerMonth[month - 1])));\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return this.dayOfWeek(year, month, day) !== 6;\n    },\n\n    /** Retrieve additional information about a date - year type.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {object} Additional information - contents depends on calendar.\n        @throws Error if an invalid date or a different calendar used. */\n    extraInfo: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        return {yearType: (this.leapYear(date) ? 'embolismic' : 'common') + ' ' +\n            ['deficient', 'regular', 'complete'][this.daysInYear(date) % 10 - 3]};\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof HebrewCalendar\n        @param year {CDate)|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        year = date.year();\n        month = date.month();\n        day = date.day();\n        var adjYear = (year <= 0 ? year + 1 : year);\n        var jd = this.jdEpoch + this._delay1(adjYear) +\n            this._delay2(adjYear) + day + 1;\n        if (month < 7) {\n            for (var m = 7; m <= this.monthsInYear(year); m++) {\n                jd += this.daysInMonth(year, m);\n            }\n            for (var m = 1; m < month; m++) {\n                jd += this.daysInMonth(year, m);\n            }\n        }\n        else {\n            for (var m = 7; m < month; m++) {\n                jd += this.daysInMonth(year, m);\n            }\n        }\n        return jd;\n    },\n\n    /** Test for delay of start of new year and to avoid\n        Sunday, Wednesday, or Friday as start of the new year.\n        @memberof HebrewCalendar\n        @private\n        @param year {number} The year to examine.\n        @return {number} The days to offset by. */\n    _delay1: function(year) {\n        var months = Math.floor((235 * year - 234) / 19);\n        var parts = 12084 + 13753 * months;\n        var day = months * 29 + Math.floor(parts / 25920);\n        if (mod(3 * (day + 1), 7) < 3) {\n            day++;\n        }\n        return day;\n    },\n\n    /** Check for delay in start of new year due to length of adjacent years.\n        @memberof HebrewCalendar\n        @private\n        @param year {number} The year to examine.\n        @return {number} The days to offset by. */\n    _delay2: function(year) {\n        var last = this._delay1(year - 1);\n        var present = this._delay1(year);\n        var next = this._delay1(year + 1);\n        return ((next - present) === 356 ? 2 : ((present - last) === 382 ? 1 : 0));\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof HebrewCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        jd = Math.floor(jd) + 0.5;\n        var year = Math.floor(((jd - this.jdEpoch) * 98496.0) / 35975351.0) - 1;\n        while (jd >= this.toJD((year === -1 ? +1 : year + 1), 7, 1)) {\n            year++;\n        }\n        var month = (jd < this.toJD(year, 1, 1)) ? 7 : 1;\n        while (jd > this.toJD(year, month, this.daysInMonth(year, month))) {\n            month++;\n        }\n        var day = jd - this.toJD(year, month, 1) + 1;\n        return this.newDate(year, month, day);\n    }\n});\n\n// Modulus function which works for non-integers.\nfunction mod(a, b) {\n    return a - (b * Math.floor(a / b));\n}\n\n// Hebrew calendar implementation\nmain.calendars.hebrew = HebrewCalendar;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
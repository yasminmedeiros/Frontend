{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar hovertemplateAttrs = require('../../components/fx/hovertemplate_attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar scatterPolarAttrs = require('../scatterpolar/attributes');\nvar barAttrs = require('../bar/attributes');\nmodule.exports = {\n  r: scatterPolarAttrs.r,\n  theta: scatterPolarAttrs.theta,\n  r0: scatterPolarAttrs.r0,\n  dr: scatterPolarAttrs.dr,\n  theta0: scatterPolarAttrs.theta0,\n  dtheta: scatterPolarAttrs.dtheta,\n  thetaunit: scatterPolarAttrs.thetaunit,\n  // orientation: {\n  //     valType: 'enumerated',\n  //     role: 'info',\n  //     values: ['radial', 'angular'],\n  //     editType: 'calc+clearAxisTypes',\n  //     description: 'Sets the orientation of the bars.'\n  // },\n\n  base: extendFlat({}, barAttrs.base, {\n    description: ['Sets where the bar base is drawn (in radial axis units).', 'In *stack* barmode,', 'traces that set *base* will be excluded', 'and drawn in *overlay* mode instead.'].join(' ')\n  }),\n  offset: extendFlat({}, barAttrs.offset, {\n    description: ['Shifts the angular position where the bar is drawn', '(in *thetatunit* units).'].join(' ')\n  }),\n  width: extendFlat({}, barAttrs.width, {\n    description: ['Sets the bar angular width (in *thetaunit* units).'].join(' ')\n  }),\n  text: extendFlat({}, barAttrs.text, {\n    description: ['Sets hover text elements associated with each bar.', 'If a single string, the same string appears over all bars.', 'If an array of string, the items are mapped in order to the', 'this trace\\'s coordinates.'].join(' ')\n  }),\n  // hovertext: barAttrs.hovertext,\n\n  // textposition: {},\n  // textfont: {},\n  // insidetextfont: {},\n  // outsidetextfont: {},\n  // constraintext: {},\n  // cliponaxis: extendFlat({}, barAttrs.cliponaxis, {dflt: false}),\n\n  marker: barAttrs.marker,\n  hoverinfo: scatterPolarAttrs.hoverinfo,\n  hovertemplate: hovertemplateAttrs(),\n  selected: barAttrs.selected,\n  unselected: barAttrs.unselected\n\n  // error_x (error_r, error_theta)\n  // error_y\n};","map":{"version":3,"names":["hovertemplateAttrs","require","extendFlat","scatterPolarAttrs","barAttrs","module","exports","r","theta","r0","dr","theta0","dtheta","thetaunit","base","description","join","offset","width","text","marker","hoverinfo","hovertemplate","selected","unselected"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/barpolar/attributes.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar hovertemplateAttrs = require('../../components/fx/hovertemplate_attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar scatterPolarAttrs = require('../scatterpolar/attributes');\nvar barAttrs = require('../bar/attributes');\n\nmodule.exports = {\n    r: scatterPolarAttrs.r,\n    theta: scatterPolarAttrs.theta,\n    r0: scatterPolarAttrs.r0,\n    dr: scatterPolarAttrs.dr,\n    theta0: scatterPolarAttrs.theta0,\n    dtheta: scatterPolarAttrs.dtheta,\n    thetaunit: scatterPolarAttrs.thetaunit,\n\n    // orientation: {\n    //     valType: 'enumerated',\n    //     role: 'info',\n    //     values: ['radial', 'angular'],\n    //     editType: 'calc+clearAxisTypes',\n    //     description: 'Sets the orientation of the bars.'\n    // },\n\n    base: extendFlat({}, barAttrs.base, {\n        description: [\n            'Sets where the bar base is drawn (in radial axis units).',\n            'In *stack* barmode,',\n            'traces that set *base* will be excluded',\n            'and drawn in *overlay* mode instead.'\n        ].join(' ')\n    }),\n    offset: extendFlat({}, barAttrs.offset, {\n        description: [\n            'Shifts the angular position where the bar is drawn',\n            '(in *thetatunit* units).'\n        ].join(' ')\n    }),\n    width: extendFlat({}, barAttrs.width, {\n        description: [\n            'Sets the bar angular width (in *thetaunit* units).'\n        ].join(' ')\n    }),\n\n    text: extendFlat({}, barAttrs.text, {\n        description: [\n            'Sets hover text elements associated with each bar.',\n            'If a single string, the same string appears over all bars.',\n            'If an array of string, the items are mapped in order to the',\n            'this trace\\'s coordinates.'\n        ].join(' ')\n    }),\n    // hovertext: barAttrs.hovertext,\n\n    // textposition: {},\n    // textfont: {},\n    // insidetextfont: {},\n    // outsidetextfont: {},\n    // constraintext: {},\n    // cliponaxis: extendFlat({}, barAttrs.cliponaxis, {dflt: false}),\n\n    marker: barAttrs.marker,\n\n    hoverinfo: scatterPolarAttrs.hoverinfo,\n    hovertemplate: hovertemplateAttrs(),\n\n    selected: barAttrs.selected,\n    unselected: barAttrs.unselected\n\n    // error_x (error_r, error_theta)\n    // error_y\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,8CAA8C,CAAC;AAChF,IAAIC,UAAU,GAAGD,OAAO,CAAC,kBAAkB,CAAC,CAACC,UAAU;AACvD,IAAIC,iBAAiB,GAAGF,OAAO,CAAC,4BAA4B,CAAC;AAC7D,IAAIG,QAAQ,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAE3CI,MAAM,CAACC,OAAO,GAAG;EACbC,CAAC,EAAEJ,iBAAiB,CAACI,CAAC;EACtBC,KAAK,EAAEL,iBAAiB,CAACK,KAAK;EAC9BC,EAAE,EAAEN,iBAAiB,CAACM,EAAE;EACxBC,EAAE,EAAEP,iBAAiB,CAACO,EAAE;EACxBC,MAAM,EAAER,iBAAiB,CAACQ,MAAM;EAChCC,MAAM,EAAET,iBAAiB,CAACS,MAAM;EAChCC,SAAS,EAAEV,iBAAiB,CAACU,SAAS;EAEtC;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAC,IAAI,EAAEZ,UAAU,CAAC,CAAC,CAAC,EAAEE,QAAQ,CAACU,IAAI,EAAE;IAChCC,WAAW,EAAE,CACT,0DAA0D,EAC1D,qBAAqB,EACrB,yCAAyC,EACzC,sCAAsC,CACzC,CAACC,IAAI,CAAC,GAAG;EACd,CAAC,CAAC;EACFC,MAAM,EAAEf,UAAU,CAAC,CAAC,CAAC,EAAEE,QAAQ,CAACa,MAAM,EAAE;IACpCF,WAAW,EAAE,CACT,oDAAoD,EACpD,0BAA0B,CAC7B,CAACC,IAAI,CAAC,GAAG;EACd,CAAC,CAAC;EACFE,KAAK,EAAEhB,UAAU,CAAC,CAAC,CAAC,EAAEE,QAAQ,CAACc,KAAK,EAAE;IAClCH,WAAW,EAAE,CACT,oDAAoD,CACvD,CAACC,IAAI,CAAC,GAAG;EACd,CAAC,CAAC;EAEFG,IAAI,EAAEjB,UAAU,CAAC,CAAC,CAAC,EAAEE,QAAQ,CAACe,IAAI,EAAE;IAChCJ,WAAW,EAAE,CACT,oDAAoD,EACpD,4DAA4D,EAC5D,6DAA6D,EAC7D,4BAA4B,CAC/B,CAACC,IAAI,CAAC,GAAG;EACd,CAAC,CAAC;EACF;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEAI,MAAM,EAAEhB,QAAQ,CAACgB,MAAM;EAEvBC,SAAS,EAAElB,iBAAiB,CAACkB,SAAS;EACtCC,aAAa,EAAEtB,kBAAkB,EAAE;EAEnCuB,QAAQ,EAAEnB,QAAQ,CAACmB,QAAQ;EAC3BC,UAAU,EAAEpB,QAAQ,CAACoB;;EAErB;EACA;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
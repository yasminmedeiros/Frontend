{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar countryRegex = require('country-regex');\nvar Lib = require('../lib');\n\n// make list of all country iso3 ids from at runtime\nvar countryIds = Object.keys(countryRegex);\nvar locationmodeToIdFinder = {\n  'ISO-3': Lib.identity,\n  'USA-states': Lib.identity,\n  'country names': countryNameToISO3\n};\nexports.locationToFeature = function (locationmode, location, features) {\n  if (!location || typeof location !== 'string') return false;\n  var locationId = getLocationId(locationmode, location);\n  if (locationId) {\n    for (var i = 0; i < features.length; i++) {\n      var feature = features[i];\n      if (feature.id === locationId) return feature;\n    }\n    Lib.log(['Location with id', locationId, 'does not have a matching topojson feature at this resolution.'].join(' '));\n  }\n  return false;\n};\nfunction getLocationId(locationmode, location) {\n  var idFinder = locationmodeToIdFinder[locationmode];\n  return idFinder(location);\n}\nfunction countryNameToISO3(countryName) {\n  for (var i = 0; i < countryIds.length; i++) {\n    var iso3 = countryIds[i];\n    var regex = new RegExp(countryRegex[iso3]);\n    if (regex.test(countryName.trim().toLowerCase())) return iso3;\n  }\n  Lib.log('Unrecognized country name: ' + countryName + '.');\n  return false;\n}","map":{"version":3,"names":["countryRegex","require","Lib","countryIds","Object","keys","locationmodeToIdFinder","identity","countryNameToISO3","exports","locationToFeature","locationmode","location","features","locationId","getLocationId","i","length","feature","id","log","join","idFinder","countryName","iso3","regex","RegExp","test","trim","toLowerCase"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/lib/geo_location_utils.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar countryRegex = require('country-regex');\nvar Lib = require('../lib');\n\n\n// make list of all country iso3 ids from at runtime\nvar countryIds = Object.keys(countryRegex);\n\nvar locationmodeToIdFinder = {\n    'ISO-3': Lib.identity,\n    'USA-states': Lib.identity,\n    'country names': countryNameToISO3\n};\n\nexports.locationToFeature = function(locationmode, location, features) {\n    if(!location || typeof location !== 'string') return false;\n\n    var locationId = getLocationId(locationmode, location);\n\n    if(locationId) {\n        for(var i = 0; i < features.length; i++) {\n            var feature = features[i];\n\n            if(feature.id === locationId) return feature;\n        }\n\n        Lib.log([\n            'Location with id', locationId,\n            'does not have a matching topojson feature at this resolution.'\n        ].join(' '));\n    }\n\n    return false;\n};\n\nfunction getLocationId(locationmode, location) {\n    var idFinder = locationmodeToIdFinder[locationmode];\n    return idFinder(location);\n}\n\nfunction countryNameToISO3(countryName) {\n    for(var i = 0; i < countryIds.length; i++) {\n        var iso3 = countryIds[i];\n        var regex = new RegExp(countryRegex[iso3]);\n\n        if(regex.test(countryName.trim().toLowerCase())) return iso3;\n    }\n\n    Lib.log('Unrecognized country name: ' + countryName + '.');\n\n    return false;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,IAAIC,GAAG,GAAGD,OAAO,CAAC,QAAQ,CAAC;;AAG3B;AACA,IAAIE,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACL,YAAY,CAAC;AAE1C,IAAIM,sBAAsB,GAAG;EACzB,OAAO,EAAEJ,GAAG,CAACK,QAAQ;EACrB,YAAY,EAAEL,GAAG,CAACK,QAAQ;EAC1B,eAAe,EAAEC;AACrB,CAAC;AAEDC,OAAO,CAACC,iBAAiB,GAAG,UAASC,YAAY,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EACnE,IAAG,CAACD,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE,OAAO,KAAK;EAE1D,IAAIE,UAAU,GAAGC,aAAa,CAACJ,YAAY,EAAEC,QAAQ,CAAC;EAEtD,IAAGE,UAAU,EAAE;IACX,KAAI,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAIE,OAAO,GAAGL,QAAQ,CAACG,CAAC,CAAC;MAEzB,IAAGE,OAAO,CAACC,EAAE,KAAKL,UAAU,EAAE,OAAOI,OAAO;IAChD;IAEAhB,GAAG,CAACkB,GAAG,CAAC,CACJ,kBAAkB,EAAEN,UAAU,EAC9B,+DAA+D,CAClE,CAACO,IAAI,CAAC,GAAG,CAAC,CAAC;EAChB;EAEA,OAAO,KAAK;AAChB,CAAC;AAED,SAASN,aAAa,CAACJ,YAAY,EAAEC,QAAQ,EAAE;EAC3C,IAAIU,QAAQ,GAAGhB,sBAAsB,CAACK,YAAY,CAAC;EACnD,OAAOW,QAAQ,CAACV,QAAQ,CAAC;AAC7B;AAEA,SAASJ,iBAAiB,CAACe,WAAW,EAAE;EACpC,KAAI,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,UAAU,CAACc,MAAM,EAAED,CAAC,EAAE,EAAE;IACvC,IAAIQ,IAAI,GAAGrB,UAAU,CAACa,CAAC,CAAC;IACxB,IAAIS,KAAK,GAAG,IAAIC,MAAM,CAAC1B,YAAY,CAACwB,IAAI,CAAC,CAAC;IAE1C,IAAGC,KAAK,CAACE,IAAI,CAACJ,WAAW,CAACK,IAAI,EAAE,CAACC,WAAW,EAAE,CAAC,EAAE,OAAOL,IAAI;EAChE;EAEAtB,GAAG,CAACkB,GAAG,CAAC,6BAA6B,GAAGG,WAAW,GAAG,GAAG,CAAC;EAE1D,OAAO,KAAK;AAChB"},"metadata":{},"sourceType":"script","externalDependencies":[]}
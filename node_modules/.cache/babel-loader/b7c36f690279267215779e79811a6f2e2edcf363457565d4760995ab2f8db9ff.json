{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\n\n/**\n * Factory function for checking component arrays for subplot references.\n *\n * @param {string} containerArrayName: the top-level array in gd.layout to check\n *   If an item in this container is found that references a cartesian x and/or y axis,\n *   ensure cartesian is marked as a base plot module and record the axes (and subplot\n *   if both refs are axes) in gd._fullLayout\n *\n * @return {function}: with args layoutIn (gd.layout) and layoutOut (gd._fullLayout)\n * as expected of a component includeBasePlot method\n */\nmodule.exports = function makeIncludeComponents(containerArrayName) {\n  return function includeComponents(layoutIn, layoutOut) {\n    var array = layoutIn[containerArrayName];\n    if (!Array.isArray(array)) return;\n    var Cartesian = Registry.subplotsRegistry.cartesian;\n    var idRegex = Cartesian.idRegex;\n    var subplots = layoutOut._subplots;\n    var xaList = subplots.xaxis;\n    var yaList = subplots.yaxis;\n    var cartesianList = subplots.cartesian;\n    var hasCartesianOrGL2D = layoutOut._has('cartesian') || layoutOut._has('gl2d');\n    for (var i = 0; i < array.length; i++) {\n      var itemi = array[i];\n      if (!Lib.isPlainObject(itemi)) continue;\n      var xref = itemi.xref;\n      var yref = itemi.yref;\n      var hasXref = idRegex.x.test(xref);\n      var hasYref = idRegex.y.test(yref);\n      if (hasXref || hasYref) {\n        if (!hasCartesianOrGL2D) Lib.pushUnique(layoutOut._basePlotModules, Cartesian);\n        var newAxis = false;\n        if (hasXref && xaList.indexOf(xref) === -1) {\n          xaList.push(xref);\n          newAxis = true;\n        }\n        if (hasYref && yaList.indexOf(yref) === -1) {\n          yaList.push(yref);\n          newAxis = true;\n        }\n\n        /*\n         * Notice the logic here: only add a subplot for a component if\n         * it's referencing both x and y axes AND it's creating a new axis\n         * so for example if your plot already has xy and x2y2, an annotation\n         * on x2y or xy2 will not create a new subplot.\n         */\n        if (newAxis && hasXref && hasYref) {\n          cartesianList.push(xref + yref);\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["Registry","require","Lib","module","exports","makeIncludeComponents","containerArrayName","includeComponents","layoutIn","layoutOut","array","Array","isArray","Cartesian","subplotsRegistry","cartesian","idRegex","subplots","_subplots","xaList","xaxis","yaList","yaxis","cartesianList","hasCartesianOrGL2D","_has","i","length","itemi","isPlainObject","xref","yref","hasXref","x","test","hasYref","y","pushUnique","_basePlotModules","newAxis","indexOf","push"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/plots/cartesian/include_components.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\n\n/**\n * Factory function for checking component arrays for subplot references.\n *\n * @param {string} containerArrayName: the top-level array in gd.layout to check\n *   If an item in this container is found that references a cartesian x and/or y axis,\n *   ensure cartesian is marked as a base plot module and record the axes (and subplot\n *   if both refs are axes) in gd._fullLayout\n *\n * @return {function}: with args layoutIn (gd.layout) and layoutOut (gd._fullLayout)\n * as expected of a component includeBasePlot method\n */\nmodule.exports = function makeIncludeComponents(containerArrayName) {\n    return function includeComponents(layoutIn, layoutOut) {\n        var array = layoutIn[containerArrayName];\n        if(!Array.isArray(array)) return;\n\n        var Cartesian = Registry.subplotsRegistry.cartesian;\n        var idRegex = Cartesian.idRegex;\n        var subplots = layoutOut._subplots;\n        var xaList = subplots.xaxis;\n        var yaList = subplots.yaxis;\n        var cartesianList = subplots.cartesian;\n        var hasCartesianOrGL2D = layoutOut._has('cartesian') || layoutOut._has('gl2d');\n\n        for(var i = 0; i < array.length; i++) {\n            var itemi = array[i];\n            if(!Lib.isPlainObject(itemi)) continue;\n\n            var xref = itemi.xref;\n            var yref = itemi.yref;\n\n            var hasXref = idRegex.x.test(xref);\n            var hasYref = idRegex.y.test(yref);\n            if(hasXref || hasYref) {\n                if(!hasCartesianOrGL2D) Lib.pushUnique(layoutOut._basePlotModules, Cartesian);\n\n                var newAxis = false;\n                if(hasXref && xaList.indexOf(xref) === -1) {\n                    xaList.push(xref);\n                    newAxis = true;\n                }\n                if(hasYref && yaList.indexOf(yref) === -1) {\n                    yaList.push(yref);\n                    newAxis = true;\n                }\n\n                /*\n                 * Notice the logic here: only add a subplot for a component if\n                 * it's referencing both x and y axes AND it's creating a new axis\n                 * so for example if your plot already has xy and x2y2, an annotation\n                 * on x2y or xy2 will not create a new subplot.\n                 */\n                if(newAxis && hasXref && hasYref) {\n                    cartesianList.push(xref + yref);\n                }\n            }\n        }\n    };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACxC,IAAIC,GAAG,GAAGD,OAAO,CAAC,WAAW,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,SAASC,qBAAqB,CAACC,kBAAkB,EAAE;EAChE,OAAO,SAASC,iBAAiB,CAACC,QAAQ,EAAEC,SAAS,EAAE;IACnD,IAAIC,KAAK,GAAGF,QAAQ,CAACF,kBAAkB,CAAC;IACxC,IAAG,CAACK,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;IAE1B,IAAIG,SAAS,GAAGb,QAAQ,CAACc,gBAAgB,CAACC,SAAS;IACnD,IAAIC,OAAO,GAAGH,SAAS,CAACG,OAAO;IAC/B,IAAIC,QAAQ,GAAGR,SAAS,CAACS,SAAS;IAClC,IAAIC,MAAM,GAAGF,QAAQ,CAACG,KAAK;IAC3B,IAAIC,MAAM,GAAGJ,QAAQ,CAACK,KAAK;IAC3B,IAAIC,aAAa,GAAGN,QAAQ,CAACF,SAAS;IACtC,IAAIS,kBAAkB,GAAGf,SAAS,CAACgB,IAAI,CAAC,WAAW,CAAC,IAAIhB,SAAS,CAACgB,IAAI,CAAC,MAAM,CAAC;IAE9E,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,KAAK,CAACiB,MAAM,EAAED,CAAC,EAAE,EAAE;MAClC,IAAIE,KAAK,GAAGlB,KAAK,CAACgB,CAAC,CAAC;MACpB,IAAG,CAACxB,GAAG,CAAC2B,aAAa,CAACD,KAAK,CAAC,EAAE;MAE9B,IAAIE,IAAI,GAAGF,KAAK,CAACE,IAAI;MACrB,IAAIC,IAAI,GAAGH,KAAK,CAACG,IAAI;MAErB,IAAIC,OAAO,GAAGhB,OAAO,CAACiB,CAAC,CAACC,IAAI,CAACJ,IAAI,CAAC;MAClC,IAAIK,OAAO,GAAGnB,OAAO,CAACoB,CAAC,CAACF,IAAI,CAACH,IAAI,CAAC;MAClC,IAAGC,OAAO,IAAIG,OAAO,EAAE;QACnB,IAAG,CAACX,kBAAkB,EAAEtB,GAAG,CAACmC,UAAU,CAAC5B,SAAS,CAAC6B,gBAAgB,EAAEzB,SAAS,CAAC;QAE7E,IAAI0B,OAAO,GAAG,KAAK;QACnB,IAAGP,OAAO,IAAIb,MAAM,CAACqB,OAAO,CAACV,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;UACvCX,MAAM,CAACsB,IAAI,CAACX,IAAI,CAAC;UACjBS,OAAO,GAAG,IAAI;QAClB;QACA,IAAGJ,OAAO,IAAId,MAAM,CAACmB,OAAO,CAACT,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;UACvCV,MAAM,CAACoB,IAAI,CAACV,IAAI,CAAC;UACjBQ,OAAO,GAAG,IAAI;QAClB;;QAEA;AAChB;AACA;AACA;AACA;AACA;QACgB,IAAGA,OAAO,IAAIP,OAAO,IAAIG,OAAO,EAAE;UAC9BZ,aAAa,CAACkB,IAAI,CAACX,IAAI,GAAGC,IAAI,CAAC;QACnC;MACJ;IACJ;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nvar bounds = require(\"binary-search-bounds\");\nvar NOT_FOUND = 0;\nvar SUCCESS = 1;\nvar EMPTY = 2;\nmodule.exports = createWrapper;\nfunction IntervalTreeNode(mid, left, right, leftPoints, rightPoints) {\n  this.mid = mid;\n  this.left = left;\n  this.right = right;\n  this.leftPoints = leftPoints;\n  this.rightPoints = rightPoints;\n  this.count = (left ? left.count : 0) + (right ? right.count : 0) + leftPoints.length;\n}\nvar proto = IntervalTreeNode.prototype;\nfunction copy(a, b) {\n  a.mid = b.mid;\n  a.left = b.left;\n  a.right = b.right;\n  a.leftPoints = b.leftPoints;\n  a.rightPoints = b.rightPoints;\n  a.count = b.count;\n}\nfunction rebuild(node, intervals) {\n  var ntree = createIntervalTree(intervals);\n  node.mid = ntree.mid;\n  node.left = ntree.left;\n  node.right = ntree.right;\n  node.leftPoints = ntree.leftPoints;\n  node.rightPoints = ntree.rightPoints;\n  node.count = ntree.count;\n}\nfunction rebuildWithInterval(node, interval) {\n  var intervals = node.intervals([]);\n  intervals.push(interval);\n  rebuild(node, intervals);\n}\nfunction rebuildWithoutInterval(node, interval) {\n  var intervals = node.intervals([]);\n  var idx = intervals.indexOf(interval);\n  if (idx < 0) {\n    return NOT_FOUND;\n  }\n  intervals.splice(idx, 1);\n  rebuild(node, intervals);\n  return SUCCESS;\n}\nproto.intervals = function (result) {\n  result.push.apply(result, this.leftPoints);\n  if (this.left) {\n    this.left.intervals(result);\n  }\n  if (this.right) {\n    this.right.intervals(result);\n  }\n  return result;\n};\nproto.insert = function (interval) {\n  var weight = this.count - this.leftPoints.length;\n  this.count += 1;\n  if (interval[1] < this.mid) {\n    if (this.left) {\n      if (4 * (this.left.count + 1) > 3 * (weight + 1)) {\n        rebuildWithInterval(this, interval);\n      } else {\n        this.left.insert(interval);\n      }\n    } else {\n      this.left = createIntervalTree([interval]);\n    }\n  } else if (interval[0] > this.mid) {\n    if (this.right) {\n      if (4 * (this.right.count + 1) > 3 * (weight + 1)) {\n        rebuildWithInterval(this, interval);\n      } else {\n        this.right.insert(interval);\n      }\n    } else {\n      this.right = createIntervalTree([interval]);\n    }\n  } else {\n    var l = bounds.ge(this.leftPoints, interval, compareBegin);\n    var r = bounds.ge(this.rightPoints, interval, compareEnd);\n    this.leftPoints.splice(l, 0, interval);\n    this.rightPoints.splice(r, 0, interval);\n  }\n};\nproto.remove = function (interval) {\n  var weight = this.count - this.leftPoints;\n  if (interval[1] < this.mid) {\n    if (!this.left) {\n      return NOT_FOUND;\n    }\n    var rw = this.right ? this.right.count : 0;\n    if (4 * rw > 3 * (weight - 1)) {\n      return rebuildWithoutInterval(this, interval);\n    }\n    var r = this.left.remove(interval);\n    if (r === EMPTY) {\n      this.left = null;\n      this.count -= 1;\n      return SUCCESS;\n    } else if (r === SUCCESS) {\n      this.count -= 1;\n    }\n    return r;\n  } else if (interval[0] > this.mid) {\n    if (!this.right) {\n      return NOT_FOUND;\n    }\n    var lw = this.left ? this.left.count : 0;\n    if (4 * lw > 3 * (weight - 1)) {\n      return rebuildWithoutInterval(this, interval);\n    }\n    var r = this.right.remove(interval);\n    if (r === EMPTY) {\n      this.right = null;\n      this.count -= 1;\n      return SUCCESS;\n    } else if (r === SUCCESS) {\n      this.count -= 1;\n    }\n    return r;\n  } else {\n    if (this.count === 1) {\n      if (this.leftPoints[0] === interval) {\n        return EMPTY;\n      } else {\n        return NOT_FOUND;\n      }\n    }\n    if (this.leftPoints.length === 1 && this.leftPoints[0] === interval) {\n      if (this.left && this.right) {\n        var p = this;\n        var n = this.left;\n        while (n.right) {\n          p = n;\n          n = n.right;\n        }\n        if (p === this) {\n          n.right = this.right;\n        } else {\n          var l = this.left;\n          var r = this.right;\n          p.count -= n.count;\n          p.right = n.left;\n          n.left = l;\n          n.right = r;\n        }\n        copy(this, n);\n        this.count = (this.left ? this.left.count : 0) + (this.right ? this.right.count : 0) + this.leftPoints.length;\n      } else if (this.left) {\n        copy(this, this.left);\n      } else {\n        copy(this, this.right);\n      }\n      return SUCCESS;\n    }\n    for (var l = bounds.ge(this.leftPoints, interval, compareBegin); l < this.leftPoints.length; ++l) {\n      if (this.leftPoints[l][0] !== interval[0]) {\n        break;\n      }\n      if (this.leftPoints[l] === interval) {\n        this.count -= 1;\n        this.leftPoints.splice(l, 1);\n        for (var r = bounds.ge(this.rightPoints, interval, compareEnd); r < this.rightPoints.length; ++r) {\n          if (this.rightPoints[r][1] !== interval[1]) {\n            break;\n          } else if (this.rightPoints[r] === interval) {\n            this.rightPoints.splice(r, 1);\n            return SUCCESS;\n          }\n        }\n      }\n    }\n    return NOT_FOUND;\n  }\n};\nfunction reportLeftRange(arr, hi, cb) {\n  for (var i = 0; i < arr.length && arr[i][0] <= hi; ++i) {\n    var r = cb(arr[i]);\n    if (r) {\n      return r;\n    }\n  }\n}\nfunction reportRightRange(arr, lo, cb) {\n  for (var i = arr.length - 1; i >= 0 && arr[i][1] >= lo; --i) {\n    var r = cb(arr[i]);\n    if (r) {\n      return r;\n    }\n  }\n}\nfunction reportRange(arr, cb) {\n  for (var i = 0; i < arr.length; ++i) {\n    var r = cb(arr[i]);\n    if (r) {\n      return r;\n    }\n  }\n}\nproto.queryPoint = function (x, cb) {\n  if (x < this.mid) {\n    if (this.left) {\n      var r = this.left.queryPoint(x, cb);\n      if (r) {\n        return r;\n      }\n    }\n    return reportLeftRange(this.leftPoints, x, cb);\n  } else if (x > this.mid) {\n    if (this.right) {\n      var r = this.right.queryPoint(x, cb);\n      if (r) {\n        return r;\n      }\n    }\n    return reportRightRange(this.rightPoints, x, cb);\n  } else {\n    return reportRange(this.leftPoints, cb);\n  }\n};\nproto.queryInterval = function (lo, hi, cb) {\n  if (lo < this.mid && this.left) {\n    var r = this.left.queryInterval(lo, hi, cb);\n    if (r) {\n      return r;\n    }\n  }\n  if (hi > this.mid && this.right) {\n    var r = this.right.queryInterval(lo, hi, cb);\n    if (r) {\n      return r;\n    }\n  }\n  if (hi < this.mid) {\n    return reportLeftRange(this.leftPoints, hi, cb);\n  } else if (lo > this.mid) {\n    return reportRightRange(this.rightPoints, lo, cb);\n  } else {\n    return reportRange(this.leftPoints, cb);\n  }\n};\nfunction compareNumbers(a, b) {\n  return a - b;\n}\nfunction compareBegin(a, b) {\n  var d = a[0] - b[0];\n  if (d) {\n    return d;\n  }\n  return a[1] - b[1];\n}\nfunction compareEnd(a, b) {\n  var d = a[1] - b[1];\n  if (d) {\n    return d;\n  }\n  return a[0] - b[0];\n}\nfunction createIntervalTree(intervals) {\n  if (intervals.length === 0) {\n    return null;\n  }\n  var pts = [];\n  for (var i = 0; i < intervals.length; ++i) {\n    pts.push(intervals[i][0], intervals[i][1]);\n  }\n  pts.sort(compareNumbers);\n  var mid = pts[pts.length >> 1];\n  var leftIntervals = [];\n  var rightIntervals = [];\n  var centerIntervals = [];\n  for (var i = 0; i < intervals.length; ++i) {\n    var s = intervals[i];\n    if (s[1] < mid) {\n      leftIntervals.push(s);\n    } else if (mid < s[0]) {\n      rightIntervals.push(s);\n    } else {\n      centerIntervals.push(s);\n    }\n  }\n\n  //Split center intervals\n  var leftPoints = centerIntervals;\n  var rightPoints = centerIntervals.slice();\n  leftPoints.sort(compareBegin);\n  rightPoints.sort(compareEnd);\n  return new IntervalTreeNode(mid, createIntervalTree(leftIntervals), createIntervalTree(rightIntervals), leftPoints, rightPoints);\n}\n\n//User friendly wrapper that makes it possible to support empty trees\nfunction IntervalTree(root) {\n  this.root = root;\n}\nvar tproto = IntervalTree.prototype;\ntproto.insert = function (interval) {\n  if (this.root) {\n    this.root.insert(interval);\n  } else {\n    this.root = new IntervalTreeNode(interval[0], null, null, [interval], [interval]);\n  }\n};\ntproto.remove = function (interval) {\n  if (this.root) {\n    var r = this.root.remove(interval);\n    if (r === EMPTY) {\n      this.root = null;\n    }\n    return r !== NOT_FOUND;\n  }\n  return false;\n};\ntproto.queryPoint = function (p, cb) {\n  if (this.root) {\n    return this.root.queryPoint(p, cb);\n  }\n};\ntproto.queryInterval = function (lo, hi, cb) {\n  if (lo <= hi && this.root) {\n    return this.root.queryInterval(lo, hi, cb);\n  }\n};\nObject.defineProperty(tproto, \"count\", {\n  get: function get() {\n    if (this.root) {\n      return this.root.count;\n    }\n    return 0;\n  }\n});\nObject.defineProperty(tproto, \"intervals\", {\n  get: function get() {\n    if (this.root) {\n      return this.root.intervals([]);\n    }\n    return [];\n  }\n});\nfunction createWrapper(intervals) {\n  if (!intervals || intervals.length === 0) {\n    return new IntervalTree(null);\n  }\n  return new IntervalTree(createIntervalTree(intervals));\n}","map":{"version":3,"names":["bounds","require","NOT_FOUND","SUCCESS","EMPTY","module","exports","createWrapper","IntervalTreeNode","mid","left","right","leftPoints","rightPoints","count","length","proto","prototype","copy","a","b","rebuild","node","intervals","ntree","createIntervalTree","rebuildWithInterval","interval","push","rebuildWithoutInterval","idx","indexOf","splice","result","apply","insert","weight","l","ge","compareBegin","r","compareEnd","remove","rw","lw","p","n","reportLeftRange","arr","hi","cb","i","reportRightRange","lo","reportRange","queryPoint","x","queryInterval","compareNumbers","d","pts","sort","leftIntervals","rightIntervals","centerIntervals","s","slice","IntervalTree","root","tproto","Object","defineProperty","get"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/interval-tree-1d/interval-tree.js"],"sourcesContent":["\"use strict\"\n\nvar bounds = require(\"binary-search-bounds\")\n\nvar NOT_FOUND = 0\nvar SUCCESS = 1\nvar EMPTY = 2\n\nmodule.exports = createWrapper\n\nfunction IntervalTreeNode(mid, left, right, leftPoints, rightPoints) {\n  this.mid = mid\n  this.left = left\n  this.right = right\n  this.leftPoints = leftPoints\n  this.rightPoints = rightPoints\n  this.count = (left ? left.count : 0) + (right ? right.count : 0) + leftPoints.length\n}\n\nvar proto = IntervalTreeNode.prototype\n\nfunction copy(a, b) {\n  a.mid = b.mid\n  a.left = b.left\n  a.right = b.right\n  a.leftPoints = b.leftPoints\n  a.rightPoints = b.rightPoints\n  a.count = b.count\n}\n\nfunction rebuild(node, intervals) {\n  var ntree = createIntervalTree(intervals)\n  node.mid = ntree.mid\n  node.left = ntree.left\n  node.right = ntree.right\n  node.leftPoints = ntree.leftPoints\n  node.rightPoints = ntree.rightPoints\n  node.count = ntree.count\n}\n\nfunction rebuildWithInterval(node, interval) {\n  var intervals = node.intervals([])\n  intervals.push(interval)\n  rebuild(node, intervals)    \n}\n\nfunction rebuildWithoutInterval(node, interval) {\n  var intervals = node.intervals([])\n  var idx = intervals.indexOf(interval)\n  if(idx < 0) {\n    return NOT_FOUND\n  }\n  intervals.splice(idx, 1)\n  rebuild(node, intervals)\n  return SUCCESS\n}\n\nproto.intervals = function(result) {\n  result.push.apply(result, this.leftPoints)\n  if(this.left) {\n    this.left.intervals(result)\n  }\n  if(this.right) {\n    this.right.intervals(result)\n  }\n  return result\n}\n\nproto.insert = function(interval) {\n  var weight = this.count - this.leftPoints.length\n  this.count += 1\n  if(interval[1] < this.mid) {\n    if(this.left) {\n      if(4*(this.left.count+1) > 3*(weight+1)) {\n        rebuildWithInterval(this, interval)\n      } else {\n        this.left.insert(interval)\n      }\n    } else {\n      this.left = createIntervalTree([interval])\n    }\n  } else if(interval[0] > this.mid) {\n    if(this.right) {\n      if(4*(this.right.count+1) > 3*(weight+1)) {\n        rebuildWithInterval(this, interval)\n      } else {\n        this.right.insert(interval)\n      }\n    } else {\n      this.right = createIntervalTree([interval])\n    }\n  } else {\n    var l = bounds.ge(this.leftPoints, interval, compareBegin)\n    var r = bounds.ge(this.rightPoints, interval, compareEnd)\n    this.leftPoints.splice(l, 0, interval)\n    this.rightPoints.splice(r, 0, interval)\n  }\n}\n\nproto.remove = function(interval) {\n  var weight = this.count - this.leftPoints\n  if(interval[1] < this.mid) {\n    if(!this.left) {\n      return NOT_FOUND\n    }\n    var rw = this.right ? this.right.count : 0\n    if(4 * rw > 3 * (weight-1)) {\n      return rebuildWithoutInterval(this, interval)\n    }\n    var r = this.left.remove(interval)\n    if(r === EMPTY) {\n      this.left = null\n      this.count -= 1\n      return SUCCESS\n    } else if(r === SUCCESS) {\n      this.count -= 1\n    }\n    return r\n  } else if(interval[0] > this.mid) {\n    if(!this.right) {\n      return NOT_FOUND\n    }\n    var lw = this.left ? this.left.count : 0\n    if(4 * lw > 3 * (weight-1)) {\n      return rebuildWithoutInterval(this, interval)\n    }\n    var r = this.right.remove(interval)\n    if(r === EMPTY) {\n      this.right = null\n      this.count -= 1\n      return SUCCESS\n    } else if(r === SUCCESS) {\n      this.count -= 1\n    }\n    return r\n  } else {\n    if(this.count === 1) {\n      if(this.leftPoints[0] === interval) {\n        return EMPTY\n      } else {\n        return NOT_FOUND\n      }\n    }\n    if(this.leftPoints.length === 1 && this.leftPoints[0] === interval) {\n      if(this.left && this.right) {\n        var p = this\n        var n = this.left\n        while(n.right) {\n          p = n\n          n = n.right\n        }\n        if(p === this) {\n          n.right = this.right\n        } else {\n          var l = this.left\n          var r = this.right\n          p.count -= n.count\n          p.right = n.left\n          n.left = l\n          n.right = r\n        }\n        copy(this, n)\n        this.count = (this.left?this.left.count:0) + (this.right?this.right.count:0) + this.leftPoints.length\n      } else if(this.left) {\n        copy(this, this.left)\n      } else {\n        copy(this, this.right)\n      }\n      return SUCCESS\n    }\n    for(var l = bounds.ge(this.leftPoints, interval, compareBegin); l<this.leftPoints.length; ++l) {\n      if(this.leftPoints[l][0] !== interval[0]) {\n        break\n      }\n      if(this.leftPoints[l] === interval) {\n        this.count -= 1\n        this.leftPoints.splice(l, 1)\n        for(var r = bounds.ge(this.rightPoints, interval, compareEnd); r<this.rightPoints.length; ++r) {\n          if(this.rightPoints[r][1] !== interval[1]) {\n            break\n          } else if(this.rightPoints[r] === interval) {\n            this.rightPoints.splice(r, 1)\n            return SUCCESS\n          }\n        }\n      }\n    }\n    return NOT_FOUND\n  }\n}\n\nfunction reportLeftRange(arr, hi, cb) {\n  for(var i=0; i<arr.length && arr[i][0] <= hi; ++i) {\n    var r = cb(arr[i])\n    if(r) { return r }\n  }\n}\n\nfunction reportRightRange(arr, lo, cb) {\n  for(var i=arr.length-1; i>=0 && arr[i][1] >= lo; --i) {\n    var r = cb(arr[i])\n    if(r) { return r }\n  }\n}\n\nfunction reportRange(arr, cb) {\n  for(var i=0; i<arr.length; ++i) {\n    var r = cb(arr[i])\n    if(r) { return r }\n  }\n}\n\nproto.queryPoint = function(x, cb) {\n  if(x < this.mid) {\n    if(this.left) {\n      var r = this.left.queryPoint(x, cb)\n      if(r) { return r }\n    }\n    return reportLeftRange(this.leftPoints, x, cb)\n  } else if(x > this.mid) {\n    if(this.right) {\n      var r = this.right.queryPoint(x, cb)\n      if(r) { return r }\n    }\n    return reportRightRange(this.rightPoints, x, cb)\n  } else {\n    return reportRange(this.leftPoints, cb)\n  }\n}\n\nproto.queryInterval = function(lo, hi, cb) {\n  if(lo < this.mid && this.left) {\n    var r = this.left.queryInterval(lo, hi, cb)\n    if(r) { return r }\n  }\n  if(hi > this.mid && this.right) {\n    var r = this.right.queryInterval(lo, hi, cb)\n    if(r) { return r }\n  }\n  if(hi < this.mid) {\n    return reportLeftRange(this.leftPoints, hi, cb)\n  } else if(lo > this.mid) {\n    return reportRightRange(this.rightPoints, lo, cb)\n  } else {\n    return reportRange(this.leftPoints, cb)\n  }\n}\n\nfunction compareNumbers(a, b) {\n  return a - b\n}\n\nfunction compareBegin(a, b) {\n  var d = a[0] - b[0]\n  if(d) { return d }\n  return a[1] - b[1]\n}\n\nfunction compareEnd(a, b) {\n  var d = a[1] - b[1]\n  if(d) { return d }\n  return a[0] - b[0]\n}\n\nfunction createIntervalTree(intervals) {\n  if(intervals.length === 0) {\n    return null\n  }\n  var pts = []\n  for(var i=0; i<intervals.length; ++i) {\n    pts.push(intervals[i][0], intervals[i][1])\n  }\n  pts.sort(compareNumbers)\n\n  var mid = pts[pts.length>>1]\n\n  var leftIntervals = []\n  var rightIntervals = []\n  var centerIntervals = []\n  for(var i=0; i<intervals.length; ++i) {\n    var s = intervals[i]\n    if(s[1] < mid) {\n      leftIntervals.push(s)\n    } else if(mid < s[0]) {\n      rightIntervals.push(s)\n    } else {\n      centerIntervals.push(s)\n    }\n  }\n\n  //Split center intervals\n  var leftPoints = centerIntervals\n  var rightPoints = centerIntervals.slice()\n  leftPoints.sort(compareBegin)\n  rightPoints.sort(compareEnd)\n\n  return new IntervalTreeNode(mid, \n    createIntervalTree(leftIntervals),\n    createIntervalTree(rightIntervals),\n    leftPoints,\n    rightPoints)\n}\n\n//User friendly wrapper that makes it possible to support empty trees\nfunction IntervalTree(root) {\n  this.root = root\n}\n\nvar tproto = IntervalTree.prototype\n\ntproto.insert = function(interval) {\n  if(this.root) {\n    this.root.insert(interval)\n  } else {\n    this.root = new IntervalTreeNode(interval[0], null, null, [interval], [interval])\n  }\n}\n\ntproto.remove = function(interval) {\n  if(this.root) {\n    var r = this.root.remove(interval)\n    if(r === EMPTY) {\n      this.root = null\n    }\n    return r !== NOT_FOUND\n  }\n  return false\n}\n\ntproto.queryPoint = function(p, cb) {\n  if(this.root) {\n    return this.root.queryPoint(p, cb)\n  }\n}\n\ntproto.queryInterval = function(lo, hi, cb) {\n  if(lo <= hi && this.root) {\n    return this.root.queryInterval(lo, hi, cb)\n  }\n}\n\nObject.defineProperty(tproto, \"count\", {\n  get: function() {\n    if(this.root) {\n      return this.root.count\n    }\n    return 0\n  }\n})\n\nObject.defineProperty(tproto, \"intervals\", {\n  get: function() {\n    if(this.root) {\n      return this.root.intervals([])\n    }\n    return []\n  }\n})\n\nfunction createWrapper(intervals) {\n  if(!intervals || intervals.length === 0) {\n    return new IntervalTree(null)\n  }\n  return new IntervalTree(createIntervalTree(intervals))\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAE5C,IAAIC,SAAS,GAAG,CAAC;AACjB,IAAIC,OAAO,GAAG,CAAC;AACf,IAAIC,KAAK,GAAG,CAAC;AAEbC,MAAM,CAACC,OAAO,GAAGC,aAAa;AAE9B,SAASC,gBAAgB,CAACC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,UAAU,EAAEC,WAAW,EAAE;EACnE,IAAI,CAACJ,GAAG,GAAGA,GAAG;EACd,IAAI,CAACC,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC5B,IAAI,CAACC,WAAW,GAAGA,WAAW;EAC9B,IAAI,CAACC,KAAK,GAAG,CAACJ,IAAI,GAAGA,IAAI,CAACI,KAAK,GAAG,CAAC,KAAKH,KAAK,GAAGA,KAAK,CAACG,KAAK,GAAG,CAAC,CAAC,GAAGF,UAAU,CAACG,MAAM;AACtF;AAEA,IAAIC,KAAK,GAAGR,gBAAgB,CAACS,SAAS;AAEtC,SAASC,IAAI,CAACC,CAAC,EAAEC,CAAC,EAAE;EAClBD,CAAC,CAACV,GAAG,GAAGW,CAAC,CAACX,GAAG;EACbU,CAAC,CAACT,IAAI,GAAGU,CAAC,CAACV,IAAI;EACfS,CAAC,CAACR,KAAK,GAAGS,CAAC,CAACT,KAAK;EACjBQ,CAAC,CAACP,UAAU,GAAGQ,CAAC,CAACR,UAAU;EAC3BO,CAAC,CAACN,WAAW,GAAGO,CAAC,CAACP,WAAW;EAC7BM,CAAC,CAACL,KAAK,GAAGM,CAAC,CAACN,KAAK;AACnB;AAEA,SAASO,OAAO,CAACC,IAAI,EAAEC,SAAS,EAAE;EAChC,IAAIC,KAAK,GAAGC,kBAAkB,CAACF,SAAS,CAAC;EACzCD,IAAI,CAACb,GAAG,GAAGe,KAAK,CAACf,GAAG;EACpBa,IAAI,CAACZ,IAAI,GAAGc,KAAK,CAACd,IAAI;EACtBY,IAAI,CAACX,KAAK,GAAGa,KAAK,CAACb,KAAK;EACxBW,IAAI,CAACV,UAAU,GAAGY,KAAK,CAACZ,UAAU;EAClCU,IAAI,CAACT,WAAW,GAAGW,KAAK,CAACX,WAAW;EACpCS,IAAI,CAACR,KAAK,GAAGU,KAAK,CAACV,KAAK;AAC1B;AAEA,SAASY,mBAAmB,CAACJ,IAAI,EAAEK,QAAQ,EAAE;EAC3C,IAAIJ,SAAS,GAAGD,IAAI,CAACC,SAAS,CAAC,EAAE,CAAC;EAClCA,SAAS,CAACK,IAAI,CAACD,QAAQ,CAAC;EACxBN,OAAO,CAACC,IAAI,EAAEC,SAAS,CAAC;AAC1B;AAEA,SAASM,sBAAsB,CAACP,IAAI,EAAEK,QAAQ,EAAE;EAC9C,IAAIJ,SAAS,GAAGD,IAAI,CAACC,SAAS,CAAC,EAAE,CAAC;EAClC,IAAIO,GAAG,GAAGP,SAAS,CAACQ,OAAO,CAACJ,QAAQ,CAAC;EACrC,IAAGG,GAAG,GAAG,CAAC,EAAE;IACV,OAAO5B,SAAS;EAClB;EACAqB,SAAS,CAACS,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;EACxBT,OAAO,CAACC,IAAI,EAAEC,SAAS,CAAC;EACxB,OAAOpB,OAAO;AAChB;AAEAa,KAAK,CAACO,SAAS,GAAG,UAASU,MAAM,EAAE;EACjCA,MAAM,CAACL,IAAI,CAACM,KAAK,CAACD,MAAM,EAAE,IAAI,CAACrB,UAAU,CAAC;EAC1C,IAAG,IAAI,CAACF,IAAI,EAAE;IACZ,IAAI,CAACA,IAAI,CAACa,SAAS,CAACU,MAAM,CAAC;EAC7B;EACA,IAAG,IAAI,CAACtB,KAAK,EAAE;IACb,IAAI,CAACA,KAAK,CAACY,SAAS,CAACU,MAAM,CAAC;EAC9B;EACA,OAAOA,MAAM;AACf,CAAC;AAEDjB,KAAK,CAACmB,MAAM,GAAG,UAASR,QAAQ,EAAE;EAChC,IAAIS,MAAM,GAAG,IAAI,CAACtB,KAAK,GAAG,IAAI,CAACF,UAAU,CAACG,MAAM;EAChD,IAAI,CAACD,KAAK,IAAI,CAAC;EACf,IAAGa,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAClB,GAAG,EAAE;IACzB,IAAG,IAAI,CAACC,IAAI,EAAE;MACZ,IAAG,CAAC,IAAE,IAAI,CAACA,IAAI,CAACI,KAAK,GAAC,CAAC,CAAC,GAAG,CAAC,IAAEsB,MAAM,GAAC,CAAC,CAAC,EAAE;QACvCV,mBAAmB,CAAC,IAAI,EAAEC,QAAQ,CAAC;MACrC,CAAC,MAAM;QACL,IAAI,CAACjB,IAAI,CAACyB,MAAM,CAACR,QAAQ,CAAC;MAC5B;IACF,CAAC,MAAM;MACL,IAAI,CAACjB,IAAI,GAAGe,kBAAkB,CAAC,CAACE,QAAQ,CAAC,CAAC;IAC5C;EACF,CAAC,MAAM,IAAGA,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAClB,GAAG,EAAE;IAChC,IAAG,IAAI,CAACE,KAAK,EAAE;MACb,IAAG,CAAC,IAAE,IAAI,CAACA,KAAK,CAACG,KAAK,GAAC,CAAC,CAAC,GAAG,CAAC,IAAEsB,MAAM,GAAC,CAAC,CAAC,EAAE;QACxCV,mBAAmB,CAAC,IAAI,EAAEC,QAAQ,CAAC;MACrC,CAAC,MAAM;QACL,IAAI,CAAChB,KAAK,CAACwB,MAAM,CAACR,QAAQ,CAAC;MAC7B;IACF,CAAC,MAAM;MACL,IAAI,CAAChB,KAAK,GAAGc,kBAAkB,CAAC,CAACE,QAAQ,CAAC,CAAC;IAC7C;EACF,CAAC,MAAM;IACL,IAAIU,CAAC,GAAGrC,MAAM,CAACsC,EAAE,CAAC,IAAI,CAAC1B,UAAU,EAAEe,QAAQ,EAAEY,YAAY,CAAC;IAC1D,IAAIC,CAAC,GAAGxC,MAAM,CAACsC,EAAE,CAAC,IAAI,CAACzB,WAAW,EAAEc,QAAQ,EAAEc,UAAU,CAAC;IACzD,IAAI,CAAC7B,UAAU,CAACoB,MAAM,CAACK,CAAC,EAAE,CAAC,EAAEV,QAAQ,CAAC;IACtC,IAAI,CAACd,WAAW,CAACmB,MAAM,CAACQ,CAAC,EAAE,CAAC,EAAEb,QAAQ,CAAC;EACzC;AACF,CAAC;AAEDX,KAAK,CAAC0B,MAAM,GAAG,UAASf,QAAQ,EAAE;EAChC,IAAIS,MAAM,GAAG,IAAI,CAACtB,KAAK,GAAG,IAAI,CAACF,UAAU;EACzC,IAAGe,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAClB,GAAG,EAAE;IACzB,IAAG,CAAC,IAAI,CAACC,IAAI,EAAE;MACb,OAAOR,SAAS;IAClB;IACA,IAAIyC,EAAE,GAAG,IAAI,CAAChC,KAAK,GAAG,IAAI,CAACA,KAAK,CAACG,KAAK,GAAG,CAAC;IAC1C,IAAG,CAAC,GAAG6B,EAAE,GAAG,CAAC,IAAIP,MAAM,GAAC,CAAC,CAAC,EAAE;MAC1B,OAAOP,sBAAsB,CAAC,IAAI,EAAEF,QAAQ,CAAC;IAC/C;IACA,IAAIa,CAAC,GAAG,IAAI,CAAC9B,IAAI,CAACgC,MAAM,CAACf,QAAQ,CAAC;IAClC,IAAGa,CAAC,KAAKpC,KAAK,EAAE;MACd,IAAI,CAACM,IAAI,GAAG,IAAI;MAChB,IAAI,CAACI,KAAK,IAAI,CAAC;MACf,OAAOX,OAAO;IAChB,CAAC,MAAM,IAAGqC,CAAC,KAAKrC,OAAO,EAAE;MACvB,IAAI,CAACW,KAAK,IAAI,CAAC;IACjB;IACA,OAAO0B,CAAC;EACV,CAAC,MAAM,IAAGb,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAClB,GAAG,EAAE;IAChC,IAAG,CAAC,IAAI,CAACE,KAAK,EAAE;MACd,OAAOT,SAAS;IAClB;IACA,IAAI0C,EAAE,GAAG,IAAI,CAAClC,IAAI,GAAG,IAAI,CAACA,IAAI,CAACI,KAAK,GAAG,CAAC;IACxC,IAAG,CAAC,GAAG8B,EAAE,GAAG,CAAC,IAAIR,MAAM,GAAC,CAAC,CAAC,EAAE;MAC1B,OAAOP,sBAAsB,CAAC,IAAI,EAAEF,QAAQ,CAAC;IAC/C;IACA,IAAIa,CAAC,GAAG,IAAI,CAAC7B,KAAK,CAAC+B,MAAM,CAACf,QAAQ,CAAC;IACnC,IAAGa,CAAC,KAAKpC,KAAK,EAAE;MACd,IAAI,CAACO,KAAK,GAAG,IAAI;MACjB,IAAI,CAACG,KAAK,IAAI,CAAC;MACf,OAAOX,OAAO;IAChB,CAAC,MAAM,IAAGqC,CAAC,KAAKrC,OAAO,EAAE;MACvB,IAAI,CAACW,KAAK,IAAI,CAAC;IACjB;IACA,OAAO0B,CAAC;EACV,CAAC,MAAM;IACL,IAAG,IAAI,CAAC1B,KAAK,KAAK,CAAC,EAAE;MACnB,IAAG,IAAI,CAACF,UAAU,CAAC,CAAC,CAAC,KAAKe,QAAQ,EAAE;QAClC,OAAOvB,KAAK;MACd,CAAC,MAAM;QACL,OAAOF,SAAS;MAClB;IACF;IACA,IAAG,IAAI,CAACU,UAAU,CAACG,MAAM,KAAK,CAAC,IAAI,IAAI,CAACH,UAAU,CAAC,CAAC,CAAC,KAAKe,QAAQ,EAAE;MAClE,IAAG,IAAI,CAACjB,IAAI,IAAI,IAAI,CAACC,KAAK,EAAE;QAC1B,IAAIkC,CAAC,GAAG,IAAI;QACZ,IAAIC,CAAC,GAAG,IAAI,CAACpC,IAAI;QACjB,OAAMoC,CAAC,CAACnC,KAAK,EAAE;UACbkC,CAAC,GAAGC,CAAC;UACLA,CAAC,GAAGA,CAAC,CAACnC,KAAK;QACb;QACA,IAAGkC,CAAC,KAAK,IAAI,EAAE;UACbC,CAAC,CAACnC,KAAK,GAAG,IAAI,CAACA,KAAK;QACtB,CAAC,MAAM;UACL,IAAI0B,CAAC,GAAG,IAAI,CAAC3B,IAAI;UACjB,IAAI8B,CAAC,GAAG,IAAI,CAAC7B,KAAK;UAClBkC,CAAC,CAAC/B,KAAK,IAAIgC,CAAC,CAAChC,KAAK;UAClB+B,CAAC,CAAClC,KAAK,GAAGmC,CAAC,CAACpC,IAAI;UAChBoC,CAAC,CAACpC,IAAI,GAAG2B,CAAC;UACVS,CAAC,CAACnC,KAAK,GAAG6B,CAAC;QACb;QACAtB,IAAI,CAAC,IAAI,EAAE4B,CAAC,CAAC;QACb,IAAI,CAAChC,KAAK,GAAG,CAAC,IAAI,CAACJ,IAAI,GAAC,IAAI,CAACA,IAAI,CAACI,KAAK,GAAC,CAAC,KAAK,IAAI,CAACH,KAAK,GAAC,IAAI,CAACA,KAAK,CAACG,KAAK,GAAC,CAAC,CAAC,GAAG,IAAI,CAACF,UAAU,CAACG,MAAM;MACvG,CAAC,MAAM,IAAG,IAAI,CAACL,IAAI,EAAE;QACnBQ,IAAI,CAAC,IAAI,EAAE,IAAI,CAACR,IAAI,CAAC;MACvB,CAAC,MAAM;QACLQ,IAAI,CAAC,IAAI,EAAE,IAAI,CAACP,KAAK,CAAC;MACxB;MACA,OAAOR,OAAO;IAChB;IACA,KAAI,IAAIkC,CAAC,GAAGrC,MAAM,CAACsC,EAAE,CAAC,IAAI,CAAC1B,UAAU,EAAEe,QAAQ,EAAEY,YAAY,CAAC,EAAEF,CAAC,GAAC,IAAI,CAACzB,UAAU,CAACG,MAAM,EAAE,EAAEsB,CAAC,EAAE;MAC7F,IAAG,IAAI,CAACzB,UAAU,CAACyB,CAAC,CAAC,CAAC,CAAC,CAAC,KAAKV,QAAQ,CAAC,CAAC,CAAC,EAAE;QACxC;MACF;MACA,IAAG,IAAI,CAACf,UAAU,CAACyB,CAAC,CAAC,KAAKV,QAAQ,EAAE;QAClC,IAAI,CAACb,KAAK,IAAI,CAAC;QACf,IAAI,CAACF,UAAU,CAACoB,MAAM,CAACK,CAAC,EAAE,CAAC,CAAC;QAC5B,KAAI,IAAIG,CAAC,GAAGxC,MAAM,CAACsC,EAAE,CAAC,IAAI,CAACzB,WAAW,EAAEc,QAAQ,EAAEc,UAAU,CAAC,EAAED,CAAC,GAAC,IAAI,CAAC3B,WAAW,CAACE,MAAM,EAAE,EAAEyB,CAAC,EAAE;UAC7F,IAAG,IAAI,CAAC3B,WAAW,CAAC2B,CAAC,CAAC,CAAC,CAAC,CAAC,KAAKb,QAAQ,CAAC,CAAC,CAAC,EAAE;YACzC;UACF,CAAC,MAAM,IAAG,IAAI,CAACd,WAAW,CAAC2B,CAAC,CAAC,KAAKb,QAAQ,EAAE;YAC1C,IAAI,CAACd,WAAW,CAACmB,MAAM,CAACQ,CAAC,EAAE,CAAC,CAAC;YAC7B,OAAOrC,OAAO;UAChB;QACF;MACF;IACF;IACA,OAAOD,SAAS;EAClB;AACF,CAAC;AAED,SAAS6C,eAAe,CAACC,GAAG,EAAEC,EAAE,EAAEC,EAAE,EAAE;EACpC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACH,GAAG,CAACjC,MAAM,IAAIiC,GAAG,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIF,EAAE,EAAE,EAAEE,CAAC,EAAE;IACjD,IAAIX,CAAC,GAAGU,EAAE,CAACF,GAAG,CAACG,CAAC,CAAC,CAAC;IAClB,IAAGX,CAAC,EAAE;MAAE,OAAOA,CAAC;IAAC;EACnB;AACF;AAEA,SAASY,gBAAgB,CAACJ,GAAG,EAAEK,EAAE,EAAEH,EAAE,EAAE;EACrC,KAAI,IAAIC,CAAC,GAACH,GAAG,CAACjC,MAAM,GAAC,CAAC,EAAEoC,CAAC,IAAE,CAAC,IAAIH,GAAG,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIE,EAAE,EAAE,EAAEF,CAAC,EAAE;IACpD,IAAIX,CAAC,GAAGU,EAAE,CAACF,GAAG,CAACG,CAAC,CAAC,CAAC;IAClB,IAAGX,CAAC,EAAE;MAAE,OAAOA,CAAC;IAAC;EACnB;AACF;AAEA,SAASc,WAAW,CAACN,GAAG,EAAEE,EAAE,EAAE;EAC5B,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACH,GAAG,CAACjC,MAAM,EAAE,EAAEoC,CAAC,EAAE;IAC9B,IAAIX,CAAC,GAAGU,EAAE,CAACF,GAAG,CAACG,CAAC,CAAC,CAAC;IAClB,IAAGX,CAAC,EAAE;MAAE,OAAOA,CAAC;IAAC;EACnB;AACF;AAEAxB,KAAK,CAACuC,UAAU,GAAG,UAASC,CAAC,EAAEN,EAAE,EAAE;EACjC,IAAGM,CAAC,GAAG,IAAI,CAAC/C,GAAG,EAAE;IACf,IAAG,IAAI,CAACC,IAAI,EAAE;MACZ,IAAI8B,CAAC,GAAG,IAAI,CAAC9B,IAAI,CAAC6C,UAAU,CAACC,CAAC,EAAEN,EAAE,CAAC;MACnC,IAAGV,CAAC,EAAE;QAAE,OAAOA,CAAC;MAAC;IACnB;IACA,OAAOO,eAAe,CAAC,IAAI,CAACnC,UAAU,EAAE4C,CAAC,EAAEN,EAAE,CAAC;EAChD,CAAC,MAAM,IAAGM,CAAC,GAAG,IAAI,CAAC/C,GAAG,EAAE;IACtB,IAAG,IAAI,CAACE,KAAK,EAAE;MACb,IAAI6B,CAAC,GAAG,IAAI,CAAC7B,KAAK,CAAC4C,UAAU,CAACC,CAAC,EAAEN,EAAE,CAAC;MACpC,IAAGV,CAAC,EAAE;QAAE,OAAOA,CAAC;MAAC;IACnB;IACA,OAAOY,gBAAgB,CAAC,IAAI,CAACvC,WAAW,EAAE2C,CAAC,EAAEN,EAAE,CAAC;EAClD,CAAC,MAAM;IACL,OAAOI,WAAW,CAAC,IAAI,CAAC1C,UAAU,EAAEsC,EAAE,CAAC;EACzC;AACF,CAAC;AAEDlC,KAAK,CAACyC,aAAa,GAAG,UAASJ,EAAE,EAAEJ,EAAE,EAAEC,EAAE,EAAE;EACzC,IAAGG,EAAE,GAAG,IAAI,CAAC5C,GAAG,IAAI,IAAI,CAACC,IAAI,EAAE;IAC7B,IAAI8B,CAAC,GAAG,IAAI,CAAC9B,IAAI,CAAC+C,aAAa,CAACJ,EAAE,EAAEJ,EAAE,EAAEC,EAAE,CAAC;IAC3C,IAAGV,CAAC,EAAE;MAAE,OAAOA,CAAC;IAAC;EACnB;EACA,IAAGS,EAAE,GAAG,IAAI,CAACxC,GAAG,IAAI,IAAI,CAACE,KAAK,EAAE;IAC9B,IAAI6B,CAAC,GAAG,IAAI,CAAC7B,KAAK,CAAC8C,aAAa,CAACJ,EAAE,EAAEJ,EAAE,EAAEC,EAAE,CAAC;IAC5C,IAAGV,CAAC,EAAE;MAAE,OAAOA,CAAC;IAAC;EACnB;EACA,IAAGS,EAAE,GAAG,IAAI,CAACxC,GAAG,EAAE;IAChB,OAAOsC,eAAe,CAAC,IAAI,CAACnC,UAAU,EAAEqC,EAAE,EAAEC,EAAE,CAAC;EACjD,CAAC,MAAM,IAAGG,EAAE,GAAG,IAAI,CAAC5C,GAAG,EAAE;IACvB,OAAO2C,gBAAgB,CAAC,IAAI,CAACvC,WAAW,EAAEwC,EAAE,EAAEH,EAAE,CAAC;EACnD,CAAC,MAAM;IACL,OAAOI,WAAW,CAAC,IAAI,CAAC1C,UAAU,EAAEsC,EAAE,CAAC;EACzC;AACF,CAAC;AAED,SAASQ,cAAc,CAACvC,CAAC,EAAEC,CAAC,EAAE;EAC5B,OAAOD,CAAC,GAAGC,CAAC;AACd;AAEA,SAASmB,YAAY,CAACpB,CAAC,EAAEC,CAAC,EAAE;EAC1B,IAAIuC,CAAC,GAAGxC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC;EACnB,IAAGuC,CAAC,EAAE;IAAE,OAAOA,CAAC;EAAC;EACjB,OAAOxC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC;AACpB;AAEA,SAASqB,UAAU,CAACtB,CAAC,EAAEC,CAAC,EAAE;EACxB,IAAIuC,CAAC,GAAGxC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC;EACnB,IAAGuC,CAAC,EAAE;IAAE,OAAOA,CAAC;EAAC;EACjB,OAAOxC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC;AACpB;AAEA,SAASK,kBAAkB,CAACF,SAAS,EAAE;EACrC,IAAGA,SAAS,CAACR,MAAM,KAAK,CAAC,EAAE;IACzB,OAAO,IAAI;EACb;EACA,IAAI6C,GAAG,GAAG,EAAE;EACZ,KAAI,IAAIT,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC5B,SAAS,CAACR,MAAM,EAAE,EAAEoC,CAAC,EAAE;IACpCS,GAAG,CAAChC,IAAI,CAACL,SAAS,CAAC4B,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE5B,SAAS,CAAC4B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5C;EACAS,GAAG,CAACC,IAAI,CAACH,cAAc,CAAC;EAExB,IAAIjD,GAAG,GAAGmD,GAAG,CAACA,GAAG,CAAC7C,MAAM,IAAE,CAAC,CAAC;EAE5B,IAAI+C,aAAa,GAAG,EAAE;EACtB,IAAIC,cAAc,GAAG,EAAE;EACvB,IAAIC,eAAe,GAAG,EAAE;EACxB,KAAI,IAAIb,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC5B,SAAS,CAACR,MAAM,EAAE,EAAEoC,CAAC,EAAE;IACpC,IAAIc,CAAC,GAAG1C,SAAS,CAAC4B,CAAC,CAAC;IACpB,IAAGc,CAAC,CAAC,CAAC,CAAC,GAAGxD,GAAG,EAAE;MACbqD,aAAa,CAAClC,IAAI,CAACqC,CAAC,CAAC;IACvB,CAAC,MAAM,IAAGxD,GAAG,GAAGwD,CAAC,CAAC,CAAC,CAAC,EAAE;MACpBF,cAAc,CAACnC,IAAI,CAACqC,CAAC,CAAC;IACxB,CAAC,MAAM;MACLD,eAAe,CAACpC,IAAI,CAACqC,CAAC,CAAC;IACzB;EACF;;EAEA;EACA,IAAIrD,UAAU,GAAGoD,eAAe;EAChC,IAAInD,WAAW,GAAGmD,eAAe,CAACE,KAAK,EAAE;EACzCtD,UAAU,CAACiD,IAAI,CAACtB,YAAY,CAAC;EAC7B1B,WAAW,CAACgD,IAAI,CAACpB,UAAU,CAAC;EAE5B,OAAO,IAAIjC,gBAAgB,CAACC,GAAG,EAC7BgB,kBAAkB,CAACqC,aAAa,CAAC,EACjCrC,kBAAkB,CAACsC,cAAc,CAAC,EAClCnD,UAAU,EACVC,WAAW,CAAC;AAChB;;AAEA;AACA,SAASsD,YAAY,CAACC,IAAI,EAAE;EAC1B,IAAI,CAACA,IAAI,GAAGA,IAAI;AAClB;AAEA,IAAIC,MAAM,GAAGF,YAAY,CAAClD,SAAS;AAEnCoD,MAAM,CAAClC,MAAM,GAAG,UAASR,QAAQ,EAAE;EACjC,IAAG,IAAI,CAACyC,IAAI,EAAE;IACZ,IAAI,CAACA,IAAI,CAACjC,MAAM,CAACR,QAAQ,CAAC;EAC5B,CAAC,MAAM;IACL,IAAI,CAACyC,IAAI,GAAG,IAAI5D,gBAAgB,CAACmB,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAACA,QAAQ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EACnF;AACF,CAAC;AAED0C,MAAM,CAAC3B,MAAM,GAAG,UAASf,QAAQ,EAAE;EACjC,IAAG,IAAI,CAACyC,IAAI,EAAE;IACZ,IAAI5B,CAAC,GAAG,IAAI,CAAC4B,IAAI,CAAC1B,MAAM,CAACf,QAAQ,CAAC;IAClC,IAAGa,CAAC,KAAKpC,KAAK,EAAE;MACd,IAAI,CAACgE,IAAI,GAAG,IAAI;IAClB;IACA,OAAO5B,CAAC,KAAKtC,SAAS;EACxB;EACA,OAAO,KAAK;AACd,CAAC;AAEDmE,MAAM,CAACd,UAAU,GAAG,UAASV,CAAC,EAAEK,EAAE,EAAE;EAClC,IAAG,IAAI,CAACkB,IAAI,EAAE;IACZ,OAAO,IAAI,CAACA,IAAI,CAACb,UAAU,CAACV,CAAC,EAAEK,EAAE,CAAC;EACpC;AACF,CAAC;AAEDmB,MAAM,CAACZ,aAAa,GAAG,UAASJ,EAAE,EAAEJ,EAAE,EAAEC,EAAE,EAAE;EAC1C,IAAGG,EAAE,IAAIJ,EAAE,IAAI,IAAI,CAACmB,IAAI,EAAE;IACxB,OAAO,IAAI,CAACA,IAAI,CAACX,aAAa,CAACJ,EAAE,EAAEJ,EAAE,EAAEC,EAAE,CAAC;EAC5C;AACF,CAAC;AAEDoB,MAAM,CAACC,cAAc,CAACF,MAAM,EAAE,OAAO,EAAE;EACrCG,GAAG,EAAE,eAAW;IACd,IAAG,IAAI,CAACJ,IAAI,EAAE;MACZ,OAAO,IAAI,CAACA,IAAI,CAACtD,KAAK;IACxB;IACA,OAAO,CAAC;EACV;AACF,CAAC,CAAC;AAEFwD,MAAM,CAACC,cAAc,CAACF,MAAM,EAAE,WAAW,EAAE;EACzCG,GAAG,EAAE,eAAW;IACd,IAAG,IAAI,CAACJ,IAAI,EAAE;MACZ,OAAO,IAAI,CAACA,IAAI,CAAC7C,SAAS,CAAC,EAAE,CAAC;IAChC;IACA,OAAO,EAAE;EACX;AACF,CAAC,CAAC;AAEF,SAAShB,aAAa,CAACgB,SAAS,EAAE;EAChC,IAAG,CAACA,SAAS,IAAIA,SAAS,CAACR,MAAM,KAAK,CAAC,EAAE;IACvC,OAAO,IAAIoD,YAAY,CAAC,IAAI,CAAC;EAC/B;EACA,OAAO,IAAIA,YAAY,CAAC1C,kBAAkB,CAACF,SAAS,CAAC,CAAC;AACxD"},"metadata":{},"sourceType":"script","externalDependencies":[]}
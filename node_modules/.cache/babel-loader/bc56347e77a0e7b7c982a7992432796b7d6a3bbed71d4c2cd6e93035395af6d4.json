{"ast":null,"code":"'use strict';\n\nvar getBounds = require('array-bounds');\nmodule.exports = normalize;\nfunction normalize(arr, dim, bounds) {\n  if (!arr || arr.length == null) throw Error('Argument should be an array');\n  if (dim == null) dim = 1;\n  if (bounds == null) bounds = getBounds(arr, dim);\n  for (var offset = 0; offset < dim; offset++) {\n    var max = bounds[dim + offset],\n      min = bounds[offset],\n      i = offset,\n      l = arr.length;\n    if (max === Infinity && min === -Infinity) {\n      for (i = offset; i < l; i += dim) {\n        arr[i] = arr[i] === max ? 1 : arr[i] === min ? 0 : .5;\n      }\n    } else if (max === Infinity) {\n      for (i = offset; i < l; i += dim) {\n        arr[i] = arr[i] === max ? 1 : 0;\n      }\n    } else if (min === -Infinity) {\n      for (i = offset; i < l; i += dim) {\n        arr[i] = arr[i] === min ? 0 : 1;\n      }\n    } else {\n      var range = max - min;\n      for (i = offset; i < l; i += dim) {\n        if (!isNaN(arr[i])) {\n          arr[i] = range === 0 ? .5 : (arr[i] - min) / range;\n        }\n      }\n    }\n  }\n  return arr;\n}","map":{"version":3,"names":["getBounds","require","module","exports","normalize","arr","dim","bounds","length","Error","offset","max","min","i","l","Infinity","range","isNaN"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/array-normalize/index.js"],"sourcesContent":["'use strict'\r\n\r\nvar getBounds = require('array-bounds')\r\n\r\nmodule.exports = normalize;\r\n\r\nfunction normalize (arr, dim, bounds) {\r\n\tif (!arr || arr.length == null) throw Error('Argument should be an array')\r\n\r\n\tif (dim == null) dim = 1\r\n\tif (bounds == null) bounds = getBounds(arr, dim)\r\n\r\n\tfor (var offset = 0; offset < dim; offset++) {\r\n\t\tvar max = bounds[dim + offset], min = bounds[offset], i = offset, l = arr.length;\r\n\r\n\t\tif (max === Infinity && min === -Infinity) {\r\n\t\t\tfor (i = offset; i < l; i+=dim) {\r\n\t\t\t\tarr[i] = arr[i] === max ? 1 : arr[i] === min ? 0 : .5\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (max === Infinity) {\r\n\t\t\tfor (i = offset; i < l; i+=dim) {\r\n\t\t\t\tarr[i] = arr[i] === max ? 1 : 0\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (min === -Infinity) {\r\n\t\t\tfor (i = offset; i < l; i+=dim) {\r\n\t\t\t\tarr[i] = arr[i] === min ? 0 : 1\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar range = max - min\r\n\t\t\tfor (i = offset; i < l; i+=dim) {\r\n\t\t\t\tif (!isNaN(arr[i])) {\r\n\t\t\t\t\tarr[i] = range === 0 ? .5 : (arr[i] - min) / range\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn arr;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAc,CAAC;AAEvCC,MAAM,CAACC,OAAO,GAAGC,SAAS;AAE1B,SAASA,SAAS,CAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,EAAE;EACrC,IAAI,CAACF,GAAG,IAAIA,GAAG,CAACG,MAAM,IAAI,IAAI,EAAE,MAAMC,KAAK,CAAC,6BAA6B,CAAC;EAE1E,IAAIH,GAAG,IAAI,IAAI,EAAEA,GAAG,GAAG,CAAC;EACxB,IAAIC,MAAM,IAAI,IAAI,EAAEA,MAAM,GAAGP,SAAS,CAACK,GAAG,EAAEC,GAAG,CAAC;EAEhD,KAAK,IAAII,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGJ,GAAG,EAAEI,MAAM,EAAE,EAAE;IAC5C,IAAIC,GAAG,GAAGJ,MAAM,CAACD,GAAG,GAAGI,MAAM,CAAC;MAAEE,GAAG,GAAGL,MAAM,CAACG,MAAM,CAAC;MAAEG,CAAC,GAAGH,MAAM;MAAEI,CAAC,GAAGT,GAAG,CAACG,MAAM;IAEhF,IAAIG,GAAG,KAAKI,QAAQ,IAAIH,GAAG,KAAK,CAACG,QAAQ,EAAE;MAC1C,KAAKF,CAAC,GAAGH,MAAM,EAAEG,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAEP,GAAG,EAAE;QAC/BD,GAAG,CAACQ,CAAC,CAAC,GAAGR,GAAG,CAACQ,CAAC,CAAC,KAAKF,GAAG,GAAG,CAAC,GAAGN,GAAG,CAACQ,CAAC,CAAC,KAAKD,GAAG,GAAG,CAAC,GAAG,EAAE;MACtD;IACD,CAAC,MACI,IAAID,GAAG,KAAKI,QAAQ,EAAE;MAC1B,KAAKF,CAAC,GAAGH,MAAM,EAAEG,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAEP,GAAG,EAAE;QAC/BD,GAAG,CAACQ,CAAC,CAAC,GAAGR,GAAG,CAACQ,CAAC,CAAC,KAAKF,GAAG,GAAG,CAAC,GAAG,CAAC;MAChC;IACD,CAAC,MACI,IAAIC,GAAG,KAAK,CAACG,QAAQ,EAAE;MAC3B,KAAKF,CAAC,GAAGH,MAAM,EAAEG,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAEP,GAAG,EAAE;QAC/BD,GAAG,CAACQ,CAAC,CAAC,GAAGR,GAAG,CAACQ,CAAC,CAAC,KAAKD,GAAG,GAAG,CAAC,GAAG,CAAC;MAChC;IACD,CAAC,MACI;MACJ,IAAII,KAAK,GAAGL,GAAG,GAAGC,GAAG;MACrB,KAAKC,CAAC,GAAGH,MAAM,EAAEG,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAEP,GAAG,EAAE;QAC/B,IAAI,CAACW,KAAK,CAACZ,GAAG,CAACQ,CAAC,CAAC,CAAC,EAAE;UACnBR,GAAG,CAACQ,CAAC,CAAC,GAAGG,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,CAACX,GAAG,CAACQ,CAAC,CAAC,GAAGD,GAAG,IAAII,KAAK;QACnD;MACD;IACD;EACD;EAEA,OAAOX,GAAG;AACX"},"metadata":{},"sourceType":"script","externalDependencies":[]}
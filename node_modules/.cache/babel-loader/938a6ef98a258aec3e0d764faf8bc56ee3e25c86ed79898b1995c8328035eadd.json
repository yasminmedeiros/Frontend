{"ast":null,"code":"'use strict';\n\nvar bits = require('bit-twiddle');\nvar dup = require('dup');\nvar Buffer = require('buffer').Buffer;\n\n//Legacy pool support\nif (!global.__TYPEDARRAY_POOL) {\n  global.__TYPEDARRAY_POOL = {\n    UINT8: dup([32, 0]),\n    UINT16: dup([32, 0]),\n    UINT32: dup([32, 0]),\n    BIGUINT64: dup([32, 0]),\n    INT8: dup([32, 0]),\n    INT16: dup([32, 0]),\n    INT32: dup([32, 0]),\n    BIGINT64: dup([32, 0]),\n    FLOAT: dup([32, 0]),\n    DOUBLE: dup([32, 0]),\n    DATA: dup([32, 0]),\n    UINT8C: dup([32, 0]),\n    BUFFER: dup([32, 0])\n  };\n}\nvar hasUint8C = typeof Uint8ClampedArray !== 'undefined';\nvar hasBigUint64 = typeof BigUint64Array !== 'undefined';\nvar hasBigInt64 = typeof BigInt64Array !== 'undefined';\nvar POOL = global.__TYPEDARRAY_POOL;\n\n//Upgrade pool\nif (!POOL.UINT8C) {\n  POOL.UINT8C = dup([32, 0]);\n}\nif (!POOL.BIGUINT64) {\n  POOL.BIGUINT64 = dup([32, 0]);\n}\nif (!POOL.BIGINT64) {\n  POOL.BIGINT64 = dup([32, 0]);\n}\nif (!POOL.BUFFER) {\n  POOL.BUFFER = dup([32, 0]);\n}\n\n//New technique: Only allocate from ArrayBufferView and Buffer\nvar DATA = POOL.DATA,\n  BUFFER = POOL.BUFFER;\nexports.free = function free(array) {\n  if (Buffer.isBuffer(array)) {\n    BUFFER[bits.log2(array.length)].push(array);\n  } else {\n    if (Object.prototype.toString.call(array) !== '[object ArrayBuffer]') {\n      array = array.buffer;\n    }\n    if (!array) {\n      return;\n    }\n    var n = array.length || array.byteLength;\n    var log_n = bits.log2(n) | 0;\n    DATA[log_n].push(array);\n  }\n};\nfunction freeArrayBuffer(buffer) {\n  if (!buffer) {\n    return;\n  }\n  var n = buffer.length || buffer.byteLength;\n  var log_n = bits.log2(n);\n  DATA[log_n].push(buffer);\n}\nfunction freeTypedArray(array) {\n  freeArrayBuffer(array.buffer);\n}\nexports.freeUint8 = exports.freeUint16 = exports.freeUint32 = exports.freeBigUint64 = exports.freeInt8 = exports.freeInt16 = exports.freeInt32 = exports.freeBigInt64 = exports.freeFloat32 = exports.freeFloat = exports.freeFloat64 = exports.freeDouble = exports.freeUint8Clamped = exports.freeDataView = freeTypedArray;\nexports.freeArrayBuffer = freeArrayBuffer;\nexports.freeBuffer = function freeBuffer(array) {\n  BUFFER[bits.log2(array.length)].push(array);\n};\nexports.malloc = function malloc(n, dtype) {\n  if (dtype === undefined || dtype === 'arraybuffer') {\n    return mallocArrayBuffer(n);\n  } else {\n    switch (dtype) {\n      case 'uint8':\n        return mallocUint8(n);\n      case 'uint16':\n        return mallocUint16(n);\n      case 'uint32':\n        return mallocUint32(n);\n      case 'int8':\n        return mallocInt8(n);\n      case 'int16':\n        return mallocInt16(n);\n      case 'int32':\n        return mallocInt32(n);\n      case 'float':\n      case 'float32':\n        return mallocFloat(n);\n      case 'double':\n      case 'float64':\n        return mallocDouble(n);\n      case 'uint8_clamped':\n        return mallocUint8Clamped(n);\n      case 'bigint64':\n        return mallocBigInt64(n);\n      case 'biguint64':\n        return mallocBigUint64(n);\n      case 'buffer':\n        return mallocBuffer(n);\n      case 'data':\n      case 'dataview':\n        return mallocDataView(n);\n      default:\n        return null;\n    }\n  }\n  return null;\n};\nfunction mallocArrayBuffer(n) {\n  var n = bits.nextPow2(n);\n  var log_n = bits.log2(n);\n  var d = DATA[log_n];\n  if (d.length > 0) {\n    return d.pop();\n  }\n  return new ArrayBuffer(n);\n}\nexports.mallocArrayBuffer = mallocArrayBuffer;\nfunction mallocUint8(n) {\n  return new Uint8Array(mallocArrayBuffer(n), 0, n);\n}\nexports.mallocUint8 = mallocUint8;\nfunction mallocUint16(n) {\n  return new Uint16Array(mallocArrayBuffer(2 * n), 0, n);\n}\nexports.mallocUint16 = mallocUint16;\nfunction mallocUint32(n) {\n  return new Uint32Array(mallocArrayBuffer(4 * n), 0, n);\n}\nexports.mallocUint32 = mallocUint32;\nfunction mallocInt8(n) {\n  return new Int8Array(mallocArrayBuffer(n), 0, n);\n}\nexports.mallocInt8 = mallocInt8;\nfunction mallocInt16(n) {\n  return new Int16Array(mallocArrayBuffer(2 * n), 0, n);\n}\nexports.mallocInt16 = mallocInt16;\nfunction mallocInt32(n) {\n  return new Int32Array(mallocArrayBuffer(4 * n), 0, n);\n}\nexports.mallocInt32 = mallocInt32;\nfunction mallocFloat(n) {\n  return new Float32Array(mallocArrayBuffer(4 * n), 0, n);\n}\nexports.mallocFloat32 = exports.mallocFloat = mallocFloat;\nfunction mallocDouble(n) {\n  return new Float64Array(mallocArrayBuffer(8 * n), 0, n);\n}\nexports.mallocFloat64 = exports.mallocDouble = mallocDouble;\nfunction mallocUint8Clamped(n) {\n  if (hasUint8C) {\n    return new Uint8ClampedArray(mallocArrayBuffer(n), 0, n);\n  } else {\n    return mallocUint8(n);\n  }\n}\nexports.mallocUint8Clamped = mallocUint8Clamped;\nfunction mallocBigUint64(n) {\n  if (hasBigUint64) {\n    return new BigUint64Array(mallocArrayBuffer(8 * n), 0, n);\n  } else {\n    return null;\n  }\n}\nexports.mallocBigUint64 = mallocBigUint64;\nfunction mallocBigInt64(n) {\n  if (hasBigInt64) {\n    return new BigInt64Array(mallocArrayBuffer(8 * n), 0, n);\n  } else {\n    return null;\n  }\n}\nexports.mallocBigInt64 = mallocBigInt64;\nfunction mallocDataView(n) {\n  return new DataView(mallocArrayBuffer(n), 0, n);\n}\nexports.mallocDataView = mallocDataView;\nfunction mallocBuffer(n) {\n  n = bits.nextPow2(n);\n  var log_n = bits.log2(n);\n  var cache = BUFFER[log_n];\n  if (cache.length > 0) {\n    return cache.pop();\n  }\n  return new Buffer(n);\n}\nexports.mallocBuffer = mallocBuffer;\nexports.clearCache = function clearCache() {\n  for (var i = 0; i < 32; ++i) {\n    POOL.UINT8[i].length = 0;\n    POOL.UINT16[i].length = 0;\n    POOL.UINT32[i].length = 0;\n    POOL.INT8[i].length = 0;\n    POOL.INT16[i].length = 0;\n    POOL.INT32[i].length = 0;\n    POOL.FLOAT[i].length = 0;\n    POOL.DOUBLE[i].length = 0;\n    POOL.BIGUINT64[i].length = 0;\n    POOL.BIGINT64[i].length = 0;\n    POOL.UINT8C[i].length = 0;\n    DATA[i].length = 0;\n    BUFFER[i].length = 0;\n  }\n};","map":{"version":3,"names":["bits","require","dup","Buffer","global","__TYPEDARRAY_POOL","UINT8","UINT16","UINT32","BIGUINT64","INT8","INT16","INT32","BIGINT64","FLOAT","DOUBLE","DATA","UINT8C","BUFFER","hasUint8C","Uint8ClampedArray","hasBigUint64","BigUint64Array","hasBigInt64","BigInt64Array","POOL","exports","free","array","isBuffer","log2","length","push","Object","prototype","toString","call","buffer","n","byteLength","log_n","freeArrayBuffer","freeTypedArray","freeUint8","freeUint16","freeUint32","freeBigUint64","freeInt8","freeInt16","freeInt32","freeBigInt64","freeFloat32","freeFloat","freeFloat64","freeDouble","freeUint8Clamped","freeDataView","freeBuffer","malloc","dtype","undefined","mallocArrayBuffer","mallocUint8","mallocUint16","mallocUint32","mallocInt8","mallocInt16","mallocInt32","mallocFloat","mallocDouble","mallocUint8Clamped","mallocBigInt64","mallocBigUint64","mallocBuffer","mallocDataView","nextPow2","d","pop","ArrayBuffer","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","mallocFloat32","Float64Array","mallocFloat64","DataView","cache","clearCache","i"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/typedarray-pool/pool.js"],"sourcesContent":["'use strict'\n\nvar bits = require('bit-twiddle')\nvar dup = require('dup')\nvar Buffer = require('buffer').Buffer\n\n//Legacy pool support\nif(!global.__TYPEDARRAY_POOL) {\n  global.__TYPEDARRAY_POOL = {\n      UINT8     : dup([32, 0])\n    , UINT16    : dup([32, 0])\n    , UINT32    : dup([32, 0])\n    , BIGUINT64 : dup([32, 0])\n    , INT8      : dup([32, 0])\n    , INT16     : dup([32, 0])\n    , INT32     : dup([32, 0])\n    , BIGINT64  : dup([32, 0])\n    , FLOAT     : dup([32, 0])\n    , DOUBLE    : dup([32, 0])\n    , DATA      : dup([32, 0])\n    , UINT8C    : dup([32, 0])\n    , BUFFER    : dup([32, 0])\n  }\n}\n\nvar hasUint8C = (typeof Uint8ClampedArray) !== 'undefined'\nvar hasBigUint64 = (typeof BigUint64Array) !== 'undefined'\nvar hasBigInt64 = (typeof BigInt64Array) !== 'undefined'\nvar POOL = global.__TYPEDARRAY_POOL\n\n//Upgrade pool\nif(!POOL.UINT8C) {\n  POOL.UINT8C = dup([32, 0])\n}\nif(!POOL.BIGUINT64) {\n  POOL.BIGUINT64 = dup([32, 0])\n}\nif(!POOL.BIGINT64) {\n  POOL.BIGINT64 = dup([32, 0])\n}\nif(!POOL.BUFFER) {\n  POOL.BUFFER = dup([32, 0])\n}\n\n//New technique: Only allocate from ArrayBufferView and Buffer\nvar DATA    = POOL.DATA\n  , BUFFER  = POOL.BUFFER\n\nexports.free = function free(array) {\n  if(Buffer.isBuffer(array)) {\n    BUFFER[bits.log2(array.length)].push(array)\n  } else {\n    if(Object.prototype.toString.call(array) !== '[object ArrayBuffer]') {\n      array = array.buffer\n    }\n    if(!array) {\n      return\n    }\n    var n = array.length || array.byteLength\n    var log_n = bits.log2(n)|0\n    DATA[log_n].push(array)\n  }\n}\n\nfunction freeArrayBuffer(buffer) {\n  if(!buffer) {\n    return\n  }\n  var n = buffer.length || buffer.byteLength\n  var log_n = bits.log2(n)\n  DATA[log_n].push(buffer)\n}\n\nfunction freeTypedArray(array) {\n  freeArrayBuffer(array.buffer)\n}\n\nexports.freeUint8 =\nexports.freeUint16 =\nexports.freeUint32 =\nexports.freeBigUint64 =\nexports.freeInt8 =\nexports.freeInt16 =\nexports.freeInt32 =\nexports.freeBigInt64 =\nexports.freeFloat32 = \nexports.freeFloat =\nexports.freeFloat64 = \nexports.freeDouble = \nexports.freeUint8Clamped = \nexports.freeDataView = freeTypedArray\n\nexports.freeArrayBuffer = freeArrayBuffer\n\nexports.freeBuffer = function freeBuffer(array) {\n  BUFFER[bits.log2(array.length)].push(array)\n}\n\nexports.malloc = function malloc(n, dtype) {\n  if(dtype === undefined || dtype === 'arraybuffer') {\n    return mallocArrayBuffer(n)\n  } else {\n    switch(dtype) {\n      case 'uint8':\n        return mallocUint8(n)\n      case 'uint16':\n        return mallocUint16(n)\n      case 'uint32':\n        return mallocUint32(n)\n      case 'int8':\n        return mallocInt8(n)\n      case 'int16':\n        return mallocInt16(n)\n      case 'int32':\n        return mallocInt32(n)\n      case 'float':\n      case 'float32':\n        return mallocFloat(n)\n      case 'double':\n      case 'float64':\n        return mallocDouble(n)\n      case 'uint8_clamped':\n        return mallocUint8Clamped(n)\n      case 'bigint64':\n        return mallocBigInt64(n)\n      case 'biguint64':\n        return mallocBigUint64(n)\n      case 'buffer':\n        return mallocBuffer(n)\n      case 'data':\n      case 'dataview':\n        return mallocDataView(n)\n\n      default:\n        return null\n    }\n  }\n  return null\n}\n\nfunction mallocArrayBuffer(n) {\n  var n = bits.nextPow2(n)\n  var log_n = bits.log2(n)\n  var d = DATA[log_n]\n  if(d.length > 0) {\n    return d.pop()\n  }\n  return new ArrayBuffer(n)\n}\nexports.mallocArrayBuffer = mallocArrayBuffer\n\nfunction mallocUint8(n) {\n  return new Uint8Array(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocUint8 = mallocUint8\n\nfunction mallocUint16(n) {\n  return new Uint16Array(mallocArrayBuffer(2*n), 0, n)\n}\nexports.mallocUint16 = mallocUint16\n\nfunction mallocUint32(n) {\n  return new Uint32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocUint32 = mallocUint32\n\nfunction mallocInt8(n) {\n  return new Int8Array(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocInt8 = mallocInt8\n\nfunction mallocInt16(n) {\n  return new Int16Array(mallocArrayBuffer(2*n), 0, n)\n}\nexports.mallocInt16 = mallocInt16\n\nfunction mallocInt32(n) {\n  return new Int32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocInt32 = mallocInt32\n\nfunction mallocFloat(n) {\n  return new Float32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocFloat32 = exports.mallocFloat = mallocFloat\n\nfunction mallocDouble(n) {\n  return new Float64Array(mallocArrayBuffer(8*n), 0, n)\n}\nexports.mallocFloat64 = exports.mallocDouble = mallocDouble\n\nfunction mallocUint8Clamped(n) {\n  if(hasUint8C) {\n    return new Uint8ClampedArray(mallocArrayBuffer(n), 0, n)\n  } else {\n    return mallocUint8(n)\n  }\n}\nexports.mallocUint8Clamped = mallocUint8Clamped\n\nfunction mallocBigUint64(n) {\n  if(hasBigUint64) {\n    return new BigUint64Array(mallocArrayBuffer(8*n), 0, n)\n  } else {\n    return null;\n  }\n}\nexports.mallocBigUint64 = mallocBigUint64\n\nfunction mallocBigInt64(n) {\n  if (hasBigInt64) {\n    return new BigInt64Array(mallocArrayBuffer(8*n), 0, n)\n  } else {\n    return null;\n  }\n}\nexports.mallocBigInt64 = mallocBigInt64\n\nfunction mallocDataView(n) {\n  return new DataView(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocDataView = mallocDataView\n\nfunction mallocBuffer(n) {\n  n = bits.nextPow2(n)\n  var log_n = bits.log2(n)\n  var cache = BUFFER[log_n]\n  if(cache.length > 0) {\n    return cache.pop()\n  }\n  return new Buffer(n)\n}\nexports.mallocBuffer = mallocBuffer\n\nexports.clearCache = function clearCache() {\n  for(var i=0; i<32; ++i) {\n    POOL.UINT8[i].length = 0\n    POOL.UINT16[i].length = 0\n    POOL.UINT32[i].length = 0\n    POOL.INT8[i].length = 0\n    POOL.INT16[i].length = 0\n    POOL.INT32[i].length = 0\n    POOL.FLOAT[i].length = 0\n    POOL.DOUBLE[i].length = 0\n    POOL.BIGUINT64[i].length = 0\n    POOL.BIGINT64[i].length = 0\n    POOL.UINT8C[i].length = 0\n    DATA[i].length = 0\n    BUFFER[i].length = 0\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
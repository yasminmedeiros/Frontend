{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar heatmapAttrs = require('../heatmap/attributes');\nvar contourAttrs = require('../contour/attributes');\nvar contourContourAttrs = contourAttrs.contours;\nvar scatterAttrs = require('../scatter/attributes');\nvar colorscaleAttrs = require('../../components/colorscale/attributes');\nvar colorbarAttrs = require('../../components/colorbar/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar scatterLineAttrs = scatterAttrs.line;\nmodule.exports = extendFlat({\n  carpet: {\n    valType: 'string',\n    role: 'info',\n    editType: 'calc',\n    description: ['The `carpet` of the carpet axes on which this contour trace lies'].join(' ')\n  },\n  z: heatmapAttrs.z,\n  a: heatmapAttrs.x,\n  a0: heatmapAttrs.x0,\n  da: heatmapAttrs.dx,\n  b: heatmapAttrs.y,\n  b0: heatmapAttrs.y0,\n  db: heatmapAttrs.dy,\n  text: heatmapAttrs.text,\n  transpose: heatmapAttrs.transpose,\n  atype: heatmapAttrs.xtype,\n  btype: heatmapAttrs.ytype,\n  fillcolor: contourAttrs.fillcolor,\n  autocontour: contourAttrs.autocontour,\n  ncontours: contourAttrs.ncontours,\n  contours: {\n    type: contourContourAttrs.type,\n    start: contourContourAttrs.start,\n    end: contourContourAttrs.end,\n    size: contourContourAttrs.size,\n    coloring: {\n      // from contourAttrs.contours.coloring but no 'heatmap' option\n      valType: 'enumerated',\n      values: ['fill', 'lines', 'none'],\n      dflt: 'fill',\n      role: 'style',\n      editType: 'calc',\n      description: ['Determines the coloring method showing the contour values.', 'If *fill*, coloring is done evenly between each contour level', 'If *lines*, coloring is done on the contour lines.', 'If *none*, no coloring is applied on this trace.'].join(' ')\n    },\n    showlines: contourContourAttrs.showlines,\n    showlabels: contourContourAttrs.showlabels,\n    labelfont: contourContourAttrs.labelfont,\n    labelformat: contourContourAttrs.labelformat,\n    operation: contourContourAttrs.operation,\n    value: contourContourAttrs.value,\n    editType: 'calc',\n    impliedEdits: {\n      'autocontour': false\n    }\n  },\n  line: {\n    color: extendFlat({}, scatterLineAttrs.color, {\n      description: ['Sets the color of the contour level.', 'Has no if `contours.coloring` is set to *lines*.'].join(' ')\n    }),\n    width: scatterLineAttrs.width,\n    dash: scatterLineAttrs.dash,\n    smoothing: extendFlat({}, scatterLineAttrs.smoothing, {\n      description: ['Sets the amount of smoothing for the contour lines,', 'where *0* corresponds to no smoothing.'].join(' ')\n    }),\n    editType: 'plot'\n  },\n  transforms: undefined\n}, colorscaleAttrs('', {\n  cLetter: 'z',\n  autoColorDflt: false\n}), {\n  colorbar: colorbarAttrs\n});","map":{"version":3,"names":["heatmapAttrs","require","contourAttrs","contourContourAttrs","contours","scatterAttrs","colorscaleAttrs","colorbarAttrs","extendFlat","scatterLineAttrs","line","module","exports","carpet","valType","role","editType","description","join","z","a","x","a0","x0","da","dx","b","y","b0","y0","db","dy","text","transpose","atype","xtype","btype","ytype","fillcolor","autocontour","ncontours","type","start","end","size","coloring","values","dflt","showlines","showlabels","labelfont","labelformat","operation","value","impliedEdits","color","width","dash","smoothing","transforms","undefined","cLetter","autoColorDflt","colorbar"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/contourcarpet/attributes.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar heatmapAttrs = require('../heatmap/attributes');\nvar contourAttrs = require('../contour/attributes');\nvar contourContourAttrs = contourAttrs.contours;\nvar scatterAttrs = require('../scatter/attributes');\nvar colorscaleAttrs = require('../../components/colorscale/attributes');\nvar colorbarAttrs = require('../../components/colorbar/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar scatterLineAttrs = scatterAttrs.line;\n\nmodule.exports = extendFlat({\n    carpet: {\n        valType: 'string',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'The `carpet` of the carpet axes on which this contour trace lies'\n        ].join(' ')\n    },\n    z: heatmapAttrs.z,\n    a: heatmapAttrs.x,\n    a0: heatmapAttrs.x0,\n    da: heatmapAttrs.dx,\n    b: heatmapAttrs.y,\n    b0: heatmapAttrs.y0,\n    db: heatmapAttrs.dy,\n    text: heatmapAttrs.text,\n    transpose: heatmapAttrs.transpose,\n    atype: heatmapAttrs.xtype,\n    btype: heatmapAttrs.ytype,\n\n    fillcolor: contourAttrs.fillcolor,\n\n    autocontour: contourAttrs.autocontour,\n    ncontours: contourAttrs.ncontours,\n\n    contours: {\n        type: contourContourAttrs.type,\n        start: contourContourAttrs.start,\n        end: contourContourAttrs.end,\n        size: contourContourAttrs.size,\n        coloring: {\n            // from contourAttrs.contours.coloring but no 'heatmap' option\n            valType: 'enumerated',\n            values: ['fill', 'lines', 'none'],\n            dflt: 'fill',\n            role: 'style',\n            editType: 'calc',\n            description: [\n                'Determines the coloring method showing the contour values.',\n                'If *fill*, coloring is done evenly between each contour level',\n                'If *lines*, coloring is done on the contour lines.',\n                'If *none*, no coloring is applied on this trace.'\n            ].join(' ')\n        },\n        showlines: contourContourAttrs.showlines,\n        showlabels: contourContourAttrs.showlabels,\n        labelfont: contourContourAttrs.labelfont,\n        labelformat: contourContourAttrs.labelformat,\n        operation: contourContourAttrs.operation,\n        value: contourContourAttrs.value,\n        editType: 'calc',\n        impliedEdits: {'autocontour': false}\n    },\n\n    line: {\n        color: extendFlat({}, scatterLineAttrs.color, {\n            description: [\n                'Sets the color of the contour level.',\n                'Has no if `contours.coloring` is set to *lines*.'\n            ].join(' ')\n        }),\n        width: scatterLineAttrs.width,\n        dash: scatterLineAttrs.dash,\n        smoothing: extendFlat({}, scatterLineAttrs.smoothing, {\n            description: [\n                'Sets the amount of smoothing for the contour lines,',\n                'where *0* corresponds to no smoothing.'\n            ].join(' ')\n        }),\n        editType: 'plot'\n    },\n    transforms: undefined\n},\n\n    colorscaleAttrs('', {\n        cLetter: 'z',\n        autoColorDflt: false\n    }),\n    { colorbar: colorbarAttrs }\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
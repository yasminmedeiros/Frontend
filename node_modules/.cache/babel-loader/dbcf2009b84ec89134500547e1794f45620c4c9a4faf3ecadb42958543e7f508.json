{"ast":null,"code":"'use strict';\n\nmodule.exports = getPolygonizer;\nvar pool = require('typedarray-pool');\nvar createMSTable = require('marching-simplex-table');\nvar CACHE = {};\nfunction createCellPolygonizer(d) {\n  var maxCellSize = 0;\n  var tables = new Array(d + 1);\n  tables[0] = [[]];\n  for (var i = 1; i <= d; ++i) {\n    var tab = tables[i] = createMSTable(i);\n    for (var j = 0; j < tab.length; ++j) {\n      maxCellSize = Math.max(maxCellSize, tab[i].length);\n    }\n  }\n  var code = ['function B(C,E,i,j){', 'var a=Math.min(i,j)|0,b=Math.max(i,j)|0,l=C[2*a],h=C[2*a+1];', 'while(l<h){', 'var m=(l+h)>>1,v=E[2*m+1];', 'if(v===b){return m}', 'if(b<v){h=m}else{l=m+1}', '}', 'return l;', '};', 'function getContour', d, 'd(F,E,C,S){', 'var n=F.length,R=[];', 'for(var i=0;i<n;++i){var c=F[i],l=c.length;'];\n  function generateCase(facets) {\n    if (facets.length <= 0) {\n      return;\n    }\n    code.push('R.push(');\n    for (var i = 0; i < facets.length; ++i) {\n      var facet = facets[i];\n      if (i > 0) {\n        code.push(',');\n      }\n      code.push('[');\n      for (var j = 0; j < facet.length; ++j) {\n        var f = facet[j];\n        if (j > 0) {\n          code.push(',');\n        }\n        code.push('B(C,E,c[', f[0], '],c[', f[1], '])');\n      }\n      code.push(']');\n    }\n    code.push(');');\n  }\n  for (var i = d + 1; i > 1; --i) {\n    if (i < d + 1) {\n      code.push('else ');\n    }\n    code.push('if(l===', i, '){');\n\n    //Generate mask\n    var maskStr = [];\n    for (var j = 0; j < i; ++j) {\n      maskStr.push('(S[c[' + j + ']]<<' + j + ')');\n    }\n\n    //Perform table look up\n    code.push('var M=', maskStr.join('+'), ';if(M===0||M===', (1 << i) - 1, '){continue}switch(M){');\n    var tab = tables[i - 1];\n    for (var j = 0; j < tab.length; ++j) {\n      code.push('case ', j, ':');\n      generateCase(tab[j]);\n      code.push('break;');\n    }\n    code.push('}}');\n  }\n  code.push('}return R;};return getContour', d, 'd');\n  var proc = new Function('pool', code.join(''));\n  return proc(pool);\n}\nfunction getPolygonizer(d) {\n  var alg = CACHE[d];\n  if (!alg) {\n    alg = CACHE[d] = createCellPolygonizer(d);\n  }\n  return alg;\n}","map":{"version":3,"names":["module","exports","getPolygonizer","pool","require","createMSTable","CACHE","createCellPolygonizer","d","maxCellSize","tables","Array","i","tab","j","length","Math","max","code","generateCase","facets","push","facet","f","maskStr","join","proc","Function","alg"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/simplicial-complex-contour/lib/codegen.js"],"sourcesContent":["'use strict'\n\nmodule.exports = getPolygonizer\n\nvar pool = require('typedarray-pool')\nvar createMSTable = require('marching-simplex-table')\n\nvar CACHE = {}\n\nfunction createCellPolygonizer(d) {\n  var maxCellSize = 0\n  var tables = new Array(d+1)\n  tables[0] = [ [] ]\n  for(var i=1; i<=d; ++i) {\n    var tab = tables[i] = createMSTable(i)\n    for(var j=0; j<tab.length; ++j) {\n      maxCellSize = Math.max(maxCellSize, tab[i].length)\n    }\n  }\n\n  var code  = [\n  'function B(C,E,i,j){',\n    'var a=Math.min(i,j)|0,b=Math.max(i,j)|0,l=C[2*a],h=C[2*a+1];',\n    'while(l<h){',\n      'var m=(l+h)>>1,v=E[2*m+1];',\n      'if(v===b){return m}',\n      'if(b<v){h=m}else{l=m+1}',\n    '}',\n    'return l;',\n  '};',\n  'function getContour', d, 'd(F,E,C,S){',\n    'var n=F.length,R=[];',\n    'for(var i=0;i<n;++i){var c=F[i],l=c.length;'\n  ]\n\n  function generateCase(facets) {\n    if(facets.length <= 0) {\n      return\n    }\n    code.push('R.push(')\n    for(var i=0; i<facets.length; ++i) {\n      var facet = facets[i]\n      if(i > 0) {\n        code.push(',')\n      }\n      code.push('[')\n      for(var j=0; j<facet.length; ++j) {\n        var f = facet[j]\n        if(j > 0) {\n          code.push(',')\n        }\n        code.push('B(C,E,c[', f[0], '],c[', f[1], '])')\n      }\n      code.push(']')\n    }\n    code.push(');')\n  }\n\n  for(var i=d+1; i>1; --i) {\n    if(i < d+1) {\n      code.push('else ')\n    }\n    code.push('if(l===', i, '){')\n\n    //Generate mask\n    var maskStr = []\n    for(var j=0; j<i; ++j) {\n      maskStr.push('(S[c['+j+']]<<'+j+')')\n    }\n\n    //Perform table look up\n    code.push('var M=', maskStr.join('+'), \n      ';if(M===0||M===', (1<<i)-1, \n        '){continue}switch(M){')\n\n    var tab = tables[i-1]\n    for(var j=0; j<tab.length; ++j) {\n      code.push('case ', j, ':')\n      generateCase(tab[j])\n      code.push('break;')\n    }\n    code.push('}}')\n  }\n  code.push('}return R;};return getContour', d, 'd')\n\n  var proc = new Function('pool', code.join(''))\n  return proc(pool)\n}\n\nfunction getPolygonizer(d) {\n  var alg = CACHE[d]\n  if(!alg) {\n    alg = CACHE[d] = createCellPolygonizer(d) \n  }\n  return alg\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
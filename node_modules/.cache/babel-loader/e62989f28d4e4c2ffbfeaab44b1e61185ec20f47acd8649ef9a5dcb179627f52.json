{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\nvar Lib = require('../../lib');\nvar convertColumnData = require('../heatmap/convert_column_xyz');\nvar clean2dArray = require('../heatmap/clean_2d_array');\nvar interp2d = require('../heatmap/interp2d');\nvar findEmpties = require('../heatmap/find_empties');\nvar makeBoundArray = require('../heatmap/make_bound_array');\nvar supplyDefaults = require('./defaults');\nvar lookupCarpet = require('../carpet/lookup_carpetid');\nvar setContours = require('../contour/set_contours');\n\n// most is the same as heatmap calc, then adjust it\n// though a few things inside heatmap calc still look for\n// contour maps, because the makeBoundArray calls are too entangled\nmodule.exports = function calc(gd, trace) {\n  var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n  if (!carpet || !carpet.visible || carpet.visible === 'legendonly') return;\n  if (!trace.a || !trace.b) {\n    // Look up the original incoming carpet data:\n    var carpetdata = gd.data[carpet.index];\n\n    // Look up the incoming trace data, *except* perform a shallow\n    // copy so that we're not actually modifying it when we use it\n    // to supply defaults:\n    var tracedata = gd.data[trace.index];\n    // var tracedata = extendFlat({}, gd.data[trace.index]);\n\n    // If the data is not specified\n    if (!tracedata.a) tracedata.a = carpetdata.a;\n    if (!tracedata.b) tracedata.b = carpetdata.b;\n    supplyDefaults(tracedata, trace, trace._defaultColor, gd._fullLayout);\n  }\n  var cd = heatmappishCalc(gd, trace);\n  setContours(trace);\n  return cd;\n};\nfunction heatmappishCalc(gd, trace) {\n  // prepare the raw data\n  // run makeCalcdata on x and y even for heatmaps, in case of category mappings\n  var carpet = trace._carpetTrace;\n  var aax = carpet.aaxis;\n  var bax = carpet.baxis;\n  var a, a0, da, b, b0, db, z;\n\n  // cancel minimum tick spacings (only applies to bars and boxes)\n  aax._minDtick = 0;\n  bax._minDtick = 0;\n  if (Lib.isArray1D(trace.z)) convertColumnData(trace, aax, bax, 'a', 'b', ['z']);\n  a = trace._a = trace._a || trace.a;\n  b = trace._b = trace._b || trace.b;\n  a = a ? aax.makeCalcdata(trace, '_a') : [];\n  b = b ? bax.makeCalcdata(trace, '_b') : [];\n  a0 = trace.a0 || 0;\n  da = trace.da || 1;\n  b0 = trace.b0 || 0;\n  db = trace.db || 1;\n  z = trace._z = clean2dArray(trace._z || trace.z, trace.transpose);\n  trace._emptypoints = findEmpties(z);\n  interp2d(z, trace._emptypoints);\n\n  // create arrays of brick boundaries, to be used by autorange and heatmap.plot\n  var xlen = Lib.maxRowLength(z);\n  var xIn = trace.xtype === 'scaled' ? '' : a;\n  var xArray = makeBoundArray(trace, xIn, a0, da, xlen, aax);\n  var yIn = trace.ytype === 'scaled' ? '' : b;\n  var yArray = makeBoundArray(trace, yIn, b0, db, z.length, bax);\n  var cd0 = {\n    a: xArray,\n    b: yArray,\n    z: z\n  };\n  if (trace.contours.type === 'levels' && trace.contours.coloring !== 'none') {\n    // auto-z and autocolorscale if applicable\n    colorscaleCalc(gd, trace, {\n      vals: z,\n      containerStr: '',\n      cLetter: 'z'\n    });\n  }\n  return [cd0];\n}","map":{"version":3,"names":["colorscaleCalc","require","Lib","convertColumnData","clean2dArray","interp2d","findEmpties","makeBoundArray","supplyDefaults","lookupCarpet","setContours","module","exports","calc","gd","trace","carpet","_carpetTrace","visible","a","b","carpetdata","data","index","tracedata","_defaultColor","_fullLayout","cd","heatmappishCalc","aax","aaxis","bax","baxis","a0","da","b0","db","z","_minDtick","isArray1D","_a","_b","makeCalcdata","_z","transpose","_emptypoints","xlen","maxRowLength","xIn","xtype","xArray","yIn","ytype","yArray","length","cd0","contours","type","coloring","vals","containerStr","cLetter"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/contourcarpet/calc.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\nvar Lib = require('../../lib');\n\nvar convertColumnData = require('../heatmap/convert_column_xyz');\nvar clean2dArray = require('../heatmap/clean_2d_array');\nvar interp2d = require('../heatmap/interp2d');\nvar findEmpties = require('../heatmap/find_empties');\nvar makeBoundArray = require('../heatmap/make_bound_array');\nvar supplyDefaults = require('./defaults');\nvar lookupCarpet = require('../carpet/lookup_carpetid');\nvar setContours = require('../contour/set_contours');\n\n// most is the same as heatmap calc, then adjust it\n// though a few things inside heatmap calc still look for\n// contour maps, because the makeBoundArray calls are too entangled\nmodule.exports = function calc(gd, trace) {\n    var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n    if(!carpet || !carpet.visible || carpet.visible === 'legendonly') return;\n\n    if(!trace.a || !trace.b) {\n        // Look up the original incoming carpet data:\n        var carpetdata = gd.data[carpet.index];\n\n        // Look up the incoming trace data, *except* perform a shallow\n        // copy so that we're not actually modifying it when we use it\n        // to supply defaults:\n        var tracedata = gd.data[trace.index];\n        // var tracedata = extendFlat({}, gd.data[trace.index]);\n\n        // If the data is not specified\n        if(!tracedata.a) tracedata.a = carpetdata.a;\n        if(!tracedata.b) tracedata.b = carpetdata.b;\n\n        supplyDefaults(tracedata, trace, trace._defaultColor, gd._fullLayout);\n    }\n\n    var cd = heatmappishCalc(gd, trace);\n\n    setContours(trace);\n\n    return cd;\n};\n\nfunction heatmappishCalc(gd, trace) {\n    // prepare the raw data\n    // run makeCalcdata on x and y even for heatmaps, in case of category mappings\n    var carpet = trace._carpetTrace;\n    var aax = carpet.aaxis;\n    var bax = carpet.baxis;\n    var a,\n        a0,\n        da,\n        b,\n        b0,\n        db,\n        z;\n\n    // cancel minimum tick spacings (only applies to bars and boxes)\n    aax._minDtick = 0;\n    bax._minDtick = 0;\n\n    if(Lib.isArray1D(trace.z)) convertColumnData(trace, aax, bax, 'a', 'b', ['z']);\n    a = trace._a = trace._a || trace.a;\n    b = trace._b = trace._b || trace.b;\n\n    a = a ? aax.makeCalcdata(trace, '_a') : [];\n    b = b ? bax.makeCalcdata(trace, '_b') : [];\n    a0 = trace.a0 || 0;\n    da = trace.da || 1;\n    b0 = trace.b0 || 0;\n    db = trace.db || 1;\n\n    z = trace._z = clean2dArray(trace._z || trace.z, trace.transpose);\n\n    trace._emptypoints = findEmpties(z);\n    interp2d(z, trace._emptypoints);\n\n    // create arrays of brick boundaries, to be used by autorange and heatmap.plot\n    var xlen = Lib.maxRowLength(z);\n    var xIn = trace.xtype === 'scaled' ? '' : a;\n    var xArray = makeBoundArray(trace, xIn, a0, da, xlen, aax);\n    var yIn = trace.ytype === 'scaled' ? '' : b;\n    var yArray = makeBoundArray(trace, yIn, b0, db, z.length, bax);\n\n    var cd0 = {\n        a: xArray,\n        b: yArray,\n        z: z,\n    };\n\n    if(trace.contours.type === 'levels' && trace.contours.coloring !== 'none') {\n        // auto-z and autocolorscale if applicable\n        colorscaleCalc(gd, trace, {\n            vals: z,\n            containerStr: '',\n            cLetter: 'z'\n        });\n    }\n\n    return [cd0];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
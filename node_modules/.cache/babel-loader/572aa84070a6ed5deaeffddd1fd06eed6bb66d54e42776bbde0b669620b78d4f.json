{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar isArray1D = require('../../lib').isArray1D;\nvar cheaterBasis = require('./cheater_basis');\nvar arrayMinmax = require('./array_minmax');\nvar calcGridlines = require('./calc_gridlines');\nvar calcLabels = require('./calc_labels');\nvar calcClipPath = require('./calc_clippath');\nvar clean2dArray = require('../heatmap/clean_2d_array');\nvar smoothFill2dArray = require('./smooth_fill_2d_array');\nvar convertColumnData = require('../heatmap/convert_column_xyz');\nvar setConvert = require('./set_convert');\nmodule.exports = function calc(gd, trace) {\n  var xa = Axes.getFromId(gd, trace.xaxis);\n  var ya = Axes.getFromId(gd, trace.yaxis);\n  var aax = trace.aaxis;\n  var bax = trace.baxis;\n  var x = trace.x;\n  var y = trace.y;\n  var cols = [];\n  if (x && isArray1D(x)) cols.push('x');\n  if (y && isArray1D(y)) cols.push('y');\n  if (cols.length) {\n    convertColumnData(trace, aax, bax, 'a', 'b', cols);\n  }\n  var a = trace._a = trace._a || trace.a;\n  var b = trace._b = trace._b || trace.b;\n  x = trace._x || trace.x;\n  y = trace._y || trace.y;\n  var t = {};\n  if (trace._cheater) {\n    var avals = aax.cheatertype === 'index' ? a.length : a;\n    var bvals = bax.cheatertype === 'index' ? b.length : b;\n    x = cheaterBasis(avals, bvals, trace.cheaterslope);\n  }\n  trace._x = x = clean2dArray(x);\n  trace._y = y = clean2dArray(y);\n\n  // Fill in any undefined values with elliptic smoothing. This doesn't take\n  // into account the spacing of the values. That is, the derivatives should\n  // be modified to use a and b values. It's not that hard, but this is already\n  // moderate overkill for just filling in missing values.\n  smoothFill2dArray(x, a, b);\n  smoothFill2dArray(y, a, b);\n  setConvert(trace);\n\n  // create conversion functions that depend on the data\n  trace.setScale();\n\n  // This is a rather expensive scan. Nothing guarantees monotonicity,\n  // so we need to scan through all data to get proper ranges:\n  var xrange = arrayMinmax(x);\n  var yrange = arrayMinmax(y);\n  var dx = 0.5 * (xrange[1] - xrange[0]);\n  var xc = 0.5 * (xrange[1] + xrange[0]);\n  var dy = 0.5 * (yrange[1] - yrange[0]);\n  var yc = 0.5 * (yrange[1] + yrange[0]);\n\n  // Expand the axes to fit the plot, except just grow it by a factor of 1.3\n  // because the labels should be taken into account except that's difficult\n  // hence 1.3.\n  var grow = 1.3;\n  xrange = [xc - dx * grow, xc + dx * grow];\n  yrange = [yc - dy * grow, yc + dy * grow];\n  trace._extremes[xa._id] = Axes.findExtremes(xa, xrange, {\n    padded: true\n  });\n  trace._extremes[ya._id] = Axes.findExtremes(ya, yrange, {\n    padded: true\n  });\n\n  // Enumerate the gridlines, both major and minor, and store them on the trace\n  // object:\n  calcGridlines(trace, 'a', 'b');\n  calcGridlines(trace, 'b', 'a');\n\n  // Calculate the text labels for each major gridline and store them on the\n  // trace object:\n  calcLabels(trace, aax);\n  calcLabels(trace, bax);\n\n  // Tabulate points for the four segments that bound the axes so that we can\n  // map to pixel coordinates in the plot function and create a clip rect:\n  t.clipsegments = calcClipPath(trace._xctrl, trace._yctrl, aax, bax);\n  t.x = x;\n  t.y = y;\n  t.a = a;\n  t.b = b;\n  return [t];\n};","map":{"version":3,"names":["Axes","require","isArray1D","cheaterBasis","arrayMinmax","calcGridlines","calcLabels","calcClipPath","clean2dArray","smoothFill2dArray","convertColumnData","setConvert","module","exports","calc","gd","trace","xa","getFromId","xaxis","ya","yaxis","aax","aaxis","bax","baxis","x","y","cols","push","length","a","_a","b","_b","_x","_y","t","_cheater","avals","cheatertype","bvals","cheaterslope","setScale","xrange","yrange","dx","xc","dy","yc","grow","_extremes","_id","findExtremes","padded","clipsegments","_xctrl","_yctrl"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/carpet/calc.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar isArray1D = require('../../lib').isArray1D;\nvar cheaterBasis = require('./cheater_basis');\nvar arrayMinmax = require('./array_minmax');\nvar calcGridlines = require('./calc_gridlines');\nvar calcLabels = require('./calc_labels');\nvar calcClipPath = require('./calc_clippath');\nvar clean2dArray = require('../heatmap/clean_2d_array');\nvar smoothFill2dArray = require('./smooth_fill_2d_array');\nvar convertColumnData = require('../heatmap/convert_column_xyz');\nvar setConvert = require('./set_convert');\n\nmodule.exports = function calc(gd, trace) {\n    var xa = Axes.getFromId(gd, trace.xaxis);\n    var ya = Axes.getFromId(gd, trace.yaxis);\n    var aax = trace.aaxis;\n    var bax = trace.baxis;\n\n    var x = trace.x;\n    var y = trace.y;\n    var cols = [];\n    if(x && isArray1D(x)) cols.push('x');\n    if(y && isArray1D(y)) cols.push('y');\n\n    if(cols.length) {\n        convertColumnData(trace, aax, bax, 'a', 'b', cols);\n    }\n\n    var a = trace._a = trace._a || trace.a;\n    var b = trace._b = trace._b || trace.b;\n    x = trace._x || trace.x;\n    y = trace._y || trace.y;\n\n    var t = {};\n\n    if(trace._cheater) {\n        var avals = aax.cheatertype === 'index' ? a.length : a;\n        var bvals = bax.cheatertype === 'index' ? b.length : b;\n        x = cheaterBasis(avals, bvals, trace.cheaterslope);\n    }\n\n    trace._x = x = clean2dArray(x);\n    trace._y = y = clean2dArray(y);\n\n    // Fill in any undefined values with elliptic smoothing. This doesn't take\n    // into account the spacing of the values. That is, the derivatives should\n    // be modified to use a and b values. It's not that hard, but this is already\n    // moderate overkill for just filling in missing values.\n    smoothFill2dArray(x, a, b);\n    smoothFill2dArray(y, a, b);\n\n    setConvert(trace);\n\n    // create conversion functions that depend on the data\n    trace.setScale();\n\n    // This is a rather expensive scan. Nothing guarantees monotonicity,\n    // so we need to scan through all data to get proper ranges:\n    var xrange = arrayMinmax(x);\n    var yrange = arrayMinmax(y);\n\n    var dx = 0.5 * (xrange[1] - xrange[0]);\n    var xc = 0.5 * (xrange[1] + xrange[0]);\n\n    var dy = 0.5 * (yrange[1] - yrange[0]);\n    var yc = 0.5 * (yrange[1] + yrange[0]);\n\n    // Expand the axes to fit the plot, except just grow it by a factor of 1.3\n    // because the labels should be taken into account except that's difficult\n    // hence 1.3.\n    var grow = 1.3;\n    xrange = [xc - dx * grow, xc + dx * grow];\n    yrange = [yc - dy * grow, yc + dy * grow];\n\n    trace._extremes[xa._id] = Axes.findExtremes(xa, xrange, {padded: true});\n    trace._extremes[ya._id] = Axes.findExtremes(ya, yrange, {padded: true});\n\n    // Enumerate the gridlines, both major and minor, and store them on the trace\n    // object:\n    calcGridlines(trace, 'a', 'b');\n    calcGridlines(trace, 'b', 'a');\n\n    // Calculate the text labels for each major gridline and store them on the\n    // trace object:\n    calcLabels(trace, aax);\n    calcLabels(trace, bax);\n\n    // Tabulate points for the four segments that bound the axes so that we can\n    // map to pixel coordinates in the plot function and create a clip rect:\n    t.clipsegments = calcClipPath(trace._xctrl, trace._yctrl, aax, bax);\n\n    t.x = x;\n    t.y = y;\n    t.a = a;\n    t.b = b;\n\n    return [t];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar dot = require('./matrix').dot;\nvar BADNUM = require('../constants/numerical').BADNUM;\nvar polygon = module.exports = {};\n\n/**\n * Turn an array of [x, y] pairs into a polygon object\n * that can test if points are inside it\n *\n * @param ptsIn Array of [x, y] pairs\n *\n * @returns polygon Object {xmin, xmax, ymin, ymax, pts, contains}\n *      (x|y)(min|max) are the bounding rect of the polygon\n *      pts is the original array, with the first pair repeated at the end\n *      contains is a function: (pt, omitFirstEdge)\n *          pt is the [x, y] pair to test\n *          omitFirstEdge truthy means points exactly on the first edge don't\n *              count. This is for use adding one polygon to another so we\n *              don't double-count the edge where they meet.\n *          returns boolean: is pt inside the polygon (including on its edges)\n */\npolygon.tester = function tester(ptsIn) {\n  var pts = ptsIn.slice();\n  var xmin = pts[0][0];\n  var xmax = xmin;\n  var ymin = pts[0][1];\n  var ymax = ymin;\n  var i;\n  pts.push(pts[0]);\n  for (i = 1; i < pts.length; i++) {\n    xmin = Math.min(xmin, pts[i][0]);\n    xmax = Math.max(xmax, pts[i][0]);\n    ymin = Math.min(ymin, pts[i][1]);\n    ymax = Math.max(ymax, pts[i][1]);\n  }\n\n  // do we have a rectangle? Handle this here, so we can use the same\n  // tester for the rectangular case without sacrificing speed\n\n  var isRect = false;\n  var rectFirstEdgeTest;\n  if (pts.length === 5) {\n    if (pts[0][0] === pts[1][0]) {\n      // vert, horz, vert, horz\n      if (pts[2][0] === pts[3][0] && pts[0][1] === pts[3][1] && pts[1][1] === pts[2][1]) {\n        isRect = true;\n        rectFirstEdgeTest = function rectFirstEdgeTest(pt) {\n          return pt[0] === pts[0][0];\n        };\n      }\n    } else if (pts[0][1] === pts[1][1]) {\n      // horz, vert, horz, vert\n      if (pts[2][1] === pts[3][1] && pts[0][0] === pts[3][0] && pts[1][0] === pts[2][0]) {\n        isRect = true;\n        rectFirstEdgeTest = function rectFirstEdgeTest(pt) {\n          return pt[1] === pts[0][1];\n        };\n      }\n    }\n  }\n  function rectContains(pt, omitFirstEdge) {\n    var x = pt[0];\n    var y = pt[1];\n    if (x === BADNUM || x < xmin || x > xmax || y === BADNUM || y < ymin || y > ymax) {\n      // pt is outside the bounding box of polygon\n      return false;\n    }\n    if (omitFirstEdge && rectFirstEdgeTest(pt)) return false;\n    return true;\n  }\n  function contains(pt, omitFirstEdge) {\n    var x = pt[0];\n    var y = pt[1];\n    if (x === BADNUM || x < xmin || x > xmax || y === BADNUM || y < ymin || y > ymax) {\n      // pt is outside the bounding box of polygon\n      return false;\n    }\n    var imax = pts.length;\n    var x1 = pts[0][0];\n    var y1 = pts[0][1];\n    var crossings = 0;\n    var i;\n    var x0;\n    var y0;\n    var xmini;\n    var ycross;\n    for (i = 1; i < imax; i++) {\n      // find all crossings of a vertical line upward from pt with\n      // polygon segments\n      // crossings exactly at xmax don't count, unless the point is\n      // exactly on the segment, then it counts as inside.\n      x0 = x1;\n      y0 = y1;\n      x1 = pts[i][0];\n      y1 = pts[i][1];\n      xmini = Math.min(x0, x1);\n\n      // outside the bounding box of this segment, it's only a crossing\n      // if it's below the box.\n      if (x < xmini || x > Math.max(x0, x1) || y > Math.max(y0, y1)) {\n        continue;\n      } else if (y < Math.min(y0, y1)) {\n        // don't count the left-most point of the segment as a crossing\n        // because we don't want to double-count adjacent crossings\n        // UNLESS the polygon turns past vertical at exactly this x\n        // Note that this is repeated below, but we can't factor it out\n        // because\n        if (x !== xmini) crossings++;\n      }\n      // inside the bounding box, check the actual line intercept\n      else {\n        // vertical segment - we know already that the point is exactly\n        // on the segment, so mark the crossing as exactly at the point.\n        if (x1 === x0) ycross = y;\n        // any other angle\n        else ycross = y0 + (x - x0) * (y1 - y0) / (x1 - x0);\n\n        // exactly on the edge: counts as inside the polygon, unless it's the\n        // first edge and we're omitting it.\n        if (y === ycross) {\n          if (i === 1 && omitFirstEdge) return false;\n          return true;\n        }\n        if (y <= ycross && x !== xmini) crossings++;\n      }\n    }\n\n    // if we've gotten this far, odd crossings means inside, even is outside\n    return crossings % 2 === 1;\n  }\n\n  // detect if poly is degenerate\n  var degenerate = true;\n  var lastPt = pts[0];\n  for (i = 1; i < pts.length; i++) {\n    if (lastPt[0] !== pts[i][0] || lastPt[1] !== pts[i][1]) {\n      degenerate = false;\n      break;\n    }\n  }\n  return {\n    xmin: xmin,\n    xmax: xmax,\n    ymin: ymin,\n    ymax: ymax,\n    pts: pts,\n    contains: isRect ? rectContains : contains,\n    isRect: isRect,\n    degenerate: degenerate\n  };\n};\n\n/**\n * Test if a segment of a points array is bent or straight\n *\n * @param pts Array of [x, y] pairs\n * @param start the index of the proposed start of the straight section\n * @param end the index of the proposed end point\n * @param tolerance the max distance off the line connecting start and end\n *      before the line counts as bent\n * @returns boolean: true means this segment is bent, false means straight\n */\nvar isBent = polygon.isSegmentBent = function isBent(pts, start, end, tolerance) {\n  var startPt = pts[start];\n  var segment = [pts[end][0] - startPt[0], pts[end][1] - startPt[1]];\n  var segmentSquared = dot(segment, segment);\n  var segmentLen = Math.sqrt(segmentSquared);\n  var unitPerp = [-segment[1] / segmentLen, segment[0] / segmentLen];\n  var i;\n  var part;\n  var partParallel;\n  for (i = start + 1; i < end; i++) {\n    part = [pts[i][0] - startPt[0], pts[i][1] - startPt[1]];\n    partParallel = dot(part, segment);\n    if (partParallel < 0 || partParallel > segmentSquared || Math.abs(dot(part, unitPerp)) > tolerance) return true;\n  }\n  return false;\n};\n\n/**\n * Make a filtering polygon, to minimize the number of segments\n *\n * @param pts Array of [x, y] pairs (must start with at least 1 pair)\n * @param tolerance the maximum deviation from straight allowed for\n *      removing points to simplify the polygon\n *\n * @returns Object {addPt, raw, filtered}\n *      addPt is a function(pt: [x, y] pair) to add a raw point and\n *          continue filtering\n *      raw is all the input points\n *      filtered is the resulting filtered Array of [x, y] pairs\n */\npolygon.filter = function filter(pts, tolerance) {\n  var ptsFiltered = [pts[0]];\n  var doneRawIndex = 0;\n  var doneFilteredIndex = 0;\n  function addPt(pt) {\n    pts.push(pt);\n    var prevFilterLen = ptsFiltered.length;\n    var iLast = doneRawIndex;\n    ptsFiltered.splice(doneFilteredIndex + 1);\n    for (var i = iLast + 1; i < pts.length; i++) {\n      if (i === pts.length - 1 || isBent(pts, iLast, i + 1, tolerance)) {\n        ptsFiltered.push(pts[i]);\n        if (ptsFiltered.length < prevFilterLen - 2) {\n          doneRawIndex = i;\n          doneFilteredIndex = ptsFiltered.length - 1;\n        }\n        iLast = i;\n      }\n    }\n  }\n  if (pts.length > 1) {\n    var lastPt = pts.pop();\n    addPt(lastPt);\n  }\n  return {\n    addPt: addPt,\n    raw: pts,\n    filtered: ptsFiltered\n  };\n};","map":{"version":3,"names":["dot","require","BADNUM","polygon","module","exports","tester","ptsIn","pts","slice","xmin","xmax","ymin","ymax","i","push","length","Math","min","max","isRect","rectFirstEdgeTest","pt","rectContains","omitFirstEdge","x","y","contains","imax","x1","y1","crossings","x0","y0","xmini","ycross","degenerate","lastPt","isBent","isSegmentBent","start","end","tolerance","startPt","segment","segmentSquared","segmentLen","sqrt","unitPerp","part","partParallel","abs","filter","ptsFiltered","doneRawIndex","doneFilteredIndex","addPt","prevFilterLen","iLast","splice","pop","raw","filtered"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/lib/polygon.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar dot = require('./matrix').dot;\nvar BADNUM = require('../constants/numerical').BADNUM;\n\nvar polygon = module.exports = {};\n\n/**\n * Turn an array of [x, y] pairs into a polygon object\n * that can test if points are inside it\n *\n * @param ptsIn Array of [x, y] pairs\n *\n * @returns polygon Object {xmin, xmax, ymin, ymax, pts, contains}\n *      (x|y)(min|max) are the bounding rect of the polygon\n *      pts is the original array, with the first pair repeated at the end\n *      contains is a function: (pt, omitFirstEdge)\n *          pt is the [x, y] pair to test\n *          omitFirstEdge truthy means points exactly on the first edge don't\n *              count. This is for use adding one polygon to another so we\n *              don't double-count the edge where they meet.\n *          returns boolean: is pt inside the polygon (including on its edges)\n */\npolygon.tester = function tester(ptsIn) {\n    var pts = ptsIn.slice();\n    var xmin = pts[0][0];\n    var xmax = xmin;\n    var ymin = pts[0][1];\n    var ymax = ymin;\n    var i;\n\n    pts.push(pts[0]);\n    for(i = 1; i < pts.length; i++) {\n        xmin = Math.min(xmin, pts[i][0]);\n        xmax = Math.max(xmax, pts[i][0]);\n        ymin = Math.min(ymin, pts[i][1]);\n        ymax = Math.max(ymax, pts[i][1]);\n    }\n\n    // do we have a rectangle? Handle this here, so we can use the same\n    // tester for the rectangular case without sacrificing speed\n\n    var isRect = false;\n    var rectFirstEdgeTest;\n\n    if(pts.length === 5) {\n        if(pts[0][0] === pts[1][0]) { // vert, horz, vert, horz\n            if(pts[2][0] === pts[3][0] &&\n                    pts[0][1] === pts[3][1] &&\n                    pts[1][1] === pts[2][1]) {\n                isRect = true;\n                rectFirstEdgeTest = function(pt) { return pt[0] === pts[0][0]; };\n            }\n        }\n        else if(pts[0][1] === pts[1][1]) { // horz, vert, horz, vert\n            if(pts[2][1] === pts[3][1] &&\n                    pts[0][0] === pts[3][0] &&\n                    pts[1][0] === pts[2][0]) {\n                isRect = true;\n                rectFirstEdgeTest = function(pt) { return pt[1] === pts[0][1]; };\n            }\n        }\n    }\n\n    function rectContains(pt, omitFirstEdge) {\n        var x = pt[0];\n        var y = pt[1];\n\n        if(x === BADNUM || x < xmin || x > xmax || y === BADNUM || y < ymin || y > ymax) {\n            // pt is outside the bounding box of polygon\n            return false;\n        }\n        if(omitFirstEdge && rectFirstEdgeTest(pt)) return false;\n\n        return true;\n    }\n\n    function contains(pt, omitFirstEdge) {\n        var x = pt[0];\n        var y = pt[1];\n\n        if(x === BADNUM || x < xmin || x > xmax || y === BADNUM || y < ymin || y > ymax) {\n            // pt is outside the bounding box of polygon\n            return false;\n        }\n\n        var imax = pts.length;\n        var x1 = pts[0][0];\n        var y1 = pts[0][1];\n        var crossings = 0;\n        var i;\n        var x0;\n        var y0;\n        var xmini;\n        var ycross;\n\n        for(i = 1; i < imax; i++) {\n            // find all crossings of a vertical line upward from pt with\n            // polygon segments\n            // crossings exactly at xmax don't count, unless the point is\n            // exactly on the segment, then it counts as inside.\n            x0 = x1;\n            y0 = y1;\n            x1 = pts[i][0];\n            y1 = pts[i][1];\n            xmini = Math.min(x0, x1);\n\n            // outside the bounding box of this segment, it's only a crossing\n            // if it's below the box.\n            if(x < xmini || x > Math.max(x0, x1) || y > Math.max(y0, y1)) {\n                continue;\n            }\n            else if(y < Math.min(y0, y1)) {\n                // don't count the left-most point of the segment as a crossing\n                // because we don't want to double-count adjacent crossings\n                // UNLESS the polygon turns past vertical at exactly this x\n                // Note that this is repeated below, but we can't factor it out\n                // because\n                if(x !== xmini) crossings++;\n            }\n            // inside the bounding box, check the actual line intercept\n            else {\n                // vertical segment - we know already that the point is exactly\n                // on the segment, so mark the crossing as exactly at the point.\n                if(x1 === x0) ycross = y;\n                // any other angle\n                else ycross = y0 + (x - x0) * (y1 - y0) / (x1 - x0);\n\n                // exactly on the edge: counts as inside the polygon, unless it's the\n                // first edge and we're omitting it.\n                if(y === ycross) {\n                    if(i === 1 && omitFirstEdge) return false;\n                    return true;\n                }\n\n                if(y <= ycross && x !== xmini) crossings++;\n            }\n        }\n\n        // if we've gotten this far, odd crossings means inside, even is outside\n        return crossings % 2 === 1;\n    }\n\n    // detect if poly is degenerate\n    var degenerate = true;\n    var lastPt = pts[0];\n    for(i = 1; i < pts.length; i++) {\n        if(lastPt[0] !== pts[i][0] || lastPt[1] !== pts[i][1]) {\n            degenerate = false;\n            break;\n        }\n    }\n\n    return {\n        xmin: xmin,\n        xmax: xmax,\n        ymin: ymin,\n        ymax: ymax,\n        pts: pts,\n        contains: isRect ? rectContains : contains,\n        isRect: isRect,\n        degenerate: degenerate\n    };\n};\n\n/**\n * Test if a segment of a points array is bent or straight\n *\n * @param pts Array of [x, y] pairs\n * @param start the index of the proposed start of the straight section\n * @param end the index of the proposed end point\n * @param tolerance the max distance off the line connecting start and end\n *      before the line counts as bent\n * @returns boolean: true means this segment is bent, false means straight\n */\nvar isBent = polygon.isSegmentBent = function isBent(pts, start, end, tolerance) {\n    var startPt = pts[start];\n    var segment = [pts[end][0] - startPt[0], pts[end][1] - startPt[1]];\n    var segmentSquared = dot(segment, segment);\n    var segmentLen = Math.sqrt(segmentSquared);\n    var unitPerp = [-segment[1] / segmentLen, segment[0] / segmentLen];\n    var i;\n    var part;\n    var partParallel;\n\n    for(i = start + 1; i < end; i++) {\n        part = [pts[i][0] - startPt[0], pts[i][1] - startPt[1]];\n        partParallel = dot(part, segment);\n\n        if(partParallel < 0 || partParallel > segmentSquared ||\n            Math.abs(dot(part, unitPerp)) > tolerance) return true;\n    }\n    return false;\n};\n\n/**\n * Make a filtering polygon, to minimize the number of segments\n *\n * @param pts Array of [x, y] pairs (must start with at least 1 pair)\n * @param tolerance the maximum deviation from straight allowed for\n *      removing points to simplify the polygon\n *\n * @returns Object {addPt, raw, filtered}\n *      addPt is a function(pt: [x, y] pair) to add a raw point and\n *          continue filtering\n *      raw is all the input points\n *      filtered is the resulting filtered Array of [x, y] pairs\n */\npolygon.filter = function filter(pts, tolerance) {\n    var ptsFiltered = [pts[0]];\n    var doneRawIndex = 0;\n    var doneFilteredIndex = 0;\n\n    function addPt(pt) {\n        pts.push(pt);\n        var prevFilterLen = ptsFiltered.length;\n        var iLast = doneRawIndex;\n        ptsFiltered.splice(doneFilteredIndex + 1);\n\n        for(var i = iLast + 1; i < pts.length; i++) {\n            if(i === pts.length - 1 || isBent(pts, iLast, i + 1, tolerance)) {\n                ptsFiltered.push(pts[i]);\n                if(ptsFiltered.length < prevFilterLen - 2) {\n                    doneRawIndex = i;\n                    doneFilteredIndex = ptsFiltered.length - 1;\n                }\n                iLast = i;\n            }\n        }\n    }\n\n    if(pts.length > 1) {\n        var lastPt = pts.pop();\n        addPt(lastPt);\n    }\n\n    return {\n        addPt: addPt,\n        raw: pts,\n        filtered: ptsFiltered\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
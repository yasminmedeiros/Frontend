{"ast":null,"code":"// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n\n//\n// provides the raw computation functions that takes epsilon into account\n//\n// zero is defined to be between (-epsilon, epsilon) exclusive\n//\n\nfunction Epsilon(eps) {\n  if (typeof eps !== 'number') eps = 0.0000000001; // sane default? sure why not\n  var my = {\n    epsilon: function epsilon(v) {\n      if (typeof v === 'number') eps = v;\n      return eps;\n    },\n    pointAboveOrOnLine: function pointAboveOrOnLine(pt, left, right) {\n      var Ax = left[0];\n      var Ay = left[1];\n      var Bx = right[0];\n      var By = right[1];\n      var Cx = pt[0];\n      var Cy = pt[1];\n      return (Bx - Ax) * (Cy - Ay) - (By - Ay) * (Cx - Ax) >= -eps;\n    },\n    pointBetween: function pointBetween(p, left, right) {\n      // p must be collinear with left->right\n      // returns false if p == left, p == right, or left == right\n      var d_py_ly = p[1] - left[1];\n      var d_rx_lx = right[0] - left[0];\n      var d_px_lx = p[0] - left[0];\n      var d_ry_ly = right[1] - left[1];\n      var dot = d_px_lx * d_rx_lx + d_py_ly * d_ry_ly;\n      // if `dot` is 0, then `p` == `left` or `left` == `right` (reject)\n      // if `dot` is less than 0, then `p` is to the left of `left` (reject)\n      if (dot < eps) return false;\n      var sqlen = d_rx_lx * d_rx_lx + d_ry_ly * d_ry_ly;\n      // if `dot` > `sqlen`, then `p` is to the right of `right` (reject)\n      // therefore, if `dot - sqlen` is greater than 0, then `p` is to the right of `right` (reject)\n      if (dot - sqlen > -eps) return false;\n      return true;\n    },\n    pointsSameX: function pointsSameX(p1, p2) {\n      return Math.abs(p1[0] - p2[0]) < eps;\n    },\n    pointsSameY: function pointsSameY(p1, p2) {\n      return Math.abs(p1[1] - p2[1]) < eps;\n    },\n    pointsSame: function pointsSame(p1, p2) {\n      return my.pointsSameX(p1, p2) && my.pointsSameY(p1, p2);\n    },\n    pointsCompare: function pointsCompare(p1, p2) {\n      // returns -1 if p1 is smaller, 1 if p2 is smaller, 0 if equal\n      if (my.pointsSameX(p1, p2)) return my.pointsSameY(p1, p2) ? 0 : p1[1] < p2[1] ? -1 : 1;\n      return p1[0] < p2[0] ? -1 : 1;\n    },\n    pointsCollinear: function pointsCollinear(pt1, pt2, pt3) {\n      // does pt1->pt2->pt3 make a straight line?\n      // essentially this is just checking to see if the slope(pt1->pt2) === slope(pt2->pt3)\n      // if slopes are equal, then they must be collinear, because they share pt2\n      var dx1 = pt1[0] - pt2[0];\n      var dy1 = pt1[1] - pt2[1];\n      var dx2 = pt2[0] - pt3[0];\n      var dy2 = pt2[1] - pt3[1];\n      return Math.abs(dx1 * dy2 - dx2 * dy1) < eps;\n    },\n    linesIntersect: function linesIntersect(a0, a1, b0, b1) {\n      // returns false if the lines are coincident (e.g., parallel or on top of each other)\n      //\n      // returns an object if the lines intersect:\n      //   {\n      //     pt: [x, y],    where the intersection point is at\n      //     alongA: where intersection point is along A,\n      //     alongB: where intersection point is along B\n      //   }\n      //\n      //  alongA and alongB will each be one of: -2, -1, 0, 1, 2\n      //\n      //  with the following meaning:\n      //\n      //    -2   intersection point is before segment's first point\n      //    -1   intersection point is directly on segment's first point\n      //     0   intersection point is between segment's first and second points (exclusive)\n      //     1   intersection point is directly on segment's second point\n      //     2   intersection point is after segment's second point\n      var adx = a1[0] - a0[0];\n      var ady = a1[1] - a0[1];\n      var bdx = b1[0] - b0[0];\n      var bdy = b1[1] - b0[1];\n      var axb = adx * bdy - ady * bdx;\n      if (Math.abs(axb) < eps) return false; // lines are coincident\n\n      var dx = a0[0] - b0[0];\n      var dy = a0[1] - b0[1];\n      var A = (bdx * dy - bdy * dx) / axb;\n      var B = (adx * dy - ady * dx) / axb;\n      var ret = {\n        alongA: 0,\n        alongB: 0,\n        pt: [a0[0] + A * adx, a0[1] + A * ady]\n      };\n\n      // categorize where intersection point is along A and B\n\n      if (A <= -eps) ret.alongA = -2;else if (A < eps) ret.alongA = -1;else if (A - 1 <= -eps) ret.alongA = 0;else if (A - 1 < eps) ret.alongA = 1;else ret.alongA = 2;\n      if (B <= -eps) ret.alongB = -2;else if (B < eps) ret.alongB = -1;else if (B - 1 <= -eps) ret.alongB = 0;else if (B - 1 < eps) ret.alongB = 1;else ret.alongB = 2;\n      return ret;\n    },\n    pointInsideRegion: function pointInsideRegion(pt, region) {\n      var x = pt[0];\n      var y = pt[1];\n      var last_x = region[region.length - 1][0];\n      var last_y = region[region.length - 1][1];\n      var inside = false;\n      for (var i = 0; i < region.length; i++) {\n        var curr_x = region[i][0];\n        var curr_y = region[i][1];\n\n        // if y is between curr_y and last_y, and\n        // x is to the right of the boundary created by the line\n        if (curr_y - y > eps != last_y - y > eps && (last_x - curr_x) * (y - curr_y) / (last_y - curr_y) + curr_x - x > eps) inside = !inside;\n        last_x = curr_x;\n        last_y = curr_y;\n      }\n      return inside;\n    }\n  };\n  return my;\n}\nmodule.exports = Epsilon;","map":{"version":3,"names":["Epsilon","eps","my","epsilon","v","pointAboveOrOnLine","pt","left","right","Ax","Ay","Bx","By","Cx","Cy","pointBetween","p","d_py_ly","d_rx_lx","d_px_lx","d_ry_ly","dot","sqlen","pointsSameX","p1","p2","Math","abs","pointsSameY","pointsSame","pointsCompare","pointsCollinear","pt1","pt2","pt3","dx1","dy1","dx2","dy2","linesIntersect","a0","a1","b0","b1","adx","ady","bdx","bdy","axb","dx","dy","A","B","ret","alongA","alongB","pointInsideRegion","region","x","y","last_x","length","last_y","inside","i","curr_x","curr_y","module","exports"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/polybooljs/lib/epsilon.js"],"sourcesContent":["// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n\n//\n// provides the raw computation functions that takes epsilon into account\n//\n// zero is defined to be between (-epsilon, epsilon) exclusive\n//\n\nfunction Epsilon(eps){\n\tif (typeof eps !== 'number')\n\t\teps = 0.0000000001; // sane default? sure why not\n\tvar my = {\n\t\tepsilon: function(v){\n\t\t\tif (typeof v === 'number')\n\t\t\t\teps = v;\n\t\t\treturn eps;\n\t\t},\n\t\tpointAboveOrOnLine: function(pt, left, right){\n\t\t\tvar Ax = left[0];\n\t\t\tvar Ay = left[1];\n\t\t\tvar Bx = right[0];\n\t\t\tvar By = right[1];\n\t\t\tvar Cx = pt[0];\n\t\t\tvar Cy = pt[1];\n\t\t\treturn (Bx - Ax) * (Cy - Ay) - (By - Ay) * (Cx - Ax) >= -eps;\n\t\t},\n\t\tpointBetween: function(p, left, right){\n\t\t\t// p must be collinear with left->right\n\t\t\t// returns false if p == left, p == right, or left == right\n\t\t\tvar d_py_ly = p[1] - left[1];\n\t\t\tvar d_rx_lx = right[0] - left[0];\n\t\t\tvar d_px_lx = p[0] - left[0];\n\t\t\tvar d_ry_ly = right[1] - left[1];\n\n\t\t\tvar dot = d_px_lx * d_rx_lx + d_py_ly * d_ry_ly;\n\t\t\t// if `dot` is 0, then `p` == `left` or `left` == `right` (reject)\n\t\t\t// if `dot` is less than 0, then `p` is to the left of `left` (reject)\n\t\t\tif (dot < eps)\n\t\t\t\treturn false;\n\n\t\t\tvar sqlen = d_rx_lx * d_rx_lx + d_ry_ly * d_ry_ly;\n\t\t\t// if `dot` > `sqlen`, then `p` is to the right of `right` (reject)\n\t\t\t// therefore, if `dot - sqlen` is greater than 0, then `p` is to the right of `right` (reject)\n\t\t\tif (dot - sqlen > -eps)\n\t\t\t\treturn false;\n\n\t\t\treturn true;\n\t\t},\n\t\tpointsSameX: function(p1, p2){\n\t\t\treturn Math.abs(p1[0] - p2[0]) < eps;\n\t\t},\n\t\tpointsSameY: function(p1, p2){\n\t\t\treturn Math.abs(p1[1] - p2[1]) < eps;\n\t\t},\n\t\tpointsSame: function(p1, p2){\n\t\t\treturn my.pointsSameX(p1, p2) && my.pointsSameY(p1, p2);\n\t\t},\n\t\tpointsCompare: function(p1, p2){\n\t\t\t// returns -1 if p1 is smaller, 1 if p2 is smaller, 0 if equal\n\t\t\tif (my.pointsSameX(p1, p2))\n\t\t\t\treturn my.pointsSameY(p1, p2) ? 0 : (p1[1] < p2[1] ? -1 : 1);\n\t\t\treturn p1[0] < p2[0] ? -1 : 1;\n\t\t},\n\t\tpointsCollinear: function(pt1, pt2, pt3){\n\t\t\t// does pt1->pt2->pt3 make a straight line?\n\t\t\t// essentially this is just checking to see if the slope(pt1->pt2) === slope(pt2->pt3)\n\t\t\t// if slopes are equal, then they must be collinear, because they share pt2\n\t\t\tvar dx1 = pt1[0] - pt2[0];\n\t\t\tvar dy1 = pt1[1] - pt2[1];\n\t\t\tvar dx2 = pt2[0] - pt3[0];\n\t\t\tvar dy2 = pt2[1] - pt3[1];\n\t\t\treturn Math.abs(dx1 * dy2 - dx2 * dy1) < eps;\n\t\t},\n\t\tlinesIntersect: function(a0, a1, b0, b1){\n\t\t\t// returns false if the lines are coincident (e.g., parallel or on top of each other)\n\t\t\t//\n\t\t\t// returns an object if the lines intersect:\n\t\t\t//   {\n\t\t\t//     pt: [x, y],    where the intersection point is at\n\t\t\t//     alongA: where intersection point is along A,\n\t\t\t//     alongB: where intersection point is along B\n\t\t\t//   }\n\t\t\t//\n\t\t\t//  alongA and alongB will each be one of: -2, -1, 0, 1, 2\n\t\t\t//\n\t\t\t//  with the following meaning:\n\t\t\t//\n\t\t\t//    -2   intersection point is before segment's first point\n\t\t\t//    -1   intersection point is directly on segment's first point\n\t\t\t//     0   intersection point is between segment's first and second points (exclusive)\n\t\t\t//     1   intersection point is directly on segment's second point\n\t\t\t//     2   intersection point is after segment's second point\n\t\t\tvar adx = a1[0] - a0[0];\n\t\t\tvar ady = a1[1] - a0[1];\n\t\t\tvar bdx = b1[0] - b0[0];\n\t\t\tvar bdy = b1[1] - b0[1];\n\n\t\t\tvar axb = adx * bdy - ady * bdx;\n\t\t\tif (Math.abs(axb) < eps)\n\t\t\t\treturn false; // lines are coincident\n\n\t\t\tvar dx = a0[0] - b0[0];\n\t\t\tvar dy = a0[1] - b0[1];\n\n\t\t\tvar A = (bdx * dy - bdy * dx) / axb;\n\t\t\tvar B = (adx * dy - ady * dx) / axb;\n\n\t\t\tvar ret = {\n\t\t\t\talongA: 0,\n\t\t\t\talongB: 0,\n\t\t\t\tpt: [\n\t\t\t\t\ta0[0] + A * adx,\n\t\t\t\t\ta0[1] + A * ady\n\t\t\t\t]\n\t\t\t};\n\n\t\t\t// categorize where intersection point is along A and B\n\n\t\t\tif (A <= -eps)\n\t\t\t\tret.alongA = -2;\n\t\t\telse if (A < eps)\n\t\t\t\tret.alongA = -1;\n\t\t\telse if (A - 1 <= -eps)\n\t\t\t\tret.alongA = 0;\n\t\t\telse if (A - 1 < eps)\n\t\t\t\tret.alongA = 1;\n\t\t\telse\n\t\t\t\tret.alongA = 2;\n\n\t\t\tif (B <= -eps)\n\t\t\t\tret.alongB = -2;\n\t\t\telse if (B < eps)\n\t\t\t\tret.alongB = -1;\n\t\t\telse if (B - 1 <= -eps)\n\t\t\t\tret.alongB = 0;\n\t\t\telse if (B - 1 < eps)\n\t\t\t\tret.alongB = 1;\n\t\t\telse\n\t\t\t\tret.alongB = 2;\n\n\t\t\treturn ret;\n\t\t},\n\t\tpointInsideRegion: function(pt, region){\n\t\t\tvar x = pt[0];\n\t\t\tvar y = pt[1];\n\t\t\tvar last_x = region[region.length - 1][0];\n\t\t\tvar last_y = region[region.length - 1][1];\n\t\t\tvar inside = false;\n\t\t\tfor (var i = 0; i < region.length; i++){\n\t\t\t\tvar curr_x = region[i][0];\n\t\t\t\tvar curr_y = region[i][1];\n\n\t\t\t\t// if y is between curr_y and last_y, and\n\t\t\t\t// x is to the right of the boundary created by the line\n\t\t\t\tif ((curr_y - y > eps) != (last_y - y > eps) &&\n\t\t\t\t\t(last_x - curr_x) * (y - curr_y) / (last_y - curr_y) + curr_x - x > eps)\n\t\t\t\t\tinside = !inside\n\n\t\t\t\tlast_x = curr_x;\n\t\t\t\tlast_y = curr_y;\n\t\t\t}\n\t\t\treturn inside;\n\t\t}\n\t};\n\treturn my;\n}\n\nmodule.exports = Epsilon;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
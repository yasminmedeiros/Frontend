{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar calcColorscale = require('../scatter/colorscale_calc');\nvar arraysToCalcdata = require('../scatter/arrays_to_calcdata');\nvar calcSelection = require('../scatter/calc_selection');\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\nvar lookupCarpet = require('../carpet/lookup_carpetid');\nmodule.exports = function calc(gd, trace) {\n  var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n  if (!carpet || !carpet.visible || carpet.visible === 'legendonly') return;\n  var i;\n\n  // Transfer this over from carpet before plotting since this is a necessary\n  // condition in order for cartesian to actually plot this trace:\n  trace.xaxis = carpet.xaxis;\n  trace.yaxis = carpet.yaxis;\n\n  // make the calcdata array\n  var serieslen = trace._length;\n  var cd = new Array(serieslen);\n  var a, b;\n  var needsCull = false;\n  for (i = 0; i < serieslen; i++) {\n    a = trace.a[i];\n    b = trace.b[i];\n    if (isNumeric(a) && isNumeric(b)) {\n      var xy = carpet.ab2xy(+a, +b, true);\n      var visible = carpet.isVisible(+a, +b);\n      if (!visible) needsCull = true;\n      cd[i] = {\n        x: xy[0],\n        y: xy[1],\n        a: a,\n        b: b,\n        vis: visible\n      };\n    } else cd[i] = {\n      x: false,\n      y: false\n    };\n  }\n  trace._needsCull = needsCull;\n  cd[0].carpet = carpet;\n  cd[0].trace = trace;\n  calcMarkerSize(trace, serieslen);\n  calcColorscale(gd, trace);\n  arraysToCalcdata(cd, trace);\n  calcSelection(cd, trace);\n  return cd;\n};","map":{"version":3,"names":["isNumeric","require","calcColorscale","arraysToCalcdata","calcSelection","calcMarkerSize","lookupCarpet","module","exports","calc","gd","trace","carpet","_carpetTrace","visible","i","xaxis","yaxis","serieslen","_length","cd","Array","a","b","needsCull","xy","ab2xy","isVisible","x","y","vis","_needsCull"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/scattercarpet/calc.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar calcColorscale = require('../scatter/colorscale_calc');\nvar arraysToCalcdata = require('../scatter/arrays_to_calcdata');\nvar calcSelection = require('../scatter/calc_selection');\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\nvar lookupCarpet = require('../carpet/lookup_carpetid');\n\nmodule.exports = function calc(gd, trace) {\n    var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n    if(!carpet || !carpet.visible || carpet.visible === 'legendonly') return;\n    var i;\n\n    // Transfer this over from carpet before plotting since this is a necessary\n    // condition in order for cartesian to actually plot this trace:\n    trace.xaxis = carpet.xaxis;\n    trace.yaxis = carpet.yaxis;\n\n    // make the calcdata array\n    var serieslen = trace._length;\n    var cd = new Array(serieslen);\n    var a, b;\n    var needsCull = false;\n    for(i = 0; i < serieslen; i++) {\n        a = trace.a[i];\n        b = trace.b[i];\n        if(isNumeric(a) && isNumeric(b)) {\n            var xy = carpet.ab2xy(+a, +b, true);\n            var visible = carpet.isVisible(+a, +b);\n            if(!visible) needsCull = true;\n            cd[i] = {x: xy[0], y: xy[1], a: a, b: b, vis: visible};\n        }\n        else cd[i] = {x: false, y: false};\n    }\n\n    trace._needsCull = needsCull;\n\n    cd[0].carpet = carpet;\n    cd[0].trace = trace;\n\n    calcMarkerSize(trace, serieslen);\n    calcColorscale(gd, trace);\n    arraysToCalcdata(cd, trace);\n    calcSelection(cd, trace);\n\n    return cd;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAEzC,IAAIC,cAAc,GAAGD,OAAO,CAAC,4BAA4B,CAAC;AAC1D,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,+BAA+B,CAAC;AAC/D,IAAIG,aAAa,GAAGH,OAAO,CAAC,2BAA2B,CAAC;AACxD,IAAII,cAAc,GAAGJ,OAAO,CAAC,iBAAiB,CAAC,CAACI,cAAc;AAC9D,IAAIC,YAAY,GAAGL,OAAO,CAAC,2BAA2B,CAAC;AAEvDM,MAAM,CAACC,OAAO,GAAG,SAASC,IAAI,CAACC,EAAE,EAAEC,KAAK,EAAE;EACtC,IAAIC,MAAM,GAAGD,KAAK,CAACE,YAAY,GAAGP,YAAY,CAACI,EAAE,EAAEC,KAAK,CAAC;EACzD,IAAG,CAACC,MAAM,IAAI,CAACA,MAAM,CAACE,OAAO,IAAIF,MAAM,CAACE,OAAO,KAAK,YAAY,EAAE;EAClE,IAAIC,CAAC;;EAEL;EACA;EACAJ,KAAK,CAACK,KAAK,GAAGJ,MAAM,CAACI,KAAK;EAC1BL,KAAK,CAACM,KAAK,GAAGL,MAAM,CAACK,KAAK;;EAE1B;EACA,IAAIC,SAAS,GAAGP,KAAK,CAACQ,OAAO;EAC7B,IAAIC,EAAE,GAAG,IAAIC,KAAK,CAACH,SAAS,CAAC;EAC7B,IAAII,CAAC,EAAEC,CAAC;EACR,IAAIC,SAAS,GAAG,KAAK;EACrB,KAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,SAAS,EAAEH,CAAC,EAAE,EAAE;IAC3BO,CAAC,GAAGX,KAAK,CAACW,CAAC,CAACP,CAAC,CAAC;IACdQ,CAAC,GAAGZ,KAAK,CAACY,CAAC,CAACR,CAAC,CAAC;IACd,IAAGf,SAAS,CAACsB,CAAC,CAAC,IAAItB,SAAS,CAACuB,CAAC,CAAC,EAAE;MAC7B,IAAIE,EAAE,GAAGb,MAAM,CAACc,KAAK,CAAC,CAACJ,CAAC,EAAE,CAACC,CAAC,EAAE,IAAI,CAAC;MACnC,IAAIT,OAAO,GAAGF,MAAM,CAACe,SAAS,CAAC,CAACL,CAAC,EAAE,CAACC,CAAC,CAAC;MACtC,IAAG,CAACT,OAAO,EAAEU,SAAS,GAAG,IAAI;MAC7BJ,EAAE,CAACL,CAAC,CAAC,GAAG;QAACa,CAAC,EAAEH,EAAE,CAAC,CAAC,CAAC;QAAEI,CAAC,EAAEJ,EAAE,CAAC,CAAC,CAAC;QAAEH,CAAC,EAAEA,CAAC;QAAEC,CAAC,EAAEA,CAAC;QAAEO,GAAG,EAAEhB;MAAO,CAAC;IAC1D,CAAC,MACIM,EAAE,CAACL,CAAC,CAAC,GAAG;MAACa,CAAC,EAAE,KAAK;MAAEC,CAAC,EAAE;IAAK,CAAC;EACrC;EAEAlB,KAAK,CAACoB,UAAU,GAAGP,SAAS;EAE5BJ,EAAE,CAAC,CAAC,CAAC,CAACR,MAAM,GAAGA,MAAM;EACrBQ,EAAE,CAAC,CAAC,CAAC,CAACT,KAAK,GAAGA,KAAK;EAEnBN,cAAc,CAACM,KAAK,EAAEO,SAAS,CAAC;EAChChB,cAAc,CAACQ,EAAE,EAAEC,KAAK,CAAC;EACzBR,gBAAgB,CAACiB,EAAE,EAAET,KAAK,CAAC;EAC3BP,aAAa,CAACgB,EAAE,EAAET,KAAK,CAAC;EAExB,OAAOS,EAAE;AACb,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
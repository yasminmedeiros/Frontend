{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n/* eslint-disable no-console */\nvar dfltConfig = require('../plot_api/plot_config').dfltConfig;\nvar loggers = module.exports = {};\n\n/**\n * ------------------------------------------\n * debugging tools\n * ------------------------------------------\n */\n\nloggers.log = function () {\n  if (dfltConfig.logging > 1) {\n    var messages = ['LOG:'];\n    for (var i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n    apply(console.trace || console.log, messages);\n  }\n};\nloggers.warn = function () {\n  if (dfltConfig.logging > 0) {\n    var messages = ['WARN:'];\n    for (var i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n    apply(console.trace || console.log, messages);\n  }\n};\nloggers.error = function () {\n  if (dfltConfig.logging > 0) {\n    var messages = ['ERROR:'];\n    for (var i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n    apply(console.error, messages);\n  }\n};\n\n/*\n * Robust apply, for IE9 where console.log doesn't support\n * apply like other functions do\n */\nfunction apply(f, args) {\n  if (f && f.apply) {\n    try {\n      // `this` should always be console, since here we're always\n      // applying a method of the console object.\n      f.apply(console, args);\n      return;\n    } catch (e) {/* in case apply failed, fall back on the code below */}\n  }\n\n  // no apply - just try calling the function on each arg independently\n  for (var i = 0; i < args.length; i++) {\n    try {\n      f(args[i]);\n    } catch (e) {\n      // still fails - last resort simple console.log\n      console.log(args[i]);\n    }\n  }\n}","map":{"version":3,"names":["dfltConfig","require","loggers","module","exports","log","logging","messages","i","arguments","length","push","apply","console","trace","warn","error","f","args","e"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/lib/loggers.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n/* eslint-disable no-console */\n\nvar dfltConfig = require('../plot_api/plot_config').dfltConfig;\n\nvar loggers = module.exports = {};\n\n/**\n * ------------------------------------------\n * debugging tools\n * ------------------------------------------\n */\n\nloggers.log = function() {\n    if(dfltConfig.logging > 1) {\n        var messages = ['LOG:'];\n\n        for(var i = 0; i < arguments.length; i++) {\n            messages.push(arguments[i]);\n        }\n\n        apply(console.trace || console.log, messages);\n    }\n};\n\nloggers.warn = function() {\n    if(dfltConfig.logging > 0) {\n        var messages = ['WARN:'];\n\n        for(var i = 0; i < arguments.length; i++) {\n            messages.push(arguments[i]);\n        }\n\n        apply(console.trace || console.log, messages);\n    }\n};\n\nloggers.error = function() {\n    if(dfltConfig.logging > 0) {\n        var messages = ['ERROR:'];\n\n        for(var i = 0; i < arguments.length; i++) {\n            messages.push(arguments[i]);\n        }\n\n        apply(console.error, messages);\n    }\n};\n\n/*\n * Robust apply, for IE9 where console.log doesn't support\n * apply like other functions do\n */\nfunction apply(f, args) {\n    if(f && f.apply) {\n        try {\n            // `this` should always be console, since here we're always\n            // applying a method of the console object.\n            f.apply(console, args);\n            return;\n        }\n        catch(e) { /* in case apply failed, fall back on the code below */ }\n    }\n\n    // no apply - just try calling the function on each arg independently\n    for(var i = 0; i < args.length; i++) {\n        try {\n            f(args[i]);\n        }\n        catch(e) {\n            // still fails - last resort simple console.log\n            console.log(args[i]);\n        }\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,yBAAyB,CAAC,CAACD,UAAU;AAE9D,IAAIE,OAAO,GAAGC,MAAM,CAACC,OAAO,GAAG,CAAC,CAAC;;AAEjC;AACA;AACA;AACA;AACA;;AAEAF,OAAO,CAACG,GAAG,GAAG,YAAW;EACrB,IAAGL,UAAU,CAACM,OAAO,GAAG,CAAC,EAAE;IACvB,IAAIC,QAAQ,GAAG,CAAC,MAAM,CAAC;IAEvB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MACtCD,QAAQ,CAACI,IAAI,CAACF,SAAS,CAACD,CAAC,CAAC,CAAC;IAC/B;IAEAI,KAAK,CAACC,OAAO,CAACC,KAAK,IAAID,OAAO,CAACR,GAAG,EAAEE,QAAQ,CAAC;EACjD;AACJ,CAAC;AAEDL,OAAO,CAACa,IAAI,GAAG,YAAW;EACtB,IAAGf,UAAU,CAACM,OAAO,GAAG,CAAC,EAAE;IACvB,IAAIC,QAAQ,GAAG,CAAC,OAAO,CAAC;IAExB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MACtCD,QAAQ,CAACI,IAAI,CAACF,SAAS,CAACD,CAAC,CAAC,CAAC;IAC/B;IAEAI,KAAK,CAACC,OAAO,CAACC,KAAK,IAAID,OAAO,CAACR,GAAG,EAAEE,QAAQ,CAAC;EACjD;AACJ,CAAC;AAEDL,OAAO,CAACc,KAAK,GAAG,YAAW;EACvB,IAAGhB,UAAU,CAACM,OAAO,GAAG,CAAC,EAAE;IACvB,IAAIC,QAAQ,GAAG,CAAC,QAAQ,CAAC;IAEzB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MACtCD,QAAQ,CAACI,IAAI,CAACF,SAAS,CAACD,CAAC,CAAC,CAAC;IAC/B;IAEAI,KAAK,CAACC,OAAO,CAACG,KAAK,EAAET,QAAQ,CAAC;EAClC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,SAASK,KAAK,CAACK,CAAC,EAAEC,IAAI,EAAE;EACpB,IAAGD,CAAC,IAAIA,CAAC,CAACL,KAAK,EAAE;IACb,IAAI;MACA;MACA;MACAK,CAAC,CAACL,KAAK,CAACC,OAAO,EAAEK,IAAI,CAAC;MACtB;IACJ,CAAC,CACD,OAAMC,CAAC,EAAE,CAAE;EACf;;EAEA;EACA,KAAI,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,IAAI,CAACR,MAAM,EAAEF,CAAC,EAAE,EAAE;IACjC,IAAI;MACAS,CAAC,CAACC,IAAI,CAACV,CAAC,CAAC,CAAC;IACd,CAAC,CACD,OAAMW,CAAC,EAAE;MACL;MACAN,OAAO,CAACR,GAAG,CAACa,IAAI,CAACV,CAAC,CAAC,CAAC;IACxB;EACJ;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}
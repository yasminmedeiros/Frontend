{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n/**\n * mergeLength: set trace length as the minimum of all dimension data lengths\n *     and propagates this length into each dimension\n *\n * @param {object} traceOut: the fullData trace\n * @param {Array(object)} dimensions: array of dimension objects\n * @param {string} dataAttr: the attribute of each dimension containing the data\n * @param {integer} len: an already-existing length from other attributes\n */\nmodule.exports = function (traceOut, dimensions, dataAttr, len) {\n  if (!len) len = Infinity;\n  var i, dimi;\n  for (i = 0; i < dimensions.length; i++) {\n    dimi = dimensions[i];\n    if (dimi.visible) len = Math.min(len, dimi[dataAttr].length);\n  }\n  if (len === Infinity) len = 0;\n  traceOut._length = len;\n  for (i = 0; i < dimensions.length; i++) {\n    dimi = dimensions[i];\n    if (dimi.visible) dimi._length = len;\n  }\n  return len;\n};","map":{"version":3,"names":["module","exports","traceOut","dimensions","dataAttr","len","Infinity","i","dimi","length","visible","Math","min","_length"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/parcoords/merge_length.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n/**\n * mergeLength: set trace length as the minimum of all dimension data lengths\n *     and propagates this length into each dimension\n *\n * @param {object} traceOut: the fullData trace\n * @param {Array(object)} dimensions: array of dimension objects\n * @param {string} dataAttr: the attribute of each dimension containing the data\n * @param {integer} len: an already-existing length from other attributes\n */\nmodule.exports = function(traceOut, dimensions, dataAttr, len) {\n    if(!len) len = Infinity;\n    var i, dimi;\n    for(i = 0; i < dimensions.length; i++) {\n        dimi = dimensions[i];\n        if(dimi.visible) len = Math.min(len, dimi[dataAttr].length);\n    }\n    if(len === Infinity) len = 0;\n\n    traceOut._length = len;\n    for(i = 0; i < dimensions.length; i++) {\n        dimi = dimensions[i];\n        if(dimi.visible) dimi._length = len;\n    }\n\n    return len;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAO,GAAG,UAASC,QAAQ,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,GAAG,EAAE;EAC3D,IAAG,CAACA,GAAG,EAAEA,GAAG,GAAGC,QAAQ;EACvB,IAAIC,CAAC,EAAEC,IAAI;EACX,KAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,CAACM,MAAM,EAAEF,CAAC,EAAE,EAAE;IACnCC,IAAI,GAAGL,UAAU,CAACI,CAAC,CAAC;IACpB,IAAGC,IAAI,CAACE,OAAO,EAAEL,GAAG,GAAGM,IAAI,CAACC,GAAG,CAACP,GAAG,EAAEG,IAAI,CAACJ,QAAQ,CAAC,CAACK,MAAM,CAAC;EAC/D;EACA,IAAGJ,GAAG,KAAKC,QAAQ,EAAED,GAAG,GAAG,CAAC;EAE5BH,QAAQ,CAACW,OAAO,GAAGR,GAAG;EACtB,KAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,CAACM,MAAM,EAAEF,CAAC,EAAE,EAAE;IACnCC,IAAI,GAAGL,UAAU,CAACI,CAAC,CAAC;IACpB,IAAGC,IAAI,CAACE,OAAO,EAAEF,IAAI,CAACK,OAAO,GAAGR,GAAG;EACvC;EAEA,OAAOA,GAAG;AACd,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
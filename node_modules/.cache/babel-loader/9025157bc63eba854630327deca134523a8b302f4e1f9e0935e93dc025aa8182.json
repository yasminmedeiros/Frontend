{"ast":null,"code":"'use strict';\n\nmodule.exports = createTextElements;\nvar createBuffer = require('gl-buffer');\nvar createShader = require('gl-shader');\nvar getText = require('text-cache');\nvar bsearch = require('binary-search-bounds');\nvar shaders = require('./shaders');\nfunction TextElements(plot, vbo, shader) {\n  this.plot = plot;\n  this.vbo = vbo;\n  this.shader = shader;\n  this.tickOffset = [[], []];\n  this.tickX = [[], []];\n  this.labelOffset = [0, 0];\n  this.labelCount = [0, 0];\n}\nvar proto = TextElements.prototype;\nproto.drawTicks = function () {\n  var DATA_AXIS = [0, 0];\n  var SCREEN_OFFSET = [0, 0];\n  var ZERO_2 = [0, 0];\n  return function (axis) {\n    var plot = this.plot;\n    var shader = this.shader;\n    var tickX = this.tickX[axis];\n    var tickOffset = this.tickOffset[axis];\n    var gl = plot.gl;\n    var viewBox = plot.viewBox;\n    var dataBox = plot.dataBox;\n    var screenBox = plot.screenBox;\n    var pixelRatio = plot.pixelRatio;\n    var tickEnable = plot.tickEnable;\n    var tickPad = plot.tickPad;\n    var textColor = plot.tickColor;\n    var textAngle = plot.tickAngle;\n    // todo check if this should be used (now unused)\n    // var tickLength  = plot.tickMarkLength\n\n    var labelEnable = plot.labelEnable;\n    var labelPad = plot.labelPad;\n    var labelColor = plot.labelColor;\n    var labelAngle = plot.labelAngle;\n    var labelOffset = this.labelOffset[axis];\n    var labelCount = this.labelCount[axis];\n    var start = bsearch.lt(tickX, dataBox[axis]);\n    var end = bsearch.le(tickX, dataBox[axis + 2]);\n    DATA_AXIS[0] = DATA_AXIS[1] = 0;\n    DATA_AXIS[axis] = 1;\n    SCREEN_OFFSET[axis] = (viewBox[2 + axis] + viewBox[axis]) / (screenBox[2 + axis] - screenBox[axis]) - 1.0;\n    var screenScale = 2.0 / screenBox[2 + (axis ^ 1)] - screenBox[axis ^ 1];\n    SCREEN_OFFSET[axis ^ 1] = screenScale * viewBox[axis ^ 1] - 1.0;\n    if (tickEnable[axis]) {\n      SCREEN_OFFSET[axis ^ 1] -= screenScale * pixelRatio * tickPad[axis];\n      if (start < end && tickOffset[end] > tickOffset[start]) {\n        shader.uniforms.dataAxis = DATA_AXIS;\n        shader.uniforms.screenOffset = SCREEN_OFFSET;\n        shader.uniforms.color = textColor[axis];\n        shader.uniforms.angle = textAngle[axis];\n        gl.drawArrays(gl.TRIANGLES, tickOffset[start], tickOffset[end] - tickOffset[start]);\n      }\n    }\n    if (labelEnable[axis] && labelCount) {\n      SCREEN_OFFSET[axis ^ 1] -= screenScale * pixelRatio * labelPad[axis];\n      shader.uniforms.dataAxis = ZERO_2;\n      shader.uniforms.screenOffset = SCREEN_OFFSET;\n      shader.uniforms.color = labelColor[axis];\n      shader.uniforms.angle = labelAngle[axis];\n      gl.drawArrays(gl.TRIANGLES, labelOffset, labelCount);\n    }\n    SCREEN_OFFSET[axis ^ 1] = screenScale * viewBox[2 + (axis ^ 1)] - 1.0;\n    if (tickEnable[axis + 2]) {\n      SCREEN_OFFSET[axis ^ 1] += screenScale * pixelRatio * tickPad[axis + 2];\n      if (start < end && tickOffset[end] > tickOffset[start]) {\n        shader.uniforms.dataAxis = DATA_AXIS;\n        shader.uniforms.screenOffset = SCREEN_OFFSET;\n        shader.uniforms.color = textColor[axis + 2];\n        shader.uniforms.angle = textAngle[axis + 2];\n        gl.drawArrays(gl.TRIANGLES, tickOffset[start], tickOffset[end] - tickOffset[start]);\n      }\n    }\n    if (labelEnable[axis + 2] && labelCount) {\n      SCREEN_OFFSET[axis ^ 1] += screenScale * pixelRatio * labelPad[axis + 2];\n      shader.uniforms.dataAxis = ZERO_2;\n      shader.uniforms.screenOffset = SCREEN_OFFSET;\n      shader.uniforms.color = labelColor[axis + 2];\n      shader.uniforms.angle = labelAngle[axis + 2];\n      gl.drawArrays(gl.TRIANGLES, labelOffset, labelCount);\n    }\n  };\n}();\nproto.drawTitle = function () {\n  var DATA_AXIS = [0, 0];\n  var SCREEN_OFFSET = [0, 0];\n  return function () {\n    var plot = this.plot;\n    var shader = this.shader;\n    var gl = plot.gl;\n    var screenBox = plot.screenBox;\n    var titleCenter = plot.titleCenter;\n    var titleAngle = plot.titleAngle;\n    var titleColor = plot.titleColor;\n    var pixelRatio = plot.pixelRatio;\n    if (!this.titleCount) {\n      return;\n    }\n    for (var i = 0; i < 2; ++i) {\n      SCREEN_OFFSET[i] = 2.0 * (titleCenter[i] * pixelRatio - screenBox[i]) / (screenBox[2 + i] - screenBox[i]) - 1;\n    }\n    shader.bind();\n    shader.uniforms.dataAxis = DATA_AXIS;\n    shader.uniforms.screenOffset = SCREEN_OFFSET;\n    shader.uniforms.angle = titleAngle;\n    shader.uniforms.color = titleColor;\n    gl.drawArrays(gl.TRIANGLES, this.titleOffset, this.titleCount);\n  };\n}();\nproto.bind = function () {\n  var DATA_SHIFT = [0, 0];\n  var DATA_SCALE = [0, 0];\n  var TEXT_SCALE = [0, 0];\n  return function () {\n    var plot = this.plot;\n    var shader = this.shader;\n    var bounds = plot._tickBounds;\n    var dataBox = plot.dataBox;\n    var screenBox = plot.screenBox;\n    var viewBox = plot.viewBox;\n    shader.bind();\n\n    //Set up coordinate scaling uniforms\n    for (var i = 0; i < 2; ++i) {\n      var lo = bounds[i];\n      var hi = bounds[i + 2];\n      var boundScale = hi - lo;\n      var dataCenter = 0.5 * (dataBox[i + 2] + dataBox[i]);\n      var dataWidth = dataBox[i + 2] - dataBox[i];\n      var viewLo = viewBox[i];\n      var viewHi = viewBox[i + 2];\n      var viewScale = viewHi - viewLo;\n      var screenLo = screenBox[i];\n      var screenHi = screenBox[i + 2];\n      var screenScale = screenHi - screenLo;\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth * viewScale / screenScale;\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth * viewScale / screenScale;\n    }\n    TEXT_SCALE[1] = 2.0 * plot.pixelRatio / (screenBox[3] - screenBox[1]);\n    TEXT_SCALE[0] = TEXT_SCALE[1] * (screenBox[3] - screenBox[1]) / (screenBox[2] - screenBox[0]);\n    shader.uniforms.dataScale = DATA_SCALE;\n    shader.uniforms.dataShift = DATA_SHIFT;\n    shader.uniforms.textScale = TEXT_SCALE;\n\n    //Set attributes\n    this.vbo.bind();\n    shader.attributes.textCoordinate.pointer();\n  };\n}();\nproto.update = function (options) {\n  var vertices = [];\n  var axesTicks = options.ticks;\n  var bounds = options.bounds;\n  var i, j, k, data, scale, dimension;\n  for (dimension = 0; dimension < 2; ++dimension) {\n    var offsets = [Math.floor(vertices.length / 3)],\n      tickX = [-Infinity];\n\n    //Copy vertices over to buffer\n    var ticks = axesTicks[dimension];\n    for (i = 0; i < ticks.length; ++i) {\n      var tick = ticks[i];\n      var x = tick.x;\n      var text = tick.text;\n      var font = tick.font || 'sans-serif';\n      scale = tick.fontSize || 12;\n      var coordScale = 1.0 / (bounds[dimension + 2] - bounds[dimension]);\n      var coordShift = bounds[dimension];\n      var rows = text.split('\\n');\n      for (var r = 0; r < rows.length; r++) {\n        data = getText(font, rows[r]).data;\n        for (j = 0; j < data.length; j += 2) {\n          vertices.push(data[j] * scale, -data[j + 1] * scale - r * scale * 1.2, (x - coordShift) * coordScale);\n        }\n      }\n      offsets.push(Math.floor(vertices.length / 3));\n      tickX.push(x);\n    }\n    this.tickOffset[dimension] = offsets;\n    this.tickX[dimension] = tickX;\n  }\n\n  //Add labels\n  for (dimension = 0; dimension < 2; ++dimension) {\n    this.labelOffset[dimension] = Math.floor(vertices.length / 3);\n    data = getText(options.labelFont[dimension], options.labels[dimension], {\n      textAlign: 'center'\n    }).data;\n    scale = options.labelSize[dimension];\n    for (i = 0; i < data.length; i += 2) {\n      vertices.push(data[i] * scale, -data[i + 1] * scale, 0);\n    }\n    this.labelCount[dimension] = Math.floor(vertices.length / 3) - this.labelOffset[dimension];\n  }\n\n  //Add title\n  this.titleOffset = Math.floor(vertices.length / 3);\n  data = getText(options.titleFont, options.title).data;\n  scale = options.titleSize;\n  for (i = 0; i < data.length; i += 2) {\n    vertices.push(data[i] * scale, -data[i + 1] * scale, 0);\n  }\n  this.titleCount = Math.floor(vertices.length / 3) - this.titleOffset;\n\n  //Upload new vertices\n  this.vbo.update(vertices);\n};\nproto.dispose = function () {\n  this.vbo.dispose();\n  this.shader.dispose();\n};\nfunction createTextElements(plot) {\n  var gl = plot.gl;\n  var vbo = createBuffer(gl);\n  var shader = createShader(gl, shaders.textVert, shaders.textFrag);\n  var text = new TextElements(plot, vbo, shader);\n  return text;\n}","map":{"version":3,"names":["module","exports","createTextElements","createBuffer","require","createShader","getText","bsearch","shaders","TextElements","plot","vbo","shader","tickOffset","tickX","labelOffset","labelCount","proto","prototype","drawTicks","DATA_AXIS","SCREEN_OFFSET","ZERO_2","axis","gl","viewBox","dataBox","screenBox","pixelRatio","tickEnable","tickPad","textColor","tickColor","textAngle","tickAngle","labelEnable","labelPad","labelColor","labelAngle","start","lt","end","le","screenScale","uniforms","dataAxis","screenOffset","color","angle","drawArrays","TRIANGLES","drawTitle","titleCenter","titleAngle","titleColor","titleCount","i","bind","titleOffset","DATA_SHIFT","DATA_SCALE","TEXT_SCALE","bounds","_tickBounds","lo","hi","boundScale","dataCenter","dataWidth","viewLo","viewHi","viewScale","screenLo","screenHi","dataScale","dataShift","textScale","attributes","textCoordinate","pointer","update","options","vertices","axesTicks","ticks","j","k","data","scale","dimension","offsets","Math","floor","length","Infinity","tick","x","text","font","fontSize","coordScale","coordShift","rows","split","r","push","labelFont","labels","textAlign","labelSize","titleFont","title","titleSize","dispose","textVert","textFrag"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/gl-plot2d/lib/text.js"],"sourcesContent":["'use strict'\n\nmodule.exports = createTextElements\n\nvar createBuffer = require('gl-buffer')\nvar createShader = require('gl-shader')\nvar getText      = require('text-cache')\nvar bsearch      = require('binary-search-bounds')\nvar shaders      = require('./shaders')\n\nfunction TextElements(plot, vbo, shader) {\n  this.plot         = plot\n  this.vbo          = vbo\n  this.shader       = shader\n  this.tickOffset   = [[],[]]\n  this.tickX        = [[],[]]\n  this.labelOffset  = [0,0]\n  this.labelCount   = [0,0]\n}\n\nvar proto = TextElements.prototype\n\nproto.drawTicks = (function() {\n  var DATA_AXIS = [0,0]\n  var SCREEN_OFFSET = [0,0]\n  var ZERO_2 = [0,0]\n\n  return function(axis) {\n    var plot        = this.plot\n    var shader      = this.shader\n    var tickX       = this.tickX[axis]\n    var tickOffset  = this.tickOffset[axis]\n    var gl          = plot.gl\n    var viewBox     = plot.viewBox\n    var dataBox     = plot.dataBox\n    var screenBox   = plot.screenBox\n    var pixelRatio  = plot.pixelRatio\n    var tickEnable  = plot.tickEnable\n    var tickPad     = plot.tickPad\n    var textColor   = plot.tickColor\n    var textAngle   = plot.tickAngle\n    // todo check if this should be used (now unused)\n    // var tickLength  = plot.tickMarkLength\n\n    var labelEnable = plot.labelEnable\n    var labelPad    = plot.labelPad\n    var labelColor  = plot.labelColor\n    var labelAngle  = plot.labelAngle\n    var labelOffset = this.labelOffset[axis]\n    var labelCount  = this.labelCount[axis]\n\n    var start = bsearch.lt(tickX, dataBox[axis])\n    var end   = bsearch.le(tickX, dataBox[axis+2])\n\n    DATA_AXIS[0]    = DATA_AXIS[1] = 0\n    DATA_AXIS[axis] = 1\n\n    SCREEN_OFFSET[axis] = (viewBox[2+axis] + viewBox[axis]) / (screenBox[2+axis] - screenBox[axis]) - 1.0\n\n    var screenScale = 2.0 / screenBox[2+(axis^1)] - screenBox[axis^1]\n\n    SCREEN_OFFSET[axis^1] = screenScale * viewBox[axis^1] - 1.0\n    if(tickEnable[axis]) {\n      SCREEN_OFFSET[axis^1] -= screenScale * pixelRatio * tickPad[axis]\n      if(start < end && tickOffset[end] > tickOffset[start]) {\n        shader.uniforms.dataAxis     = DATA_AXIS\n        shader.uniforms.screenOffset = SCREEN_OFFSET\n        shader.uniforms.color        = textColor[axis]\n        shader.uniforms.angle        = textAngle[axis]\n        gl.drawArrays(\n          gl.TRIANGLES,\n          tickOffset[start],\n          tickOffset[end] - tickOffset[start])\n      }\n    }\n    if(labelEnable[axis] && labelCount) {\n      SCREEN_OFFSET[axis^1] -= screenScale * pixelRatio * labelPad[axis]\n      shader.uniforms.dataAxis     = ZERO_2\n      shader.uniforms.screenOffset = SCREEN_OFFSET\n      shader.uniforms.color        = labelColor[axis]\n      shader.uniforms.angle        = labelAngle[axis]\n      gl.drawArrays(\n        gl.TRIANGLES,\n        labelOffset,\n        labelCount)\n    }\n\n    SCREEN_OFFSET[axis^1] = screenScale * viewBox[2+(axis^1)] - 1.0\n    if(tickEnable[axis+2]) {\n      SCREEN_OFFSET[axis^1] += screenScale * pixelRatio * tickPad[axis+2]\n      if(start < end && tickOffset[end] > tickOffset[start]) {\n        shader.uniforms.dataAxis     = DATA_AXIS\n        shader.uniforms.screenOffset = SCREEN_OFFSET\n        shader.uniforms.color        = textColor[axis+2]\n        shader.uniforms.angle        = textAngle[axis+2]\n        gl.drawArrays(\n          gl.TRIANGLES,\n          tickOffset[start],\n          tickOffset[end] - tickOffset[start])\n      }\n    }\n    if(labelEnable[axis+2] && labelCount) {\n      SCREEN_OFFSET[axis^1] += screenScale * pixelRatio * labelPad[axis+2]\n      shader.uniforms.dataAxis     = ZERO_2\n      shader.uniforms.screenOffset = SCREEN_OFFSET\n      shader.uniforms.color        = labelColor[axis+2]\n      shader.uniforms.angle        = labelAngle[axis+2]\n      gl.drawArrays(\n        gl.TRIANGLES,\n        labelOffset,\n        labelCount)\n    }\n\n  }\n})()\n\nproto.drawTitle = (function() {\n  var DATA_AXIS = [0,0]\n  var SCREEN_OFFSET = [0,0]\n\n  return function() {\n    var plot        = this.plot\n    var shader      = this.shader\n    var gl          = plot.gl\n    var screenBox   = plot.screenBox\n    var titleCenter = plot.titleCenter\n    var titleAngle  = plot.titleAngle\n    var titleColor  = plot.titleColor\n    var pixelRatio  = plot.pixelRatio\n\n    if(!this.titleCount) {\n      return\n    }\n\n    for(var i=0; i<2; ++i) {\n      SCREEN_OFFSET[i] = 2.0 * (titleCenter[i]*pixelRatio - screenBox[i]) /\n        (screenBox[2+i] - screenBox[i]) - 1\n    }\n\n    shader.bind()\n    shader.uniforms.dataAxis      = DATA_AXIS\n    shader.uniforms.screenOffset  = SCREEN_OFFSET\n    shader.uniforms.angle         = titleAngle\n    shader.uniforms.color         = titleColor\n\n    gl.drawArrays(gl.TRIANGLES, this.titleOffset, this.titleCount)\n  }\n})()\n\nproto.bind = (function() {\n  var DATA_SHIFT = [0,0]\n  var DATA_SCALE = [0,0]\n  var TEXT_SCALE = [0,0]\n\n  return function() {\n    var plot      = this.plot\n    var shader    = this.shader\n    var bounds    = plot._tickBounds\n    var dataBox   = plot.dataBox\n    var screenBox = plot.screenBox\n    var viewBox   = plot.viewBox\n\n    shader.bind()\n\n    //Set up coordinate scaling uniforms\n    for(var i=0; i<2; ++i) {\n\n      var lo = bounds[i]\n      var hi = bounds[i+2]\n      var boundScale = hi - lo\n      var dataCenter  = 0.5 * (dataBox[i+2] + dataBox[i])\n      var dataWidth   = (dataBox[i+2] - dataBox[i])\n\n      var viewLo = viewBox[i]\n      var viewHi = viewBox[i+2]\n      var viewScale = viewHi - viewLo\n      var screenLo = screenBox[i]\n      var screenHi = screenBox[i+2]\n      var screenScale = screenHi - screenLo\n\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth * viewScale / screenScale\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth * viewScale / screenScale\n    }\n\n    TEXT_SCALE[1] = 2.0 * plot.pixelRatio / (screenBox[3] - screenBox[1])\n    TEXT_SCALE[0] = TEXT_SCALE[1] * (screenBox[3] - screenBox[1]) / (screenBox[2] - screenBox[0])\n\n    shader.uniforms.dataScale = DATA_SCALE\n    shader.uniforms.dataShift = DATA_SHIFT\n    shader.uniforms.textScale = TEXT_SCALE\n\n    //Set attributes\n    this.vbo.bind()\n    shader.attributes.textCoordinate.pointer()\n  }\n})()\n\nproto.update = function(options) {\n  var vertices  = []\n  var axesTicks = options.ticks\n  var bounds    = options.bounds\n  var i, j, k, data, scale, dimension\n\n  for(dimension=0; dimension<2; ++dimension) {\n    var offsets = [Math.floor(vertices.length/3)], tickX = [-Infinity]\n\n    //Copy vertices over to buffer\n    var ticks = axesTicks[dimension]\n    for(i=0; i<ticks.length; ++i) {\n      var tick  = ticks[i]\n      var x     = tick.x\n      var text  = tick.text\n      var font  = tick.font || 'sans-serif'\n      scale = (tick.fontSize || 12)\n\n      var coordScale = 1.0 / (bounds[dimension+2] - bounds[dimension])\n      var coordShift = bounds[dimension]\n\n      var rows = text.split('\\n')\n      for(var r = 0; r < rows.length; r++) {\n        data = getText(font, rows[r]).data\n        for (j = 0; j < data.length; j += 2) {\n          vertices.push(\n              data[j] * scale,\n              -data[j + 1] * scale - r * scale * 1.2,\n              (x - coordShift) * coordScale)\n        }\n      }\n\n      offsets.push(Math.floor(vertices.length/3))\n      tickX.push(x)\n    }\n\n    this.tickOffset[dimension] = offsets\n    this.tickX[dimension] = tickX\n  }\n\n  //Add labels\n  for(dimension=0; dimension<2; ++dimension) {\n    this.labelOffset[dimension] = Math.floor(vertices.length/3)\n\n    data  = getText(options.labelFont[dimension], options.labels[dimension], { textAlign: 'center' }).data\n    scale = options.labelSize[dimension]\n    for(i=0; i<data.length; i+=2) {\n      vertices.push(data[i]*scale, -data[i+1]*scale, 0)\n    }\n\n    this.labelCount[dimension] =\n      Math.floor(vertices.length/3) - this.labelOffset[dimension]\n  }\n\n  //Add title\n  this.titleOffset = Math.floor(vertices.length/3)\n  data = getText(options.titleFont, options.title).data\n  scale = options.titleSize\n  for(i=0; i<data.length; i+=2) {\n    vertices.push(data[i]*scale, -data[i+1]*scale, 0)\n  }\n  this.titleCount = Math.floor(vertices.length/3) - this.titleOffset\n\n  //Upload new vertices\n  this.vbo.update(vertices)\n}\n\nproto.dispose = function() {\n  this.vbo.dispose()\n  this.shader.dispose()\n}\n\nfunction createTextElements(plot) {\n  var gl = plot.gl\n  var vbo = createBuffer(gl)\n  var shader = createShader(gl, shaders.textVert, shaders.textFrag)\n  var text = new TextElements(plot, vbo, shader)\n  return text\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
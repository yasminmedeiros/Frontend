{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar Plots = require('../plots');\nvar Drawing = require('../../components/drawing');\nvar getModuleCalcData = require('../get_data').getModuleCalcData;\nvar axisIds = require('./axis_ids');\nvar constants = require('./constants');\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\nvar ensureSingle = Lib.ensureSingle;\nfunction ensureSingleAndAddDatum(parent, nodeType, className) {\n  return Lib.ensureSingle(parent, nodeType, className, function (s) {\n    s.datum(className);\n  });\n}\nexports.name = 'cartesian';\nexports.attr = ['xaxis', 'yaxis'];\nexports.idRoot = ['x', 'y'];\nexports.idRegex = constants.idRegex;\nexports.attrRegex = constants.attrRegex;\nexports.attributes = require('./attributes');\nexports.layoutAttributes = require('./layout_attributes');\nexports.supplyLayoutDefaults = require('./layout_defaults');\nexports.transitionAxes = require('./transition_axes');\nexports.finalizeSubplots = function (layoutIn, layoutOut) {\n  var subplots = layoutOut._subplots;\n  var xList = subplots.xaxis;\n  var yList = subplots.yaxis;\n  var spSVG = subplots.cartesian;\n  var spAll = spSVG.concat(subplots.gl2d || []);\n  var allX = {};\n  var allY = {};\n  var i, xi, yi;\n  for (i = 0; i < spAll.length; i++) {\n    var parts = spAll[i].split('y');\n    allX[parts[0]] = 1;\n    allY['y' + parts[1]] = 1;\n  }\n\n  // check for x axes with no subplot, and make one from the anchor of that x axis\n  for (i = 0; i < xList.length; i++) {\n    xi = xList[i];\n    if (!allX[xi]) {\n      yi = (layoutIn[axisIds.id2name(xi)] || {}).anchor;\n      if (!constants.idRegex.y.test(yi)) yi = 'y';\n      spSVG.push(xi + yi);\n      spAll.push(xi + yi);\n      if (!allY[yi]) {\n        allY[yi] = 1;\n        Lib.pushUnique(yList, yi);\n      }\n    }\n  }\n\n  // same for y axes with no subplot\n  for (i = 0; i < yList.length; i++) {\n    yi = yList[i];\n    if (!allY[yi]) {\n      xi = (layoutIn[axisIds.id2name(yi)] || {}).anchor;\n      if (!constants.idRegex.x.test(xi)) xi = 'x';\n      spSVG.push(xi + yi);\n      spAll.push(xi + yi);\n      if (!allX[xi]) {\n        allX[xi] = 1;\n        Lib.pushUnique(xList, xi);\n      }\n    }\n  }\n\n  // finally, if we've gotten here we're supposed to show cartesian...\n  // so if there are NO subplots at all, make one from the first\n  // x & y axes in the input layout\n  if (!spAll.length) {\n    xi = '';\n    yi = '';\n    for (var ki in layoutIn) {\n      if (constants.attrRegex.test(ki)) {\n        var axLetter = ki.charAt(0);\n        if (axLetter === 'x') {\n          if (!xi || +ki.substr(5) < +xi.substr(5)) {\n            xi = ki;\n          }\n        } else if (!yi || +ki.substr(5) < +yi.substr(5)) {\n          yi = ki;\n        }\n      }\n    }\n    xi = xi ? axisIds.name2id(xi) : 'x';\n    yi = yi ? axisIds.name2id(yi) : 'y';\n    xList.push(xi);\n    yList.push(yi);\n    spSVG.push(xi + yi);\n  }\n};\n\n/**\n * Cartesian.plot\n *\n * @param {DOM div | object} gd\n * @param {array | null} (optional) traces\n *  array of traces indices to plot\n *  if undefined, plots all cartesian traces,\n *  if null, plots no traces\n * @param {object} (optional) transitionOpts\n *  transition option object\n * @param {function} (optional) makeOnCompleteCallback\n *  transition make callback function from Plots.transition\n */\nexports.plot = function (gd, traces, transitionOpts, makeOnCompleteCallback) {\n  var fullLayout = gd._fullLayout;\n  var subplots = fullLayout._subplots.cartesian;\n  var calcdata = gd.calcdata;\n  var i;\n  if (traces === null) {\n    // this means no updates required, must return here\n    // so that plotOne doesn't remove the trace layers\n    return;\n  } else if (!Array.isArray(traces)) {\n    // If traces is not provided, then it's a complete replot and missing\n    // traces are removed\n    traces = [];\n    for (i = 0; i < calcdata.length; i++) {\n      traces.push(i);\n    }\n  }\n  for (i = 0; i < subplots.length; i++) {\n    var subplot = subplots[i];\n    var subplotInfo = fullLayout._plots[subplot];\n\n    // Get all calcdata for this subplot:\n    var cdSubplot = [];\n    var pcd;\n    for (var j = 0; j < calcdata.length; j++) {\n      var cd = calcdata[j];\n      var trace = cd[0].trace;\n\n      // Skip trace if whitelist provided and it's not whitelisted:\n      // if (Array.isArray(traces) && traces.indexOf(i) === -1) continue;\n      if (trace.xaxis + trace.yaxis === subplot) {\n        // XXX: Should trace carpet dependencies. Only replot all carpet plots if the carpet\n        // axis has actually changed:\n        //\n        // If this trace is specifically requested, add it to the list:\n        if (traces.indexOf(trace.index) !== -1 || trace.carpet) {\n          // Okay, so example: traces 0, 1, and 2 have fill = tonext. You animate\n          // traces 0 and 2. Trace 1 also needs to be updated, otherwise its fill\n          // is outdated. So this retroactively adds the previous trace if the\n          // traces are interdependent.\n          if (pcd && pcd[0].trace.xaxis + pcd[0].trace.yaxis === subplot && ['tonextx', 'tonexty', 'tonext'].indexOf(trace.fill) !== -1 && cdSubplot.indexOf(pcd) === -1) {\n            cdSubplot.push(pcd);\n          }\n          cdSubplot.push(cd);\n        }\n\n        // Track the previous trace on this subplot for the retroactive-add step\n        // above:\n        pcd = cd;\n      }\n    }\n    plotOne(gd, subplotInfo, cdSubplot, transitionOpts, makeOnCompleteCallback);\n  }\n};\nfunction plotOne(gd, plotinfo, cdSubplot, transitionOpts, makeOnCompleteCallback) {\n  var traceLayerClasses = constants.traceLayerClasses;\n  var fullLayout = gd._fullLayout;\n  var modules = fullLayout._modules;\n  var _module, cdModuleAndOthers, cdModule;\n  var layerData = [];\n  var zoomScaleQueryParts = [];\n  for (var i = 0; i < modules.length; i++) {\n    _module = modules[i];\n    var name = _module.name;\n    var categories = Registry.modules[name].categories;\n    if (categories.svg) {\n      var className = _module.layerName || name + 'layer';\n      var plotMethod = _module.plot;\n\n      // plot all visible traces of this type on this subplot at once\n      cdModuleAndOthers = getModuleCalcData(cdSubplot, plotMethod);\n      cdModule = cdModuleAndOthers[0];\n      // don't need to search the found traces again - in fact we need to NOT\n      // so that if two modules share the same plotter we don't double-plot\n      cdSubplot = cdModuleAndOthers[1];\n      if (cdModule.length) {\n        layerData.push({\n          i: traceLayerClasses.indexOf(className),\n          className: className,\n          plotMethod: plotMethod,\n          cdModule: cdModule\n        });\n      }\n      if (categories.zoomScale) {\n        zoomScaleQueryParts.push('.' + className);\n      }\n    }\n  }\n  layerData.sort(function (a, b) {\n    return a.i - b.i;\n  });\n  var layers = plotinfo.plot.selectAll('g.mlayer').data(layerData, function (d) {\n    return d.className;\n  });\n  layers.enter().append('g').attr('class', function (d) {\n    return d.className;\n  }).classed('mlayer', true);\n  layers.exit().remove();\n  layers.order();\n  layers.each(function (d) {\n    var sel = d3.select(this);\n    var className = d.className;\n    d.plotMethod(gd, plotinfo, d.cdModule, sel, transitionOpts, makeOnCompleteCallback);\n\n    // layers that allow `cliponaxis: false`\n    if (className !== 'scatterlayer' && className !== 'barlayer') {\n      Drawing.setClipUrl(sel, plotinfo.layerClipId, gd);\n    }\n  });\n\n  // call Scattergl.plot separately\n  if (fullLayout._has('scattergl')) {\n    _module = Registry.getModule('scattergl');\n    cdModule = getModuleCalcData(cdSubplot, _module)[0];\n    _module.plot(gd, plotinfo, cdModule);\n  }\n\n  // stash \"hot\" selections for faster interaction on drag and scroll\n  if (!gd._context.staticPlot) {\n    if (plotinfo._hasClipOnAxisFalse) {\n      plotinfo.clipOnAxisFalseTraces = plotinfo.plot.selectAll('.scatterlayer, .barlayer').selectAll('.trace');\n    }\n    if (zoomScaleQueryParts.length) {\n      var traces = plotinfo.plot.selectAll(zoomScaleQueryParts.join(',')).selectAll('.trace');\n      plotinfo.zoomScalePts = traces.selectAll('path.point');\n      plotinfo.zoomScaleTxt = traces.selectAll('.textpoint');\n    }\n  }\n}\nexports.clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var oldPlots = oldFullLayout._plots || {};\n  var newPlots = newFullLayout._plots || {};\n  var oldSubplotList = oldFullLayout._subplots || {};\n  var plotinfo;\n  var i, k;\n\n  // when going from a large splom graph to something else,\n  // we need to clear <g subplot> so that the new cartesian subplot\n  // can have the correct layer ordering\n  if (oldFullLayout._hasOnlyLargeSploms && !newFullLayout._hasOnlyLargeSploms) {\n    for (k in oldPlots) {\n      plotinfo = oldPlots[k];\n      if (plotinfo.plotgroup) plotinfo.plotgroup.remove();\n    }\n  }\n  var hadGl = oldFullLayout._has && oldFullLayout._has('gl');\n  var hasGl = newFullLayout._has && newFullLayout._has('gl');\n  if (hadGl && !hasGl) {\n    for (k in oldPlots) {\n      plotinfo = oldPlots[k];\n      if (plotinfo._scene) plotinfo._scene.destroy();\n    }\n  }\n\n  // delete any titles we don't need anymore\n  // check if axis list has changed, and if so clear old titles\n  if (oldSubplotList.xaxis && oldSubplotList.yaxis) {\n    var oldAxIDs = axisIds.listIds({\n      _fullLayout: oldFullLayout\n    });\n    for (i = 0; i < oldAxIDs.length; i++) {\n      var oldAxId = oldAxIDs[i];\n      if (!newFullLayout[axisIds.id2name(oldAxId)]) {\n        oldFullLayout._infolayer.selectAll('.g-' + oldAxId + 'title').remove();\n      }\n    }\n  }\n\n  // if we've gotten rid of all cartesian traces, remove all the subplot svg items\n  var hadCartesian = oldFullLayout._has && oldFullLayout._has('cartesian');\n  var hasCartesian = newFullLayout._has && newFullLayout._has('cartesian');\n  if (hadCartesian && !hasCartesian) {\n    purgeSubplotLayers(oldFullLayout._cartesianlayer.selectAll('.subplot'), oldFullLayout);\n    oldFullLayout._defs.selectAll('.axesclip').remove();\n    delete oldFullLayout._axisConstraintGroups;\n  }\n  // otherwise look for subplots we need to remove\n  else if (oldSubplotList.cartesian) {\n    for (i = 0; i < oldSubplotList.cartesian.length; i++) {\n      var oldSubplotId = oldSubplotList.cartesian[i];\n      if (!newPlots[oldSubplotId]) {\n        var selector = '.' + oldSubplotId + ',.' + oldSubplotId + '-x,.' + oldSubplotId + '-y';\n        oldFullLayout._cartesianlayer.selectAll(selector).remove();\n        removeSubplotExtras(oldSubplotId, oldFullLayout);\n      }\n    }\n  }\n};\nexports.drawFramework = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotData = makeSubplotData(gd);\n  var subplotLayers = fullLayout._cartesianlayer.selectAll('.subplot').data(subplotData, String);\n  subplotLayers.enter().append('g').attr('class', function (d) {\n    return 'subplot ' + d[0];\n  });\n  subplotLayers.order();\n  subplotLayers.exit().call(purgeSubplotLayers, fullLayout);\n  subplotLayers.each(function (d) {\n    var id = d[0];\n    var plotinfo = fullLayout._plots[id];\n    plotinfo.plotgroup = d3.select(this);\n    makeSubplotLayer(gd, plotinfo);\n\n    // make separate drag layers for each subplot,\n    // but append them to paper rather than the plot groups,\n    // so they end up on top of the rest\n    plotinfo.draglayer = ensureSingle(fullLayout._draggers, 'g', id);\n  });\n};\nexports.rangePlot = function (gd, plotinfo, cdSubplot) {\n  makeSubplotLayer(gd, plotinfo);\n  plotOne(gd, plotinfo, cdSubplot);\n  Plots.style(gd);\n};\nfunction makeSubplotData(gd) {\n  var fullLayout = gd._fullLayout;\n  var ids = fullLayout._subplots.cartesian;\n  var len = ids.length;\n  var i, j, id, plotinfo, xa, ya;\n\n  // split 'regular' and 'overlaying' subplots\n  var regulars = [];\n  var overlays = [];\n  for (i = 0; i < len; i++) {\n    id = ids[i];\n    plotinfo = fullLayout._plots[id];\n    xa = plotinfo.xaxis;\n    ya = plotinfo.yaxis;\n    var xa2 = xa._mainAxis;\n    var ya2 = ya._mainAxis;\n    var mainplot = xa2._id + ya2._id;\n    var mainplotinfo = fullLayout._plots[mainplot];\n    plotinfo.overlays = [];\n    if (mainplot !== id && mainplotinfo) {\n      plotinfo.mainplot = mainplot;\n      plotinfo.mainplotinfo = mainplotinfo;\n      overlays.push(id);\n    } else {\n      plotinfo.mainplot = undefined;\n      plotinfo.mainPlotinfo = undefined;\n      regulars.push(id);\n    }\n  }\n\n  // fill in list of overlaying subplots in 'main plot'\n  for (i = 0; i < overlays.length; i++) {\n    id = overlays[i];\n    plotinfo = fullLayout._plots[id];\n    plotinfo.mainplotinfo.overlays.push(plotinfo);\n  }\n\n  // put 'regular' subplot data before 'overlaying'\n  var subplotIds = regulars.concat(overlays);\n  var subplotData = new Array(len);\n  for (i = 0; i < len; i++) {\n    id = subplotIds[i];\n    plotinfo = fullLayout._plots[id];\n    xa = plotinfo.xaxis;\n    ya = plotinfo.yaxis;\n\n    // use info about axis layer and overlaying pattern\n    // to clean what need to be cleaned up in exit selection\n    var d = [id, xa.layer, ya.layer, xa.overlaying || '', ya.overlaying || ''];\n    for (j = 0; j < plotinfo.overlays.length; j++) {\n      d.push(plotinfo.overlays[j].id);\n    }\n    subplotData[i] = d;\n  }\n  return subplotData;\n}\nfunction makeSubplotLayer(gd, plotinfo) {\n  var plotgroup = plotinfo.plotgroup;\n  var id = plotinfo.id;\n  var xLayer = constants.layerValue2layerClass[plotinfo.xaxis.layer];\n  var yLayer = constants.layerValue2layerClass[plotinfo.yaxis.layer];\n  var hasOnlyLargeSploms = gd._fullLayout._hasOnlyLargeSploms;\n  if (!plotinfo.mainplot) {\n    if (hasOnlyLargeSploms) {\n      // TODO could do even better\n      // - we don't need plot (but we would have to mock it in lsInner\n      //   and other places\n      // - we don't (x|y)lines and (x|y)axislayer for most subplots\n      //   usually just the bottom x and left y axes.\n      plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n      plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n      plotinfo.xaxislayer = ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n      plotinfo.yaxislayer = ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n    } else {\n      var backLayer = ensureSingle(plotgroup, 'g', 'layer-subplot');\n      plotinfo.shapelayer = ensureSingle(backLayer, 'g', 'shapelayer');\n      plotinfo.imagelayer = ensureSingle(backLayer, 'g', 'imagelayer');\n      plotinfo.gridlayer = ensureSingle(plotgroup, 'g', 'gridlayer');\n      plotinfo.zerolinelayer = ensureSingle(plotgroup, 'g', 'zerolinelayer');\n      ensureSingle(plotgroup, 'path', 'xlines-below');\n      ensureSingle(plotgroup, 'path', 'ylines-below');\n      plotinfo.overlinesBelow = ensureSingle(plotgroup, 'g', 'overlines-below');\n      ensureSingle(plotgroup, 'g', 'xaxislayer-below');\n      ensureSingle(plotgroup, 'g', 'yaxislayer-below');\n      plotinfo.overaxesBelow = ensureSingle(plotgroup, 'g', 'overaxes-below');\n      plotinfo.plot = ensureSingle(plotgroup, 'g', 'plot');\n      plotinfo.overplot = ensureSingle(plotgroup, 'g', 'overplot');\n      plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n      plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n      plotinfo.overlinesAbove = ensureSingle(plotgroup, 'g', 'overlines-above');\n      ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n      ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n      plotinfo.overaxesAbove = ensureSingle(plotgroup, 'g', 'overaxes-above');\n\n      // set refs to correct layers as determined by 'axis.layer'\n      plotinfo.xlines = plotgroup.select('.xlines-' + xLayer);\n      plotinfo.ylines = plotgroup.select('.ylines-' + yLayer);\n      plotinfo.xaxislayer = plotgroup.select('.xaxislayer-' + xLayer);\n      plotinfo.yaxislayer = plotgroup.select('.yaxislayer-' + yLayer);\n    }\n  } else {\n    var mainplotinfo = plotinfo.mainplotinfo;\n    var mainplotgroup = mainplotinfo.plotgroup;\n    var xId = id + '-x';\n    var yId = id + '-y';\n\n    // now make the components of overlaid subplots\n    // overlays don't have backgrounds, and append all\n    // their other components to the corresponding\n    // extra groups of their main plots.\n\n    plotinfo.gridlayer = mainplotinfo.gridlayer;\n    plotinfo.zerolinelayer = mainplotinfo.zerolinelayer;\n    ensureSingle(mainplotinfo.overlinesBelow, 'path', xId);\n    ensureSingle(mainplotinfo.overlinesBelow, 'path', yId);\n    ensureSingle(mainplotinfo.overaxesBelow, 'g', xId);\n    ensureSingle(mainplotinfo.overaxesBelow, 'g', yId);\n    plotinfo.plot = ensureSingle(mainplotinfo.overplot, 'g', id);\n    ensureSingle(mainplotinfo.overlinesAbove, 'path', xId);\n    ensureSingle(mainplotinfo.overlinesAbove, 'path', yId);\n    ensureSingle(mainplotinfo.overaxesAbove, 'g', xId);\n    ensureSingle(mainplotinfo.overaxesAbove, 'g', yId);\n\n    // set refs to correct layers as determined by 'abovetraces'\n    plotinfo.xlines = mainplotgroup.select('.overlines-' + xLayer).select('.' + xId);\n    plotinfo.ylines = mainplotgroup.select('.overlines-' + yLayer).select('.' + yId);\n    plotinfo.xaxislayer = mainplotgroup.select('.overaxes-' + xLayer).select('.' + xId);\n    plotinfo.yaxislayer = mainplotgroup.select('.overaxes-' + yLayer).select('.' + yId);\n  }\n\n  // common attributes for all subplots, overlays or not\n\n  if (!hasOnlyLargeSploms) {\n    ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.xaxis._id);\n    ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.yaxis._id);\n    plotinfo.gridlayer.selectAll('g').map(function (d) {\n      return d[0];\n    }).sort(axisIds.idSort);\n  }\n  plotinfo.xlines.style('fill', 'none').classed('crisp', true);\n  plotinfo.ylines.style('fill', 'none').classed('crisp', true);\n}\nfunction purgeSubplotLayers(layers, fullLayout) {\n  if (!layers) return;\n  var overlayIdsToRemove = {};\n  layers.each(function (d) {\n    var id = d[0];\n    var plotgroup = d3.select(this);\n    plotgroup.remove();\n    removeSubplotExtras(id, fullLayout);\n    overlayIdsToRemove[id] = true;\n\n    // do not remove individual axis <clipPath>s here\n    // as other subplots may need them\n  });\n\n  // must remove overlaid subplot trace layers 'manually'\n\n  for (var k in fullLayout._plots) {\n    var subplotInfo = fullLayout._plots[k];\n    var overlays = subplotInfo.overlays || [];\n    for (var j = 0; j < overlays.length; j++) {\n      var overlayInfo = overlays[j];\n      if (overlayIdsToRemove[overlayInfo.id]) {\n        overlayInfo.plot.selectAll('.trace').remove();\n      }\n    }\n  }\n}\nfunction removeSubplotExtras(subplotId, fullLayout) {\n  fullLayout._draggers.selectAll('g.' + subplotId).remove();\n  fullLayout._defs.select('#clip' + fullLayout._uid + subplotId + 'plot').remove();\n}\nexports.toSVG = function (gd) {\n  var imageRoot = gd._fullLayout._glimages;\n  var root = d3.select(gd).selectAll('.svg-container');\n  var canvases = root.filter(function (d, i) {\n    return i === root.size() - 1;\n  }).selectAll('.gl-canvas-context, .gl-canvas-focus');\n  function canvasToImage() {\n    var canvas = this;\n    var imageData = canvas.toDataURL('image/png');\n    var image = imageRoot.append('svg:image');\n    image.attr({\n      xmlns: xmlnsNamespaces.svg,\n      'xlink:href': imageData,\n      preserveAspectRatio: 'none',\n      x: 0,\n      y: 0,\n      width: canvas.width,\n      height: canvas.height\n    });\n  }\n  canvases.each(canvasToImage);\n};\nexports.updateFx = require('./graph_interact').updateFx;","map":{"version":3,"names":["d3","require","Registry","Lib","Plots","Drawing","getModuleCalcData","axisIds","constants","xmlnsNamespaces","ensureSingle","ensureSingleAndAddDatum","parent","nodeType","className","s","datum","exports","name","attr","idRoot","idRegex","attrRegex","attributes","layoutAttributes","supplyLayoutDefaults","transitionAxes","finalizeSubplots","layoutIn","layoutOut","subplots","_subplots","xList","xaxis","yList","yaxis","spSVG","cartesian","spAll","concat","gl2d","allX","allY","i","xi","yi","length","parts","split","id2name","anchor","y","test","push","pushUnique","x","ki","axLetter","charAt","substr","name2id","plot","gd","traces","transitionOpts","makeOnCompleteCallback","fullLayout","_fullLayout","calcdata","Array","isArray","subplot","subplotInfo","_plots","cdSubplot","pcd","j","cd","trace","indexOf","index","carpet","fill","plotOne","plotinfo","traceLayerClasses","modules","_modules","_module","cdModuleAndOthers","cdModule","layerData","zoomScaleQueryParts","categories","svg","layerName","plotMethod","zoomScale","sort","a","b","layers","selectAll","data","d","enter","append","classed","exit","remove","order","each","sel","select","setClipUrl","layerClipId","_has","getModule","_context","staticPlot","_hasClipOnAxisFalse","clipOnAxisFalseTraces","join","zoomScalePts","zoomScaleTxt","clean","newFullData","newFullLayout","oldFullData","oldFullLayout","oldPlots","newPlots","oldSubplotList","k","_hasOnlyLargeSploms","plotgroup","hadGl","hasGl","_scene","destroy","oldAxIDs","listIds","oldAxId","_infolayer","hadCartesian","hasCartesian","purgeSubplotLayers","_cartesianlayer","_defs","_axisConstraintGroups","oldSubplotId","selector","removeSubplotExtras","drawFramework","subplotData","makeSubplotData","subplotLayers","String","call","id","makeSubplotLayer","draglayer","_draggers","rangePlot","style","ids","len","xa","ya","regulars","overlays","xa2","_mainAxis","ya2","mainplot","_id","mainplotinfo","undefined","mainPlotinfo","subplotIds","layer","overlaying","xLayer","layerValue2layerClass","yLayer","hasOnlyLargeSploms","xlines","ylines","xaxislayer","yaxislayer","backLayer","shapelayer","imagelayer","gridlayer","zerolinelayer","overlinesBelow","overaxesBelow","overplot","overlinesAbove","overaxesAbove","mainplotgroup","xId","yId","map","idSort","overlayIdsToRemove","overlayInfo","subplotId","_uid","toSVG","imageRoot","_glimages","root","canvases","filter","size","canvasToImage","canvas","imageData","toDataURL","image","xmlns","preserveAspectRatio","width","height","updateFx"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/plots/cartesian/index.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar d3 = require('d3');\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar Plots = require('../plots');\nvar Drawing = require('../../components/drawing');\n\nvar getModuleCalcData = require('../get_data').getModuleCalcData;\nvar axisIds = require('./axis_ids');\nvar constants = require('./constants');\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nvar ensureSingle = Lib.ensureSingle;\n\nfunction ensureSingleAndAddDatum(parent, nodeType, className) {\n    return Lib.ensureSingle(parent, nodeType, className, function(s) {\n        s.datum(className);\n    });\n}\n\nexports.name = 'cartesian';\n\nexports.attr = ['xaxis', 'yaxis'];\n\nexports.idRoot = ['x', 'y'];\n\nexports.idRegex = constants.idRegex;\n\nexports.attrRegex = constants.attrRegex;\n\nexports.attributes = require('./attributes');\n\nexports.layoutAttributes = require('./layout_attributes');\n\nexports.supplyLayoutDefaults = require('./layout_defaults');\n\nexports.transitionAxes = require('./transition_axes');\n\nexports.finalizeSubplots = function(layoutIn, layoutOut) {\n    var subplots = layoutOut._subplots;\n    var xList = subplots.xaxis;\n    var yList = subplots.yaxis;\n    var spSVG = subplots.cartesian;\n    var spAll = spSVG.concat(subplots.gl2d || []);\n    var allX = {};\n    var allY = {};\n    var i, xi, yi;\n\n    for(i = 0; i < spAll.length; i++) {\n        var parts = spAll[i].split('y');\n        allX[parts[0]] = 1;\n        allY['y' + parts[1]] = 1;\n    }\n\n    // check for x axes with no subplot, and make one from the anchor of that x axis\n    for(i = 0; i < xList.length; i++) {\n        xi = xList[i];\n        if(!allX[xi]) {\n            yi = (layoutIn[axisIds.id2name(xi)] || {}).anchor;\n            if(!constants.idRegex.y.test(yi)) yi = 'y';\n            spSVG.push(xi + yi);\n            spAll.push(xi + yi);\n\n            if(!allY[yi]) {\n                allY[yi] = 1;\n                Lib.pushUnique(yList, yi);\n            }\n        }\n    }\n\n    // same for y axes with no subplot\n    for(i = 0; i < yList.length; i++) {\n        yi = yList[i];\n        if(!allY[yi]) {\n            xi = (layoutIn[axisIds.id2name(yi)] || {}).anchor;\n            if(!constants.idRegex.x.test(xi)) xi = 'x';\n            spSVG.push(xi + yi);\n            spAll.push(xi + yi);\n\n            if(!allX[xi]) {\n                allX[xi] = 1;\n                Lib.pushUnique(xList, xi);\n            }\n        }\n    }\n\n    // finally, if we've gotten here we're supposed to show cartesian...\n    // so if there are NO subplots at all, make one from the first\n    // x & y axes in the input layout\n    if(!spAll.length) {\n        xi = '';\n        yi = '';\n        for(var ki in layoutIn) {\n            if(constants.attrRegex.test(ki)) {\n                var axLetter = ki.charAt(0);\n                if(axLetter === 'x') {\n                    if(!xi || (+ki.substr(5) < +xi.substr(5))) {\n                        xi = ki;\n                    }\n                }\n                else if(!yi || (+ki.substr(5) < +yi.substr(5))) {\n                    yi = ki;\n                }\n            }\n        }\n        xi = xi ? axisIds.name2id(xi) : 'x';\n        yi = yi ? axisIds.name2id(yi) : 'y';\n        xList.push(xi);\n        yList.push(yi);\n        spSVG.push(xi + yi);\n    }\n};\n\n/**\n * Cartesian.plot\n *\n * @param {DOM div | object} gd\n * @param {array | null} (optional) traces\n *  array of traces indices to plot\n *  if undefined, plots all cartesian traces,\n *  if null, plots no traces\n * @param {object} (optional) transitionOpts\n *  transition option object\n * @param {function} (optional) makeOnCompleteCallback\n *  transition make callback function from Plots.transition\n */\nexports.plot = function(gd, traces, transitionOpts, makeOnCompleteCallback) {\n    var fullLayout = gd._fullLayout;\n    var subplots = fullLayout._subplots.cartesian;\n    var calcdata = gd.calcdata;\n    var i;\n\n    if(traces === null) {\n        // this means no updates required, must return here\n        // so that plotOne doesn't remove the trace layers\n        return;\n    } else if(!Array.isArray(traces)) {\n        // If traces is not provided, then it's a complete replot and missing\n        // traces are removed\n        traces = [];\n        for(i = 0; i < calcdata.length; i++) traces.push(i);\n    }\n\n    for(i = 0; i < subplots.length; i++) {\n        var subplot = subplots[i];\n        var subplotInfo = fullLayout._plots[subplot];\n\n        // Get all calcdata for this subplot:\n        var cdSubplot = [];\n        var pcd;\n\n        for(var j = 0; j < calcdata.length; j++) {\n            var cd = calcdata[j];\n            var trace = cd[0].trace;\n\n            // Skip trace if whitelist provided and it's not whitelisted:\n            // if (Array.isArray(traces) && traces.indexOf(i) === -1) continue;\n            if(trace.xaxis + trace.yaxis === subplot) {\n                // XXX: Should trace carpet dependencies. Only replot all carpet plots if the carpet\n                // axis has actually changed:\n                //\n                // If this trace is specifically requested, add it to the list:\n                if(traces.indexOf(trace.index) !== -1 || trace.carpet) {\n                    // Okay, so example: traces 0, 1, and 2 have fill = tonext. You animate\n                    // traces 0 and 2. Trace 1 also needs to be updated, otherwise its fill\n                    // is outdated. So this retroactively adds the previous trace if the\n                    // traces are interdependent.\n                    if(\n                        pcd &&\n                        pcd[0].trace.xaxis + pcd[0].trace.yaxis === subplot &&\n                        ['tonextx', 'tonexty', 'tonext'].indexOf(trace.fill) !== -1 &&\n                        cdSubplot.indexOf(pcd) === -1\n                    ) {\n                        cdSubplot.push(pcd);\n                    }\n\n                    cdSubplot.push(cd);\n                }\n\n                // Track the previous trace on this subplot for the retroactive-add step\n                // above:\n                pcd = cd;\n            }\n        }\n\n        plotOne(gd, subplotInfo, cdSubplot, transitionOpts, makeOnCompleteCallback);\n    }\n};\n\nfunction plotOne(gd, plotinfo, cdSubplot, transitionOpts, makeOnCompleteCallback) {\n    var traceLayerClasses = constants.traceLayerClasses;\n    var fullLayout = gd._fullLayout;\n    var modules = fullLayout._modules;\n    var _module, cdModuleAndOthers, cdModule;\n\n    var layerData = [];\n    var zoomScaleQueryParts = [];\n\n    for(var i = 0; i < modules.length; i++) {\n        _module = modules[i];\n        var name = _module.name;\n        var categories = Registry.modules[name].categories;\n\n        if(categories.svg) {\n            var className = (_module.layerName || name + 'layer');\n            var plotMethod = _module.plot;\n\n            // plot all visible traces of this type on this subplot at once\n            cdModuleAndOthers = getModuleCalcData(cdSubplot, plotMethod);\n            cdModule = cdModuleAndOthers[0];\n            // don't need to search the found traces again - in fact we need to NOT\n            // so that if two modules share the same plotter we don't double-plot\n            cdSubplot = cdModuleAndOthers[1];\n\n            if(cdModule.length) {\n                layerData.push({\n                    i: traceLayerClasses.indexOf(className),\n                    className: className,\n                    plotMethod: plotMethod,\n                    cdModule: cdModule\n                });\n            }\n\n            if(categories.zoomScale) {\n                zoomScaleQueryParts.push('.' + className);\n            }\n        }\n    }\n\n    layerData.sort(function(a, b) { return a.i - b.i; });\n\n    var layers = plotinfo.plot.selectAll('g.mlayer')\n        .data(layerData, function(d) { return d.className; });\n\n    layers.enter().append('g')\n        .attr('class', function(d) { return d.className; })\n        .classed('mlayer', true);\n\n    layers.exit().remove();\n\n    layers.order();\n\n    layers.each(function(d) {\n        var sel = d3.select(this);\n        var className = d.className;\n\n        d.plotMethod(\n            gd, plotinfo, d.cdModule, sel,\n            transitionOpts, makeOnCompleteCallback\n        );\n\n        // layers that allow `cliponaxis: false`\n        if(className !== 'scatterlayer' && className !== 'barlayer') {\n            Drawing.setClipUrl(sel, plotinfo.layerClipId, gd);\n        }\n    });\n\n    // call Scattergl.plot separately\n    if(fullLayout._has('scattergl')) {\n        _module = Registry.getModule('scattergl');\n        cdModule = getModuleCalcData(cdSubplot, _module)[0];\n        _module.plot(gd, plotinfo, cdModule);\n    }\n\n    // stash \"hot\" selections for faster interaction on drag and scroll\n    if(!gd._context.staticPlot) {\n        if(plotinfo._hasClipOnAxisFalse) {\n            plotinfo.clipOnAxisFalseTraces = plotinfo.plot\n                .selectAll('.scatterlayer, .barlayer')\n                .selectAll('.trace');\n        }\n\n        if(zoomScaleQueryParts.length) {\n            var traces = plotinfo.plot\n                .selectAll(zoomScaleQueryParts.join(','))\n                .selectAll('.trace');\n\n            plotinfo.zoomScalePts = traces.selectAll('path.point');\n            plotinfo.zoomScaleTxt = traces.selectAll('.textpoint');\n        }\n    }\n}\n\nexports.clean = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var oldPlots = oldFullLayout._plots || {};\n    var newPlots = newFullLayout._plots || {};\n    var oldSubplotList = oldFullLayout._subplots || {};\n    var plotinfo;\n    var i, k;\n\n    // when going from a large splom graph to something else,\n    // we need to clear <g subplot> so that the new cartesian subplot\n    // can have the correct layer ordering\n    if(oldFullLayout._hasOnlyLargeSploms && !newFullLayout._hasOnlyLargeSploms) {\n        for(k in oldPlots) {\n            plotinfo = oldPlots[k];\n            if(plotinfo.plotgroup) plotinfo.plotgroup.remove();\n        }\n    }\n\n    var hadGl = (oldFullLayout._has && oldFullLayout._has('gl'));\n    var hasGl = (newFullLayout._has && newFullLayout._has('gl'));\n\n    if(hadGl && !hasGl) {\n        for(k in oldPlots) {\n            plotinfo = oldPlots[k];\n            if(plotinfo._scene) plotinfo._scene.destroy();\n        }\n    }\n\n    // delete any titles we don't need anymore\n    // check if axis list has changed, and if so clear old titles\n    if(oldSubplotList.xaxis && oldSubplotList.yaxis) {\n        var oldAxIDs = axisIds.listIds({_fullLayout: oldFullLayout});\n        for(i = 0; i < oldAxIDs.length; i++) {\n            var oldAxId = oldAxIDs[i];\n            if(!newFullLayout[axisIds.id2name(oldAxId)]) {\n                oldFullLayout._infolayer.selectAll('.g-' + oldAxId + 'title').remove();\n            }\n        }\n    }\n\n    // if we've gotten rid of all cartesian traces, remove all the subplot svg items\n    var hadCartesian = (oldFullLayout._has && oldFullLayout._has('cartesian'));\n    var hasCartesian = (newFullLayout._has && newFullLayout._has('cartesian'));\n\n    if(hadCartesian && !hasCartesian) {\n        purgeSubplotLayers(oldFullLayout._cartesianlayer.selectAll('.subplot'), oldFullLayout);\n        oldFullLayout._defs.selectAll('.axesclip').remove();\n        delete oldFullLayout._axisConstraintGroups;\n    }\n    // otherwise look for subplots we need to remove\n    else if(oldSubplotList.cartesian) {\n        for(i = 0; i < oldSubplotList.cartesian.length; i++) {\n            var oldSubplotId = oldSubplotList.cartesian[i];\n            if(!newPlots[oldSubplotId]) {\n                var selector = '.' + oldSubplotId + ',.' + oldSubplotId + '-x,.' + oldSubplotId + '-y';\n                oldFullLayout._cartesianlayer.selectAll(selector).remove();\n                removeSubplotExtras(oldSubplotId, oldFullLayout);\n            }\n        }\n    }\n};\n\nexports.drawFramework = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var subplotData = makeSubplotData(gd);\n\n    var subplotLayers = fullLayout._cartesianlayer.selectAll('.subplot')\n        .data(subplotData, String);\n\n    subplotLayers.enter().append('g')\n        .attr('class', function(d) { return 'subplot ' + d[0]; });\n\n    subplotLayers.order();\n\n    subplotLayers.exit()\n        .call(purgeSubplotLayers, fullLayout);\n\n    subplotLayers.each(function(d) {\n        var id = d[0];\n        var plotinfo = fullLayout._plots[id];\n\n        plotinfo.plotgroup = d3.select(this);\n        makeSubplotLayer(gd, plotinfo);\n\n        // make separate drag layers for each subplot,\n        // but append them to paper rather than the plot groups,\n        // so they end up on top of the rest\n        plotinfo.draglayer = ensureSingle(fullLayout._draggers, 'g', id);\n    });\n};\n\nexports.rangePlot = function(gd, plotinfo, cdSubplot) {\n    makeSubplotLayer(gd, plotinfo);\n    plotOne(gd, plotinfo, cdSubplot);\n    Plots.style(gd);\n};\n\nfunction makeSubplotData(gd) {\n    var fullLayout = gd._fullLayout;\n    var ids = fullLayout._subplots.cartesian;\n    var len = ids.length;\n    var i, j, id, plotinfo, xa, ya;\n\n    // split 'regular' and 'overlaying' subplots\n    var regulars = [];\n    var overlays = [];\n\n    for(i = 0; i < len; i++) {\n        id = ids[i];\n        plotinfo = fullLayout._plots[id];\n        xa = plotinfo.xaxis;\n        ya = plotinfo.yaxis;\n\n        var xa2 = xa._mainAxis;\n        var ya2 = ya._mainAxis;\n        var mainplot = xa2._id + ya2._id;\n        var mainplotinfo = fullLayout._plots[mainplot];\n        plotinfo.overlays = [];\n\n        if(mainplot !== id && mainplotinfo) {\n            plotinfo.mainplot = mainplot;\n            plotinfo.mainplotinfo = mainplotinfo;\n            overlays.push(id);\n        } else {\n            plotinfo.mainplot = undefined;\n            plotinfo.mainPlotinfo = undefined;\n            regulars.push(id);\n        }\n    }\n\n    // fill in list of overlaying subplots in 'main plot'\n    for(i = 0; i < overlays.length; i++) {\n        id = overlays[i];\n        plotinfo = fullLayout._plots[id];\n        plotinfo.mainplotinfo.overlays.push(plotinfo);\n    }\n\n    // put 'regular' subplot data before 'overlaying'\n    var subplotIds = regulars.concat(overlays);\n    var subplotData = new Array(len);\n\n    for(i = 0; i < len; i++) {\n        id = subplotIds[i];\n        plotinfo = fullLayout._plots[id];\n        xa = plotinfo.xaxis;\n        ya = plotinfo.yaxis;\n\n        // use info about axis layer and overlaying pattern\n        // to clean what need to be cleaned up in exit selection\n        var d = [id, xa.layer, ya.layer, xa.overlaying || '', ya.overlaying || ''];\n        for(j = 0; j < plotinfo.overlays.length; j++) {\n            d.push(plotinfo.overlays[j].id);\n        }\n        subplotData[i] = d;\n    }\n\n    return subplotData;\n}\n\nfunction makeSubplotLayer(gd, plotinfo) {\n    var plotgroup = plotinfo.plotgroup;\n    var id = plotinfo.id;\n    var xLayer = constants.layerValue2layerClass[plotinfo.xaxis.layer];\n    var yLayer = constants.layerValue2layerClass[plotinfo.yaxis.layer];\n    var hasOnlyLargeSploms = gd._fullLayout._hasOnlyLargeSploms;\n\n    if(!plotinfo.mainplot) {\n        if(hasOnlyLargeSploms) {\n            // TODO could do even better\n            // - we don't need plot (but we would have to mock it in lsInner\n            //   and other places\n            // - we don't (x|y)lines and (x|y)axislayer for most subplots\n            //   usually just the bottom x and left y axes.\n            plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n            plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n            plotinfo.xaxislayer = ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n            plotinfo.yaxislayer = ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n        }\n        else {\n            var backLayer = ensureSingle(plotgroup, 'g', 'layer-subplot');\n            plotinfo.shapelayer = ensureSingle(backLayer, 'g', 'shapelayer');\n            plotinfo.imagelayer = ensureSingle(backLayer, 'g', 'imagelayer');\n\n            plotinfo.gridlayer = ensureSingle(plotgroup, 'g', 'gridlayer');\n            plotinfo.zerolinelayer = ensureSingle(plotgroup, 'g', 'zerolinelayer');\n\n            ensureSingle(plotgroup, 'path', 'xlines-below');\n            ensureSingle(plotgroup, 'path', 'ylines-below');\n            plotinfo.overlinesBelow = ensureSingle(plotgroup, 'g', 'overlines-below');\n\n            ensureSingle(plotgroup, 'g', 'xaxislayer-below');\n            ensureSingle(plotgroup, 'g', 'yaxislayer-below');\n            plotinfo.overaxesBelow = ensureSingle(plotgroup, 'g', 'overaxes-below');\n\n            plotinfo.plot = ensureSingle(plotgroup, 'g', 'plot');\n            plotinfo.overplot = ensureSingle(plotgroup, 'g', 'overplot');\n\n            plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n            plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n            plotinfo.overlinesAbove = ensureSingle(plotgroup, 'g', 'overlines-above');\n\n            ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n            ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n            plotinfo.overaxesAbove = ensureSingle(plotgroup, 'g', 'overaxes-above');\n\n            // set refs to correct layers as determined by 'axis.layer'\n            plotinfo.xlines = plotgroup.select('.xlines-' + xLayer);\n            plotinfo.ylines = plotgroup.select('.ylines-' + yLayer);\n            plotinfo.xaxislayer = plotgroup.select('.xaxislayer-' + xLayer);\n            plotinfo.yaxislayer = plotgroup.select('.yaxislayer-' + yLayer);\n        }\n    }\n    else {\n        var mainplotinfo = plotinfo.mainplotinfo;\n        var mainplotgroup = mainplotinfo.plotgroup;\n        var xId = id + '-x';\n        var yId = id + '-y';\n\n        // now make the components of overlaid subplots\n        // overlays don't have backgrounds, and append all\n        // their other components to the corresponding\n        // extra groups of their main plots.\n\n        plotinfo.gridlayer = mainplotinfo.gridlayer;\n        plotinfo.zerolinelayer = mainplotinfo.zerolinelayer;\n\n        ensureSingle(mainplotinfo.overlinesBelow, 'path', xId);\n        ensureSingle(mainplotinfo.overlinesBelow, 'path', yId);\n        ensureSingle(mainplotinfo.overaxesBelow, 'g', xId);\n        ensureSingle(mainplotinfo.overaxesBelow, 'g', yId);\n\n        plotinfo.plot = ensureSingle(mainplotinfo.overplot, 'g', id);\n\n        ensureSingle(mainplotinfo.overlinesAbove, 'path', xId);\n        ensureSingle(mainplotinfo.overlinesAbove, 'path', yId);\n        ensureSingle(mainplotinfo.overaxesAbove, 'g', xId);\n        ensureSingle(mainplotinfo.overaxesAbove, 'g', yId);\n\n        // set refs to correct layers as determined by 'abovetraces'\n        plotinfo.xlines = mainplotgroup.select('.overlines-' + xLayer).select('.' + xId);\n        plotinfo.ylines = mainplotgroup.select('.overlines-' + yLayer).select('.' + yId);\n        plotinfo.xaxislayer = mainplotgroup.select('.overaxes-' + xLayer).select('.' + xId);\n        plotinfo.yaxislayer = mainplotgroup.select('.overaxes-' + yLayer).select('.' + yId);\n    }\n\n    // common attributes for all subplots, overlays or not\n\n    if(!hasOnlyLargeSploms) {\n        ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.xaxis._id);\n        ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.yaxis._id);\n        plotinfo.gridlayer.selectAll('g')\n            .map(function(d) { return d[0]; })\n            .sort(axisIds.idSort);\n    }\n\n    plotinfo.xlines\n        .style('fill', 'none')\n        .classed('crisp', true);\n\n    plotinfo.ylines\n        .style('fill', 'none')\n        .classed('crisp', true);\n}\n\nfunction purgeSubplotLayers(layers, fullLayout) {\n    if(!layers) return;\n\n    var overlayIdsToRemove = {};\n\n    layers.each(function(d) {\n        var id = d[0];\n        var plotgroup = d3.select(this);\n\n        plotgroup.remove();\n        removeSubplotExtras(id, fullLayout);\n        overlayIdsToRemove[id] = true;\n\n        // do not remove individual axis <clipPath>s here\n        // as other subplots may need them\n    });\n\n    // must remove overlaid subplot trace layers 'manually'\n\n    for(var k in fullLayout._plots) {\n        var subplotInfo = fullLayout._plots[k];\n        var overlays = subplotInfo.overlays || [];\n\n        for(var j = 0; j < overlays.length; j++) {\n            var overlayInfo = overlays[j];\n\n            if(overlayIdsToRemove[overlayInfo.id]) {\n                overlayInfo.plot.selectAll('.trace').remove();\n            }\n        }\n    }\n}\n\nfunction removeSubplotExtras(subplotId, fullLayout) {\n    fullLayout._draggers.selectAll('g.' + subplotId).remove();\n    fullLayout._defs.select('#clip' + fullLayout._uid + subplotId + 'plot').remove();\n}\n\nexports.toSVG = function(gd) {\n    var imageRoot = gd._fullLayout._glimages;\n    var root = d3.select(gd).selectAll('.svg-container');\n    var canvases = root.filter(function(d, i) {return i === root.size() - 1;})\n        .selectAll('.gl-canvas-context, .gl-canvas-focus');\n\n    function canvasToImage() {\n        var canvas = this;\n        var imageData = canvas.toDataURL('image/png');\n        var image = imageRoot.append('svg:image');\n\n        image.attr({\n            xmlns: xmlnsNamespaces.svg,\n            'xlink:href': imageData,\n            preserveAspectRatio: 'none',\n            x: 0,\n            y: 0,\n            width: canvas.width,\n            height: canvas.height\n        });\n    }\n\n    canvases.each(canvasToImage);\n};\n\nexports.updateFx = require('./graph_interact').updateFx;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
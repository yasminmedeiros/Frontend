{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar plotApi = require('./plot_api');\nvar Lib = require('../lib');\nvar helpers = require('../snapshot/helpers');\nvar toSVG = require('../snapshot/tosvg');\nvar svgToImg = require('../snapshot/svgtoimg');\nvar attrs = {\n  format: {\n    valType: 'enumerated',\n    values: ['png', 'jpeg', 'webp', 'svg'],\n    dflt: 'png',\n    description: 'Sets the format of exported image.'\n  },\n  width: {\n    valType: 'number',\n    min: 1,\n    description: ['Sets the exported image width.', 'Defaults to the value found in `layout.width`'].join(' ')\n  },\n  height: {\n    valType: 'number',\n    min: 1,\n    description: ['Sets the exported image height.', 'Defaults to the value found in `layout.height`'].join(' ')\n  },\n  scale: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: ['Sets a scaling for the generated image.', 'If set, all features of a graphs (e.g. text, line width)', 'are scaled, unlike simply setting', 'a bigger *width* and *height*.'].join(' ')\n  },\n  setBackground: {\n    valType: 'any',\n    dflt: false,\n    description: ['Sets the image background mode.', 'By default, the image background is determined by `layout.paper_bgcolor`,', 'the *transparent* mode.', 'One might consider setting `setBackground` to *opaque*', 'when exporting a *jpeg* image as JPEGs do not support opacity.'].join(' ')\n  },\n  imageDataOnly: {\n    valType: 'boolean',\n    dflt: false,\n    description: ['Determines whether or not the return value is prefixed by', 'the image format\\'s corresponding \\'data:image;\\' spec.'].join(' ')\n  }\n};\nvar IMAGE_URL_PREFIX = /^data:image\\/\\w+;base64,/;\n\n/** Plotly.toImage\n *\n * @param {object | string | HTML div} gd\n *   can either be a data/layout/config object\n *   or an existing graph <div>\n *   or an id to an existing graph <div>\n * @param {object} opts (see above)\n * @return {promise}\n */\nfunction toImage(gd, opts) {\n  opts = opts || {};\n  var data;\n  var layout;\n  var config;\n  if (Lib.isPlainObject(gd)) {\n    data = gd.data || [];\n    layout = gd.layout || {};\n    config = gd.config || {};\n  } else {\n    gd = Lib.getGraphDiv(gd);\n    data = Lib.extendDeep([], gd.data);\n    layout = Lib.extendDeep({}, gd.layout);\n    config = gd._context;\n  }\n  function isImpliedOrValid(attr) {\n    return !(attr in opts) || Lib.validate(opts[attr], attrs[attr]);\n  }\n  if (!isImpliedOrValid('width') || !isImpliedOrValid('height')) {\n    throw new Error('Height and width should be pixel values.');\n  }\n  if (!isImpliedOrValid('format')) {\n    throw new Error('Image format is not jpeg, png, svg or webp.');\n  }\n  var fullOpts = {};\n  function coerce(attr, dflt) {\n    return Lib.coerce(opts, fullOpts, attrs, attr, dflt);\n  }\n  var format = coerce('format');\n  var width = coerce('width');\n  var height = coerce('height');\n  var scale = coerce('scale');\n  var setBackground = coerce('setBackground');\n  var imageDataOnly = coerce('imageDataOnly');\n\n  // put the cloned div somewhere off screen before attaching to DOM\n  var clonedGd = document.createElement('div');\n  clonedGd.style.position = 'absolute';\n  clonedGd.style.left = '-5000px';\n  document.body.appendChild(clonedGd);\n\n  // extend layout with image options\n  var layoutImage = Lib.extendFlat({}, layout);\n  if (width) layoutImage.width = width;\n  if (height) layoutImage.height = height;\n\n  // extend config for static plot\n  var configImage = Lib.extendFlat({}, config, {\n    _exportedPlot: true,\n    staticPlot: true,\n    setBackground: setBackground\n  });\n  var redrawFunc = helpers.getRedrawFunc(clonedGd);\n  function wait() {\n    return new Promise(function (resolve) {\n      setTimeout(resolve, helpers.getDelay(clonedGd._fullLayout));\n    });\n  }\n  function convert() {\n    return new Promise(function (resolve, reject) {\n      var svg = toSVG(clonedGd, format, scale);\n      var width = clonedGd._fullLayout.width;\n      var height = clonedGd._fullLayout.height;\n      plotApi.purge(clonedGd);\n      document.body.removeChild(clonedGd);\n      if (format === 'svg') {\n        if (imageDataOnly) {\n          return resolve(svg);\n        } else {\n          return resolve('data:image/svg+xml,' + encodeURIComponent(svg));\n        }\n      }\n      var canvas = document.createElement('canvas');\n      canvas.id = Lib.randstr();\n      svgToImg({\n        format: format,\n        width: width,\n        height: height,\n        scale: scale,\n        canvas: canvas,\n        svg: svg,\n        // ask svgToImg to return a Promise\n        //  rather than EventEmitter\n        //  leave EventEmitter for backward\n        //  compatibility\n        promise: true\n      }).then(resolve).catch(reject);\n    });\n  }\n  function urlToImageData(url) {\n    if (imageDataOnly) {\n      return url.replace(IMAGE_URL_PREFIX, '');\n    } else {\n      return url;\n    }\n  }\n  return new Promise(function (resolve, reject) {\n    plotApi.plot(clonedGd, data, layoutImage, configImage).then(redrawFunc).then(wait).then(convert).then(function (url) {\n      resolve(urlToImageData(url));\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\nmodule.exports = toImage;","map":{"version":3,"names":["plotApi","require","Lib","helpers","toSVG","svgToImg","attrs","format","valType","values","dflt","description","width","min","join","height","scale","setBackground","imageDataOnly","IMAGE_URL_PREFIX","toImage","gd","opts","data","layout","config","isPlainObject","getGraphDiv","extendDeep","_context","isImpliedOrValid","attr","validate","Error","fullOpts","coerce","clonedGd","document","createElement","style","position","left","body","appendChild","layoutImage","extendFlat","configImage","_exportedPlot","staticPlot","redrawFunc","getRedrawFunc","wait","Promise","resolve","setTimeout","getDelay","_fullLayout","convert","reject","svg","purge","removeChild","encodeURIComponent","canvas","id","randstr","promise","then","catch","urlToImageData","url","replace","plot","err","module","exports"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/plot_api/to_image.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar plotApi = require('./plot_api');\nvar Lib = require('../lib');\n\nvar helpers = require('../snapshot/helpers');\nvar toSVG = require('../snapshot/tosvg');\nvar svgToImg = require('../snapshot/svgtoimg');\n\nvar attrs = {\n    format: {\n        valType: 'enumerated',\n        values: ['png', 'jpeg', 'webp', 'svg'],\n        dflt: 'png',\n        description: 'Sets the format of exported image.'\n    },\n    width: {\n        valType: 'number',\n        min: 1,\n        description: [\n            'Sets the exported image width.',\n            'Defaults to the value found in `layout.width`'\n        ].join(' ')\n    },\n    height: {\n        valType: 'number',\n        min: 1,\n        description: [\n            'Sets the exported image height.',\n            'Defaults to the value found in `layout.height`'\n        ].join(' ')\n    },\n    scale: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        description: [\n            'Sets a scaling for the generated image.',\n            'If set, all features of a graphs (e.g. text, line width)',\n            'are scaled, unlike simply setting',\n            'a bigger *width* and *height*.'\n        ].join(' ')\n    },\n    setBackground: {\n        valType: 'any',\n        dflt: false,\n        description: [\n            'Sets the image background mode.',\n            'By default, the image background is determined by `layout.paper_bgcolor`,',\n            'the *transparent* mode.',\n            'One might consider setting `setBackground` to *opaque*',\n            'when exporting a *jpeg* image as JPEGs do not support opacity.'\n        ].join(' ')\n    },\n    imageDataOnly: {\n        valType: 'boolean',\n        dflt: false,\n        description: [\n            'Determines whether or not the return value is prefixed by',\n            'the image format\\'s corresponding \\'data:image;\\' spec.'\n        ].join(' ')\n    }\n};\n\nvar IMAGE_URL_PREFIX = /^data:image\\/\\w+;base64,/;\n\n/** Plotly.toImage\n *\n * @param {object | string | HTML div} gd\n *   can either be a data/layout/config object\n *   or an existing graph <div>\n *   or an id to an existing graph <div>\n * @param {object} opts (see above)\n * @return {promise}\n */\nfunction toImage(gd, opts) {\n    opts = opts || {};\n\n    var data;\n    var layout;\n    var config;\n\n    if(Lib.isPlainObject(gd)) {\n        data = gd.data || [];\n        layout = gd.layout || {};\n        config = gd.config || {};\n    } else {\n        gd = Lib.getGraphDiv(gd);\n        data = Lib.extendDeep([], gd.data);\n        layout = Lib.extendDeep({}, gd.layout);\n        config = gd._context;\n    }\n\n    function isImpliedOrValid(attr) {\n        return !(attr in opts) || Lib.validate(opts[attr], attrs[attr]);\n    }\n\n    if(!isImpliedOrValid('width') || !isImpliedOrValid('height')) {\n        throw new Error('Height and width should be pixel values.');\n    }\n\n    if(!isImpliedOrValid('format')) {\n        throw new Error('Image format is not jpeg, png, svg or webp.');\n    }\n\n    var fullOpts = {};\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(opts, fullOpts, attrs, attr, dflt);\n    }\n\n    var format = coerce('format');\n    var width = coerce('width');\n    var height = coerce('height');\n    var scale = coerce('scale');\n    var setBackground = coerce('setBackground');\n    var imageDataOnly = coerce('imageDataOnly');\n\n    // put the cloned div somewhere off screen before attaching to DOM\n    var clonedGd = document.createElement('div');\n    clonedGd.style.position = 'absolute';\n    clonedGd.style.left = '-5000px';\n    document.body.appendChild(clonedGd);\n\n    // extend layout with image options\n    var layoutImage = Lib.extendFlat({}, layout);\n    if(width) layoutImage.width = width;\n    if(height) layoutImage.height = height;\n\n    // extend config for static plot\n    var configImage = Lib.extendFlat({}, config, {\n        _exportedPlot: true,\n        staticPlot: true,\n        setBackground: setBackground\n    });\n\n    var redrawFunc = helpers.getRedrawFunc(clonedGd);\n\n    function wait() {\n        return new Promise(function(resolve) {\n            setTimeout(resolve, helpers.getDelay(clonedGd._fullLayout));\n        });\n    }\n\n    function convert() {\n        return new Promise(function(resolve, reject) {\n            var svg = toSVG(clonedGd, format, scale);\n            var width = clonedGd._fullLayout.width;\n            var height = clonedGd._fullLayout.height;\n\n            plotApi.purge(clonedGd);\n            document.body.removeChild(clonedGd);\n\n            if(format === 'svg') {\n                if(imageDataOnly) {\n                    return resolve(svg);\n                } else {\n                    return resolve('data:image/svg+xml,' + encodeURIComponent(svg));\n                }\n            }\n\n            var canvas = document.createElement('canvas');\n            canvas.id = Lib.randstr();\n\n            svgToImg({\n                format: format,\n                width: width,\n                height: height,\n                scale: scale,\n                canvas: canvas,\n                svg: svg,\n                // ask svgToImg to return a Promise\n                //  rather than EventEmitter\n                //  leave EventEmitter for backward\n                //  compatibility\n                promise: true\n            })\n            .then(resolve)\n            .catch(reject);\n        });\n    }\n\n    function urlToImageData(url) {\n        if(imageDataOnly) {\n            return url.replace(IMAGE_URL_PREFIX, '');\n        } else {\n            return url;\n        }\n    }\n\n    return new Promise(function(resolve, reject) {\n        plotApi.plot(clonedGd, data, layoutImage, configImage)\n            .then(redrawFunc)\n            .then(wait)\n            .then(convert)\n            .then(function(url) { resolve(urlToImageData(url)); })\n            .catch(function(err) { reject(err); });\n    });\n}\n\nmodule.exports = toImage;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
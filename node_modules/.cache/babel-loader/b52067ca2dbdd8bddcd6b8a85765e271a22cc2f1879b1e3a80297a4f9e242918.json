{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar annAttrs = require('../../components/annotations/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar fontAttrs = require('../../plots/font_attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\nvar attrs = module.exports = overrideAll({\n  domain: domainAttrs({\n    name: 'table',\n    trace: true\n  }),\n  columnwidth: {\n    valType: 'number',\n    arrayOk: true,\n    dflt: null,\n    role: 'style',\n    description: ['The width of columns expressed as a ratio. Columns fill the available width', 'in proportion of their specified column widths.'].join(' ')\n  },\n  columnorder: {\n    valType: 'data_array',\n    role: 'info',\n    description: ['Specifies the rendered order of the data columns; for example, a value `2` at position `0`', 'means that column index `0` in the data will be rendered as the', 'third column, as columns have an index base of zero.'].join(' ')\n  },\n  header: {\n    values: {\n      valType: 'data_array',\n      role: 'info',\n      dflt: [],\n      description: ['Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`,', 'therefore the `values[m]` vector length for all columns must be the same (longer vectors', 'will be truncated). Each value must be a finite number or a string.'].join(' ')\n    },\n    format: {\n      valType: 'data_array',\n      role: 'info',\n      dflt: [],\n      description: ['Sets the cell value formatting rule using d3 formatting mini-language', 'which is similar to those of Python. See', 'https://github.com/d3/d3-format/blob/master/README.md#locale_format'].join(' ')\n    },\n    prefix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      role: 'style',\n      description: 'Prefix for cell values.'\n    },\n    suffix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      role: 'style',\n      description: 'Suffix for cell values.'\n    },\n    height: {\n      valType: 'number',\n      dflt: 28,\n      role: 'style',\n      description: 'The height of cells.'\n    },\n    align: extendFlat({}, annAttrs.align, {\n      arrayOk: true\n    }),\n    line: {\n      width: {\n        valType: 'number',\n        arrayOk: true,\n        dflt: 1,\n        role: 'style'\n      },\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        dflt: 'grey',\n        role: 'style'\n      }\n    },\n    fill: {\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        dflt: 'white',\n        role: 'style',\n        description: ['Sets the cell fill color. It accepts either a specific color', ' or an array of colors or a 2D array of colors.'].join('')\n      }\n    },\n    font: extendFlat({}, fontAttrs({\n      arrayOk: true\n    }))\n  },\n  cells: {\n    values: {\n      valType: 'data_array',\n      role: 'info',\n      dflt: [],\n      description: ['Cell values. `values[m][n]` represents the value of the `n`th point in column `m`,', 'therefore the `values[m]` vector length for all columns must be the same (longer vectors', 'will be truncated). Each value must be a finite number or a string.'].join(' ')\n    },\n    format: {\n      valType: 'data_array',\n      role: 'info',\n      dflt: [],\n      description: ['Sets the cell value formatting rule using d3 formatting mini-language', 'which is similar to those of Python. See', 'https://github.com/d3/d3-format/blob/master/README.md#locale_format'].join(' ')\n    },\n    prefix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      role: 'style',\n      description: 'Prefix for cell values.'\n    },\n    suffix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      role: 'style',\n      description: 'Suffix for cell values.'\n    },\n    height: {\n      valType: 'number',\n      dflt: 20,\n      role: 'style',\n      description: 'The height of cells.'\n    },\n    align: extendFlat({}, annAttrs.align, {\n      arrayOk: true\n    }),\n    line: {\n      width: {\n        valType: 'number',\n        arrayOk: true,\n        dflt: 1,\n        role: 'style'\n      },\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        dflt: 'grey',\n        role: 'style'\n      }\n    },\n    fill: {\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        role: 'style',\n        dflt: 'white',\n        description: ['Sets the cell fill color. It accepts either a specific color', ' or an array of colors or a 2D array of colors.'].join('')\n      }\n    },\n    font: extendFlat({}, fontAttrs({\n      arrayOk: true\n    }))\n  }\n}, 'calc', 'from-root');\nattrs.transforms = undefined;","map":{"version":3,"names":["annAttrs","require","extendFlat","overrideAll","fontAttrs","domainAttrs","attributes","attrs","module","exports","domain","name","trace","columnwidth","valType","arrayOk","dflt","role","description","join","columnorder","header","values","format","prefix","suffix","height","align","line","width","color","fill","font","cells","transforms","undefined"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/table/attributes.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar annAttrs = require('../../components/annotations/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar fontAttrs = require('../../plots/font_attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar attrs = module.exports = overrideAll({\n    domain: domainAttrs({name: 'table', trace: true}),\n\n    columnwidth: {\n        valType: 'number',\n        arrayOk: true,\n        dflt: null,\n        role: 'style',\n        description: [\n            'The width of columns expressed as a ratio. Columns fill the available width',\n            'in proportion of their specified column widths.'\n        ].join(' ')\n    },\n\n    columnorder: {\n        valType: 'data_array',\n        role: 'info',\n        description: [\n            'Specifies the rendered order of the data columns; for example, a value `2` at position `0`',\n            'means that column index `0` in the data will be rendered as the',\n            'third column, as columns have an index base of zero.'\n        ].join(' ')\n    },\n\n    header: {\n\n        values: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            description: [\n                'Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`,',\n                'therefore the `values[m]` vector length for all columns must be the same (longer vectors',\n                'will be truncated). Each value must be a finite number or a string.'\n            ].join(' ')\n        },\n\n        format: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            description: [\n                'Sets the cell value formatting rule using d3 formatting mini-language',\n                'which is similar to those of Python. See',\n                'https://github.com/d3/d3-format/blob/master/README.md#locale_format'\n            ].join(' ')\n        },\n\n        prefix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            role: 'style',\n            description: 'Prefix for cell values.'\n        },\n\n        suffix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            role: 'style',\n            description: 'Suffix for cell values.'\n        },\n\n        height: {\n            valType: 'number',\n            dflt: 28,\n            role: 'style',\n            description: 'The height of cells.'\n        },\n\n        align: extendFlat({}, annAttrs.align, {arrayOk: true}),\n\n        line: {\n            width: {\n                valType: 'number',\n                arrayOk: true,\n                dflt: 1,\n                role: 'style'\n            },\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                dflt: 'grey',\n                role: 'style'\n            }\n        },\n\n        fill: {\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                dflt: 'white',\n                role: 'style',\n                description: [\n                    'Sets the cell fill color. It accepts either a specific color',\n                    ' or an array of colors or a 2D array of colors.'\n                ].join('')\n            }\n        },\n\n        font: extendFlat({}, fontAttrs({arrayOk: true}))\n    },\n\n    cells: {\n\n        values: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            description: [\n                'Cell values. `values[m][n]` represents the value of the `n`th point in column `m`,',\n                'therefore the `values[m]` vector length for all columns must be the same (longer vectors',\n                'will be truncated). Each value must be a finite number or a string.'\n            ].join(' ')\n        },\n\n        format: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            description: [\n                'Sets the cell value formatting rule using d3 formatting mini-language',\n                'which is similar to those of Python. See',\n                'https://github.com/d3/d3-format/blob/master/README.md#locale_format'\n            ].join(' ')\n        },\n\n        prefix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            role: 'style',\n            description: 'Prefix for cell values.'\n        },\n\n        suffix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            role: 'style',\n            description: 'Suffix for cell values.'\n        },\n\n        height: {\n            valType: 'number',\n            dflt: 20,\n            role: 'style',\n            description: 'The height of cells.'\n        },\n\n        align: extendFlat({}, annAttrs.align, {arrayOk: true}),\n\n        line: {\n            width: {\n                valType: 'number',\n                arrayOk: true,\n                dflt: 1,\n                role: 'style'\n            },\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                dflt: 'grey',\n                role: 'style'\n            }\n        },\n\n        fill: {\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                role: 'style',\n                dflt: 'white',\n                description: [\n                    'Sets the cell fill color. It accepts either a specific color',\n                    ' or an array of colors or a 2D array of colors.'\n                ].join('')\n            }\n        },\n\n        font: extendFlat({}, fontAttrs({arrayOk: true}))\n    }\n}, 'calc', 'from-root');\nattrs.transforms = undefined;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
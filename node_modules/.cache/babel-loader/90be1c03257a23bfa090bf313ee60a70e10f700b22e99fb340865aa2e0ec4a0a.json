{"ast":null,"code":"import { ascending, min, sum, max } from \"d3-array\";\nimport { nest } from \"d3-collection\";\nimport { interpolateNumber } from \"d3-interpolate\";\nexport default function () {\n  var sankey = {},\n    nodeWidth = 24,\n    nodePadding = 8,\n    size = [1, 1],\n    nodes = [],\n    links = [],\n    maxPaddedSpace = 2 / 3; // Defined as a fraction of the total available space\n\n  sankey.nodeWidth = function (_) {\n    if (!arguments.length) return nodeWidth;\n    nodeWidth = +_;\n    return sankey;\n  };\n  sankey.nodePadding = function (_) {\n    if (!arguments.length) return nodePadding;\n    nodePadding = +_;\n    return sankey;\n  };\n  sankey.nodes = function (_) {\n    if (!arguments.length) return nodes;\n    nodes = _;\n    return sankey;\n  };\n  sankey.links = function (_) {\n    if (!arguments.length) return links;\n    links = _;\n    return sankey;\n  };\n  sankey.size = function (_) {\n    if (!arguments.length) return size;\n    size = _;\n    return sankey;\n  };\n  sankey.layout = function (iterations) {\n    computeNodeLinks();\n    computeNodeValues();\n    computeNodeBreadths();\n    computeNodeDepths(iterations);\n    computeLinkDepths();\n    return sankey;\n  };\n  sankey.relayout = function () {\n    computeLinkDepths();\n    return sankey;\n  };\n  sankey.link = function () {\n    var curvature = .5;\n    function link(d) {\n      var x0 = d.source.x + d.source.dx,\n        x1 = d.target.x,\n        xi = interpolateNumber(x0, x1),\n        x2 = xi(curvature),\n        x3 = xi(1 - curvature),\n        y0a = d.source.y + d.sy,\n        y0b = y0a + d.dy,\n        y1a = d.target.y + d.ty,\n        y1b = y1a + d.dy;\n      return \"M\" + x0 + \",\" + y0a + \"C\" + x2 + \",\" + y0a + \" \" + x3 + \",\" + y1a + \" \" + x1 + \",\" + y1a + \"L\" + x1 + \",\" + y1b + \"C\" + x3 + \",\" + y1b + \" \" + x2 + \",\" + y0b + \" \" + x0 + \",\" + y0b + \"Z\";\n    }\n    link.curvature = function (_) {\n      if (!arguments.length) return curvature;\n      curvature = +_;\n      return link;\n    };\n    return link;\n  };\n\n  // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n  function computeNodeLinks() {\n    nodes.forEach(function (node) {\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    links.forEach(function (link, i) {\n      var source = link.source,\n        target = link.target;\n      if (typeof source === \"number\") source = link.source = nodes[link.source];\n      if (typeof target === \"number\") target = link.target = nodes[link.target];\n      link.originalIndex = i;\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  }\n\n  // Compute the value (size) of each node by summing the associated links.\n  function computeNodeValues() {\n    nodes.forEach(function (node) {\n      node.value = Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value));\n    });\n  }\n\n  // Iteratively assign the breadth (x-position) for each node.\n  // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned breadth zero, while\n  // nodes with no outgoing links are assigned the maximum breadth.\n  function computeNodeBreadths() {\n    var remainingNodes = nodes,\n      nextNodes,\n      x = 0;\n    while (remainingNodes.length) {\n      nextNodes = [];\n      remainingNodes.forEach(function (node) {\n        node.x = x;\n        node.dx = nodeWidth;\n        node.sourceLinks.forEach(function (link) {\n          if (nextNodes.indexOf(link.target) < 0) {\n            nextNodes.push(link.target);\n          }\n        });\n      });\n      remainingNodes = nextNodes;\n      ++x;\n    }\n\n    //\n    moveSinksRight(x);\n    scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n  }\n\n  // function moveSourcesRight() {\n  //   nodes.forEach(function(node) {\n  //     if (!node.targetLinks.length) {\n  //       node.x = min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n  //     }\n  //   });\n  // }\n\n  function moveSinksRight(x) {\n    nodes.forEach(function (node) {\n      if (!node.sourceLinks.length) {\n        node.x = x - 1;\n      }\n    });\n  }\n  function scaleNodeBreadths(kx) {\n    nodes.forEach(function (node) {\n      node.x *= kx;\n    });\n  }\n  function computeNodeDepths(iterations) {\n    var nodesByBreadth = nest().key(function (d) {\n      return d.x;\n    }).sortKeys(ascending).entries(nodes).map(function (d) {\n      return d.values;\n    });\n\n    //\n    initializeNodeDepth();\n    resolveCollisions();\n    for (var alpha = 1; iterations > 0; --iterations) {\n      relaxRightToLeft(alpha *= .99);\n      resolveCollisions();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n    }\n    function initializeNodeDepth() {\n      var L = max(nodesByBreadth, function (nodes) {\n        return nodes.length;\n      });\n      var maxNodePadding = maxPaddedSpace * size[1] / (L - 1);\n      if (nodePadding > maxNodePadding) nodePadding = maxNodePadding;\n      var ky = min(nodesByBreadth, function (nodes) {\n        return (size[1] - (nodes.length - 1) * nodePadding) / sum(nodes, value);\n      });\n      nodesByBreadth.forEach(function (nodes) {\n        nodes.forEach(function (node, i) {\n          node.y = i;\n          node.dy = node.value * ky;\n        });\n      });\n      links.forEach(function (link) {\n        link.dy = link.value * ky;\n      });\n    }\n    function relaxLeftToRight(alpha) {\n      nodesByBreadth.forEach(function (nodes) {\n        nodes.forEach(function (node) {\n          if (node.targetLinks.length) {\n            var y = sum(node.targetLinks, weightedSource) / sum(node.targetLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n      function weightedSource(link) {\n        return center(link.source) * link.value;\n      }\n    }\n    function relaxRightToLeft(alpha) {\n      nodesByBreadth.slice().reverse().forEach(function (nodes) {\n        nodes.forEach(function (node) {\n          if (node.sourceLinks.length) {\n            var y = sum(node.sourceLinks, weightedTarget) / sum(node.sourceLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n      function weightedTarget(link) {\n        return center(link.target) * link.value;\n      }\n    }\n    function resolveCollisions() {\n      nodesByBreadth.forEach(function (nodes) {\n        var node,\n          dy,\n          y0 = 0,\n          n = nodes.length,\n          i;\n\n        // Push any overlapping nodes down.\n        nodes.sort(ascendingDepth);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y0 - node.y;\n          if (dy > 0) node.y += dy;\n          y0 = node.y + node.dy + nodePadding;\n        }\n\n        // If the bottommost node goes outside the bounds, push it back up.\n        dy = y0 - nodePadding - size[1];\n        if (dy > 0) {\n          y0 = node.y -= dy;\n\n          // Push any overlapping nodes back up.\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y + node.dy + nodePadding - y0;\n            if (dy > 0) node.y -= dy;\n            y0 = node.y;\n          }\n        }\n      });\n    }\n    function ascendingDepth(a, b) {\n      return a.y - b.y;\n    }\n  }\n  function computeLinkDepths() {\n    nodes.forEach(function (node) {\n      node.sourceLinks.sort(ascendingTargetDepth);\n      node.targetLinks.sort(ascendingSourceDepth);\n    });\n    nodes.forEach(function (node) {\n      var sy = 0,\n        ty = 0;\n      node.sourceLinks.forEach(function (link) {\n        link.sy = sy;\n        sy += link.dy;\n      });\n      node.targetLinks.forEach(function (link) {\n        link.ty = ty;\n        ty += link.dy;\n      });\n    });\n    function ascendingSourceDepth(a, b) {\n      return a.source.y - b.source.y || a.originalIndex - b.originalIndex;\n    }\n    function ascendingTargetDepth(a, b) {\n      return a.target.y - b.target.y || a.originalIndex - b.originalIndex;\n    }\n  }\n  function center(node) {\n    return node.y + node.dy / 2;\n  }\n  function value(link) {\n    return link.value;\n  }\n  return sankey;\n}","map":{"version":3,"names":["ascending","min","sum","max","nest","interpolateNumber","sankey","nodeWidth","nodePadding","size","nodes","links","maxPaddedSpace","_","arguments","length","layout","iterations","computeNodeLinks","computeNodeValues","computeNodeBreadths","computeNodeDepths","computeLinkDepths","relayout","link","curvature","d","x0","source","x","dx","x1","target","xi","x2","x3","y0a","y","sy","y0b","dy","y1a","ty","y1b","forEach","node","sourceLinks","targetLinks","i","originalIndex","push","value","Math","remainingNodes","nextNodes","indexOf","moveSinksRight","scaleNodeBreadths","kx","nodesByBreadth","key","sortKeys","entries","map","values","initializeNodeDepth","resolveCollisions","alpha","relaxRightToLeft","relaxLeftToRight","L","maxNodePadding","ky","weightedSource","center","slice","reverse","weightedTarget","y0","n","sort","ascendingDepth","a","b","ascendingTargetDepth","ascendingSourceDepth"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/@plotly/d3-sankey/src/sankey.js"],"sourcesContent":["import {ascending, min, sum, max} from \"d3-array\";\nimport {nest} from \"d3-collection\";\nimport {interpolateNumber} from \"d3-interpolate\";\n\nexport default function() {\n  var sankey = {},\n      nodeWidth = 24,\n      nodePadding = 8,\n      size = [1, 1],\n      nodes = [],\n      links = [],\n      maxPaddedSpace = 2 / 3; // Defined as a fraction of the total available space\n\n  sankey.nodeWidth = function(_) {\n    if (!arguments.length) return nodeWidth;\n    nodeWidth = +_;\n    return sankey;\n  };\n\n  sankey.nodePadding = function(_) {\n    if (!arguments.length) return nodePadding;\n    nodePadding = +_;\n    return sankey;\n  };\n\n  sankey.nodes = function(_) {\n    if (!arguments.length) return nodes;\n    nodes = _;\n    return sankey;\n  };\n\n  sankey.links = function(_) {\n    if (!arguments.length) return links;\n    links = _;\n    return sankey;\n  };\n\n  sankey.size = function(_) {\n    if (!arguments.length) return size;\n    size = _;\n    return sankey;\n  };\n\n  sankey.layout = function(iterations) {\n    computeNodeLinks();\n    computeNodeValues();\n    computeNodeBreadths();\n    computeNodeDepths(iterations);\n    computeLinkDepths();\n    return sankey;\n  };\n\n  sankey.relayout = function() {\n    computeLinkDepths();\n    return sankey;\n  };\n\n  sankey.link = function() {\n    var curvature = .5;\n\n    function link(d) {\n      var x0 = d.source.x + d.source.dx,\n          x1 = d.target.x,\n          xi = interpolateNumber(x0, x1),\n          x2 = xi(curvature),\n          x3 = xi(1 - curvature),\n          y0a = d.source.y + d.sy,\n          y0b = y0a + d.dy,\n          y1a = d.target.y + d.ty,\n          y1b = y1a + d.dy;\n      return \"M\" + x0 + \",\" + y0a\n           + \"C\" + x2 + \",\" + y0a\n           + \" \" + x3 + \",\" + y1a\n           + \" \" + x1 + \",\" + y1a\n           + \"L\" + x1 + \",\" + y1b\n           + \"C\" + x3 + \",\" + y1b\n           + \" \" + x2 + \",\" + y0b\n           + \" \" + x0 + \",\" + y0b\n           + \"Z\";\n    }\n\n    link.curvature = function(_) {\n      if (!arguments.length) return curvature;\n      curvature = +_;\n      return link;\n    };\n\n    return link;\n  };\n\n  // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n  function computeNodeLinks() {\n    nodes.forEach(function(node) {\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    links.forEach(function(link, i) {\n      var source = link.source,\n          target = link.target;\n      if (typeof source === \"number\") source = link.source = nodes[link.source];\n      if (typeof target === \"number\") target = link.target = nodes[link.target];\n      link.originalIndex = i;\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  }\n\n  // Compute the value (size) of each node by summing the associated links.\n  function computeNodeValues() {\n    nodes.forEach(function(node) {\n      node.value = Math.max(\n        sum(node.sourceLinks, value),\n        sum(node.targetLinks, value)\n      );\n    });\n  }\n\n  // Iteratively assign the breadth (x-position) for each node.\n  // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned breadth zero, while\n  // nodes with no outgoing links are assigned the maximum breadth.\n  function computeNodeBreadths() {\n    var remainingNodes = nodes,\n        nextNodes,\n        x = 0;\n\n    while (remainingNodes.length) {\n      nextNodes = [];\n      remainingNodes.forEach(function(node) {\n        node.x = x;\n        node.dx = nodeWidth;\n        node.sourceLinks.forEach(function(link) {\n          if (nextNodes.indexOf(link.target) < 0) {\n            nextNodes.push(link.target);\n          }\n        });\n      });\n      remainingNodes = nextNodes;\n      ++x;\n    }\n\n    //\n    moveSinksRight(x);\n    scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n  }\n\n  // function moveSourcesRight() {\n  //   nodes.forEach(function(node) {\n  //     if (!node.targetLinks.length) {\n  //       node.x = min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n  //     }\n  //   });\n  // }\n\n  function moveSinksRight(x) {\n    nodes.forEach(function(node) {\n      if (!node.sourceLinks.length) {\n        node.x = x - 1;\n      }\n    });\n  }\n\n  function scaleNodeBreadths(kx) {\n    nodes.forEach(function(node) {\n      node.x *= kx;\n    });\n  }\n\n  function computeNodeDepths(iterations) {\n    var nodesByBreadth = nest()\n        .key(function(d) { return d.x; })\n        .sortKeys(ascending)\n        .entries(nodes)\n        .map(function(d) { return d.values; });\n\n    //\n    initializeNodeDepth();\n    resolveCollisions();\n    for (var alpha = 1; iterations > 0; --iterations) {\n      relaxRightToLeft(alpha *= .99);\n      resolveCollisions();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n    }\n\n    function initializeNodeDepth() {\n      var L = max(nodesByBreadth, function(nodes) {\n        return nodes.length;\n      });\n      var maxNodePadding = maxPaddedSpace * size[1] / (L - 1);\n      if(nodePadding > maxNodePadding) nodePadding = maxNodePadding;\n      var ky = min(nodesByBreadth, function(nodes) {\n        return (size[1] - (nodes.length - 1) * nodePadding) / sum(nodes, value);\n      });\n\n      nodesByBreadth.forEach(function(nodes) {\n        nodes.forEach(function(node, i) {\n          node.y = i;\n          node.dy = node.value * ky;\n        });\n      });\n\n      links.forEach(function(link) {\n        link.dy = link.value * ky;\n      });\n    }\n\n    function relaxLeftToRight(alpha) {\n      nodesByBreadth.forEach(function(nodes) {\n        nodes.forEach(function(node) {\n          if (node.targetLinks.length) {\n            var y = sum(node.targetLinks, weightedSource) / sum(node.targetLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedSource(link) {\n        return center(link.source) * link.value;\n      }\n    }\n\n    function relaxRightToLeft(alpha) {\n      nodesByBreadth.slice().reverse().forEach(function(nodes) {\n        nodes.forEach(function(node) {\n          if (node.sourceLinks.length) {\n            var y = sum(node.sourceLinks, weightedTarget) / sum(node.sourceLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedTarget(link) {\n        return center(link.target) * link.value;\n      }\n    }\n\n    function resolveCollisions() {\n      nodesByBreadth.forEach(function(nodes) {\n        var node,\n            dy,\n            y0 = 0,\n            n = nodes.length,\n            i;\n\n        // Push any overlapping nodes down.\n        nodes.sort(ascendingDepth);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y0 - node.y;\n          if (dy > 0) node.y += dy;\n          y0 = node.y + node.dy + nodePadding;\n        }\n\n        // If the bottommost node goes outside the bounds, push it back up.\n        dy = y0 - nodePadding - size[1];\n        if (dy > 0) {\n          y0 = node.y -= dy;\n\n          // Push any overlapping nodes back up.\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y + node.dy + nodePadding - y0;\n            if (dy > 0) node.y -= dy;\n            y0 = node.y;\n          }\n        }\n      });\n    }\n\n    function ascendingDepth(a, b) {\n      return a.y - b.y;\n    }\n  }\n\n  function computeLinkDepths() {\n    nodes.forEach(function(node) {\n      node.sourceLinks.sort(ascendingTargetDepth);\n      node.targetLinks.sort(ascendingSourceDepth);\n    });\n    nodes.forEach(function(node) {\n      var sy = 0, ty = 0;\n      node.sourceLinks.forEach(function(link) {\n        link.sy = sy;\n        sy += link.dy;\n      });\n      node.targetLinks.forEach(function(link) {\n        link.ty = ty;\n        ty += link.dy;\n      });\n    });\n\n    function ascendingSourceDepth(a, b) {\n      return (a.source.y - b.source.y) || (a.originalIndex - b.originalIndex);\n    }\n\n    function ascendingTargetDepth(a, b) {\n      return (a.target.y - b.target.y) || (a.originalIndex - b.originalIndex);\n    }\n  }\n\n  function center(node) {\n    return node.y + node.dy / 2;\n  }\n\n  function value(link) {\n    return link.value;\n  }\n\n  return sankey;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar isArrayOrTypedArray = require('./array').isArrayOrTypedArray;\n\n/**\n * aggNums() returns the result of an aggregate function applied to an array of\n * values, where non-numerical values have been tossed out.\n *\n * @param {function} f - aggregation function (e.g., Math.min)\n * @param {Number} v - initial value (continuing from previous calls)\n *      if there's no continuing value, use null for selector-type\n *      functions (max,min), or 0 for summations\n * @param {Array} a - array to aggregate (may be nested, we will recurse,\n *                    but all elements must have the same dimension)\n * @param {Number} len - maximum length of a to aggregate\n * @return {Number} - result of f applied to a starting from v\n */\nexports.aggNums = function (f, v, a, len) {\n  var i, b;\n  if (!len || len > a.length) len = a.length;\n  if (!isNumeric(v)) v = false;\n  if (isArrayOrTypedArray(a[0])) {\n    b = new Array(len);\n    for (i = 0; i < len; i++) {\n      b[i] = exports.aggNums(f, v, a[i]);\n    }\n    a = b;\n  }\n  for (i = 0; i < len; i++) {\n    if (!isNumeric(v)) v = a[i];else if (isNumeric(a[i])) v = f(+v, +a[i]);\n  }\n  return v;\n};\n\n/**\n * mean & std dev functions using aggNums, so it handles non-numerics nicely\n * even need to use aggNums instead of .length, to toss out non-numerics\n */\nexports.len = function (data) {\n  return exports.aggNums(function (a) {\n    return a + 1;\n  }, 0, data);\n};\nexports.mean = function (data, len) {\n  if (!len) len = exports.len(data);\n  return exports.aggNums(function (a, b) {\n    return a + b;\n  }, 0, data) / len;\n};\nexports.midRange = function (numArr) {\n  if (numArr === undefined || numArr.length === 0) return undefined;\n  return (exports.aggNums(Math.max, null, numArr) + exports.aggNums(Math.min, null, numArr)) / 2;\n};\nexports.variance = function (data, len, mean) {\n  if (!len) len = exports.len(data);\n  if (!isNumeric(mean)) mean = exports.mean(data, len);\n  return exports.aggNums(function (a, b) {\n    return a + Math.pow(b - mean, 2);\n  }, 0, data) / len;\n};\nexports.stdev = function (data, len, mean) {\n  return Math.sqrt(exports.variance(data, len, mean));\n};\n\n/**\n * interp() computes a percentile (quantile) for a given distribution.\n * We interpolate the distribution (to compute quantiles, we follow method #10 here:\n * http://www.amstat.org/publications/jse/v14n3/langford.html).\n * Typically the index or rank (n * arr.length) may be non-integer.\n * For reference: ends are clipped to the extreme values in the array;\n * For box plots: index you get is half a point too high (see\n * http://en.wikipedia.org/wiki/Percentile#Nearest_rank) but note that this definition\n * indexes from 1 rather than 0, so we subtract 1/2 (instead of add).\n *\n * @param {Array} arr - This array contains the values that make up the distribution.\n * @param {Number} n - Between 0 and 1, n = p/100 is such that we compute the p^th percentile.\n * For example, the 50th percentile (or median) corresponds to n = 0.5\n * @return {Number} - percentile\n */\nexports.interp = function (arr, n) {\n  if (!isNumeric(n)) throw 'n should be a finite number';\n  n = n * arr.length - 0.5;\n  if (n < 0) return arr[0];\n  if (n > arr.length - 1) return arr[arr.length - 1];\n  var frac = n % 1;\n  return frac * arr[Math.ceil(n)] + (1 - frac) * arr[Math.floor(n)];\n};","map":{"version":3,"names":["isNumeric","require","isArrayOrTypedArray","exports","aggNums","f","v","a","len","i","b","length","Array","data","mean","midRange","numArr","undefined","Math","max","min","variance","pow","stdev","sqrt","interp","arr","n","frac","ceil","floor"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/lib/stats.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar isArrayOrTypedArray = require('./array').isArrayOrTypedArray;\n\n/**\n * aggNums() returns the result of an aggregate function applied to an array of\n * values, where non-numerical values have been tossed out.\n *\n * @param {function} f - aggregation function (e.g., Math.min)\n * @param {Number} v - initial value (continuing from previous calls)\n *      if there's no continuing value, use null for selector-type\n *      functions (max,min), or 0 for summations\n * @param {Array} a - array to aggregate (may be nested, we will recurse,\n *                    but all elements must have the same dimension)\n * @param {Number} len - maximum length of a to aggregate\n * @return {Number} - result of f applied to a starting from v\n */\nexports.aggNums = function(f, v, a, len) {\n    var i,\n        b;\n    if(!len || len > a.length) len = a.length;\n    if(!isNumeric(v)) v = false;\n    if(isArrayOrTypedArray(a[0])) {\n        b = new Array(len);\n        for(i = 0; i < len; i++) b[i] = exports.aggNums(f, v, a[i]);\n        a = b;\n    }\n\n    for(i = 0; i < len; i++) {\n        if(!isNumeric(v)) v = a[i];\n        else if(isNumeric(a[i])) v = f(+v, +a[i]);\n    }\n    return v;\n};\n\n/**\n * mean & std dev functions using aggNums, so it handles non-numerics nicely\n * even need to use aggNums instead of .length, to toss out non-numerics\n */\nexports.len = function(data) {\n    return exports.aggNums(function(a) { return a + 1; }, 0, data);\n};\n\nexports.mean = function(data, len) {\n    if(!len) len = exports.len(data);\n    return exports.aggNums(function(a, b) { return a + b; }, 0, data) / len;\n};\n\nexports.midRange = function(numArr) {\n    if(numArr === undefined || numArr.length === 0) return undefined;\n    return (exports.aggNums(Math.max, null, numArr) + exports.aggNums(Math.min, null, numArr)) / 2;\n};\n\nexports.variance = function(data, len, mean) {\n    if(!len) len = exports.len(data);\n    if(!isNumeric(mean)) mean = exports.mean(data, len);\n\n    return exports.aggNums(function(a, b) {\n        return a + Math.pow(b - mean, 2);\n    }, 0, data) / len;\n};\n\nexports.stdev = function(data, len, mean) {\n    return Math.sqrt(exports.variance(data, len, mean));\n};\n\n/**\n * interp() computes a percentile (quantile) for a given distribution.\n * We interpolate the distribution (to compute quantiles, we follow method #10 here:\n * http://www.amstat.org/publications/jse/v14n3/langford.html).\n * Typically the index or rank (n * arr.length) may be non-integer.\n * For reference: ends are clipped to the extreme values in the array;\n * For box plots: index you get is half a point too high (see\n * http://en.wikipedia.org/wiki/Percentile#Nearest_rank) but note that this definition\n * indexes from 1 rather than 0, so we subtract 1/2 (instead of add).\n *\n * @param {Array} arr - This array contains the values that make up the distribution.\n * @param {Number} n - Between 0 and 1, n = p/100 is such that we compute the p^th percentile.\n * For example, the 50th percentile (or median) corresponds to n = 0.5\n * @return {Number} - percentile\n */\nexports.interp = function(arr, n) {\n    if(!isNumeric(n)) throw 'n should be a finite number';\n    n = n * arr.length - 0.5;\n    if(n < 0) return arr[0];\n    if(n > arr.length - 1) return arr[arr.length - 1];\n    var frac = n % 1;\n    return frac * arr[Math.ceil(n)] + (1 - frac) * arr[Math.floor(n)];\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACzC,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,SAAS,CAAC,CAACC,mBAAmB;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,OAAO,CAACC,OAAO,GAAG,UAASC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,GAAG,EAAE;EACrC,IAAIC,CAAC,EACDC,CAAC;EACL,IAAG,CAACF,GAAG,IAAIA,GAAG,GAAGD,CAAC,CAACI,MAAM,EAAEH,GAAG,GAAGD,CAAC,CAACI,MAAM;EACzC,IAAG,CAACX,SAAS,CAACM,CAAC,CAAC,EAAEA,CAAC,GAAG,KAAK;EAC3B,IAAGJ,mBAAmB,CAACK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IAC1BG,CAAC,GAAG,IAAIE,KAAK,CAACJ,GAAG,CAAC;IAClB,KAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,EAAEC,CAAC,EAAE;MAAEC,CAAC,CAACD,CAAC,CAAC,GAAGN,OAAO,CAACC,OAAO,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAACE,CAAC,CAAC,CAAC;IAAC;IAC5DF,CAAC,GAAGG,CAAC;EACT;EAEA,KAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,EAAEC,CAAC,EAAE,EAAE;IACrB,IAAG,CAACT,SAAS,CAACM,CAAC,CAAC,EAAEA,CAAC,GAAGC,CAAC,CAACE,CAAC,CAAC,CAAC,KACtB,IAAGT,SAAS,CAACO,CAAC,CAACE,CAAC,CAAC,CAAC,EAAEH,CAAC,GAAGD,CAAC,CAAC,CAACC,CAAC,EAAE,CAACC,CAAC,CAACE,CAAC,CAAC,CAAC;EAC7C;EACA,OAAOH,CAAC;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACAH,OAAO,CAACK,GAAG,GAAG,UAASK,IAAI,EAAE;EACzB,OAAOV,OAAO,CAACC,OAAO,CAAC,UAASG,CAAC,EAAE;IAAE,OAAOA,CAAC,GAAG,CAAC;EAAE,CAAC,EAAE,CAAC,EAAEM,IAAI,CAAC;AAClE,CAAC;AAEDV,OAAO,CAACW,IAAI,GAAG,UAASD,IAAI,EAAEL,GAAG,EAAE;EAC/B,IAAG,CAACA,GAAG,EAAEA,GAAG,GAAGL,OAAO,CAACK,GAAG,CAACK,IAAI,CAAC;EAChC,OAAOV,OAAO,CAACC,OAAO,CAAC,UAASG,CAAC,EAAEG,CAAC,EAAE;IAAE,OAAOH,CAAC,GAAGG,CAAC;EAAE,CAAC,EAAE,CAAC,EAAEG,IAAI,CAAC,GAAGL,GAAG;AAC3E,CAAC;AAEDL,OAAO,CAACY,QAAQ,GAAG,UAASC,MAAM,EAAE;EAChC,IAAGA,MAAM,KAAKC,SAAS,IAAID,MAAM,CAACL,MAAM,KAAK,CAAC,EAAE,OAAOM,SAAS;EAChE,OAAO,CAACd,OAAO,CAACC,OAAO,CAACc,IAAI,CAACC,GAAG,EAAE,IAAI,EAAEH,MAAM,CAAC,GAAGb,OAAO,CAACC,OAAO,CAACc,IAAI,CAACE,GAAG,EAAE,IAAI,EAAEJ,MAAM,CAAC,IAAI,CAAC;AAClG,CAAC;AAEDb,OAAO,CAACkB,QAAQ,GAAG,UAASR,IAAI,EAAEL,GAAG,EAAEM,IAAI,EAAE;EACzC,IAAG,CAACN,GAAG,EAAEA,GAAG,GAAGL,OAAO,CAACK,GAAG,CAACK,IAAI,CAAC;EAChC,IAAG,CAACb,SAAS,CAACc,IAAI,CAAC,EAAEA,IAAI,GAAGX,OAAO,CAACW,IAAI,CAACD,IAAI,EAAEL,GAAG,CAAC;EAEnD,OAAOL,OAAO,CAACC,OAAO,CAAC,UAASG,CAAC,EAAEG,CAAC,EAAE;IAClC,OAAOH,CAAC,GAAGW,IAAI,CAACI,GAAG,CAACZ,CAAC,GAAGI,IAAI,EAAE,CAAC,CAAC;EACpC,CAAC,EAAE,CAAC,EAAED,IAAI,CAAC,GAAGL,GAAG;AACrB,CAAC;AAEDL,OAAO,CAACoB,KAAK,GAAG,UAASV,IAAI,EAAEL,GAAG,EAAEM,IAAI,EAAE;EACtC,OAAOI,IAAI,CAACM,IAAI,CAACrB,OAAO,CAACkB,QAAQ,CAACR,IAAI,EAAEL,GAAG,EAAEM,IAAI,CAAC,CAAC;AACvD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,OAAO,CAACsB,MAAM,GAAG,UAASC,GAAG,EAAEC,CAAC,EAAE;EAC9B,IAAG,CAAC3B,SAAS,CAAC2B,CAAC,CAAC,EAAE,MAAM,6BAA6B;EACrDA,CAAC,GAAGA,CAAC,GAAGD,GAAG,CAACf,MAAM,GAAG,GAAG;EACxB,IAAGgB,CAAC,GAAG,CAAC,EAAE,OAAOD,GAAG,CAAC,CAAC,CAAC;EACvB,IAAGC,CAAC,GAAGD,GAAG,CAACf,MAAM,GAAG,CAAC,EAAE,OAAOe,GAAG,CAACA,GAAG,CAACf,MAAM,GAAG,CAAC,CAAC;EACjD,IAAIiB,IAAI,GAAGD,CAAC,GAAG,CAAC;EAChB,OAAOC,IAAI,GAAGF,GAAG,CAACR,IAAI,CAACW,IAAI,CAACF,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAGC,IAAI,IAAIF,GAAG,CAACR,IAAI,CAACY,KAAK,CAACH,CAAC,CAAC,CAAC;AACrE,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
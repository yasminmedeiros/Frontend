{"ast":null,"code":"/*\n * Ben Postlethwaite\n * January 2013\n * License MIT\n */\n'use strict';\n\nvar colorScale = require('./colorScale');\nvar lerp = require('lerp');\nmodule.exports = createColormap;\nfunction createColormap(spec) {\n  /*\n   * Default Options\n   */\n  var indicies, fromrgba, torgba, nsteps, cmap, colormap, format, nshades, colors, alpha, i;\n  if (!spec) spec = {};\n  nshades = (spec.nshades || 72) - 1;\n  format = spec.format || 'hex';\n  colormap = spec.colormap;\n  if (!colormap) colormap = 'jet';\n  if (typeof colormap === 'string') {\n    colormap = colormap.toLowerCase();\n    if (!colorScale[colormap]) {\n      throw Error(colormap + ' not a supported colorscale');\n    }\n    cmap = colorScale[colormap];\n  } else if (Array.isArray(colormap)) {\n    cmap = colormap.slice();\n  } else {\n    throw Error('unsupported colormap option', colormap);\n  }\n  if (cmap.length > nshades + 1) {\n    throw new Error(colormap + ' map requires nshades to be at least size ' + cmap.length);\n  }\n  if (!Array.isArray(spec.alpha)) {\n    if (typeof spec.alpha === 'number') {\n      alpha = [spec.alpha, spec.alpha];\n    } else {\n      alpha = [1, 1];\n    }\n  } else if (spec.alpha.length !== 2) {\n    alpha = [1, 1];\n  } else {\n    alpha = spec.alpha.slice();\n  }\n\n  // map index points from 0..1 to 0..n-1\n  indicies = cmap.map(function (c) {\n    return Math.round(c.index * nshades);\n  });\n\n  // Add alpha channel to the map\n  alpha[0] = Math.min(Math.max(alpha[0], 0), 1);\n  alpha[1] = Math.min(Math.max(alpha[1], 0), 1);\n  var steps = cmap.map(function (c, i) {\n    var index = cmap[i].index;\n    var rgba = cmap[i].rgb.slice();\n\n    // if user supplies their own map use it\n    if (rgba.length === 4 && rgba[3] >= 0 && rgba[3] <= 1) {\n      return rgba;\n    }\n    rgba[3] = alpha[0] + (alpha[1] - alpha[0]) * index;\n    return rgba;\n  });\n\n  /*\n   * map increasing linear values between indicies to\n   * linear steps in colorvalues\n   */\n  var colors = [];\n  for (i = 0; i < indicies.length - 1; ++i) {\n    nsteps = indicies[i + 1] - indicies[i];\n    fromrgba = steps[i];\n    torgba = steps[i + 1];\n    for (var j = 0; j < nsteps; j++) {\n      var amt = j / nsteps;\n      colors.push([Math.round(lerp(fromrgba[0], torgba[0], amt)), Math.round(lerp(fromrgba[1], torgba[1], amt)), Math.round(lerp(fromrgba[2], torgba[2], amt)), lerp(fromrgba[3], torgba[3], amt)]);\n    }\n  }\n\n  //add 1 step as last value\n  colors.push(cmap[cmap.length - 1].rgb.concat(alpha[1]));\n  if (format === 'hex') colors = colors.map(rgb2hex);else if (format === 'rgbaString') colors = colors.map(rgbaStr);else if (format === 'float') colors = colors.map(rgb2float);\n  return colors;\n}\n;\nfunction rgb2float(rgba) {\n  return [rgba[0] / 255, rgba[1] / 255, rgba[2] / 255, rgba[3]];\n}\nfunction rgb2hex(rgba) {\n  var dig,\n    hex = '#';\n  for (var i = 0; i < 3; ++i) {\n    dig = rgba[i];\n    dig = dig.toString(16);\n    hex += ('00' + dig).substr(dig.length);\n  }\n  return hex;\n}\nfunction rgbaStr(rgba) {\n  return 'rgba(' + rgba.join(',') + ')';\n}","map":{"version":3,"names":["colorScale","require","lerp","module","exports","createColormap","spec","indicies","fromrgba","torgba","nsteps","cmap","colormap","format","nshades","colors","alpha","i","toLowerCase","Error","Array","isArray","slice","length","map","c","Math","round","index","min","max","steps","rgba","rgb","j","amt","push","concat","rgb2hex","rgbaStr","rgb2float","dig","hex","toString","substr","join"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/colormap/index.js"],"sourcesContent":["/*\n * Ben Postlethwaite\n * January 2013\n * License MIT\n */\n'use strict';\n\nvar colorScale = require('./colorScale');\nvar lerp = require('lerp')\n\nmodule.exports = createColormap;\n\nfunction createColormap (spec) {\n    /*\n     * Default Options\n     */\n    var indicies, fromrgba, torgba,\n        nsteps, cmap, colormap, format,\n        nshades, colors, alpha, i;\n\n    if ( !spec ) spec = {};\n\n    nshades = (spec.nshades || 72) - 1;\n    format = spec.format || 'hex';\n\n    colormap = spec.colormap;\n    if (!colormap) colormap = 'jet';\n\n    if (typeof colormap === 'string') {\n        colormap = colormap.toLowerCase();\n\n        if (!colorScale[colormap]) {\n            throw Error(colormap + ' not a supported colorscale');\n        }\n\n        cmap = colorScale[colormap];\n\n    } else if (Array.isArray(colormap)) {\n        cmap = colormap.slice();\n\n    } else {\n        throw Error('unsupported colormap option', colormap);\n    }\n\n    if (cmap.length > nshades + 1) {\n        throw new Error(\n            colormap+' map requires nshades to be at least size '+cmap.length\n        );\n    }\n\n    if (!Array.isArray(spec.alpha)) {\n\n        if (typeof spec.alpha === 'number') {\n            alpha = [spec.alpha, spec.alpha];\n\n        } else {\n            alpha = [1, 1];\n        }\n\n    } else if (spec.alpha.length !== 2) {\n        alpha = [1, 1];\n\n    } else {\n        alpha = spec.alpha.slice();\n    }\n\n    // map index points from 0..1 to 0..n-1\n    indicies = cmap.map(function(c) {\n        return Math.round(c.index * nshades);\n    });\n\n    // Add alpha channel to the map\n    alpha[0] = Math.min(Math.max(alpha[0], 0), 1);\n    alpha[1] = Math.min(Math.max(alpha[1], 0), 1);\n\n    var steps = cmap.map(function(c, i) {\n        var index = cmap[i].index\n\n        var rgba = cmap[i].rgb.slice();\n\n        // if user supplies their own map use it\n        if (rgba.length === 4 && rgba[3] >= 0 && rgba[3] <= 1) {\n            return rgba\n        }\n        rgba[3] = alpha[0] + (alpha[1] - alpha[0])*index;\n\n        return rgba\n    })\n\n\n    /*\n     * map increasing linear values between indicies to\n     * linear steps in colorvalues\n     */\n    var colors = []\n    for (i = 0; i < indicies.length-1; ++i) {\n        nsteps = indicies[i+1] - indicies[i];\n        fromrgba = steps[i];\n        torgba = steps[i+1];\n\n        for (var j = 0; j < nsteps; j++) {\n            var amt = j / nsteps\n            colors.push([\n                Math.round(lerp(fromrgba[0], torgba[0], amt)),\n                Math.round(lerp(fromrgba[1], torgba[1], amt)),\n                Math.round(lerp(fromrgba[2], torgba[2], amt)),\n                lerp(fromrgba[3], torgba[3], amt)\n            ])\n        }\n    }\n\n    //add 1 step as last value\n    colors.push(cmap[cmap.length - 1].rgb.concat(alpha[1]))\n\n    if (format === 'hex') colors = colors.map( rgb2hex );\n    else if (format === 'rgbaString') colors = colors.map( rgbaStr );\n    else if (format === 'float') colors = colors.map( rgb2float );\n\n    return colors;\n};\n\nfunction rgb2float (rgba) {\n    return [\n        rgba[0] / 255,\n        rgba[1] / 255,\n        rgba[2] / 255,\n        rgba[3]\n    ]\n}\n\nfunction rgb2hex (rgba) {\n    var dig, hex = '#';\n    for (var i = 0; i < 3; ++i) {\n        dig = rgba[i];\n        dig = dig.toString(16);\n        hex += ('00' + dig).substr( dig.length );\n    }\n    return hex;\n}\n\nfunction rgbaStr (rgba) {\n    return 'rgba(' + rgba.join(',') + ')';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar toLogRange = require('../../lib/to_log_range');\n\n/*\n * convertCoords: when converting an axis between log and linear\n * you need to alter any annotations on that axis to keep them\n * pointing at the same data point.\n * In v2.0 this will become obsolete\n *\n * gd: the plot div\n * ax: the axis being changed\n * newType: the type it's getting\n * doExtra: function(attr, val) from inside relayout that sets the attribute.\n *     Use this to make the changes as it's aware if any other changes in the\n *     same relayout call should override this conversion.\n */\nmodule.exports = function convertCoords(gd, ax, newType, doExtra) {\n  ax = ax || {};\n  var toLog = newType === 'log' && ax.type === 'linear';\n  var fromLog = newType === 'linear' && ax.type === 'log';\n  if (!(toLog || fromLog)) return;\n  var annotations = gd._fullLayout.annotations;\n  var axLetter = ax._id.charAt(0);\n  var ann;\n  var attrPrefix;\n  function convert(attr) {\n    var currentVal = ann[attr];\n    var newVal = null;\n    if (toLog) newVal = toLogRange(currentVal, ax.range);else newVal = Math.pow(10, currentVal);\n\n    // if conversion failed, delete the value so it gets a default value\n    if (!isNumeric(newVal)) newVal = null;\n    doExtra(attrPrefix + attr, newVal);\n  }\n  for (var i = 0; i < annotations.length; i++) {\n    ann = annotations[i];\n    attrPrefix = 'annotations[' + i + '].';\n    if (ann[axLetter + 'ref'] === ax._id) convert(axLetter);\n    if (ann['a' + axLetter + 'ref'] === ax._id) convert('a' + axLetter);\n  }\n};","map":{"version":3,"names":["isNumeric","require","toLogRange","module","exports","convertCoords","gd","ax","newType","doExtra","toLog","type","fromLog","annotations","_fullLayout","axLetter","_id","charAt","ann","attrPrefix","convert","attr","currentVal","newVal","range","Math","pow","i","length"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/components/annotations/convert_coords.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar toLogRange = require('../../lib/to_log_range');\n\n/*\n * convertCoords: when converting an axis between log and linear\n * you need to alter any annotations on that axis to keep them\n * pointing at the same data point.\n * In v2.0 this will become obsolete\n *\n * gd: the plot div\n * ax: the axis being changed\n * newType: the type it's getting\n * doExtra: function(attr, val) from inside relayout that sets the attribute.\n *     Use this to make the changes as it's aware if any other changes in the\n *     same relayout call should override this conversion.\n */\nmodule.exports = function convertCoords(gd, ax, newType, doExtra) {\n    ax = ax || {};\n\n    var toLog = (newType === 'log') && (ax.type === 'linear');\n    var fromLog = (newType === 'linear') && (ax.type === 'log');\n\n    if(!(toLog || fromLog)) return;\n\n    var annotations = gd._fullLayout.annotations;\n    var axLetter = ax._id.charAt(0);\n    var ann;\n    var attrPrefix;\n\n    function convert(attr) {\n        var currentVal = ann[attr];\n        var newVal = null;\n\n        if(toLog) newVal = toLogRange(currentVal, ax.range);\n        else newVal = Math.pow(10, currentVal);\n\n        // if conversion failed, delete the value so it gets a default value\n        if(!isNumeric(newVal)) newVal = null;\n\n        doExtra(attrPrefix + attr, newVal);\n    }\n\n    for(var i = 0; i < annotations.length; i++) {\n        ann = annotations[i];\n        attrPrefix = 'annotations[' + i + '].';\n\n        if(ann[axLetter + 'ref'] === ax._id) convert(axLetter);\n        if(ann['a' + axLetter + 'ref'] === ax._id) convert('a' + axLetter);\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACzC,IAAIC,UAAU,GAAGD,OAAO,CAAC,wBAAwB,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,SAASC,aAAa,CAACC,EAAE,EAAEC,EAAE,EAAEC,OAAO,EAAEC,OAAO,EAAE;EAC9DF,EAAE,GAAGA,EAAE,IAAI,CAAC,CAAC;EAEb,IAAIG,KAAK,GAAIF,OAAO,KAAK,KAAK,IAAMD,EAAE,CAACI,IAAI,KAAK,QAAS;EACzD,IAAIC,OAAO,GAAIJ,OAAO,KAAK,QAAQ,IAAMD,EAAE,CAACI,IAAI,KAAK,KAAM;EAE3D,IAAG,EAAED,KAAK,IAAIE,OAAO,CAAC,EAAE;EAExB,IAAIC,WAAW,GAAGP,EAAE,CAACQ,WAAW,CAACD,WAAW;EAC5C,IAAIE,QAAQ,GAAGR,EAAE,CAACS,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC;EAC/B,IAAIC,GAAG;EACP,IAAIC,UAAU;EAEd,SAASC,OAAO,CAACC,IAAI,EAAE;IACnB,IAAIC,UAAU,GAAGJ,GAAG,CAACG,IAAI,CAAC;IAC1B,IAAIE,MAAM,GAAG,IAAI;IAEjB,IAAGb,KAAK,EAAEa,MAAM,GAAGrB,UAAU,CAACoB,UAAU,EAAEf,EAAE,CAACiB,KAAK,CAAC,CAAC,KAC/CD,MAAM,GAAGE,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEJ,UAAU,CAAC;;IAEtC;IACA,IAAG,CAACtB,SAAS,CAACuB,MAAM,CAAC,EAAEA,MAAM,GAAG,IAAI;IAEpCd,OAAO,CAACU,UAAU,GAAGE,IAAI,EAAEE,MAAM,CAAC;EACtC;EAEA,KAAI,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,WAAW,CAACe,MAAM,EAAED,CAAC,EAAE,EAAE;IACxCT,GAAG,GAAGL,WAAW,CAACc,CAAC,CAAC;IACpBR,UAAU,GAAG,cAAc,GAAGQ,CAAC,GAAG,IAAI;IAEtC,IAAGT,GAAG,CAACH,QAAQ,GAAG,KAAK,CAAC,KAAKR,EAAE,CAACS,GAAG,EAAEI,OAAO,CAACL,QAAQ,CAAC;IACtD,IAAGG,GAAG,CAAC,GAAG,GAAGH,QAAQ,GAAG,KAAK,CAAC,KAAKR,EAAE,CAACS,GAAG,EAAEI,OAAO,CAAC,GAAG,GAAGL,QAAQ,CAAC;EACtE;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar Registry = require('../../registry');\nvar Axes = require('../../plots/cartesian/axes');\nvar Lib = require('../../lib');\nvar makeComputeError = require('./compute_error');\nmodule.exports = function calc(gd) {\n  var calcdata = gd.calcdata;\n  for (var i = 0; i < calcdata.length; i++) {\n    var calcTrace = calcdata[i];\n    var trace = calcTrace[0].trace;\n    if (trace.visible === true && Registry.traceIs(trace, 'errorBarsOK')) {\n      var xa = Axes.getFromId(gd, trace.xaxis);\n      var ya = Axes.getFromId(gd, trace.yaxis);\n      calcOneAxis(calcTrace, trace, xa, 'x');\n      calcOneAxis(calcTrace, trace, ya, 'y');\n    }\n  }\n};\nfunction calcOneAxis(calcTrace, trace, axis, coord) {\n  var opts = trace['error_' + coord] || {};\n  var isVisible = opts.visible && ['linear', 'log'].indexOf(axis.type) !== -1;\n  var vals = [];\n  if (!isVisible) return;\n  var computeError = makeComputeError(opts);\n  for (var i = 0; i < calcTrace.length; i++) {\n    var calcPt = calcTrace[i];\n    var iIn = calcPt.i;\n\n    // for types that don't include `i` in each calcdata point\n    if (iIn === undefined) iIn = i;\n\n    // for stacked area inserted points\n    // TODO: errorbars have been tested cursorily with stacked area,\n    // but not thoroughly. It's not even really clear what you want to do:\n    // Should it just be calculated based on that trace's size data?\n    // Should you add errors from below in quadrature?\n    // And what about normalization, where in principle the errors shrink\n    // again when you get up to the top end?\n    // One option would be to forbid errorbars with stacking until we\n    // decide how to handle these questions.\n    else if (iIn === null) continue;\n    var calcCoord = calcPt[coord];\n    if (!isNumeric(axis.c2l(calcCoord))) continue;\n    var errors = computeError(calcCoord, iIn);\n    if (isNumeric(errors[0]) && isNumeric(errors[1])) {\n      var shoe = calcPt[coord + 's'] = calcCoord - errors[0];\n      var hat = calcPt[coord + 'h'] = calcCoord + errors[1];\n      vals.push(shoe, hat);\n    }\n  }\n  var axId = axis._id;\n  var baseExtremes = trace._extremes[axId];\n  var extremes = Axes.findExtremes(axis, vals, Lib.extendFlat({\n    tozero: baseExtremes.opts.tozero\n  }, {\n    padded: true\n  }));\n  baseExtremes.min = baseExtremes.min.concat(extremes.min);\n  baseExtremes.max = baseExtremes.max.concat(extremes.max);\n}","map":{"version":3,"names":["isNumeric","require","Registry","Axes","Lib","makeComputeError","module","exports","calc","gd","calcdata","i","length","calcTrace","trace","visible","traceIs","xa","getFromId","xaxis","ya","yaxis","calcOneAxis","axis","coord","opts","isVisible","indexOf","type","vals","computeError","calcPt","iIn","undefined","calcCoord","c2l","errors","shoe","hat","push","axId","_id","baseExtremes","_extremes","extremes","findExtremes","extendFlat","tozero","padded","min","concat","max"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/components/errorbars/calc.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Registry = require('../../registry');\nvar Axes = require('../../plots/cartesian/axes');\nvar Lib = require('../../lib');\n\nvar makeComputeError = require('./compute_error');\n\nmodule.exports = function calc(gd) {\n    var calcdata = gd.calcdata;\n\n    for(var i = 0; i < calcdata.length; i++) {\n        var calcTrace = calcdata[i];\n        var trace = calcTrace[0].trace;\n\n        if(trace.visible === true && Registry.traceIs(trace, 'errorBarsOK')) {\n            var xa = Axes.getFromId(gd, trace.xaxis);\n            var ya = Axes.getFromId(gd, trace.yaxis);\n            calcOneAxis(calcTrace, trace, xa, 'x');\n            calcOneAxis(calcTrace, trace, ya, 'y');\n        }\n    }\n};\n\nfunction calcOneAxis(calcTrace, trace, axis, coord) {\n    var opts = trace['error_' + coord] || {};\n    var isVisible = (opts.visible && ['linear', 'log'].indexOf(axis.type) !== -1);\n    var vals = [];\n\n    if(!isVisible) return;\n\n    var computeError = makeComputeError(opts);\n\n    for(var i = 0; i < calcTrace.length; i++) {\n        var calcPt = calcTrace[i];\n\n        var iIn = calcPt.i;\n\n        // for types that don't include `i` in each calcdata point\n        if(iIn === undefined) iIn = i;\n\n        // for stacked area inserted points\n        // TODO: errorbars have been tested cursorily with stacked area,\n        // but not thoroughly. It's not even really clear what you want to do:\n        // Should it just be calculated based on that trace's size data?\n        // Should you add errors from below in quadrature?\n        // And what about normalization, where in principle the errors shrink\n        // again when you get up to the top end?\n        // One option would be to forbid errorbars with stacking until we\n        // decide how to handle these questions.\n        else if(iIn === null) continue;\n\n        var calcCoord = calcPt[coord];\n\n        if(!isNumeric(axis.c2l(calcCoord))) continue;\n\n        var errors = computeError(calcCoord, iIn);\n        if(isNumeric(errors[0]) && isNumeric(errors[1])) {\n            var shoe = calcPt[coord + 's'] = calcCoord - errors[0];\n            var hat = calcPt[coord + 'h'] = calcCoord + errors[1];\n            vals.push(shoe, hat);\n        }\n    }\n\n    var axId = axis._id;\n    var baseExtremes = trace._extremes[axId];\n    var extremes = Axes.findExtremes(\n        axis,\n        vals,\n        Lib.extendFlat({tozero: baseExtremes.opts.tozero}, {padded: true})\n    );\n    baseExtremes.min = baseExtremes.min.concat(extremes.min);\n    baseExtremes.max = baseExtremes.max.concat(extremes.max);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
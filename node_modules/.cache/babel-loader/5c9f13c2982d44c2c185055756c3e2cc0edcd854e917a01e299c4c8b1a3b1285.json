{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar BADNUM = require('../constants/numerical').BADNUM;\n\n/**\n * Convert calcTrace to GeoJSON 'MultiLineString' coordinate arrays\n *\n * @param {object} calcTrace\n *  gd.calcdata item.\n *  Note that calcTrace[i].lonlat is assumed to be defined\n *\n * @return {array}\n *  return line coords array (or array of arrays)\n *\n */\nexports.calcTraceToLineCoords = function (calcTrace) {\n  var trace = calcTrace[0].trace;\n  var connectgaps = trace.connectgaps;\n  var coords = [];\n  var lineString = [];\n  for (var i = 0; i < calcTrace.length; i++) {\n    var calcPt = calcTrace[i];\n    var lonlat = calcPt.lonlat;\n    if (lonlat[0] !== BADNUM) {\n      lineString.push(lonlat);\n    } else if (!connectgaps && lineString.length > 0) {\n      coords.push(lineString);\n      lineString = [];\n    }\n  }\n  if (lineString.length > 0) {\n    coords.push(lineString);\n  }\n  return coords;\n};\n\n/**\n * Make line ('LineString' or 'MultiLineString') GeoJSON\n *\n * @param {array} coords\n *  results form calcTraceToLineCoords\n * @return {object} out\n *  GeoJSON object\n *\n */\nexports.makeLine = function (coords) {\n  if (coords.length === 1) {\n    return {\n      type: 'LineString',\n      coordinates: coords[0]\n    };\n  } else {\n    return {\n      type: 'MultiLineString',\n      coordinates: coords\n    };\n  }\n};\n\n/**\n * Make polygon ('Polygon' or 'MultiPolygon') GeoJSON\n *\n * @param {array} coords\n *  results form calcTraceToLineCoords\n * @return {object} out\n *  GeoJSON object\n */\nexports.makePolygon = function (coords) {\n  if (coords.length === 1) {\n    return {\n      type: 'Polygon',\n      coordinates: coords\n    };\n  } else {\n    var _coords = new Array(coords.length);\n    for (var i = 0; i < coords.length; i++) {\n      _coords[i] = [coords[i]];\n    }\n    return {\n      type: 'MultiPolygon',\n      coordinates: _coords\n    };\n  }\n};\n\n/**\n * Make blank GeoJSON\n *\n * @return {object}\n *  Blank GeoJSON object\n *\n */\nexports.makeBlank = function () {\n  return {\n    type: 'Point',\n    coordinates: []\n  };\n};","map":{"version":3,"names":["BADNUM","require","exports","calcTraceToLineCoords","calcTrace","trace","connectgaps","coords","lineString","i","length","calcPt","lonlat","push","makeLine","type","coordinates","makePolygon","_coords","Array","makeBlank"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/lib/geojson_utils.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar BADNUM = require('../constants/numerical').BADNUM;\n\n/**\n * Convert calcTrace to GeoJSON 'MultiLineString' coordinate arrays\n *\n * @param {object} calcTrace\n *  gd.calcdata item.\n *  Note that calcTrace[i].lonlat is assumed to be defined\n *\n * @return {array}\n *  return line coords array (or array of arrays)\n *\n */\nexports.calcTraceToLineCoords = function(calcTrace) {\n    var trace = calcTrace[0].trace;\n    var connectgaps = trace.connectgaps;\n\n    var coords = [];\n    var lineString = [];\n\n    for(var i = 0; i < calcTrace.length; i++) {\n        var calcPt = calcTrace[i];\n        var lonlat = calcPt.lonlat;\n\n        if(lonlat[0] !== BADNUM) {\n            lineString.push(lonlat);\n        } else if(!connectgaps && lineString.length > 0) {\n            coords.push(lineString);\n            lineString = [];\n        }\n    }\n\n    if(lineString.length > 0) {\n        coords.push(lineString);\n    }\n\n    return coords;\n};\n\n\n/**\n * Make line ('LineString' or 'MultiLineString') GeoJSON\n *\n * @param {array} coords\n *  results form calcTraceToLineCoords\n * @return {object} out\n *  GeoJSON object\n *\n */\nexports.makeLine = function(coords) {\n    if(coords.length === 1) {\n        return {\n            type: 'LineString',\n            coordinates: coords[0]\n        };\n    } else {\n        return {\n            type: 'MultiLineString',\n            coordinates: coords\n        };\n    }\n};\n\n/**\n * Make polygon ('Polygon' or 'MultiPolygon') GeoJSON\n *\n * @param {array} coords\n *  results form calcTraceToLineCoords\n * @return {object} out\n *  GeoJSON object\n */\nexports.makePolygon = function(coords) {\n    if(coords.length === 1) {\n        return {\n            type: 'Polygon',\n            coordinates: coords\n        };\n    } else {\n        var _coords = new Array(coords.length);\n\n        for(var i = 0; i < coords.length; i++) {\n            _coords[i] = [coords[i]];\n        }\n\n        return {\n            type: 'MultiPolygon',\n            coordinates: _coords\n        };\n    }\n};\n\n/**\n * Make blank GeoJSON\n *\n * @return {object}\n *  Blank GeoJSON object\n *\n */\nexports.makeBlank = function() {\n    return {\n        type: 'Point',\n        coordinates: []\n    };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,wBAAwB,CAAC,CAACD,MAAM;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,OAAO,CAACC,qBAAqB,GAAG,UAASC,SAAS,EAAE;EAChD,IAAIC,KAAK,GAAGD,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK;EAC9B,IAAIC,WAAW,GAAGD,KAAK,CAACC,WAAW;EAEnC,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,UAAU,GAAG,EAAE;EAEnB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,SAAS,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,IAAIE,MAAM,GAAGP,SAAS,CAACK,CAAC,CAAC;IACzB,IAAIG,MAAM,GAAGD,MAAM,CAACC,MAAM;IAE1B,IAAGA,MAAM,CAAC,CAAC,CAAC,KAAKZ,MAAM,EAAE;MACrBQ,UAAU,CAACK,IAAI,CAACD,MAAM,CAAC;IAC3B,CAAC,MAAM,IAAG,CAACN,WAAW,IAAIE,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;MAC7CH,MAAM,CAACM,IAAI,CAACL,UAAU,CAAC;MACvBA,UAAU,GAAG,EAAE;IACnB;EACJ;EAEA,IAAGA,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;IACtBH,MAAM,CAACM,IAAI,CAACL,UAAU,CAAC;EAC3B;EAEA,OAAOD,MAAM;AACjB,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,OAAO,CAACY,QAAQ,GAAG,UAASP,MAAM,EAAE;EAChC,IAAGA,MAAM,CAACG,MAAM,KAAK,CAAC,EAAE;IACpB,OAAO;MACHK,IAAI,EAAE,YAAY;MAClBC,WAAW,EAAET,MAAM,CAAC,CAAC;IACzB,CAAC;EACL,CAAC,MAAM;IACH,OAAO;MACHQ,IAAI,EAAE,iBAAiB;MACvBC,WAAW,EAAET;IACjB,CAAC;EACL;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,OAAO,CAACe,WAAW,GAAG,UAASV,MAAM,EAAE;EACnC,IAAGA,MAAM,CAACG,MAAM,KAAK,CAAC,EAAE;IACpB,OAAO;MACHK,IAAI,EAAE,SAAS;MACfC,WAAW,EAAET;IACjB,CAAC;EACL,CAAC,MAAM;IACH,IAAIW,OAAO,GAAG,IAAIC,KAAK,CAACZ,MAAM,CAACG,MAAM,CAAC;IAEtC,KAAI,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACnCS,OAAO,CAACT,CAAC,CAAC,GAAG,CAACF,MAAM,CAACE,CAAC,CAAC,CAAC;IAC5B;IAEA,OAAO;MACHM,IAAI,EAAE,cAAc;MACpBC,WAAW,EAAEE;IACjB,CAAC;EACL;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAhB,OAAO,CAACkB,SAAS,GAAG,YAAW;EAC3B,OAAO;IACHL,IAAI,EAAE,OAAO;IACbC,WAAW,EAAE;EACjB,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
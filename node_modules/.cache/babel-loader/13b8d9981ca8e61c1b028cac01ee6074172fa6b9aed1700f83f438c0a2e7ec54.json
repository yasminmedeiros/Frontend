{"ast":null,"code":"// Copyright (C) 2011 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Install a leaky WeakMap emulation on platforms that\n * don't provide a built-in one.\n *\n * <p>Assumes that an ES5 platform where, if {@code WeakMap} is\n * already present, then it conforms to the anticipated ES6\n * specification. To run this file on an ES5 or almost ES5\n * implementation where the {@code WeakMap} specification does not\n * quite conform, run <code>repairES5.js</code> first.\n *\n * <p>Even though WeakMapModule is not global, the linter thinks it\n * is, which is why it is in the overrides list below.\n *\n * <p>NOTE: Before using this WeakMap emulation in a non-SES\n * environment, see the note below about hiddenRecord.\n *\n * @author Mark S. Miller\n * @requires crypto, ArrayBuffer, Uint8Array, navigator, console\n * @overrides WeakMap, ses, Proxy\n * @overrides WeakMapModule\n */\n\n/**\n * This {@code WeakMap} emulation is observably equivalent to the\n * ES-Harmony WeakMap, but with leakier garbage collection properties.\n *\n * <p>As with true WeakMaps, in this emulation, a key does not\n * retain maps indexed by that key and (crucially) a map does not\n * retain the keys it indexes. A map by itself also does not retain\n * the values associated with that map.\n *\n * <p>However, the values associated with a key in some map are\n * retained so long as that key is retained and those associations are\n * not overridden. For example, when used to support membranes, all\n * values exported from a given membrane will live for the lifetime\n * they would have had in the absence of an interposed membrane. Even\n * when the membrane is revoked, all objects that would have been\n * reachable in the absence of revocation will still be reachable, as\n * far as the GC can tell, even though they will no longer be relevant\n * to ongoing computation.\n *\n * <p>The API implemented here is approximately the API as implemented\n * in FF6.0a1 and agreed to by MarkM, Andreas Gal, and Dave Herman,\n * rather than the offially approved proposal page. TODO(erights):\n * upgrade the ecmascript WeakMap proposal page to explain this API\n * change and present to EcmaScript committee for their approval.\n *\n * <p>The first difference between the emulation here and that in\n * FF6.0a1 is the presence of non enumerable {@code get___, has___,\n * set___, and delete___} methods on WeakMap instances to represent\n * what would be the hidden internal properties of a primitive\n * implementation. Whereas the FF6.0a1 WeakMap.prototype methods\n * require their {@code this} to be a genuine WeakMap instance (i.e.,\n * an object of {@code [[Class]]} \"WeakMap}), since there is nothing\n * unforgeable about the pseudo-internal method names used here,\n * nothing prevents these emulated prototype methods from being\n * applied to non-WeakMaps with pseudo-internal methods of the same\n * names.\n *\n * <p>Another difference is that our emulated {@code\n * WeakMap.prototype} is not itself a WeakMap. A problem with the\n * current FF6.0a1 API is that WeakMap.prototype is itself a WeakMap\n * providing ambient mutability and an ambient communications\n * channel. Thus, if a WeakMap is already present and has this\n * problem, repairES5.js wraps it in a safe wrappper in order to\n * prevent access to this channel. (See\n * PATCH_MUTABLE_FROZEN_WEAKMAP_PROTO in repairES5.js).\n */\n\n/**\n * If this is a full <a href=\n * \"http://code.google.com/p/es-lab/wiki/SecureableES5\"\n * >secureable ES5</a> platform and the ES-Harmony {@code WeakMap} is\n * absent, install an approximate emulation.\n *\n * <p>If WeakMap is present but cannot store some objects, use our approximate\n * emulation as a wrapper.\n *\n * <p>If this is almost a secureable ES5 platform, then WeakMap.js\n * should be run after repairES5.js.\n *\n * <p>See {@code WeakMap} for documentation of the garbage collection\n * properties of this WeakMap emulation.\n */\n(function WeakMapModule() {\n  \"use strict\";\n\n  if (typeof ses !== 'undefined' && ses.ok && !ses.ok()) {\n    // already too broken, so give up\n    return;\n  }\n\n  /**\n   * In some cases (current Firefox), we must make a choice betweeen a\n   * WeakMap which is capable of using all varieties of host objects as\n   * keys and one which is capable of safely using proxies as keys. See\n   * comments below about HostWeakMap and DoubleWeakMap for details.\n   *\n   * This function (which is a global, not exposed to guests) marks a\n   * WeakMap as permitted to do what is necessary to index all host\n   * objects, at the cost of making it unsafe for proxies.\n   *\n   * Do not apply this function to anything which is not a genuine\n   * fresh WeakMap.\n   */\n  function weakMapPermitHostObjects(map) {\n    // identity of function used as a secret -- good enough and cheap\n    if (map.permitHostObjects___) {\n      map.permitHostObjects___(weakMapPermitHostObjects);\n    }\n  }\n  if (typeof ses !== 'undefined') {\n    ses.weakMapPermitHostObjects = weakMapPermitHostObjects;\n  }\n\n  // IE 11 has no Proxy but has a broken WeakMap such that we need to patch\n  // it using DoubleWeakMap; this flag tells DoubleWeakMap so.\n  var doubleWeakMapCheckSilentFailure = false;\n\n  // Check if there is already a good-enough WeakMap implementation, and if so\n  // exit without replacing it.\n  if (typeof WeakMap === 'function') {\n    var HostWeakMap = WeakMap;\n    // There is a WeakMap -- is it good enough?\n    if (typeof navigator !== 'undefined' && /Firefox/.test(navigator.userAgent)) {\n      // We're now *assuming not*, because as of this writing (2013-05-06)\n      // Firefox's WeakMaps have a miscellany of objects they won't accept, and\n      // we don't want to make an exhaustive list, and testing for just one\n      // will be a problem if that one is fixed alone (as they did for Event).\n\n      // If there is a platform that we *can* reliably test on, here's how to\n      // do it:\n      //  var problematic = ... ;\n      //  var testHostMap = new HostWeakMap();\n      //  try {\n      //    testHostMap.set(problematic, 1);  // Firefox 20 will throw here\n      //    if (testHostMap.get(problematic) === 1) {\n      //      return;\n      //    }\n      //  } catch (e) {}\n    } else {\n      // IE 11 bug: WeakMaps silently fail to store frozen objects.\n      var testMap = new HostWeakMap();\n      var testObject = Object.freeze({});\n      testMap.set(testObject, 1);\n      if (testMap.get(testObject) !== 1) {\n        doubleWeakMapCheckSilentFailure = true;\n        // Fall through to installing our WeakMap.\n      } else {\n        module.exports = WeakMap;\n        return;\n      }\n    }\n  }\n  var hop = Object.prototype.hasOwnProperty;\n  var gopn = Object.getOwnPropertyNames;\n  var defProp = Object.defineProperty;\n  var isExtensible = Object.isExtensible;\n\n  /**\n   * Security depends on HIDDEN_NAME being both <i>unguessable</i> and\n   * <i>undiscoverable</i> by untrusted code.\n   *\n   * <p>Given the known weaknesses of Math.random() on existing\n   * browsers, it does not generate unguessability we can be confident\n   * of.\n   *\n   * <p>It is the monkey patching logic in this file that is intended\n   * to ensure undiscoverability. The basic idea is that there are\n   * three fundamental means of discovering properties of an object:\n   * The for/in loop, Object.keys(), and Object.getOwnPropertyNames(),\n   * as well as some proposed ES6 extensions that appear on our\n   * whitelist. The first two only discover enumerable properties, and\n   * we only use HIDDEN_NAME to name a non-enumerable property, so the\n   * only remaining threat should be getOwnPropertyNames and some\n   * proposed ES6 extensions that appear on our whitelist. We monkey\n   * patch them to remove HIDDEN_NAME from the list of properties they\n   * returns.\n   *\n   * <p>TODO(erights): On a platform with built-in Proxies, proxies\n   * could be used to trap and thereby discover the HIDDEN_NAME, so we\n   * need to monkey patch Proxy.create, Proxy.createFunction, etc, in\n   * order to wrap the provided handler with the real handler which\n   * filters out all traps using HIDDEN_NAME.\n   *\n   * <p>TODO(erights): Revisit Mike Stay's suggestion that we use an\n   * encapsulated function at a not-necessarily-secret name, which\n   * uses the Stiegler shared-state rights amplification pattern to\n   * reveal the associated value only to the WeakMap in which this key\n   * is associated with that value. Since only the key retains the\n   * function, the function can also remember the key without causing\n   * leakage of the key, so this doesn't violate our general gc\n   * goals. In addition, because the name need not be a guarded\n   * secret, we could efficiently handle cross-frame frozen keys.\n   */\n  var HIDDEN_NAME_PREFIX = 'weakmap:';\n  var HIDDEN_NAME = HIDDEN_NAME_PREFIX + 'ident:' + Math.random() + '___';\n  if (typeof crypto !== 'undefined' && typeof crypto.getRandomValues === 'function' && typeof ArrayBuffer === 'function' && typeof Uint8Array === 'function') {\n    var ab = new ArrayBuffer(25);\n    var u8s = new Uint8Array(ab);\n    crypto.getRandomValues(u8s);\n    HIDDEN_NAME = HIDDEN_NAME_PREFIX + 'rand:' + Array.prototype.map.call(u8s, function (u8) {\n      return (u8 % 36).toString(36);\n    }).join('') + '___';\n  }\n  function isNotHiddenName(name) {\n    return !(name.substr(0, HIDDEN_NAME_PREFIX.length) == HIDDEN_NAME_PREFIX && name.substr(name.length - 3) === '___');\n  }\n\n  /**\n   * Monkey patch getOwnPropertyNames to avoid revealing the\n   * HIDDEN_NAME.\n   *\n   * <p>The ES5.1 spec requires each name to appear only once, but as\n   * of this writing, this requirement is controversial for ES6, so we\n   * made this code robust against this case. If the resulting extra\n   * search turns out to be expensive, we can probably relax this once\n   * ES6 is adequately supported on all major browsers, iff no browser\n   * versions we support at that time have relaxed this constraint\n   * without providing built-in ES6 WeakMaps.\n   */\n  defProp(Object, 'getOwnPropertyNames', {\n    value: function fakeGetOwnPropertyNames(obj) {\n      return gopn(obj).filter(isNotHiddenName);\n    }\n  });\n\n  /**\n   * getPropertyNames is not in ES5 but it is proposed for ES6 and\n   * does appear in our whitelist, so we need to clean it too.\n   */\n  if ('getPropertyNames' in Object) {\n    var originalGetPropertyNames = Object.getPropertyNames;\n    defProp(Object, 'getPropertyNames', {\n      value: function fakeGetPropertyNames(obj) {\n        return originalGetPropertyNames(obj).filter(isNotHiddenName);\n      }\n    });\n  }\n\n  /**\n   * <p>To treat objects as identity-keys with reasonable efficiency\n   * on ES5 by itself (i.e., without any object-keyed collections), we\n   * need to add a hidden property to such key objects when we\n   * can. This raises several issues:\n   * <ul>\n   * <li>Arranging to add this property to objects before we lose the\n   *     chance, and\n   * <li>Hiding the existence of this new property from most\n   *     JavaScript code.\n   * <li>Preventing <i>certification theft</i>, where one object is\n   *     created falsely claiming to be the key of an association\n   *     actually keyed by another object.\n   * <li>Preventing <i>value theft</i>, where untrusted code with\n   *     access to a key object but not a weak map nevertheless\n   *     obtains access to the value associated with that key in that\n   *     weak map.\n   * </ul>\n   * We do so by\n   * <ul>\n   * <li>Making the name of the hidden property unguessable, so \"[]\"\n   *     indexing, which we cannot intercept, cannot be used to access\n   *     a property without knowing the name.\n   * <li>Making the hidden property non-enumerable, so we need not\n   *     worry about for-in loops or {@code Object.keys},\n   * <li>monkey patching those reflective methods that would\n   *     prevent extensions, to add this hidden property first,\n   * <li>monkey patching those methods that would reveal this\n   *     hidden property.\n   * </ul>\n   * Unfortunately, because of same-origin iframes, we cannot reliably\n   * add this hidden property before an object becomes\n   * non-extensible. Instead, if we encounter a non-extensible object\n   * without a hidden record that we can detect (whether or not it has\n   * a hidden record stored under a name secret to us), then we just\n   * use the key object itself to represent its identity in a brute\n   * force leaky map stored in the weak map, losing all the advantages\n   * of weakness for these.\n   */\n  function getHiddenRecord(key) {\n    if (key !== Object(key)) {\n      throw new TypeError('Not an object: ' + key);\n    }\n    var hiddenRecord = key[HIDDEN_NAME];\n    if (hiddenRecord && hiddenRecord.key === key) {\n      return hiddenRecord;\n    }\n    if (!isExtensible(key)) {\n      // Weak map must brute force, as explained in doc-comment above.\n      return void 0;\n    }\n\n    // The hiddenRecord and the key point directly at each other, via\n    // the \"key\" and HIDDEN_NAME properties respectively. The key\n    // field is for quickly verifying that this hidden record is an\n    // own property, not a hidden record from up the prototype chain.\n    //\n    // NOTE: Because this WeakMap emulation is meant only for systems like\n    // SES where Object.prototype is frozen without any numeric\n    // properties, it is ok to use an object literal for the hiddenRecord.\n    // This has two advantages:\n    // * It is much faster in a performance critical place\n    // * It avoids relying on Object.create(null), which had been\n    //   problematic on Chrome 28.0.1480.0. See\n    //   https://code.google.com/p/google-caja/issues/detail?id=1687\n    hiddenRecord = {\n      key: key\n    };\n\n    // When using this WeakMap emulation on platforms where\n    // Object.prototype might not be frozen and Object.create(null) is\n    // reliable, use the following two commented out lines instead.\n    // hiddenRecord = Object.create(null);\n    // hiddenRecord.key = key;\n\n    // Please contact us if you need this to work on platforms where\n    // Object.prototype might not be frozen and\n    // Object.create(null) might not be reliable.\n\n    try {\n      defProp(key, HIDDEN_NAME, {\n        value: hiddenRecord,\n        writable: false,\n        enumerable: false,\n        configurable: false\n      });\n      return hiddenRecord;\n    } catch (error) {\n      // Under some circumstances, isExtensible seems to misreport whether\n      // the HIDDEN_NAME can be defined.\n      // The circumstances have not been isolated, but at least affect\n      // Node.js v0.10.26 on TravisCI / Linux, but not the same version of\n      // Node.js on OS X.\n      return void 0;\n    }\n  }\n\n  /**\n   * Monkey patch operations that would make their argument\n   * non-extensible.\n   *\n   * <p>The monkey patched versions throw a TypeError if their\n   * argument is not an object, so it should only be done to functions\n   * that should throw a TypeError anyway if their argument is not an\n   * object.\n   */\n  (function () {\n    var oldFreeze = Object.freeze;\n    defProp(Object, 'freeze', {\n      value: function identifyingFreeze(obj) {\n        getHiddenRecord(obj);\n        return oldFreeze(obj);\n      }\n    });\n    var oldSeal = Object.seal;\n    defProp(Object, 'seal', {\n      value: function identifyingSeal(obj) {\n        getHiddenRecord(obj);\n        return oldSeal(obj);\n      }\n    });\n    var oldPreventExtensions = Object.preventExtensions;\n    defProp(Object, 'preventExtensions', {\n      value: function identifyingPreventExtensions(obj) {\n        getHiddenRecord(obj);\n        return oldPreventExtensions(obj);\n      }\n    });\n  })();\n  function constFunc(func) {\n    func.prototype = null;\n    return Object.freeze(func);\n  }\n  var calledAsFunctionWarningDone = false;\n  function calledAsFunctionWarning() {\n    // Future ES6 WeakMap is currently (2013-09-10) expected to reject WeakMap()\n    // but we used to permit it and do it ourselves, so warn only.\n    if (!calledAsFunctionWarningDone && typeof console !== 'undefined') {\n      calledAsFunctionWarningDone = true;\n      console.warn('WeakMap should be invoked as new WeakMap(), not ' + 'WeakMap(). This will be an error in the future.');\n    }\n  }\n  var nextId = 0;\n  var OurWeakMap = function OurWeakMap() {\n    if (!(this instanceof OurWeakMap)) {\n      // approximate test for new ...()\n      calledAsFunctionWarning();\n    }\n\n    // We are currently (12/25/2012) never encountering any prematurely\n    // non-extensible keys.\n    var keys = []; // brute force for prematurely non-extensible keys.\n    var values = []; // brute force for corresponding values.\n    var id = nextId++;\n    function get___(key, opt_default) {\n      var index;\n      var hiddenRecord = getHiddenRecord(key);\n      if (hiddenRecord) {\n        return id in hiddenRecord ? hiddenRecord[id] : opt_default;\n      } else {\n        index = keys.indexOf(key);\n        return index >= 0 ? values[index] : opt_default;\n      }\n    }\n    function has___(key) {\n      var hiddenRecord = getHiddenRecord(key);\n      if (hiddenRecord) {\n        return id in hiddenRecord;\n      } else {\n        return keys.indexOf(key) >= 0;\n      }\n    }\n    function set___(key, value) {\n      var index;\n      var hiddenRecord = getHiddenRecord(key);\n      if (hiddenRecord) {\n        hiddenRecord[id] = value;\n      } else {\n        index = keys.indexOf(key);\n        if (index >= 0) {\n          values[index] = value;\n        } else {\n          // Since some browsers preemptively terminate slow turns but\n          // then continue computing with presumably corrupted heap\n          // state, we here defensively get keys.length first and then\n          // use it to update both the values and keys arrays, keeping\n          // them in sync.\n          index = keys.length;\n          values[index] = value;\n          // If we crash here, values will be one longer than keys.\n          keys[index] = key;\n        }\n      }\n      return this;\n    }\n    function delete___(key) {\n      var hiddenRecord = getHiddenRecord(key);\n      var index, lastIndex;\n      if (hiddenRecord) {\n        return id in hiddenRecord && delete hiddenRecord[id];\n      } else {\n        index = keys.indexOf(key);\n        if (index < 0) {\n          return false;\n        }\n        // Since some browsers preemptively terminate slow turns but\n        // then continue computing with potentially corrupted heap\n        // state, we here defensively get keys.length first and then use\n        // it to update both the keys and the values array, keeping\n        // them in sync. We update the two with an order of assignments,\n        // such that any prefix of these assignments will preserve the\n        // key/value correspondence, either before or after the delete.\n        // Note that this needs to work correctly when index === lastIndex.\n        lastIndex = keys.length - 1;\n        keys[index] = void 0;\n        // If we crash here, there's a void 0 in the keys array, but\n        // no operation will cause a \"keys.indexOf(void 0)\", since\n        // getHiddenRecord(void 0) will always throw an error first.\n        values[index] = values[lastIndex];\n        // If we crash here, values[index] cannot be found here,\n        // because keys[index] is void 0.\n        keys[index] = keys[lastIndex];\n        // If index === lastIndex and we crash here, then keys[index]\n        // is still void 0, since the aliasing killed the previous key.\n        keys.length = lastIndex;\n        // If we crash here, keys will be one shorter than values.\n        values.length = lastIndex;\n        return true;\n      }\n    }\n    return Object.create(OurWeakMap.prototype, {\n      get___: {\n        value: constFunc(get___)\n      },\n      has___: {\n        value: constFunc(has___)\n      },\n      set___: {\n        value: constFunc(set___)\n      },\n      delete___: {\n        value: constFunc(delete___)\n      }\n    });\n  };\n  OurWeakMap.prototype = Object.create(Object.prototype, {\n    get: {\n      /**\n       * Return the value most recently associated with key, or\n       * opt_default if none.\n       */\n      value: function get(key, opt_default) {\n        return this.get___(key, opt_default);\n      },\n      writable: true,\n      configurable: true\n    },\n    has: {\n      /**\n       * Is there a value associated with key in this WeakMap?\n       */\n      value: function has(key) {\n        return this.has___(key);\n      },\n      writable: true,\n      configurable: true\n    },\n    set: {\n      /**\n       * Associate value with key in this WeakMap, overwriting any\n       * previous association if present.\n       */\n      value: function set(key, value) {\n        return this.set___(key, value);\n      },\n      writable: true,\n      configurable: true\n    },\n    'delete': {\n      /**\n       * Remove any association for key in this WeakMap, returning\n       * whether there was one.\n       *\n       * <p>Note that the boolean return here does not work like the\n       * {@code delete} operator. The {@code delete} operator returns\n       * whether the deletion succeeds at bringing about a state in\n       * which the deleted property is absent. The {@code delete}\n       * operator therefore returns true if the property was already\n       * absent, whereas this {@code delete} method returns false if\n       * the association was already absent.\n       */\n      value: function remove(key) {\n        return this.delete___(key);\n      },\n      writable: true,\n      configurable: true\n    }\n  });\n  if (typeof HostWeakMap === 'function') {\n    (function () {\n      // If we got here, then the platform has a WeakMap but we are concerned\n      // that it may refuse to store some key types. Therefore, make a map\n      // implementation which makes use of both as possible.\n\n      // In this mode we are always using double maps, so we are not proxy-safe.\n      // This combination does not occur in any known browser, but we had best\n      // be safe.\n      if (doubleWeakMapCheckSilentFailure && typeof Proxy !== 'undefined') {\n        Proxy = undefined;\n      }\n      function DoubleWeakMap() {\n        if (!(this instanceof OurWeakMap)) {\n          // approximate test for new ...()\n          calledAsFunctionWarning();\n        }\n\n        // Preferable, truly weak map.\n        var hmap = new HostWeakMap();\n\n        // Our hidden-property-based pseudo-weak-map. Lazily initialized in the\n        // 'set' implementation; thus we can avoid performing extra lookups if\n        // we know all entries actually stored are entered in 'hmap'.\n        var omap = undefined;\n\n        // Hidden-property maps are not compatible with proxies because proxies\n        // can observe the hidden name and either accidentally expose it or fail\n        // to allow the hidden property to be set. Therefore, we do not allow\n        // arbitrary WeakMaps to switch to using hidden properties, but only\n        // those which need the ability, and unprivileged code is not allowed\n        // to set the flag.\n        //\n        // (Except in doubleWeakMapCheckSilentFailure mode in which case we\n        // disable proxies.)\n        var enableSwitching = false;\n        function dget(key, opt_default) {\n          if (omap) {\n            return hmap.has(key) ? hmap.get(key) : omap.get___(key, opt_default);\n          } else {\n            return hmap.get(key, opt_default);\n          }\n        }\n        function dhas(key) {\n          return hmap.has(key) || (omap ? omap.has___(key) : false);\n        }\n        var dset;\n        if (doubleWeakMapCheckSilentFailure) {\n          dset = function dset(key, value) {\n            hmap.set(key, value);\n            if (!hmap.has(key)) {\n              if (!omap) {\n                omap = new OurWeakMap();\n              }\n              omap.set(key, value);\n            }\n            return this;\n          };\n        } else {\n          dset = function dset(key, value) {\n            if (enableSwitching) {\n              try {\n                hmap.set(key, value);\n              } catch (e) {\n                if (!omap) {\n                  omap = new OurWeakMap();\n                }\n                omap.set___(key, value);\n              }\n            } else {\n              hmap.set(key, value);\n            }\n            return this;\n          };\n        }\n        function ddelete(key) {\n          var result = !!hmap['delete'](key);\n          if (omap) {\n            return omap.delete___(key) || result;\n          }\n          return result;\n        }\n        return Object.create(OurWeakMap.prototype, {\n          get___: {\n            value: constFunc(dget)\n          },\n          has___: {\n            value: constFunc(dhas)\n          },\n          set___: {\n            value: constFunc(dset)\n          },\n          delete___: {\n            value: constFunc(ddelete)\n          },\n          permitHostObjects___: {\n            value: constFunc(function (token) {\n              if (token === weakMapPermitHostObjects) {\n                enableSwitching = true;\n              } else {\n                throw new Error('bogus call to permitHostObjects___');\n              }\n            })\n          }\n        });\n      }\n      DoubleWeakMap.prototype = OurWeakMap.prototype;\n      module.exports = DoubleWeakMap;\n\n      // define .constructor to hide OurWeakMap ctor\n      Object.defineProperty(WeakMap.prototype, 'constructor', {\n        value: WeakMap,\n        enumerable: false,\n        // as default .constructor is\n        configurable: true,\n        writable: true\n      });\n    })();\n  } else {\n    // There is no host WeakMap, so we must use the emulation.\n\n    // Emulated WeakMaps are incompatible with native proxies (because proxies\n    // can observe the hidden name), so we must disable Proxy usage (in\n    // ArrayLike and Domado, currently).\n    if (typeof Proxy !== 'undefined') {\n      Proxy = undefined;\n    }\n    module.exports = OurWeakMap;\n  }\n})();","map":{"version":3,"names":["WeakMapModule","ses","ok","weakMapPermitHostObjects","map","permitHostObjects___","doubleWeakMapCheckSilentFailure","WeakMap","HostWeakMap","navigator","test","userAgent","testMap","testObject","Object","freeze","set","get","module","exports","hop","prototype","hasOwnProperty","gopn","getOwnPropertyNames","defProp","defineProperty","isExtensible","HIDDEN_NAME_PREFIX","HIDDEN_NAME","Math","random","crypto","getRandomValues","ArrayBuffer","Uint8Array","ab","u8s","Array","call","u8","toString","join","isNotHiddenName","name","substr","length","value","fakeGetOwnPropertyNames","obj","filter","originalGetPropertyNames","getPropertyNames","fakeGetPropertyNames","getHiddenRecord","key","TypeError","hiddenRecord","writable","enumerable","configurable","error","oldFreeze","identifyingFreeze","oldSeal","seal","identifyingSeal","oldPreventExtensions","preventExtensions","identifyingPreventExtensions","constFunc","func","calledAsFunctionWarningDone","calledAsFunctionWarning","console","warn","nextId","OurWeakMap","keys","values","id","get___","opt_default","index","indexOf","has___","set___","delete___","lastIndex","create","has","remove","Proxy","undefined","DoubleWeakMap","hmap","omap","enableSwitching","dget","dhas","dset","e","ddelete","result","token","Error"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/weak-map/weak-map.js"],"sourcesContent":["// Copyright (C) 2011 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Install a leaky WeakMap emulation on platforms that\n * don't provide a built-in one.\n *\n * <p>Assumes that an ES5 platform where, if {@code WeakMap} is\n * already present, then it conforms to the anticipated ES6\n * specification. To run this file on an ES5 or almost ES5\n * implementation where the {@code WeakMap} specification does not\n * quite conform, run <code>repairES5.js</code> first.\n *\n * <p>Even though WeakMapModule is not global, the linter thinks it\n * is, which is why it is in the overrides list below.\n *\n * <p>NOTE: Before using this WeakMap emulation in a non-SES\n * environment, see the note below about hiddenRecord.\n *\n * @author Mark S. Miller\n * @requires crypto, ArrayBuffer, Uint8Array, navigator, console\n * @overrides WeakMap, ses, Proxy\n * @overrides WeakMapModule\n */\n\n/**\n * This {@code WeakMap} emulation is observably equivalent to the\n * ES-Harmony WeakMap, but with leakier garbage collection properties.\n *\n * <p>As with true WeakMaps, in this emulation, a key does not\n * retain maps indexed by that key and (crucially) a map does not\n * retain the keys it indexes. A map by itself also does not retain\n * the values associated with that map.\n *\n * <p>However, the values associated with a key in some map are\n * retained so long as that key is retained and those associations are\n * not overridden. For example, when used to support membranes, all\n * values exported from a given membrane will live for the lifetime\n * they would have had in the absence of an interposed membrane. Even\n * when the membrane is revoked, all objects that would have been\n * reachable in the absence of revocation will still be reachable, as\n * far as the GC can tell, even though they will no longer be relevant\n * to ongoing computation.\n *\n * <p>The API implemented here is approximately the API as implemented\n * in FF6.0a1 and agreed to by MarkM, Andreas Gal, and Dave Herman,\n * rather than the offially approved proposal page. TODO(erights):\n * upgrade the ecmascript WeakMap proposal page to explain this API\n * change and present to EcmaScript committee for their approval.\n *\n * <p>The first difference between the emulation here and that in\n * FF6.0a1 is the presence of non enumerable {@code get___, has___,\n * set___, and delete___} methods on WeakMap instances to represent\n * what would be the hidden internal properties of a primitive\n * implementation. Whereas the FF6.0a1 WeakMap.prototype methods\n * require their {@code this} to be a genuine WeakMap instance (i.e.,\n * an object of {@code [[Class]]} \"WeakMap}), since there is nothing\n * unforgeable about the pseudo-internal method names used here,\n * nothing prevents these emulated prototype methods from being\n * applied to non-WeakMaps with pseudo-internal methods of the same\n * names.\n *\n * <p>Another difference is that our emulated {@code\n * WeakMap.prototype} is not itself a WeakMap. A problem with the\n * current FF6.0a1 API is that WeakMap.prototype is itself a WeakMap\n * providing ambient mutability and an ambient communications\n * channel. Thus, if a WeakMap is already present and has this\n * problem, repairES5.js wraps it in a safe wrappper in order to\n * prevent access to this channel. (See\n * PATCH_MUTABLE_FROZEN_WEAKMAP_PROTO in repairES5.js).\n */\n\n/**\n * If this is a full <a href=\n * \"http://code.google.com/p/es-lab/wiki/SecureableES5\"\n * >secureable ES5</a> platform and the ES-Harmony {@code WeakMap} is\n * absent, install an approximate emulation.\n *\n * <p>If WeakMap is present but cannot store some objects, use our approximate\n * emulation as a wrapper.\n *\n * <p>If this is almost a secureable ES5 platform, then WeakMap.js\n * should be run after repairES5.js.\n *\n * <p>See {@code WeakMap} for documentation of the garbage collection\n * properties of this WeakMap emulation.\n */\n(function WeakMapModule() {\n  \"use strict\";\n\n  if (typeof ses !== 'undefined' && ses.ok && !ses.ok()) {\n    // already too broken, so give up\n    return;\n  }\n\n  /**\n   * In some cases (current Firefox), we must make a choice betweeen a\n   * WeakMap which is capable of using all varieties of host objects as\n   * keys and one which is capable of safely using proxies as keys. See\n   * comments below about HostWeakMap and DoubleWeakMap for details.\n   *\n   * This function (which is a global, not exposed to guests) marks a\n   * WeakMap as permitted to do what is necessary to index all host\n   * objects, at the cost of making it unsafe for proxies.\n   *\n   * Do not apply this function to anything which is not a genuine\n   * fresh WeakMap.\n   */\n  function weakMapPermitHostObjects(map) {\n    // identity of function used as a secret -- good enough and cheap\n    if (map.permitHostObjects___) {\n      map.permitHostObjects___(weakMapPermitHostObjects);\n    }\n  }\n  if (typeof ses !== 'undefined') {\n    ses.weakMapPermitHostObjects = weakMapPermitHostObjects;\n  }\n\n  // IE 11 has no Proxy but has a broken WeakMap such that we need to patch\n  // it using DoubleWeakMap; this flag tells DoubleWeakMap so.\n  var doubleWeakMapCheckSilentFailure = false;\n\n  // Check if there is already a good-enough WeakMap implementation, and if so\n  // exit without replacing it.\n  if (typeof WeakMap === 'function') {\n    var HostWeakMap = WeakMap;\n    // There is a WeakMap -- is it good enough?\n    if (typeof navigator !== 'undefined' &&\n        /Firefox/.test(navigator.userAgent)) {\n      // We're now *assuming not*, because as of this writing (2013-05-06)\n      // Firefox's WeakMaps have a miscellany of objects they won't accept, and\n      // we don't want to make an exhaustive list, and testing for just one\n      // will be a problem if that one is fixed alone (as they did for Event).\n\n      // If there is a platform that we *can* reliably test on, here's how to\n      // do it:\n      //  var problematic = ... ;\n      //  var testHostMap = new HostWeakMap();\n      //  try {\n      //    testHostMap.set(problematic, 1);  // Firefox 20 will throw here\n      //    if (testHostMap.get(problematic) === 1) {\n      //      return;\n      //    }\n      //  } catch (e) {}\n\n    } else {\n      // IE 11 bug: WeakMaps silently fail to store frozen objects.\n      var testMap = new HostWeakMap();\n      var testObject = Object.freeze({});\n      testMap.set(testObject, 1);\n      if (testMap.get(testObject) !== 1) {\n        doubleWeakMapCheckSilentFailure = true;\n        // Fall through to installing our WeakMap.\n      } else {\n        module.exports = WeakMap;\n        return;\n      }\n    }\n  }\n\n  var hop = Object.prototype.hasOwnProperty;\n  var gopn = Object.getOwnPropertyNames;\n  var defProp = Object.defineProperty;\n  var isExtensible = Object.isExtensible;\n\n  /**\n   * Security depends on HIDDEN_NAME being both <i>unguessable</i> and\n   * <i>undiscoverable</i> by untrusted code.\n   *\n   * <p>Given the known weaknesses of Math.random() on existing\n   * browsers, it does not generate unguessability we can be confident\n   * of.\n   *\n   * <p>It is the monkey patching logic in this file that is intended\n   * to ensure undiscoverability. The basic idea is that there are\n   * three fundamental means of discovering properties of an object:\n   * The for/in loop, Object.keys(), and Object.getOwnPropertyNames(),\n   * as well as some proposed ES6 extensions that appear on our\n   * whitelist. The first two only discover enumerable properties, and\n   * we only use HIDDEN_NAME to name a non-enumerable property, so the\n   * only remaining threat should be getOwnPropertyNames and some\n   * proposed ES6 extensions that appear on our whitelist. We monkey\n   * patch them to remove HIDDEN_NAME from the list of properties they\n   * returns.\n   *\n   * <p>TODO(erights): On a platform with built-in Proxies, proxies\n   * could be used to trap and thereby discover the HIDDEN_NAME, so we\n   * need to monkey patch Proxy.create, Proxy.createFunction, etc, in\n   * order to wrap the provided handler with the real handler which\n   * filters out all traps using HIDDEN_NAME.\n   *\n   * <p>TODO(erights): Revisit Mike Stay's suggestion that we use an\n   * encapsulated function at a not-necessarily-secret name, which\n   * uses the Stiegler shared-state rights amplification pattern to\n   * reveal the associated value only to the WeakMap in which this key\n   * is associated with that value. Since only the key retains the\n   * function, the function can also remember the key without causing\n   * leakage of the key, so this doesn't violate our general gc\n   * goals. In addition, because the name need not be a guarded\n   * secret, we could efficiently handle cross-frame frozen keys.\n   */\n  var HIDDEN_NAME_PREFIX = 'weakmap:';\n  var HIDDEN_NAME = HIDDEN_NAME_PREFIX + 'ident:' + Math.random() + '___';\n\n  if (typeof crypto !== 'undefined' &&\n      typeof crypto.getRandomValues === 'function' &&\n      typeof ArrayBuffer === 'function' &&\n      typeof Uint8Array === 'function') {\n    var ab = new ArrayBuffer(25);\n    var u8s = new Uint8Array(ab);\n    crypto.getRandomValues(u8s);\n    HIDDEN_NAME = HIDDEN_NAME_PREFIX + 'rand:' +\n      Array.prototype.map.call(u8s, function(u8) {\n        return (u8 % 36).toString(36);\n      }).join('') + '___';\n  }\n\n  function isNotHiddenName(name) {\n    return !(\n        name.substr(0, HIDDEN_NAME_PREFIX.length) == HIDDEN_NAME_PREFIX &&\n        name.substr(name.length - 3) === '___');\n  }\n\n  /**\n   * Monkey patch getOwnPropertyNames to avoid revealing the\n   * HIDDEN_NAME.\n   *\n   * <p>The ES5.1 spec requires each name to appear only once, but as\n   * of this writing, this requirement is controversial for ES6, so we\n   * made this code robust against this case. If the resulting extra\n   * search turns out to be expensive, we can probably relax this once\n   * ES6 is adequately supported on all major browsers, iff no browser\n   * versions we support at that time have relaxed this constraint\n   * without providing built-in ES6 WeakMaps.\n   */\n  defProp(Object, 'getOwnPropertyNames', {\n    value: function fakeGetOwnPropertyNames(obj) {\n      return gopn(obj).filter(isNotHiddenName);\n    }\n  });\n\n  /**\n   * getPropertyNames is not in ES5 but it is proposed for ES6 and\n   * does appear in our whitelist, so we need to clean it too.\n   */\n  if ('getPropertyNames' in Object) {\n    var originalGetPropertyNames = Object.getPropertyNames;\n    defProp(Object, 'getPropertyNames', {\n      value: function fakeGetPropertyNames(obj) {\n        return originalGetPropertyNames(obj).filter(isNotHiddenName);\n      }\n    });\n  }\n\n  /**\n   * <p>To treat objects as identity-keys with reasonable efficiency\n   * on ES5 by itself (i.e., without any object-keyed collections), we\n   * need to add a hidden property to such key objects when we\n   * can. This raises several issues:\n   * <ul>\n   * <li>Arranging to add this property to objects before we lose the\n   *     chance, and\n   * <li>Hiding the existence of this new property from most\n   *     JavaScript code.\n   * <li>Preventing <i>certification theft</i>, where one object is\n   *     created falsely claiming to be the key of an association\n   *     actually keyed by another object.\n   * <li>Preventing <i>value theft</i>, where untrusted code with\n   *     access to a key object but not a weak map nevertheless\n   *     obtains access to the value associated with that key in that\n   *     weak map.\n   * </ul>\n   * We do so by\n   * <ul>\n   * <li>Making the name of the hidden property unguessable, so \"[]\"\n   *     indexing, which we cannot intercept, cannot be used to access\n   *     a property without knowing the name.\n   * <li>Making the hidden property non-enumerable, so we need not\n   *     worry about for-in loops or {@code Object.keys},\n   * <li>monkey patching those reflective methods that would\n   *     prevent extensions, to add this hidden property first,\n   * <li>monkey patching those methods that would reveal this\n   *     hidden property.\n   * </ul>\n   * Unfortunately, because of same-origin iframes, we cannot reliably\n   * add this hidden property before an object becomes\n   * non-extensible. Instead, if we encounter a non-extensible object\n   * without a hidden record that we can detect (whether or not it has\n   * a hidden record stored under a name secret to us), then we just\n   * use the key object itself to represent its identity in a brute\n   * force leaky map stored in the weak map, losing all the advantages\n   * of weakness for these.\n   */\n  function getHiddenRecord(key) {\n    if (key !== Object(key)) {\n      throw new TypeError('Not an object: ' + key);\n    }\n    var hiddenRecord = key[HIDDEN_NAME];\n    if (hiddenRecord && hiddenRecord.key === key) { return hiddenRecord; }\n    if (!isExtensible(key)) {\n      // Weak map must brute force, as explained in doc-comment above.\n      return void 0;\n    }\n\n    // The hiddenRecord and the key point directly at each other, via\n    // the \"key\" and HIDDEN_NAME properties respectively. The key\n    // field is for quickly verifying that this hidden record is an\n    // own property, not a hidden record from up the prototype chain.\n    //\n    // NOTE: Because this WeakMap emulation is meant only for systems like\n    // SES where Object.prototype is frozen without any numeric\n    // properties, it is ok to use an object literal for the hiddenRecord.\n    // This has two advantages:\n    // * It is much faster in a performance critical place\n    // * It avoids relying on Object.create(null), which had been\n    //   problematic on Chrome 28.0.1480.0. See\n    //   https://code.google.com/p/google-caja/issues/detail?id=1687\n    hiddenRecord = { key: key };\n\n    // When using this WeakMap emulation on platforms where\n    // Object.prototype might not be frozen and Object.create(null) is\n    // reliable, use the following two commented out lines instead.\n    // hiddenRecord = Object.create(null);\n    // hiddenRecord.key = key;\n\n    // Please contact us if you need this to work on platforms where\n    // Object.prototype might not be frozen and\n    // Object.create(null) might not be reliable.\n\n    try {\n      defProp(key, HIDDEN_NAME, {\n        value: hiddenRecord,\n        writable: false,\n        enumerable: false,\n        configurable: false\n      });\n      return hiddenRecord;\n    } catch (error) {\n      // Under some circumstances, isExtensible seems to misreport whether\n      // the HIDDEN_NAME can be defined.\n      // The circumstances have not been isolated, but at least affect\n      // Node.js v0.10.26 on TravisCI / Linux, but not the same version of\n      // Node.js on OS X.\n      return void 0;\n    }\n  }\n\n  /**\n   * Monkey patch operations that would make their argument\n   * non-extensible.\n   *\n   * <p>The monkey patched versions throw a TypeError if their\n   * argument is not an object, so it should only be done to functions\n   * that should throw a TypeError anyway if their argument is not an\n   * object.\n   */\n  (function(){\n    var oldFreeze = Object.freeze;\n    defProp(Object, 'freeze', {\n      value: function identifyingFreeze(obj) {\n        getHiddenRecord(obj);\n        return oldFreeze(obj);\n      }\n    });\n    var oldSeal = Object.seal;\n    defProp(Object, 'seal', {\n      value: function identifyingSeal(obj) {\n        getHiddenRecord(obj);\n        return oldSeal(obj);\n      }\n    });\n    var oldPreventExtensions = Object.preventExtensions;\n    defProp(Object, 'preventExtensions', {\n      value: function identifyingPreventExtensions(obj) {\n        getHiddenRecord(obj);\n        return oldPreventExtensions(obj);\n      }\n    });\n  })();\n\n  function constFunc(func) {\n    func.prototype = null;\n    return Object.freeze(func);\n  }\n\n  var calledAsFunctionWarningDone = false;\n  function calledAsFunctionWarning() {\n    // Future ES6 WeakMap is currently (2013-09-10) expected to reject WeakMap()\n    // but we used to permit it and do it ourselves, so warn only.\n    if (!calledAsFunctionWarningDone && typeof console !== 'undefined') {\n      calledAsFunctionWarningDone = true;\n      console.warn('WeakMap should be invoked as new WeakMap(), not ' +\n          'WeakMap(). This will be an error in the future.');\n    }\n  }\n\n  var nextId = 0;\n\n  var OurWeakMap = function() {\n    if (!(this instanceof OurWeakMap)) {  // approximate test for new ...()\n      calledAsFunctionWarning();\n    }\n\n    // We are currently (12/25/2012) never encountering any prematurely\n    // non-extensible keys.\n    var keys = []; // brute force for prematurely non-extensible keys.\n    var values = []; // brute force for corresponding values.\n    var id = nextId++;\n\n    function get___(key, opt_default) {\n      var index;\n      var hiddenRecord = getHiddenRecord(key);\n      if (hiddenRecord) {\n        return id in hiddenRecord ? hiddenRecord[id] : opt_default;\n      } else {\n        index = keys.indexOf(key);\n        return index >= 0 ? values[index] : opt_default;\n      }\n    }\n\n    function has___(key) {\n      var hiddenRecord = getHiddenRecord(key);\n      if (hiddenRecord) {\n        return id in hiddenRecord;\n      } else {\n        return keys.indexOf(key) >= 0;\n      }\n    }\n\n    function set___(key, value) {\n      var index;\n      var hiddenRecord = getHiddenRecord(key);\n      if (hiddenRecord) {\n        hiddenRecord[id] = value;\n      } else {\n        index = keys.indexOf(key);\n        if (index >= 0) {\n          values[index] = value;\n        } else {\n          // Since some browsers preemptively terminate slow turns but\n          // then continue computing with presumably corrupted heap\n          // state, we here defensively get keys.length first and then\n          // use it to update both the values and keys arrays, keeping\n          // them in sync.\n          index = keys.length;\n          values[index] = value;\n          // If we crash here, values will be one longer than keys.\n          keys[index] = key;\n        }\n      }\n      return this;\n    }\n\n    function delete___(key) {\n      var hiddenRecord = getHiddenRecord(key);\n      var index, lastIndex;\n      if (hiddenRecord) {\n        return id in hiddenRecord && delete hiddenRecord[id];\n      } else {\n        index = keys.indexOf(key);\n        if (index < 0) {\n          return false;\n        }\n        // Since some browsers preemptively terminate slow turns but\n        // then continue computing with potentially corrupted heap\n        // state, we here defensively get keys.length first and then use\n        // it to update both the keys and the values array, keeping\n        // them in sync. We update the two with an order of assignments,\n        // such that any prefix of these assignments will preserve the\n        // key/value correspondence, either before or after the delete.\n        // Note that this needs to work correctly when index === lastIndex.\n        lastIndex = keys.length - 1;\n        keys[index] = void 0;\n        // If we crash here, there's a void 0 in the keys array, but\n        // no operation will cause a \"keys.indexOf(void 0)\", since\n        // getHiddenRecord(void 0) will always throw an error first.\n        values[index] = values[lastIndex];\n        // If we crash here, values[index] cannot be found here,\n        // because keys[index] is void 0.\n        keys[index] = keys[lastIndex];\n        // If index === lastIndex and we crash here, then keys[index]\n        // is still void 0, since the aliasing killed the previous key.\n        keys.length = lastIndex;\n        // If we crash here, keys will be one shorter than values.\n        values.length = lastIndex;\n        return true;\n      }\n    }\n\n    return Object.create(OurWeakMap.prototype, {\n      get___:    { value: constFunc(get___) },\n      has___:    { value: constFunc(has___) },\n      set___:    { value: constFunc(set___) },\n      delete___: { value: constFunc(delete___) }\n    });\n  };\n\n  OurWeakMap.prototype = Object.create(Object.prototype, {\n    get: {\n      /**\n       * Return the value most recently associated with key, or\n       * opt_default if none.\n       */\n      value: function get(key, opt_default) {\n        return this.get___(key, opt_default);\n      },\n      writable: true,\n      configurable: true\n    },\n\n    has: {\n      /**\n       * Is there a value associated with key in this WeakMap?\n       */\n      value: function has(key) {\n        return this.has___(key);\n      },\n      writable: true,\n      configurable: true\n    },\n\n    set: {\n      /**\n       * Associate value with key in this WeakMap, overwriting any\n       * previous association if present.\n       */\n      value: function set(key, value) {\n        return this.set___(key, value);\n      },\n      writable: true,\n      configurable: true\n    },\n\n    'delete': {\n      /**\n       * Remove any association for key in this WeakMap, returning\n       * whether there was one.\n       *\n       * <p>Note that the boolean return here does not work like the\n       * {@code delete} operator. The {@code delete} operator returns\n       * whether the deletion succeeds at bringing about a state in\n       * which the deleted property is absent. The {@code delete}\n       * operator therefore returns true if the property was already\n       * absent, whereas this {@code delete} method returns false if\n       * the association was already absent.\n       */\n      value: function remove(key) {\n        return this.delete___(key);\n      },\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (typeof HostWeakMap === 'function') {\n    (function() {\n      // If we got here, then the platform has a WeakMap but we are concerned\n      // that it may refuse to store some key types. Therefore, make a map\n      // implementation which makes use of both as possible.\n\n      // In this mode we are always using double maps, so we are not proxy-safe.\n      // This combination does not occur in any known browser, but we had best\n      // be safe.\n      if (doubleWeakMapCheckSilentFailure && typeof Proxy !== 'undefined') {\n        Proxy = undefined;\n      }\n\n      function DoubleWeakMap() {\n        if (!(this instanceof OurWeakMap)) {  // approximate test for new ...()\n          calledAsFunctionWarning();\n        }\n\n        // Preferable, truly weak map.\n        var hmap = new HostWeakMap();\n\n        // Our hidden-property-based pseudo-weak-map. Lazily initialized in the\n        // 'set' implementation; thus we can avoid performing extra lookups if\n        // we know all entries actually stored are entered in 'hmap'.\n        var omap = undefined;\n\n        // Hidden-property maps are not compatible with proxies because proxies\n        // can observe the hidden name and either accidentally expose it or fail\n        // to allow the hidden property to be set. Therefore, we do not allow\n        // arbitrary WeakMaps to switch to using hidden properties, but only\n        // those which need the ability, and unprivileged code is not allowed\n        // to set the flag.\n        //\n        // (Except in doubleWeakMapCheckSilentFailure mode in which case we\n        // disable proxies.)\n        var enableSwitching = false;\n\n        function dget(key, opt_default) {\n          if (omap) {\n            return hmap.has(key) ? hmap.get(key)\n                : omap.get___(key, opt_default);\n          } else {\n            return hmap.get(key, opt_default);\n          }\n        }\n\n        function dhas(key) {\n          return hmap.has(key) || (omap ? omap.has___(key) : false);\n        }\n\n        var dset;\n        if (doubleWeakMapCheckSilentFailure) {\n          dset = function(key, value) {\n            hmap.set(key, value);\n            if (!hmap.has(key)) {\n              if (!omap) { omap = new OurWeakMap(); }\n              omap.set(key, value);\n            }\n            return this;\n          };\n        } else {\n          dset = function(key, value) {\n            if (enableSwitching) {\n              try {\n                hmap.set(key, value);\n              } catch (e) {\n                if (!omap) { omap = new OurWeakMap(); }\n                omap.set___(key, value);\n              }\n            } else {\n              hmap.set(key, value);\n            }\n            return this;\n          };\n        }\n\n        function ddelete(key) {\n          var result = !!hmap['delete'](key);\n          if (omap) { return omap.delete___(key) || result; }\n          return result;\n        }\n\n        return Object.create(OurWeakMap.prototype, {\n          get___:    { value: constFunc(dget) },\n          has___:    { value: constFunc(dhas) },\n          set___:    { value: constFunc(dset) },\n          delete___: { value: constFunc(ddelete) },\n          permitHostObjects___: { value: constFunc(function(token) {\n            if (token === weakMapPermitHostObjects) {\n              enableSwitching = true;\n            } else {\n              throw new Error('bogus call to permitHostObjects___');\n            }\n          })}\n        });\n      }\n      DoubleWeakMap.prototype = OurWeakMap.prototype;\n      module.exports = DoubleWeakMap;\n\n      // define .constructor to hide OurWeakMap ctor\n      Object.defineProperty(WeakMap.prototype, 'constructor', {\n        value: WeakMap,\n        enumerable: false,  // as default .constructor is\n        configurable: true,\n        writable: true\n      });\n    })();\n  } else {\n    // There is no host WeakMap, so we must use the emulation.\n\n    // Emulated WeakMaps are incompatible with native proxies (because proxies\n    // can observe the hidden name), so we must disable Proxy usage (in\n    // ArrayLike and Domado, currently).\n    if (typeof Proxy !== 'undefined') {\n      Proxy = undefined;\n    }\n\n    module.exports = OurWeakMap;\n  }\n})();\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAASA,aAAa,GAAG;EACxB,YAAY;;EAEZ,IAAI,OAAOC,GAAG,KAAK,WAAW,IAAIA,GAAG,CAACC,EAAE,IAAI,CAACD,GAAG,CAACC,EAAE,EAAE,EAAE;IACrD;IACA;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASC,wBAAwB,CAACC,GAAG,EAAE;IACrC;IACA,IAAIA,GAAG,CAACC,oBAAoB,EAAE;MAC5BD,GAAG,CAACC,oBAAoB,CAACF,wBAAwB,CAAC;IACpD;EACF;EACA,IAAI,OAAOF,GAAG,KAAK,WAAW,EAAE;IAC9BA,GAAG,CAACE,wBAAwB,GAAGA,wBAAwB;EACzD;;EAEA;EACA;EACA,IAAIG,+BAA+B,GAAG,KAAK;;EAE3C;EACA;EACA,IAAI,OAAOC,OAAO,KAAK,UAAU,EAAE;IACjC,IAAIC,WAAW,GAAGD,OAAO;IACzB;IACA,IAAI,OAAOE,SAAS,KAAK,WAAW,IAChC,SAAS,CAACC,IAAI,CAACD,SAAS,CAACE,SAAS,CAAC,EAAE;MACvC;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA,CAED,MAAM;MACL;MACA,I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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
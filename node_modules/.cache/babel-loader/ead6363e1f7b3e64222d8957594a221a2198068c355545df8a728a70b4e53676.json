{"ast":null,"code":"'use strict';\n\n/**\n * @module parenthesis\n */\nfunction parse(str, opts) {\n  // pretend non-string parsed per-se\n  if (typeof str !== 'string') return [str];\n  var res = [str];\n  if (typeof opts === 'string' || Array.isArray(opts)) {\n    opts = {\n      brackets: opts\n    };\n  } else if (!opts) opts = {};\n  var brackets = opts.brackets ? Array.isArray(opts.brackets) ? opts.brackets : [opts.brackets] : ['{}', '[]', '()'];\n  var escape = opts.escape || '___';\n  var flat = !!opts.flat;\n  brackets.forEach(function (bracket) {\n    // create parenthesis regex\n    var pRE = new RegExp(['\\\\', bracket[0], '[^\\\\', bracket[0], '\\\\', bracket[1], ']*\\\\', bracket[1]].join(''));\n    var ids = [];\n    function replaceToken(token, idx, str) {\n      // save token to res\n      var refId = res.push(token.slice(bracket[0].length, -bracket[1].length)) - 1;\n      ids.push(refId);\n      return escape + refId + escape;\n    }\n    res.forEach(function (str, i) {\n      var prevStr;\n\n      // replace paren tokens till there’s none\n      var a = 0;\n      while (str != prevStr) {\n        prevStr = str;\n        str = str.replace(pRE, replaceToken);\n        if (a++ > 10e3) throw Error('References have circular dependency. Please, check them.');\n      }\n      res[i] = str;\n    });\n\n    // wrap found refs to brackets\n    ids = ids.reverse();\n    res = res.map(function (str) {\n      ids.forEach(function (id) {\n        str = str.replace(new RegExp('(\\\\' + escape + id + '\\\\' + escape + ')', 'g'), bracket[0] + '$1' + bracket[1]);\n      });\n      return str;\n    });\n  });\n  var re = new RegExp('\\\\' + escape + '([0-9]+)' + '\\\\' + escape);\n\n  // transform references to tree\n  function nest(str, refs, escape) {\n    var res = [],\n      match;\n    var a = 0;\n    while (match = re.exec(str)) {\n      if (a++ > 10e3) throw Error('Circular references in parenthesis');\n      res.push(str.slice(0, match.index));\n      res.push(nest(refs[match[1]], refs));\n      str = str.slice(match.index + match[0].length);\n    }\n    res.push(str);\n    return res;\n  }\n  return flat ? res : nest(res[0], res);\n}\nfunction stringify(arg, opts) {\n  if (opts && opts.flat) {\n    var escape = opts && opts.escape || '___';\n    var str = arg[0],\n      prevStr;\n\n    // pretend bad string stringified with no parentheses\n    if (!str) return '';\n    var re = new RegExp('\\\\' + escape + '([0-9]+)' + '\\\\' + escape);\n    var a = 0;\n    while (str != prevStr) {\n      if (a++ > 10e3) throw Error('Circular references in ' + arg);\n      prevStr = str;\n      str = str.replace(re, replaceRef);\n    }\n    return str;\n  }\n  return arg.reduce(function f(prev, curr) {\n    if (Array.isArray(curr)) {\n      curr = curr.reduce(f, '');\n    }\n    return prev + curr;\n  }, '');\n  function replaceRef(match, idx) {\n    if (arg[idx] == null) throw Error('Reference ' + idx + 'is undefined');\n    return arg[idx];\n  }\n}\nfunction parenthesis(arg, opts) {\n  if (Array.isArray(arg)) {\n    return stringify(arg, opts);\n  } else {\n    return parse(arg, opts);\n  }\n}\nparenthesis.parse = parse;\nparenthesis.stringify = stringify;\nmodule.exports = parenthesis;","map":{"version":3,"names":["parse","str","opts","res","Array","isArray","brackets","escape","flat","forEach","bracket","pRE","RegExp","join","ids","replaceToken","token","idx","refId","push","slice","length","i","prevStr","a","replace","Error","reverse","map","id","re","nest","refs","match","exec","index","stringify","arg","replaceRef","reduce","f","prev","curr","parenthesis","module","exports"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/parenthesis/index.js"],"sourcesContent":["'use strict'\n\n/**\n * @module parenthesis\n */\n\nfunction parse (str, opts) {\n\t// pretend non-string parsed per-se\n\tif (typeof str !== 'string') return [str]\n\n\tvar res = [str]\n\n\tif (typeof opts === 'string' || Array.isArray(opts)) {\n\t\topts = {brackets: opts}\n\t}\n\telse if (!opts) opts = {}\n\n\tvar brackets = opts.brackets ? (Array.isArray(opts.brackets) ? opts.brackets : [opts.brackets]) : ['{}', '[]', '()']\n\n\tvar escape = opts.escape || '___'\n\n\tvar flat = !!opts.flat\n\n\tbrackets.forEach(function (bracket) {\n\t\t// create parenthesis regex\n\t\tvar pRE = new RegExp(['\\\\', bracket[0], '[^\\\\', bracket[0], '\\\\', bracket[1], ']*\\\\', bracket[1]].join(''))\n\n\t\tvar ids = []\n\n\t\tfunction replaceToken(token, idx, str){\n\t\t\t// save token to res\n\t\t\tvar refId = res.push(token.slice(bracket[0].length, -bracket[1].length)) - 1\n\n\t\t\tids.push(refId)\n\n\t\t\treturn escape + refId + escape\n\t\t}\n\n\t\tres.forEach(function (str, i) {\n\t\t\tvar prevStr\n\n\t\t\t// replace paren tokens till there’s none\n\t\t\tvar a = 0\n\t\t\twhile (str != prevStr) {\n\t\t\t\tprevStr = str\n\t\t\t\tstr = str.replace(pRE, replaceToken)\n\t\t\t\tif (a++ > 10e3) throw Error('References have circular dependency. Please, check them.')\n\t\t\t}\n\n\t\t\tres[i] = str\n\t\t})\n\n\t\t// wrap found refs to brackets\n\t\tids = ids.reverse()\n\t\tres = res.map(function (str) {\n\t\t\tids.forEach(function (id) {\n\t\t\t\tstr = str.replace(new RegExp('(\\\\' + escape + id + '\\\\' + escape + ')', 'g'), bracket[0] + '$1' + bracket[1])\n\t\t\t})\n\t\t\treturn str\n\t\t})\n\t})\n\n\tvar re = new RegExp('\\\\' + escape + '([0-9]+)' + '\\\\' + escape)\n\n\t// transform references to tree\n\tfunction nest (str, refs, escape) {\n\t\tvar res = [], match\n\n\t\tvar a = 0\n\t\twhile (match = re.exec(str)) {\n\t\t\tif (a++ > 10e3) throw Error('Circular references in parenthesis')\n\n\t\t\tres.push(str.slice(0, match.index))\n\n\t\t\tres.push(nest(refs[match[1]], refs))\n\n\t\t\tstr = str.slice(match.index + match[0].length)\n\t\t}\n\n\t\tres.push(str)\n\n\t\treturn res\n\t}\n\n\treturn flat ? res : nest(res[0], res)\n}\n\nfunction stringify (arg, opts) {\n\tif (opts && opts.flat) {\n\t\tvar escape = opts && opts.escape || '___'\n\n\t\tvar str = arg[0], prevStr\n\n\t\t// pretend bad string stringified with no parentheses\n\t\tif (!str) return ''\n\n\n\t\tvar re = new RegExp('\\\\' + escape + '([0-9]+)' + '\\\\' + escape)\n\n\t\tvar a = 0\n\t\twhile (str != prevStr) {\n\t\t\tif (a++ > 10e3) throw Error('Circular references in ' + arg)\n\t\t\tprevStr = str\n\t\t\tstr = str.replace(re, replaceRef)\n\t\t}\n\n\t\treturn str\n\t}\n\n\treturn arg.reduce(function f (prev, curr) {\n\t\tif (Array.isArray(curr)) {\n\t\t\tcurr = curr.reduce(f, '')\n\t\t}\n\t\treturn prev + curr\n\t}, '')\n\n\tfunction replaceRef(match, idx){\n\t\tif (arg[idx] == null) throw Error('Reference ' + idx + 'is undefined')\n\t\treturn arg[idx]\n\t}\n}\n\nfunction parenthesis (arg, opts) {\n\tif (Array.isArray(arg)) {\n\t\treturn stringify(arg, opts)\n\t}\n\telse {\n\t\treturn parse(arg, opts)\n\t}\n}\n\nparenthesis.parse = parse\nparenthesis.stringify = stringify\n\nmodule.exports = parenthesis\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar constraintMapping = require('./constraint_mapping');\nvar endPlus = require('./end_plus');\nmodule.exports = function emptyPathinfo(contours, plotinfo, cd0) {\n  var contoursFinal = contours.type === 'constraint' ? constraintMapping[contours._operation](contours.value) : contours;\n  var cs = contoursFinal.size;\n  var pathinfo = [];\n  var end = endPlus(contoursFinal);\n  var carpet = cd0.trace._carpetTrace;\n  var basePathinfo = carpet ? {\n    // store axes so we can convert to px\n    xaxis: carpet.aaxis,\n    yaxis: carpet.baxis,\n    // full data arrays to use for interpolation\n    x: cd0.a,\n    y: cd0.b\n  } : {\n    xaxis: plotinfo.xaxis,\n    yaxis: plotinfo.yaxis,\n    x: cd0.x,\n    y: cd0.y\n  };\n  for (var ci = contoursFinal.start; ci < end; ci += cs) {\n    pathinfo.push(Lib.extendFlat({\n      level: ci,\n      // all the cells with nontrivial marching index\n      crossings: {},\n      // starting points on the edges of the lattice for each contour\n      starts: [],\n      // all unclosed paths (may have less items than starts,\n      // if a path is closed by rounding)\n      edgepaths: [],\n      // all closed paths\n      paths: [],\n      z: cd0.z,\n      smoothing: cd0.trace.line.smoothing\n    }, basePathinfo));\n    if (pathinfo.length > 1000) {\n      Lib.warn('Too many contours, clipping at 1000', contours);\n      break;\n    }\n  }\n  return pathinfo;\n};","map":{"version":3,"names":["Lib","require","constraintMapping","endPlus","module","exports","emptyPathinfo","contours","plotinfo","cd0","contoursFinal","type","_operation","value","cs","size","pathinfo","end","carpet","trace","_carpetTrace","basePathinfo","xaxis","aaxis","yaxis","baxis","x","a","y","b","ci","start","push","extendFlat","level","crossings","starts","edgepaths","paths","z","smoothing","line","length","warn"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/contour/empty_pathinfo.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar constraintMapping = require('./constraint_mapping');\nvar endPlus = require('./end_plus');\n\nmodule.exports = function emptyPathinfo(contours, plotinfo, cd0) {\n    var contoursFinal = (contours.type === 'constraint') ?\n        constraintMapping[contours._operation](contours.value) :\n        contours;\n\n    var cs = contoursFinal.size;\n    var pathinfo = [];\n    var end = endPlus(contoursFinal);\n\n    var carpet = cd0.trace._carpetTrace;\n\n    var basePathinfo = carpet ? {\n        // store axes so we can convert to px\n        xaxis: carpet.aaxis,\n        yaxis: carpet.baxis,\n        // full data arrays to use for interpolation\n        x: cd0.a,\n        y: cd0.b\n    } : {\n        xaxis: plotinfo.xaxis,\n        yaxis: plotinfo.yaxis,\n        x: cd0.x,\n        y: cd0.y\n    };\n\n    for(var ci = contoursFinal.start; ci < end; ci += cs) {\n        pathinfo.push(Lib.extendFlat({\n            level: ci,\n            // all the cells with nontrivial marching index\n            crossings: {},\n            // starting points on the edges of the lattice for each contour\n            starts: [],\n            // all unclosed paths (may have less items than starts,\n            // if a path is closed by rounding)\n            edgepaths: [],\n            // all closed paths\n            paths: [],\n            z: cd0.z,\n            smoothing: cd0.trace.line.smoothing\n        }, basePathinfo));\n\n        if(pathinfo.length > 1000) {\n            Lib.warn('Too many contours, clipping at 1000', contours);\n            break;\n        }\n    }\n    return pathinfo;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC9B,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AACvD,IAAIE,OAAO,GAAGF,OAAO,CAAC,YAAY,CAAC;AAEnCG,MAAM,CAACC,OAAO,GAAG,SAASC,aAAa,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,GAAG,EAAE;EAC7D,IAAIC,aAAa,GAAIH,QAAQ,CAACI,IAAI,KAAK,YAAY,GAC/CT,iBAAiB,CAACK,QAAQ,CAACK,UAAU,CAAC,CAACL,QAAQ,CAACM,KAAK,CAAC,GACtDN,QAAQ;EAEZ,IAAIO,EAAE,GAAGJ,aAAa,CAACK,IAAI;EAC3B,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIC,GAAG,GAAGd,OAAO,CAACO,aAAa,CAAC;EAEhC,IAAIQ,MAAM,GAAGT,GAAG,CAACU,KAAK,CAACC,YAAY;EAEnC,IAAIC,YAAY,GAAGH,MAAM,GAAG;IACxB;IACAI,KAAK,EAAEJ,MAAM,CAACK,KAAK;IACnBC,KAAK,EAAEN,MAAM,CAACO,KAAK;IACnB;IACAC,CAAC,EAAEjB,GAAG,CAACkB,CAAC;IACRC,CAAC,EAAEnB,GAAG,CAACoB;EACX,CAAC,GAAG;IACAP,KAAK,EAAEd,QAAQ,CAACc,KAAK;IACrBE,KAAK,EAAEhB,QAAQ,CAACgB,KAAK;IACrBE,CAAC,EAAEjB,GAAG,CAACiB,CAAC;IACRE,CAAC,EAAEnB,GAAG,CAACmB;EACX,CAAC;EAED,KAAI,IAAIE,EAAE,GAAGpB,aAAa,CAACqB,KAAK,EAAED,EAAE,GAAGb,GAAG,EAAEa,EAAE,IAAIhB,EAAE,EAAE;IAClDE,QAAQ,CAACgB,IAAI,CAAChC,GAAG,CAACiC,UAAU,CAAC;MACzBC,KAAK,EAAEJ,EAAE;MACT;MACAK,SAAS,EAAE,CAAC,CAAC;MACb;MACAC,MAAM,EAAE,EAAE;MACV;MACA;MACAC,SAAS,EAAE,EAAE;MACb;MACAC,KAAK,EAAE,EAAE;MACTC,CAAC,EAAE9B,GAAG,CAAC8B,CAAC;MACRC,SAAS,EAAE/B,GAAG,CAACU,KAAK,CAACsB,IAAI,CAACD;IAC9B,CAAC,EAAEnB,YAAY,CAAC,CAAC;IAEjB,IAAGL,QAAQ,CAAC0B,MAAM,GAAG,IAAI,EAAE;MACvB1C,GAAG,CAAC2C,IAAI,CAAC,qCAAqC,EAAEpC,QAAQ,CAAC;MACzD;IACJ;EACJ;EACA,OAAOS,QAAQ;AACnB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n/*\n * Return a function that evaluates a set of linear or bicubic control points.\n * This will get evaluated a lot, so we'll at least do a bit of extra work to\n * flatten some of the choices. In particular, we'll unroll the linear/bicubic\n * combinations and we'll allow computing results in parallel to cut down\n * on repeated arithmetic.\n *\n * Take note that we don't search for the correct range in this function. The\n * reason is for consistency due to the corrresponding derivative function. In\n * particular, the derivatives aren't continuous across cells, so it's important\n * to be able control whether the derivative at a cell boundary is approached\n * from one side or the other.\n */\nmodule.exports = function (arrays, na, nb, asmoothing, bsmoothing) {\n  var imax = na - 2;\n  var jmax = nb - 2;\n  if (asmoothing && bsmoothing) {\n    return function (out, i, j) {\n      if (!out) out = [];\n      var f0, f1, f2, f3, ak, k;\n      var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n      var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n      var u = Math.max(0, Math.min(1, i - i0));\n      var v = Math.max(0, Math.min(1, j - j0));\n\n      // Since it's a grid of control points, the actual indices are * 3:\n      i0 *= 3;\n      j0 *= 3;\n\n      // Precompute some numbers:\n      var u2 = u * u;\n      var u3 = u2 * u;\n      var ou = 1 - u;\n      var ou2 = ou * ou;\n      var ou3 = ou2 * ou;\n      var v2 = v * v;\n      var v3 = v2 * v;\n      var ov = 1 - v;\n      var ov2 = ov * ov;\n      var ov3 = ov2 * ov;\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ou3 * ak[j0][i0] + 3 * (ou2 * u * ak[j0][i0 + 1] + ou * u2 * ak[j0][i0 + 2]) + u3 * ak[j0][i0 + 3];\n        f1 = ou3 * ak[j0 + 1][i0] + 3 * (ou2 * u * ak[j0 + 1][i0 + 1] + ou * u2 * ak[j0 + 1][i0 + 2]) + u3 * ak[j0 + 1][i0 + 3];\n        f2 = ou3 * ak[j0 + 2][i0] + 3 * (ou2 * u * ak[j0 + 2][i0 + 1] + ou * u2 * ak[j0 + 2][i0 + 2]) + u3 * ak[j0 + 2][i0 + 3];\n        f3 = ou3 * ak[j0 + 3][i0] + 3 * (ou2 * u * ak[j0 + 3][i0 + 1] + ou * u2 * ak[j0 + 3][i0 + 2]) + u3 * ak[j0 + 3][i0 + 3];\n        out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n      }\n      return out;\n    };\n  } else if (asmoothing) {\n    // Handle smooth in the a-direction but linear in the b-direction by performing four\n    // linear interpolations followed by one cubic interpolation of the result\n    return function (out, i, j) {\n      if (!out) out = [];\n      var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n      var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n      var u = Math.max(0, Math.min(1, i - i0));\n      var v = Math.max(0, Math.min(1, j - j0));\n      var f0, f1, f2, f3, k, ak;\n      i0 *= 3;\n      var u2 = u * u;\n      var u3 = u2 * u;\n      var ou = 1 - u;\n      var ou2 = ou * ou;\n      var ou3 = ou2 * ou;\n      var ov = 1 - v;\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ov * ak[j0][i0] + v * ak[j0 + 1][i0];\n        f1 = ov * ak[j0][i0 + 1] + v * ak[j0 + 1][i0 + 1];\n        f2 = ov * ak[j0][i0 + 2] + v * ak[j0 + 1][i0 + 1];\n        f3 = ov * ak[j0][i0 + 3] + v * ak[j0 + 1][i0 + 1];\n        out[k] = ou3 * f0 + 3 * (ou2 * u * f1 + ou * u2 * f2) + u3 * f3;\n      }\n      return out;\n    };\n  } else if (bsmoothing) {\n    // Same as the above case, except reversed:\n    return function (out, i, j) {\n      if (!out) out = [];\n      var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n      var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n      var u = Math.max(0, Math.min(1, i - i0));\n      var v = Math.max(0, Math.min(1, j - j0));\n      var f0, f1, f2, f3, k, ak;\n      j0 *= 3;\n      var v2 = v * v;\n      var v3 = v2 * v;\n      var ov = 1 - v;\n      var ov2 = ov * ov;\n      var ov3 = ov2 * ov;\n      var ou = 1 - u;\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ou * ak[j0][i0] + u * ak[j0][i0 + 1];\n        f1 = ou * ak[j0 + 1][i0] + u * ak[j0 + 1][i0 + 1];\n        f2 = ou * ak[j0 + 2][i0] + u * ak[j0 + 2][i0 + 1];\n        f3 = ou * ak[j0 + 3][i0] + u * ak[j0 + 3][i0 + 1];\n        out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n      }\n      return out;\n    };\n  } else {\n    // Finally, both directions are linear:\n    return function (out, i, j) {\n      if (!out) out = [];\n      var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n      var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n      var u = Math.max(0, Math.min(1, i - i0));\n      var v = Math.max(0, Math.min(1, j - j0));\n      var f0, f1, k, ak;\n      var ov = 1 - v;\n      var ou = 1 - u;\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ou * ak[j0][i0] + u * ak[j0][i0 + 1];\n        f1 = ou * ak[j0 + 1][i0] + u * ak[j0 + 1][i0 + 1];\n        out[k] = ov * f0 + v * f1;\n      }\n      return out;\n    };\n  }\n};","map":{"version":3,"names":["module","exports","arrays","na","nb","asmoothing","bsmoothing","imax","jmax","out","i","j","f0","f1","f2","f3","ak","k","i0","Math","max","min","floor","j0","u","v","u2","u3","ou","ou2","ou3","v2","v3","ov","ov2","ov3","length"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/carpet/create_spline_evaluator.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n/*\n * Return a function that evaluates a set of linear or bicubic control points.\n * This will get evaluated a lot, so we'll at least do a bit of extra work to\n * flatten some of the choices. In particular, we'll unroll the linear/bicubic\n * combinations and we'll allow computing results in parallel to cut down\n * on repeated arithmetic.\n *\n * Take note that we don't search for the correct range in this function. The\n * reason is for consistency due to the corrresponding derivative function. In\n * particular, the derivatives aren't continuous across cells, so it's important\n * to be able control whether the derivative at a cell boundary is approached\n * from one side or the other.\n */\nmodule.exports = function(arrays, na, nb, asmoothing, bsmoothing) {\n    var imax = na - 2;\n    var jmax = nb - 2;\n\n    if(asmoothing && bsmoothing) {\n        return function(out, i, j) {\n            if(!out) out = [];\n            var f0, f1, f2, f3, ak, k;\n\n            var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n            var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n            var u = Math.max(0, Math.min(1, i - i0));\n            var v = Math.max(0, Math.min(1, j - j0));\n\n            // Since it's a grid of control points, the actual indices are * 3:\n            i0 *= 3;\n            j0 *= 3;\n\n            // Precompute some numbers:\n            var u2 = u * u;\n            var u3 = u2 * u;\n            var ou = 1 - u;\n            var ou2 = ou * ou;\n            var ou3 = ou2 * ou;\n\n            var v2 = v * v;\n            var v3 = v2 * v;\n            var ov = 1 - v;\n            var ov2 = ov * ov;\n            var ov3 = ov2 * ov;\n\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = ou3 * ak[j0][i0] + 3 * (ou2 * u * ak[j0][i0 + 1] + ou * u2 * ak[j0][i0 + 2]) + u3 * ak[j0][i0 + 3];\n                f1 = ou3 * ak[j0 + 1][i0] + 3 * (ou2 * u * ak[j0 + 1][i0 + 1] + ou * u2 * ak[j0 + 1][i0 + 2]) + u3 * ak[j0 + 1][i0 + 3];\n                f2 = ou3 * ak[j0 + 2][i0] + 3 * (ou2 * u * ak[j0 + 2][i0 + 1] + ou * u2 * ak[j0 + 2][i0 + 2]) + u3 * ak[j0 + 2][i0 + 3];\n                f3 = ou3 * ak[j0 + 3][i0] + 3 * (ou2 * u * ak[j0 + 3][i0 + 1] + ou * u2 * ak[j0 + 3][i0 + 2]) + u3 * ak[j0 + 3][i0 + 3];\n                out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n            }\n\n            return out;\n        };\n    } else if(asmoothing) {\n        // Handle smooth in the a-direction but linear in the b-direction by performing four\n        // linear interpolations followed by one cubic interpolation of the result\n        return function(out, i, j) {\n            if(!out) out = [];\n\n            var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n            var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n            var u = Math.max(0, Math.min(1, i - i0));\n            var v = Math.max(0, Math.min(1, j - j0));\n\n            var f0, f1, f2, f3, k, ak;\n            i0 *= 3;\n            var u2 = u * u;\n            var u3 = u2 * u;\n            var ou = 1 - u;\n            var ou2 = ou * ou;\n            var ou3 = ou2 * ou;\n            var ov = 1 - v;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = ov * ak[j0][i0] + v * ak[j0 + 1][i0];\n                f1 = ov * ak[j0][i0 + 1] + v * ak[j0 + 1][i0 + 1];\n                f2 = ov * ak[j0][i0 + 2] + v * ak[j0 + 1][i0 + 1];\n                f3 = ov * ak[j0][i0 + 3] + v * ak[j0 + 1][i0 + 1];\n\n                out[k] = ou3 * f0 + 3 * (ou2 * u * f1 + ou * u2 * f2) + u3 * f3;\n            }\n            return out;\n        };\n    } else if(bsmoothing) {\n        // Same as the above case, except reversed:\n        return function(out, i, j) {\n            if(!out) out = [];\n\n            var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n            var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n            var u = Math.max(0, Math.min(1, i - i0));\n            var v = Math.max(0, Math.min(1, j - j0));\n\n            var f0, f1, f2, f3, k, ak;\n            j0 *= 3;\n            var v2 = v * v;\n            var v3 = v2 * v;\n            var ov = 1 - v;\n            var ov2 = ov * ov;\n            var ov3 = ov2 * ov;\n            var ou = 1 - u;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = ou * ak[j0][i0] + u * ak[j0][i0 + 1];\n                f1 = ou * ak[j0 + 1][i0] + u * ak[j0 + 1][i0 + 1];\n                f2 = ou * ak[j0 + 2][i0] + u * ak[j0 + 2][i0 + 1];\n                f3 = ou * ak[j0 + 3][i0] + u * ak[j0 + 3][i0 + 1];\n\n                out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n            }\n            return out;\n        };\n    } else {\n        // Finally, both directions are linear:\n        return function(out, i, j) {\n            if(!out) out = [];\n\n            var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n            var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n            var u = Math.max(0, Math.min(1, i - i0));\n            var v = Math.max(0, Math.min(1, j - j0));\n\n            var f0, f1, k, ak;\n            var ov = 1 - v;\n            var ou = 1 - u;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = ou * ak[j0][i0] + u * ak[j0][i0 + 1];\n                f1 = ou * ak[j0 + 1][i0] + u * ak[j0 + 1][i0 + 1];\n\n                out[k] = ov * f0 + v * f1;\n            }\n            return out;\n        };\n    }\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar createLine = require('regl-line2d');\nvar Registry = require('../../registry');\nvar prepareRegl = require('../../lib/prepare_regl');\nvar getModuleCalcData = require('../../plots/get_data').getModuleCalcData;\nvar Cartesian = require('../../plots/cartesian');\nvar getFromId = require('../../plots/cartesian/axis_ids').getFromId;\nvar shouldShowZeroLine = require('../../plots/cartesian/axes').shouldShowZeroLine;\nvar SPLOM = 'splom';\nfunction plot(gd) {\n  var fullLayout = gd._fullLayout;\n  var _module = Registry.getModule(SPLOM);\n  var splomCalcData = getModuleCalcData(gd.calcdata, _module)[0];\n  var success = prepareRegl(gd, ['ANGLE_instanced_arrays', 'OES_element_index_uint']);\n  if (!success) return;\n  if (fullLayout._hasOnlyLargeSploms) {\n    updateGrid(gd);\n  }\n  _module.plot(gd, {}, splomCalcData);\n}\nfunction drag(gd) {\n  var cd = gd.calcdata;\n  var fullLayout = gd._fullLayout;\n  if (fullLayout._hasOnlyLargeSploms) {\n    updateGrid(gd);\n  }\n  for (var i = 0; i < cd.length; i++) {\n    var cd0 = cd[i][0];\n    var trace = cd0.trace;\n    var scene = fullLayout._splomScenes[trace.uid];\n    if (trace.type === 'splom' && scene && scene.matrix) {\n      dragOne(gd, trace, scene);\n    }\n  }\n}\nfunction dragOne(gd, trace, scene) {\n  var visibleLength = scene.matrixOptions.data.length;\n  var visibleDims = trace._visibleDims;\n  var ranges = scene.viewOpts.ranges = new Array(visibleLength);\n  for (var k = 0; k < visibleDims.length; k++) {\n    var i = visibleDims[k];\n    var rng = ranges[k] = new Array(4);\n    var xa = getFromId(gd, trace._diag[i][0]);\n    if (xa) {\n      rng[0] = xa.r2l(xa.range[0]);\n      rng[2] = xa.r2l(xa.range[1]);\n    }\n    var ya = getFromId(gd, trace._diag[i][1]);\n    if (ya) {\n      rng[1] = ya.r2l(ya.range[0]);\n      rng[3] = ya.r2l(ya.range[1]);\n    }\n  }\n  if (scene.selectBatch) {\n    scene.matrix.update({\n      ranges: ranges\n    }, {\n      ranges: ranges\n    });\n  } else {\n    scene.matrix.update({\n      ranges: ranges\n    });\n  }\n}\nfunction updateGrid(gd) {\n  var fullLayout = gd._fullLayout;\n  var regl = fullLayout._glcanvas.data()[0].regl;\n  var splomGrid = fullLayout._splomGrid;\n  if (!splomGrid) {\n    splomGrid = fullLayout._splomGrid = createLine(regl);\n  }\n  splomGrid.update(makeGridData(gd));\n}\nfunction makeGridData(gd) {\n  var fullLayout = gd._fullLayout;\n  var gs = fullLayout._size;\n  var fullView = [0, 0, fullLayout.width, fullLayout.height];\n  var lookup = {};\n  var k;\n  function push(prefix, ax, x0, x1, y0, y1) {\n    var lcolor = ax[prefix + 'color'];\n    var lwidth = ax[prefix + 'width'];\n    var key = String(lcolor + lwidth);\n    if (key in lookup) {\n      lookup[key].data.push(NaN, NaN, x0, x1, y0, y1);\n    } else {\n      lookup[key] = {\n        data: [x0, x1, y0, y1],\n        join: 'rect',\n        thickness: lwidth,\n        color: lcolor,\n        viewport: fullView,\n        range: fullView,\n        overlay: false\n      };\n    }\n  }\n  for (k in fullLayout._splomSubplots) {\n    var sp = fullLayout._plots[k];\n    var xa = sp.xaxis;\n    var ya = sp.yaxis;\n    var xVals = xa._vals;\n    var yVals = ya._vals;\n    // ya.l2p assumes top-to-bottom coordinate system (a la SVG),\n    // we need to compute bottom-to-top offsets and slopes:\n    var yOffset = gs.b + ya.domain[0] * gs.h;\n    var ym = -ya._m;\n    var yb = -ym * ya.r2l(ya.range[0], ya.calendar);\n    var x, y;\n    if (xa.showgrid) {\n      for (k = 0; k < xVals.length; k++) {\n        x = xa._offset + xa.l2p(xVals[k].x);\n        push('grid', xa, x, yOffset, x, yOffset + ya._length);\n      }\n    }\n    if (ya.showgrid) {\n      for (k = 0; k < yVals.length; k++) {\n        y = yOffset + yb + ym * yVals[k].x;\n        push('grid', ya, xa._offset, y, xa._offset + xa._length, y);\n      }\n    }\n    if (shouldShowZeroLine(gd, xa, ya)) {\n      x = xa._offset + xa.l2p(0);\n      push('zeroline', xa, x, yOffset, x, yOffset + ya._length);\n    }\n    if (shouldShowZeroLine(gd, ya, xa)) {\n      y = yOffset + yb + 0;\n      push('zeroline', ya, xa._offset, y, xa._offset + xa._length, y);\n    }\n  }\n  var gridBatches = [];\n  for (k in lookup) {\n    gridBatches.push(lookup[k]);\n  }\n  return gridBatches;\n}\nfunction clean(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var lookup = {};\n  var i;\n  if (oldFullLayout._splomScenes) {\n    for (i = 0; i < newFullData.length; i++) {\n      var newTrace = newFullData[i];\n      if (newTrace.type === 'splom') {\n        lookup[newTrace.uid] = 1;\n      }\n    }\n    for (i = 0; i < oldFullData.length; i++) {\n      var oldTrace = oldFullData[i];\n      if (!lookup[oldTrace.uid]) {\n        var scene = oldFullLayout._splomScenes[oldTrace.uid];\n        if (scene && scene.destroy) scene.destroy();\n        // must first set scene to null in order to get garbage collected\n        oldFullLayout._splomScenes[oldTrace.uid] = null;\n        delete oldFullLayout._splomScenes[oldTrace.uid];\n      }\n    }\n  }\n  if (Object.keys(oldFullLayout._splomScenes || {}).length === 0) {\n    delete oldFullLayout._splomScenes;\n  }\n  if (oldFullLayout._splomGrid && !newFullLayout._hasOnlyLargeSploms && oldFullLayout._hasOnlyLargeSploms) {\n    // must first set scene to null in order to get garbage collected\n    oldFullLayout._splomGrid.destroy();\n    oldFullLayout._splomGrid = null;\n    delete oldFullLayout._splomGrid;\n  }\n  Cartesian.clean(newFullData, newFullLayout, oldFullData, oldFullLayout);\n}\nfunction updateFx(gd) {\n  Cartesian.updateFx(gd);\n  var fullLayout = gd._fullLayout;\n  var dragmode = fullLayout.dragmode;\n\n  // unset selection styles when coming out of a selection mode\n  if (dragmode === 'zoom' || dragmode === 'pan') {\n    var cd = gd.calcdata;\n    for (var i = 0; i < cd.length; i++) {\n      var cd0 = cd[i][0];\n      var trace = cd0.trace;\n      if (trace.type === 'splom') {\n        var scene = fullLayout._splomScenes[trace.uid];\n        if (scene.selectBatch === null) {\n          scene.matrix.update(scene.matrixOptions, null);\n        }\n      }\n    }\n  }\n}\nmodule.exports = {\n  name: SPLOM,\n  attr: Cartesian.attr,\n  attrRegex: Cartesian.attrRegex,\n  layoutAttributes: Cartesian.layoutAttributes,\n  supplyLayoutDefaults: Cartesian.supplyLayoutDefaults,\n  drawFramework: Cartesian.drawFramework,\n  plot: plot,\n  drag: drag,\n  updateGrid: updateGrid,\n  clean: clean,\n  updateFx: updateFx,\n  toSVG: Cartesian.toSVG\n};","map":{"version":3,"names":["createLine","require","Registry","prepareRegl","getModuleCalcData","Cartesian","getFromId","shouldShowZeroLine","SPLOM","plot","gd","fullLayout","_fullLayout","_module","getModule","splomCalcData","calcdata","success","_hasOnlyLargeSploms","updateGrid","drag","cd","i","length","cd0","trace","scene","_splomScenes","uid","type","matrix","dragOne","visibleLength","matrixOptions","data","visibleDims","_visibleDims","ranges","viewOpts","Array","k","rng","xa","_diag","r2l","range","ya","selectBatch","update","regl","_glcanvas","splomGrid","_splomGrid","makeGridData","gs","_size","fullView","width","height","lookup","push","prefix","ax","x0","x1","y0","y1","lcolor","lwidth","key","String","NaN","join","thickness","color","viewport","overlay","_splomSubplots","sp","_plots","xaxis","yaxis","xVals","_vals","yVals","yOffset","b","domain","h","ym","_m","yb","calendar","x","y","showgrid","_offset","l2p","_length","gridBatches","clean","newFullData","newFullLayout","oldFullData","oldFullLayout","newTrace","oldTrace","destroy","Object","keys","updateFx","dragmode","module","exports","name","attr","attrRegex","layoutAttributes","supplyLayoutDefaults","drawFramework","toSVG"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/splom/base_plot.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar createLine = require('regl-line2d');\n\nvar Registry = require('../../registry');\nvar prepareRegl = require('../../lib/prepare_regl');\nvar getModuleCalcData = require('../../plots/get_data').getModuleCalcData;\nvar Cartesian = require('../../plots/cartesian');\nvar getFromId = require('../../plots/cartesian/axis_ids').getFromId;\nvar shouldShowZeroLine = require('../../plots/cartesian/axes').shouldShowZeroLine;\n\nvar SPLOM = 'splom';\n\nfunction plot(gd) {\n    var fullLayout = gd._fullLayout;\n    var _module = Registry.getModule(SPLOM);\n    var splomCalcData = getModuleCalcData(gd.calcdata, _module)[0];\n\n    var success = prepareRegl(gd, ['ANGLE_instanced_arrays', 'OES_element_index_uint']);\n    if(!success) return;\n\n    if(fullLayout._hasOnlyLargeSploms) {\n        updateGrid(gd);\n    }\n\n    _module.plot(gd, {}, splomCalcData);\n}\n\nfunction drag(gd) {\n    var cd = gd.calcdata;\n    var fullLayout = gd._fullLayout;\n\n    if(fullLayout._hasOnlyLargeSploms) {\n        updateGrid(gd);\n    }\n\n    for(var i = 0; i < cd.length; i++) {\n        var cd0 = cd[i][0];\n        var trace = cd0.trace;\n        var scene = fullLayout._splomScenes[trace.uid];\n\n        if(trace.type === 'splom' && scene && scene.matrix) {\n            dragOne(gd, trace, scene);\n        }\n    }\n}\n\nfunction dragOne(gd, trace, scene) {\n    var visibleLength = scene.matrixOptions.data.length;\n    var visibleDims = trace._visibleDims;\n    var ranges = scene.viewOpts.ranges = new Array(visibleLength);\n\n    for(var k = 0; k < visibleDims.length; k++) {\n        var i = visibleDims[k];\n        var rng = ranges[k] = new Array(4);\n\n        var xa = getFromId(gd, trace._diag[i][0]);\n        if(xa) {\n            rng[0] = xa.r2l(xa.range[0]);\n            rng[2] = xa.r2l(xa.range[1]);\n        }\n\n        var ya = getFromId(gd, trace._diag[i][1]);\n        if(ya) {\n            rng[1] = ya.r2l(ya.range[0]);\n            rng[3] = ya.r2l(ya.range[1]);\n        }\n    }\n\n    if(scene.selectBatch) {\n        scene.matrix.update({ranges: ranges}, {ranges: ranges});\n    } else {\n        scene.matrix.update({ranges: ranges});\n    }\n}\n\nfunction updateGrid(gd) {\n    var fullLayout = gd._fullLayout;\n    var regl = fullLayout._glcanvas.data()[0].regl;\n    var splomGrid = fullLayout._splomGrid;\n\n    if(!splomGrid) {\n        splomGrid = fullLayout._splomGrid = createLine(regl);\n    }\n    splomGrid.update(makeGridData(gd));\n}\n\nfunction makeGridData(gd) {\n    var fullLayout = gd._fullLayout;\n    var gs = fullLayout._size;\n    var fullView = [0, 0, fullLayout.width, fullLayout.height];\n    var lookup = {};\n    var k;\n\n    function push(prefix, ax, x0, x1, y0, y1) {\n        var lcolor = ax[prefix + 'color'];\n        var lwidth = ax[prefix + 'width'];\n        var key = String(lcolor + lwidth);\n\n        if(key in lookup) {\n            lookup[key].data.push(NaN, NaN, x0, x1, y0, y1);\n        } else {\n            lookup[key] = {\n                data: [x0, x1, y0, y1],\n                join: 'rect',\n                thickness: lwidth,\n                color: lcolor,\n                viewport: fullView,\n                range: fullView,\n                overlay: false\n            };\n        }\n    }\n\n    for(k in fullLayout._splomSubplots) {\n        var sp = fullLayout._plots[k];\n        var xa = sp.xaxis;\n        var ya = sp.yaxis;\n        var xVals = xa._vals;\n        var yVals = ya._vals;\n        // ya.l2p assumes top-to-bottom coordinate system (a la SVG),\n        // we need to compute bottom-to-top offsets and slopes:\n        var yOffset = gs.b + ya.domain[0] * gs.h;\n        var ym = -ya._m;\n        var yb = -ym * ya.r2l(ya.range[0], ya.calendar);\n        var x, y;\n\n        if(xa.showgrid) {\n            for(k = 0; k < xVals.length; k++) {\n                x = xa._offset + xa.l2p(xVals[k].x);\n                push('grid', xa, x, yOffset, x, yOffset + ya._length);\n            }\n        }\n        if(ya.showgrid) {\n            for(k = 0; k < yVals.length; k++) {\n                y = yOffset + yb + ym * yVals[k].x;\n                push('grid', ya, xa._offset, y, xa._offset + xa._length, y);\n            }\n        }\n        if(shouldShowZeroLine(gd, xa, ya)) {\n            x = xa._offset + xa.l2p(0);\n            push('zeroline', xa, x, yOffset, x, yOffset + ya._length);\n        }\n        if(shouldShowZeroLine(gd, ya, xa)) {\n            y = yOffset + yb + 0;\n            push('zeroline', ya, xa._offset, y, xa._offset + xa._length, y);\n        }\n    }\n\n    var gridBatches = [];\n    for(k in lookup) {\n        gridBatches.push(lookup[k]);\n    }\n\n    return gridBatches;\n}\n\nfunction clean(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var lookup = {};\n    var i;\n\n    if(oldFullLayout._splomScenes) {\n        for(i = 0; i < newFullData.length; i++) {\n            var newTrace = newFullData[i];\n            if(newTrace.type === 'splom') {\n                lookup[newTrace.uid] = 1;\n            }\n        }\n        for(i = 0; i < oldFullData.length; i++) {\n            var oldTrace = oldFullData[i];\n            if(!lookup[oldTrace.uid]) {\n                var scene = oldFullLayout._splomScenes[oldTrace.uid];\n                if(scene && scene.destroy) scene.destroy();\n                // must first set scene to null in order to get garbage collected\n                oldFullLayout._splomScenes[oldTrace.uid] = null;\n                delete oldFullLayout._splomScenes[oldTrace.uid];\n            }\n        }\n    }\n\n    if(Object.keys(oldFullLayout._splomScenes || {}).length === 0) {\n        delete oldFullLayout._splomScenes;\n    }\n\n    if(oldFullLayout._splomGrid &&\n        (!newFullLayout._hasOnlyLargeSploms && oldFullLayout._hasOnlyLargeSploms)) {\n        // must first set scene to null in order to get garbage collected\n        oldFullLayout._splomGrid.destroy();\n        oldFullLayout._splomGrid = null;\n        delete oldFullLayout._splomGrid;\n    }\n\n    Cartesian.clean(newFullData, newFullLayout, oldFullData, oldFullLayout);\n}\n\nfunction updateFx(gd) {\n    Cartesian.updateFx(gd);\n\n    var fullLayout = gd._fullLayout;\n    var dragmode = fullLayout.dragmode;\n\n    // unset selection styles when coming out of a selection mode\n    if(dragmode === 'zoom' || dragmode === 'pan') {\n        var cd = gd.calcdata;\n\n        for(var i = 0; i < cd.length; i++) {\n            var cd0 = cd[i][0];\n            var trace = cd0.trace;\n\n            if(trace.type === 'splom') {\n                var scene = fullLayout._splomScenes[trace.uid];\n                if(scene.selectBatch === null) {\n                    scene.matrix.update(scene.matrixOptions, null);\n                }\n            }\n        }\n    }\n}\n\nmodule.exports = {\n    name: SPLOM,\n    attr: Cartesian.attr,\n    attrRegex: Cartesian.attrRegex,\n    layoutAttributes: Cartesian.layoutAttributes,\n    supplyLayoutDefaults: Cartesian.supplyLayoutDefaults,\n    drawFramework: Cartesian.drawFramework,\n    plot: plot,\n    drag: drag,\n    updateGrid: updateGrid,\n    clean: clean,\n    updateFx: updateFx,\n    toSVG: Cartesian.toSVG\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar makeControlPoints = require('./catmull_rom');\nvar ensureArray = require('../../lib').ensureArray;\n\n/*\n * Turns a coarse grid into a fine grid with control points.\n *\n * Here's an ASCII representation:\n *\n *       o ----- o ----- o ----- o\n *       |       |       |       |\n *       |       |       |       |\n *       |       |       |       |\n *       o ----- o ----- o ----- o\n *       |       |       |       |\n *       |       |       |       |\n *    ^  |       |       |       |\n *    |  o ----- o ----- o ----- o\n *  b |  |       |       |       |\n *    |  |       |       |       |\n *    |  |       |       |       |\n *       o ----- o ----- o ----- o\n *         ------>\n *           a\n *\n * First of all, note that we want to do this in *cartesian* space. This means\n * we might run into problems when there are extreme differences in x/y scaling,\n * but the alternative is that the topology of the contours might actually be\n * view-dependent, which seems worse. As a fallback, the only parameter that\n * actually affects the result is the *aspect ratio*, so that we can at least\n * improve the situation a bit without going all the way to screen coordinates.\n *\n * This function flattens the points + tangents  into a slightly denser grid of\n * *control points*. The resulting grid looks like this:\n *\n *       9 +--o-o--+ -o-o--+--o-o--+\n *       8 o  o o  o  o o  o  o o  o\n *         |       |       |       |\n *       7 o  o o  o  o o  o  o o  o\n *       6 +--o-o--+ -o-o--+--o-o--+\n *       5 o  o o  o  o o  o  o o  o\n *         |       |       |       |\n *    ^  4 o  o o  o  o o  o  o o  o\n *    |  3 +--o-o--+ -o-o--+--o-o--+\n *  b |  2 o  o o  o  o o  o  o o  o\n *    |    |       |       |       |\n *    |  1 o  o o  o  o o  o  o o  o\n *       0 +--o-o--+ -o-o--+--o-o--+\n *         0  1 2  3  4 5  6  7 8  9\n *         ------>\n *           a\n *\n * where `o`s represent newly-computed control points. the resulting dimension is\n *\n *     (m - 1) * 3 + 1\n *   = 3 * m - 2\n *\n * We could simply store the tangents separately, but that's a nightmare to organize\n * in two dimensions since we'll be slicing grid lines in both directions and since\n * that basically requires very nearly just as much storage as just storing the dense\n * grid.\n *\n * Wow!\n */\n\n/*\n * Catmull-rom is biased at the boundaries toward the interior and we actually\n * can't use catmull-rom to compute the control point closest to (but inside)\n * the boundary.\n *\n * A note on plotly's spline interpolation. It uses the catmull rom control point\n * closest to the boundary *as* a quadratic control point. This seems incorrect,\n * so I've elected not to follow that. Given control points 0 and 1, regular plotly\n * splines give *equivalent* cubic control points:\n *\n * Input:\n *\n *   boundary\n *     |                    |\n *     p0           p2      p3    --> interior\n *     0.0          0.667   1.0\n *     |                    |\n *\n * Cubic-equivalent of what plotly splines draw::\n *\n *   boundary\n *     |                    |\n *     p0   p1      p2      p3    --> interior\n *     0.0  0.4444  0.8888  1.0\n *     |                    |\n *\n * What this function fills in:\n *\n *   boundary\n *     |                    |\n *     p0    p1     p2      p3    --> interior\n *     0.0   0.333  0.667   1.0\n *     |                    |\n *\n * Parameters:\n *   p0: boundary point\n *   p2: catmull rom point based on computation at p3\n *   p3: first grid point\n *\n * Of course it works whichever way it's oriented; you just need to interpret the\n * input/output accordingly.\n */\nfunction inferCubicControlPoint(p0, p2, p3) {\n  // Extend p1 away from p0 by 50%. This is the equivalent quadratic point that\n  // would give the same slope as catmull rom at p0.\n  var p2e0 = -0.5 * p3[0] + 1.5 * p2[0];\n  var p2e1 = -0.5 * p3[1] + 1.5 * p2[1];\n  return [(2 * p2e0 + p0[0]) / 3, (2 * p2e1 + p0[1]) / 3];\n}\nmodule.exports = function computeControlPoints(xe, ye, x, y, asmoothing, bsmoothing) {\n  var i, j, ie, je, xej, yej, xj, yj, cp, p1;\n  // At this point, we know these dimensions are correct and representative of\n  // the whole 2D arrays:\n  var na = x[0].length;\n  var nb = x.length;\n\n  // (n)umber of (e)xpanded points:\n  var nea = asmoothing ? 3 * na - 2 : na;\n  var neb = bsmoothing ? 3 * nb - 2 : nb;\n  xe = ensureArray(xe, neb);\n  ye = ensureArray(ye, neb);\n  for (ie = 0; ie < neb; ie++) {\n    xe[ie] = ensureArray(xe[ie], nea);\n    ye[ie] = ensureArray(ye[ie], nea);\n  }\n\n  // This loop fills in the X'd points:\n  //\n  //    .       .       .       .\n  //    .       .       .       .\n  //    |       |       |       |\n  //    |       |       |       |\n  //    X ----- X ----- X ----- X\n  //    |       |       |       |\n  //    |       |       |       |\n  //    |       |       |       |\n  //    X ----- X ----- X ----- X\n  //\n  //\n  // ie = (i) (e)xpanded:\n  for (j = 0, je = 0; j < nb; j++, je += bsmoothing ? 3 : 1) {\n    xej = xe[je];\n    yej = ye[je];\n    xj = x[j];\n    yj = y[j];\n\n    // je = (j) (e)xpanded:\n    for (i = 0, ie = 0; i < na; i++, ie += asmoothing ? 3 : 1) {\n      xej[ie] = xj[i];\n      yej[ie] = yj[i];\n    }\n  }\n  if (asmoothing) {\n    // If there's a-smoothing, this loop fills in the X'd points with catmull-rom\n    // control points computed along the a-axis:\n    //     .       .       .       .\n    //     .       .       .       .\n    //     |       |       |       |\n    //     |       |       |       |\n    //     o -Y-X- o -X-X- o -X-Y- o\n    //     |       |       |       |\n    //     |       |       |       |\n    //     |       |       |       |\n    //     o -Y-X- o -X-X- o -X-Y- o\n    //\n    // i:  0       1       2       3\n    // ie: 0  1 3  3  4 5  6  7 8  9\n    //\n    //           ------>\n    //             a\n    //\n    for (j = 0, je = 0; j < nb; j++, je += bsmoothing ? 3 : 1) {\n      // Fill in the points marked X for this a-row:\n      for (i = 1, ie = 3; i < na - 1; i++, ie += 3) {\n        cp = makeControlPoints([x[j][i - 1], y[j][i - 1]], [x[j][i], y[j][i]], [x[j][i + 1], y[j][i + 1]], asmoothing);\n        xe[je][ie - 1] = cp[0][0];\n        ye[je][ie - 1] = cp[0][1];\n        xe[je][ie + 1] = cp[1][0];\n        ye[je][ie + 1] = cp[1][1];\n      }\n\n      // The very first cubic interpolation point (to the left for i = 1 above) is\n      // used as a *quadratic* interpolation point by the spline drawing function\n      // which isn't really correct. But for the sake of consistency, we'll use it\n      // as such. Since we're using cubic splines, that means we need to shorten the\n      // tangent by 1/3 and also construct a new cubic spline control point 1/3 from\n      // the original to the i = 0 point.\n      p1 = inferCubicControlPoint([xe[je][0], ye[je][0]], [xe[je][2], ye[je][2]], [xe[je][3], ye[je][3]]);\n      xe[je][1] = p1[0];\n      ye[je][1] = p1[1];\n\n      // Ditto last points, sans explanation:\n      p1 = inferCubicControlPoint([xe[je][nea - 1], ye[je][nea - 1]], [xe[je][nea - 3], ye[je][nea - 3]], [xe[je][nea - 4], ye[je][nea - 4]]);\n      xe[je][nea - 2] = p1[0];\n      ye[je][nea - 2] = p1[1];\n    }\n  }\n  if (bsmoothing) {\n    // If there's a-smoothing, this loop fills in the X'd points with catmull-rom\n    // control points computed along the b-axis:\n    //     .       .       .       .\n    //     X  X X  X  X X  X  X X  X\n    //     |       |       |       |\n    //     X  X X  X  X X  X  X X  X\n    //     o -o-o- o -o-o- o -o-o- o\n    //     X  X X  X  X X  X  X X  X\n    //     |       |       |       |\n    //     Y  Y Y  Y  Y Y  Y  Y Y  Y\n    //     o -o-o- o -o-o- o -o-o- o\n    //\n    // i:  0       1       2       3\n    // ie: 0  1 3  3  4 5  6  7 8  9\n    //\n    //           ------>\n    //             a\n    //\n    for (ie = 0; ie < nea; ie++) {\n      for (je = 3; je < neb - 3; je += 3) {\n        cp = makeControlPoints([xe[je - 3][ie], ye[je - 3][ie]], [xe[je][ie], ye[je][ie]], [xe[je + 3][ie], ye[je + 3][ie]], bsmoothing);\n        xe[je - 1][ie] = cp[0][0];\n        ye[je - 1][ie] = cp[0][1];\n        xe[je + 1][ie] = cp[1][0];\n        ye[je + 1][ie] = cp[1][1];\n      }\n      // Do the same boundary condition magic for these control points marked Y above:\n      p1 = inferCubicControlPoint([xe[0][ie], ye[0][ie]], [xe[2][ie], ye[2][ie]], [xe[3][ie], ye[3][ie]]);\n      xe[1][ie] = p1[0];\n      ye[1][ie] = p1[1];\n      p1 = inferCubicControlPoint([xe[neb - 1][ie], ye[neb - 1][ie]], [xe[neb - 3][ie], ye[neb - 3][ie]], [xe[neb - 4][ie], ye[neb - 4][ie]]);\n      xe[neb - 2][ie] = p1[0];\n      ye[neb - 2][ie] = p1[1];\n    }\n  }\n  if (asmoothing && bsmoothing) {\n    // Do one more pass, this time recomputing exactly what we just computed.\n    // It's overdetermined since we're peforming catmull-rom in two directions,\n    // so we'll just average the overdetermined. These points don't lie along the\n    // grid lines, so note that only grid lines will follow normal plotly spline\n    // interpolation.\n    //\n    // Unless of course there was no b smoothing. Then these intermediate points\n    // don't actually exist and this section is bypassed.\n    //     .       .       .       .\n    //     o  X X  o  X X  o  X X  o\n    //     |       |       |       |\n    //     o  X X  o  X X  o  X X  o\n    //     o -o-o- o -o-o- o -o-o- o\n    //     o  X X  o  X X  o  X X  o\n    //     |       |       |       |\n    //     o  Y Y  o  Y Y  o  Y Y  o\n    //     o -o-o- o -o-o- o -o-o- o\n    //\n    // i:  0       1       2       3\n    // ie: 0  1 3  3  4 5  6  7 8  9\n    //\n    //           ------>\n    //             a\n    //\n    for (je = 1; je < neb; je += (je + 1) % 3 === 0 ? 2 : 1) {\n      // Fill in the points marked X for this a-row:\n      for (ie = 3; ie < nea - 3; ie += 3) {\n        cp = makeControlPoints([xe[je][ie - 3], ye[je][ie - 3]], [xe[je][ie], ye[je][ie]], [xe[je][ie + 3], ye[je][ie + 3]], asmoothing);\n        xe[je][ie - 1] = 0.5 * (xe[je][ie - 1] + cp[0][0]);\n        ye[je][ie - 1] = 0.5 * (ye[je][ie - 1] + cp[0][1]);\n        xe[je][ie + 1] = 0.5 * (xe[je][ie + 1] + cp[1][0]);\n        ye[je][ie + 1] = 0.5 * (ye[je][ie + 1] + cp[1][1]);\n      }\n\n      // This case is just slightly different. The computation is the same,\n      // but having computed this, we'll average with the existing result.\n      p1 = inferCubicControlPoint([xe[je][0], ye[je][0]], [xe[je][2], ye[je][2]], [xe[je][3], ye[je][3]]);\n      xe[je][1] = 0.5 * (xe[je][1] + p1[0]);\n      ye[je][1] = 0.5 * (ye[je][1] + p1[1]);\n      p1 = inferCubicControlPoint([xe[je][nea - 1], ye[je][nea - 1]], [xe[je][nea - 3], ye[je][nea - 3]], [xe[je][nea - 4], ye[je][nea - 4]]);\n      xe[je][nea - 2] = 0.5 * (xe[je][nea - 2] + p1[0]);\n      ye[je][nea - 2] = 0.5 * (ye[je][nea - 2] + p1[1]);\n    }\n  }\n  return [xe, ye];\n};","map":{"version":3,"names":["makeControlPoints","require","ensureArray","inferCubicControlPoint","p0","p2","p3","p2e0","p2e1","module","exports","computeControlPoints","xe","ye","x","y","asmoothing","bsmoothing","i","j","ie","je","xej","yej","xj","yj","cp","p1","na","length","nb","nea","neb"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/carpet/compute_control_points.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar makeControlPoints = require('./catmull_rom');\nvar ensureArray = require('../../lib').ensureArray;\n\n/*\n * Turns a coarse grid into a fine grid with control points.\n *\n * Here's an ASCII representation:\n *\n *       o ----- o ----- o ----- o\n *       |       |       |       |\n *       |       |       |       |\n *       |       |       |       |\n *       o ----- o ----- o ----- o\n *       |       |       |       |\n *       |       |       |       |\n *    ^  |       |       |       |\n *    |  o ----- o ----- o ----- o\n *  b |  |       |       |       |\n *    |  |       |       |       |\n *    |  |       |       |       |\n *       o ----- o ----- o ----- o\n *         ------>\n *           a\n *\n * First of all, note that we want to do this in *cartesian* space. This means\n * we might run into problems when there are extreme differences in x/y scaling,\n * but the alternative is that the topology of the contours might actually be\n * view-dependent, which seems worse. As a fallback, the only parameter that\n * actually affects the result is the *aspect ratio*, so that we can at least\n * improve the situation a bit without going all the way to screen coordinates.\n *\n * This function flattens the points + tangents  into a slightly denser grid of\n * *control points*. The resulting grid looks like this:\n *\n *       9 +--o-o--+ -o-o--+--o-o--+\n *       8 o  o o  o  o o  o  o o  o\n *         |       |       |       |\n *       7 o  o o  o  o o  o  o o  o\n *       6 +--o-o--+ -o-o--+--o-o--+\n *       5 o  o o  o  o o  o  o o  o\n *         |       |       |       |\n *    ^  4 o  o o  o  o o  o  o o  o\n *    |  3 +--o-o--+ -o-o--+--o-o--+\n *  b |  2 o  o o  o  o o  o  o o  o\n *    |    |       |       |       |\n *    |  1 o  o o  o  o o  o  o o  o\n *       0 +--o-o--+ -o-o--+--o-o--+\n *         0  1 2  3  4 5  6  7 8  9\n *         ------>\n *           a\n *\n * where `o`s represent newly-computed control points. the resulting dimension is\n *\n *     (m - 1) * 3 + 1\n *   = 3 * m - 2\n *\n * We could simply store the tangents separately, but that's a nightmare to organize\n * in two dimensions since we'll be slicing grid lines in both directions and since\n * that basically requires very nearly just as much storage as just storing the dense\n * grid.\n *\n * Wow!\n */\n\n\n/*\n * Catmull-rom is biased at the boundaries toward the interior and we actually\n * can't use catmull-rom to compute the control point closest to (but inside)\n * the boundary.\n *\n * A note on plotly's spline interpolation. It uses the catmull rom control point\n * closest to the boundary *as* a quadratic control point. This seems incorrect,\n * so I've elected not to follow that. Given control points 0 and 1, regular plotly\n * splines give *equivalent* cubic control points:\n *\n * Input:\n *\n *   boundary\n *     |                    |\n *     p0           p2      p3    --> interior\n *     0.0          0.667   1.0\n *     |                    |\n *\n * Cubic-equivalent of what plotly splines draw::\n *\n *   boundary\n *     |                    |\n *     p0   p1      p2      p3    --> interior\n *     0.0  0.4444  0.8888  1.0\n *     |                    |\n *\n * What this function fills in:\n *\n *   boundary\n *     |                    |\n *     p0    p1     p2      p3    --> interior\n *     0.0   0.333  0.667   1.0\n *     |                    |\n *\n * Parameters:\n *   p0: boundary point\n *   p2: catmull rom point based on computation at p3\n *   p3: first grid point\n *\n * Of course it works whichever way it's oriented; you just need to interpret the\n * input/output accordingly.\n */\nfunction inferCubicControlPoint(p0, p2, p3) {\n    // Extend p1 away from p0 by 50%. This is the equivalent quadratic point that\n    // would give the same slope as catmull rom at p0.\n    var p2e0 = -0.5 * p3[0] + 1.5 * p2[0];\n    var p2e1 = -0.5 * p3[1] + 1.5 * p2[1];\n\n    return [\n        (2 * p2e0 + p0[0]) / 3,\n        (2 * p2e1 + p0[1]) / 3,\n    ];\n}\n\nmodule.exports = function computeControlPoints(xe, ye, x, y, asmoothing, bsmoothing) {\n    var i, j, ie, je, xej, yej, xj, yj, cp, p1;\n    // At this point, we know these dimensions are correct and representative of\n    // the whole 2D arrays:\n    var na = x[0].length;\n    var nb = x.length;\n\n    // (n)umber of (e)xpanded points:\n    var nea = asmoothing ? 3 * na - 2 : na;\n    var neb = bsmoothing ? 3 * nb - 2 : nb;\n\n    xe = ensureArray(xe, neb);\n    ye = ensureArray(ye, neb);\n\n    for(ie = 0; ie < neb; ie++) {\n        xe[ie] = ensureArray(xe[ie], nea);\n        ye[ie] = ensureArray(ye[ie], nea);\n    }\n\n    // This loop fills in the X'd points:\n    //\n    //    .       .       .       .\n    //    .       .       .       .\n    //    |       |       |       |\n    //    |       |       |       |\n    //    X ----- X ----- X ----- X\n    //    |       |       |       |\n    //    |       |       |       |\n    //    |       |       |       |\n    //    X ----- X ----- X ----- X\n    //\n    //\n    // ie = (i) (e)xpanded:\n    for(j = 0, je = 0; j < nb; j++, je += bsmoothing ? 3 : 1) {\n        xej = xe[je];\n        yej = ye[je];\n        xj = x[j];\n        yj = y[j];\n\n        // je = (j) (e)xpanded:\n        for(i = 0, ie = 0; i < na; i++, ie += asmoothing ? 3 : 1) {\n            xej[ie] = xj[i];\n            yej[ie] = yj[i];\n        }\n    }\n\n    if(asmoothing) {\n        // If there's a-smoothing, this loop fills in the X'd points with catmull-rom\n        // control points computed along the a-axis:\n        //     .       .       .       .\n        //     .       .       .       .\n        //     |       |       |       |\n        //     |       |       |       |\n        //     o -Y-X- o -X-X- o -X-Y- o\n        //     |       |       |       |\n        //     |       |       |       |\n        //     |       |       |       |\n        //     o -Y-X- o -X-X- o -X-Y- o\n        //\n        // i:  0       1       2       3\n        // ie: 0  1 3  3  4 5  6  7 8  9\n        //\n        //           ------>\n        //             a\n        //\n        for(j = 0, je = 0; j < nb; j++, je += bsmoothing ? 3 : 1) {\n            // Fill in the points marked X for this a-row:\n            for(i = 1, ie = 3; i < na - 1; i++, ie += 3) {\n                cp = makeControlPoints(\n                    [x[j][i - 1], y[j][i - 1]],\n                    [x[j][i ], y[j][i]],\n                    [x[j][i + 1], y[j][i + 1]],\n                    asmoothing\n                );\n\n                xe[je][ie - 1] = cp[0][0];\n                ye[je][ie - 1] = cp[0][1];\n                xe[je][ie + 1] = cp[1][0];\n                ye[je][ie + 1] = cp[1][1];\n            }\n\n            // The very first cubic interpolation point (to the left for i = 1 above) is\n            // used as a *quadratic* interpolation point by the spline drawing function\n            // which isn't really correct. But for the sake of consistency, we'll use it\n            // as such. Since we're using cubic splines, that means we need to shorten the\n            // tangent by 1/3 and also construct a new cubic spline control point 1/3 from\n            // the original to the i = 0 point.\n            p1 = inferCubicControlPoint(\n                [xe[je][0], ye[je][0]],\n                [xe[je][2], ye[je][2]],\n                [xe[je][3], ye[je][3]]\n            );\n            xe[je][1] = p1[0];\n            ye[je][1] = p1[1];\n\n            // Ditto last points, sans explanation:\n            p1 = inferCubicControlPoint(\n                [xe[je][nea - 1], ye[je][nea - 1]],\n                [xe[je][nea - 3], ye[je][nea - 3]],\n                [xe[je][nea - 4], ye[je][nea - 4]]\n            );\n            xe[je][nea - 2] = p1[0];\n            ye[je][nea - 2] = p1[1];\n        }\n    }\n\n    if(bsmoothing) {\n        // If there's a-smoothing, this loop fills in the X'd points with catmull-rom\n        // control points computed along the b-axis:\n        //     .       .       .       .\n        //     X  X X  X  X X  X  X X  X\n        //     |       |       |       |\n        //     X  X X  X  X X  X  X X  X\n        //     o -o-o- o -o-o- o -o-o- o\n        //     X  X X  X  X X  X  X X  X\n        //     |       |       |       |\n        //     Y  Y Y  Y  Y Y  Y  Y Y  Y\n        //     o -o-o- o -o-o- o -o-o- o\n        //\n        // i:  0       1       2       3\n        // ie: 0  1 3  3  4 5  6  7 8  9\n        //\n        //           ------>\n        //             a\n        //\n        for(ie = 0; ie < nea; ie++) {\n            for(je = 3; je < neb - 3; je += 3) {\n                cp = makeControlPoints(\n                    [xe[je - 3][ie], ye[je - 3][ie]],\n                    [xe[je][ie], ye[je][ie]],\n                    [xe[je + 3][ie], ye[je + 3][ie]],\n                    bsmoothing\n                );\n\n                xe[je - 1][ie] = cp[0][0];\n                ye[je - 1][ie] = cp[0][1];\n                xe[je + 1][ie] = cp[1][0];\n                ye[je + 1][ie] = cp[1][1];\n            }\n            // Do the same boundary condition magic for these control points marked Y above:\n            p1 = inferCubicControlPoint(\n                [xe[0][ie], ye[0][ie]],\n                [xe[2][ie], ye[2][ie]],\n                [xe[3][ie], ye[3][ie]]\n            );\n            xe[1][ie] = p1[0];\n            ye[1][ie] = p1[1];\n\n            p1 = inferCubicControlPoint(\n                [xe[neb - 1][ie], ye[neb - 1][ie]],\n                [xe[neb - 3][ie], ye[neb - 3][ie]],\n                [xe[neb - 4][ie], ye[neb - 4][ie]]\n            );\n            xe[neb - 2][ie] = p1[0];\n            ye[neb - 2][ie] = p1[1];\n        }\n    }\n\n    if(asmoothing && bsmoothing) {\n        // Do one more pass, this time recomputing exactly what we just computed.\n        // It's overdetermined since we're peforming catmull-rom in two directions,\n        // so we'll just average the overdetermined. These points don't lie along the\n        // grid lines, so note that only grid lines will follow normal plotly spline\n        // interpolation.\n        //\n        // Unless of course there was no b smoothing. Then these intermediate points\n        // don't actually exist and this section is bypassed.\n        //     .       .       .       .\n        //     o  X X  o  X X  o  X X  o\n        //     |       |       |       |\n        //     o  X X  o  X X  o  X X  o\n        //     o -o-o- o -o-o- o -o-o- o\n        //     o  X X  o  X X  o  X X  o\n        //     |       |       |       |\n        //     o  Y Y  o  Y Y  o  Y Y  o\n        //     o -o-o- o -o-o- o -o-o- o\n        //\n        // i:  0       1       2       3\n        // ie: 0  1 3  3  4 5  6  7 8  9\n        //\n        //           ------>\n        //             a\n        //\n        for(je = 1; je < neb; je += (je + 1) % 3 === 0 ? 2 : 1) {\n            // Fill in the points marked X for this a-row:\n            for(ie = 3; ie < nea - 3; ie += 3) {\n                cp = makeControlPoints(\n                    [xe[je][ie - 3], ye[je][ie - 3]],\n                    [xe[je][ie], ye[je][ie]],\n                    [xe[je][ie + 3], ye[je][ie + 3]],\n                    asmoothing\n                );\n\n                xe[je][ie - 1] = 0.5 * (xe[je][ie - 1] + cp[0][0]);\n                ye[je][ie - 1] = 0.5 * (ye[je][ie - 1] + cp[0][1]);\n                xe[je][ie + 1] = 0.5 * (xe[je][ie + 1] + cp[1][0]);\n                ye[je][ie + 1] = 0.5 * (ye[je][ie + 1] + cp[1][1]);\n            }\n\n            // This case is just slightly different. The computation is the same,\n            // but having computed this, we'll average with the existing result.\n            p1 = inferCubicControlPoint(\n                [xe[je][0], ye[je][0]],\n                [xe[je][2], ye[je][2]],\n                [xe[je][3], ye[je][3]]\n            );\n            xe[je][1] = 0.5 * (xe[je][1] + p1[0]);\n            ye[je][1] = 0.5 * (ye[je][1] + p1[1]);\n\n            p1 = inferCubicControlPoint(\n                [xe[je][nea - 1], ye[je][nea - 1]],\n                [xe[je][nea - 3], ye[je][nea - 3]],\n                [xe[je][nea - 4], ye[je][nea - 4]]\n            );\n            xe[je][nea - 2] = 0.5 * (xe[je][nea - 2] + p1[0]);\n            ye[je][nea - 2] = 0.5 * (ye[je][nea - 2] + p1[1]);\n        }\n    }\n\n    return [xe, ye];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
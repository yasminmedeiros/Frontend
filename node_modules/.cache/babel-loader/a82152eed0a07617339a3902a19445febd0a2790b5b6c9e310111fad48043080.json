{"ast":null,"code":"'use strict';\n\nvar ndarray = require('ndarray');\nvar ops = require('ndarray-ops');\nvar pool = require('typedarray-pool');\nmodule.exports = createTexture2D;\nvar linearTypes = null;\nvar filterTypes = null;\nvar wrapTypes = null;\nfunction lazyInitLinearTypes(gl) {\n  linearTypes = [gl.LINEAR, gl.NEAREST_MIPMAP_LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_NEAREST];\n  filterTypes = [gl.NEAREST, gl.LINEAR, gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_LINEAR];\n  wrapTypes = [gl.REPEAT, gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT];\n}\nfunction acceptTextureDOM(obj) {\n  return 'undefined' != typeof HTMLCanvasElement && obj instanceof HTMLCanvasElement || 'undefined' != typeof HTMLImageElement && obj instanceof HTMLImageElement || 'undefined' != typeof HTMLVideoElement && obj instanceof HTMLVideoElement || 'undefined' != typeof ImageData && obj instanceof ImageData;\n}\nvar convertFloatToUint8 = function convertFloatToUint8(out, inp) {\n  ops.muls(out, inp, 255.0);\n};\nfunction reshapeTexture(tex, w, h) {\n  var gl = tex.gl;\n  var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  if (w < 0 || w > maxSize || h < 0 || h > maxSize) {\n    throw new Error('gl-texture2d: Invalid texture size');\n  }\n  tex._shape = [w, h];\n  tex.bind();\n  gl.texImage2D(gl.TEXTURE_2D, 0, tex.format, w, h, 0, tex.format, tex.type, null);\n  tex._mipLevels = [0];\n  return tex;\n}\nfunction Texture2D(gl, handle, width, height, format, type) {\n  this.gl = gl;\n  this.handle = handle;\n  this.format = format;\n  this.type = type;\n  this._shape = [width, height];\n  this._mipLevels = [0];\n  this._magFilter = gl.NEAREST;\n  this._minFilter = gl.NEAREST;\n  this._wrapS = gl.CLAMP_TO_EDGE;\n  this._wrapT = gl.CLAMP_TO_EDGE;\n  this._anisoSamples = 1;\n  var parent = this;\n  var wrapVector = [this._wrapS, this._wrapT];\n  Object.defineProperties(wrapVector, [{\n    get: function get() {\n      return parent._wrapS;\n    },\n    set: function set(v) {\n      return parent.wrapS = v;\n    }\n  }, {\n    get: function get() {\n      return parent._wrapT;\n    },\n    set: function set(v) {\n      return parent.wrapT = v;\n    }\n  }]);\n  this._wrapVector = wrapVector;\n  var shapeVector = [this._shape[0], this._shape[1]];\n  Object.defineProperties(shapeVector, [{\n    get: function get() {\n      return parent._shape[0];\n    },\n    set: function set(v) {\n      return parent.width = v;\n    }\n  }, {\n    get: function get() {\n      return parent._shape[1];\n    },\n    set: function set(v) {\n      return parent.height = v;\n    }\n  }]);\n  this._shapeVector = shapeVector;\n}\nvar proto = Texture2D.prototype;\nObject.defineProperties(proto, {\n  minFilter: {\n    get: function get() {\n      return this._minFilter;\n    },\n    set: function set(v) {\n      this.bind();\n      var gl = this.gl;\n      if (this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {\n        if (!gl.getExtension('OES_texture_float_linear')) {\n          v = gl.NEAREST;\n        }\n      }\n      if (filterTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown filter mode ' + v);\n      }\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, v);\n      return this._minFilter = v;\n    }\n  },\n  magFilter: {\n    get: function get() {\n      return this._magFilter;\n    },\n    set: function set(v) {\n      this.bind();\n      var gl = this.gl;\n      if (this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {\n        if (!gl.getExtension('OES_texture_float_linear')) {\n          v = gl.NEAREST;\n        }\n      }\n      if (filterTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown filter mode ' + v);\n      }\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, v);\n      return this._magFilter = v;\n    }\n  },\n  mipSamples: {\n    get: function get() {\n      return this._anisoSamples;\n    },\n    set: function set(i) {\n      var psamples = this._anisoSamples;\n      this._anisoSamples = Math.max(i, 1) | 0;\n      if (psamples !== this._anisoSamples) {\n        var ext = this.gl.getExtension('EXT_texture_filter_anisotropic');\n        if (ext) {\n          this.gl.texParameterf(this.gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, this._anisoSamples);\n        }\n      }\n      return this._anisoSamples;\n    }\n  },\n  wrapS: {\n    get: function get() {\n      return this._wrapS;\n    },\n    set: function set(v) {\n      this.bind();\n      if (wrapTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown wrap mode ' + v);\n      }\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, v);\n      return this._wrapS = v;\n    }\n  },\n  wrapT: {\n    get: function get() {\n      return this._wrapT;\n    },\n    set: function set(v) {\n      this.bind();\n      if (wrapTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown wrap mode ' + v);\n      }\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, v);\n      return this._wrapT = v;\n    }\n  },\n  wrap: {\n    get: function get() {\n      return this._wrapVector;\n    },\n    set: function set(v) {\n      if (!Array.isArray(v)) {\n        v = [v, v];\n      }\n      if (v.length !== 2) {\n        throw new Error('gl-texture2d: Must specify wrap mode for rows and columns');\n      }\n      for (var i = 0; i < 2; ++i) {\n        if (wrapTypes.indexOf(v[i]) < 0) {\n          throw new Error('gl-texture2d: Unknown wrap mode ' + v);\n        }\n      }\n      this._wrapS = v[0];\n      this._wrapT = v[1];\n      var gl = this.gl;\n      this.bind();\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this._wrapS);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this._wrapT);\n      return v;\n    }\n  },\n  shape: {\n    get: function get() {\n      return this._shapeVector;\n    },\n    set: function set(x) {\n      if (!Array.isArray(x)) {\n        x = [x | 0, x | 0];\n      } else {\n        if (x.length !== 2) {\n          throw new Error('gl-texture2d: Invalid texture shape');\n        }\n      }\n      reshapeTexture(this, x[0] | 0, x[1] | 0);\n      return [x[0] | 0, x[1] | 0];\n    }\n  },\n  width: {\n    get: function get() {\n      return this._shape[0];\n    },\n    set: function set(w) {\n      w = w | 0;\n      reshapeTexture(this, w, this._shape[1]);\n      return w;\n    }\n  },\n  height: {\n    get: function get() {\n      return this._shape[1];\n    },\n    set: function set(h) {\n      h = h | 0;\n      reshapeTexture(this, this._shape[0], h);\n      return h;\n    }\n  }\n});\nproto.bind = function (unit) {\n  var gl = this.gl;\n  if (unit !== undefined) {\n    gl.activeTexture(gl.TEXTURE0 + (unit | 0));\n  }\n  gl.bindTexture(gl.TEXTURE_2D, this.handle);\n  if (unit !== undefined) {\n    return unit | 0;\n  }\n  return gl.getParameter(gl.ACTIVE_TEXTURE) - gl.TEXTURE0;\n};\nproto.dispose = function () {\n  this.gl.deleteTexture(this.handle);\n};\nproto.generateMipmap = function () {\n  this.bind();\n  this.gl.generateMipmap(this.gl.TEXTURE_2D);\n\n  //Update mip levels\n  var l = Math.min(this._shape[0], this._shape[1]);\n  for (var i = 0; l > 0; ++i, l >>>= 1) {\n    if (this._mipLevels.indexOf(i) < 0) {\n      this._mipLevels.push(i);\n    }\n  }\n};\nproto.setPixels = function (data, x_off, y_off, mip_level) {\n  var gl = this.gl;\n  this.bind();\n  if (Array.isArray(x_off)) {\n    mip_level = y_off;\n    y_off = x_off[1] | 0;\n    x_off = x_off[0] | 0;\n  } else {\n    x_off = x_off || 0;\n    y_off = y_off || 0;\n  }\n  mip_level = mip_level || 0;\n  var directData = acceptTextureDOM(data) ? data : data.raw;\n  if (directData) {\n    var needsMip = this._mipLevels.indexOf(mip_level) < 0;\n    if (needsMip) {\n      gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, directData);\n      this._mipLevels.push(mip_level);\n    } else {\n      gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, this.format, this.type, directData);\n    }\n  } else if (data.shape && data.stride && data.data) {\n    if (data.shape.length < 2 || x_off + data.shape[1] > this._shape[1] >>> mip_level || y_off + data.shape[0] > this._shape[0] >>> mip_level || x_off < 0 || y_off < 0) {\n      throw new Error('gl-texture2d: Texture dimensions are out of bounds');\n    }\n    texSubImageArray(gl, x_off, y_off, mip_level, this.format, this.type, this._mipLevels, data);\n  } else {\n    throw new Error('gl-texture2d: Unsupported data type');\n  }\n};\nfunction isPacked(shape, stride) {\n  if (shape.length === 3) {\n    return stride[2] === 1 && stride[1] === shape[0] * shape[2] && stride[0] === shape[2];\n  }\n  return stride[0] === 1 && stride[1] === shape[0];\n}\nfunction texSubImageArray(gl, x_off, y_off, mip_level, cformat, ctype, mipLevels, array) {\n  var dtype = array.dtype;\n  var shape = array.shape.slice();\n  if (shape.length < 2 || shape.length > 3) {\n    throw new Error('gl-texture2d: Invalid ndarray, must be 2d or 3d');\n  }\n  var type = 0,\n    format = 0;\n  var packed = isPacked(shape, array.stride.slice());\n  if (dtype === 'float32') {\n    type = gl.FLOAT;\n  } else if (dtype === 'float64') {\n    type = gl.FLOAT;\n    packed = false;\n    dtype = 'float32';\n  } else if (dtype === 'uint8') {\n    type = gl.UNSIGNED_BYTE;\n  } else {\n    type = gl.UNSIGNED_BYTE;\n    packed = false;\n    dtype = 'uint8';\n  }\n  var channels = 1;\n  if (shape.length === 2) {\n    format = gl.LUMINANCE;\n    shape = [shape[0], shape[1], 1];\n    array = ndarray(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset);\n  } else if (shape.length === 3) {\n    if (shape[2] === 1) {\n      format = gl.ALPHA;\n    } else if (shape[2] === 2) {\n      format = gl.LUMINANCE_ALPHA;\n    } else if (shape[2] === 3) {\n      format = gl.RGB;\n    } else if (shape[2] === 4) {\n      format = gl.RGBA;\n    } else {\n      throw new Error('gl-texture2d: Invalid shape for pixel coords');\n    }\n    channels = shape[2];\n  } else {\n    throw new Error('gl-texture2d: Invalid shape for texture');\n  }\n  //For 1-channel textures allow conversion between formats\n  if ((format === gl.LUMINANCE || format === gl.ALPHA) && (cformat === gl.LUMINANCE || cformat === gl.ALPHA)) {\n    format = cformat;\n  }\n  if (format !== cformat) {\n    throw new Error('gl-texture2d: Incompatible texture format for setPixels');\n  }\n  var size = array.size;\n  var needsMip = mipLevels.indexOf(mip_level) < 0;\n  if (needsMip) {\n    mipLevels.push(mip_level);\n  }\n  if (type === ctype && packed) {\n    //Array data types are compatible, can directly copy into texture\n    if (array.offset === 0 && array.data.length === size) {\n      if (needsMip) {\n        gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, array.data);\n      } else {\n        gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, array.data);\n      }\n    } else {\n      if (needsMip) {\n        gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, array.data.subarray(array.offset, array.offset + size));\n      } else {\n        gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, array.data.subarray(array.offset, array.offset + size));\n      }\n    }\n  } else {\n    //Need to do type conversion to pack data into buffer\n    var pack_buffer;\n    if (ctype === gl.FLOAT) {\n      pack_buffer = pool.mallocFloat32(size);\n    } else {\n      pack_buffer = pool.mallocUint8(size);\n    }\n    var pack_view = ndarray(pack_buffer, shape, [shape[2], shape[2] * shape[0], 1]);\n    if (type === gl.FLOAT && ctype === gl.UNSIGNED_BYTE) {\n      convertFloatToUint8(pack_view, array);\n    } else {\n      ops.assign(pack_view, array);\n    }\n    if (needsMip) {\n      gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, pack_buffer.subarray(0, size));\n    } else {\n      gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, pack_buffer.subarray(0, size));\n    }\n    if (ctype === gl.FLOAT) {\n      pool.freeFloat32(pack_buffer);\n    } else {\n      pool.freeUint8(pack_buffer);\n    }\n  }\n}\nfunction initTexture(gl) {\n  var tex = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, tex);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  return tex;\n}\nfunction createTextureShape(gl, width, height, format, type) {\n  var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  if (width < 0 || width > maxTextureSize || height < 0 || height > maxTextureSize) {\n    throw new Error('gl-texture2d: Invalid texture shape');\n  }\n  if (type === gl.FLOAT && !gl.getExtension('OES_texture_float')) {\n    throw new Error('gl-texture2d: Floating point textures not supported on this platform');\n  }\n  var tex = initTexture(gl);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, type, null);\n  return new Texture2D(gl, tex, width, height, format, type);\n}\nfunction createTextureDOM(gl, directData, width, height, format, type) {\n  var tex = initTexture(gl);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, format, type, directData);\n  return new Texture2D(gl, tex, width, height, format, type);\n}\n\n//Creates a texture from an ndarray\nfunction createTextureArray(gl, array) {\n  var dtype = array.dtype;\n  var shape = array.shape.slice();\n  var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  if (shape[0] < 0 || shape[0] > maxSize || shape[1] < 0 || shape[1] > maxSize) {\n    throw new Error('gl-texture2d: Invalid texture size');\n  }\n  var packed = isPacked(shape, array.stride.slice());\n  var type = 0;\n  if (dtype === 'float32') {\n    type = gl.FLOAT;\n  } else if (dtype === 'float64') {\n    type = gl.FLOAT;\n    packed = false;\n    dtype = 'float32';\n  } else if (dtype === 'uint8') {\n    type = gl.UNSIGNED_BYTE;\n  } else {\n    type = gl.UNSIGNED_BYTE;\n    packed = false;\n    dtype = 'uint8';\n  }\n  var format = 0;\n  if (shape.length === 2) {\n    format = gl.LUMINANCE;\n    shape = [shape[0], shape[1], 1];\n    array = ndarray(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset);\n  } else if (shape.length === 3) {\n    if (shape[2] === 1) {\n      format = gl.ALPHA;\n    } else if (shape[2] === 2) {\n      format = gl.LUMINANCE_ALPHA;\n    } else if (shape[2] === 3) {\n      format = gl.RGB;\n    } else if (shape[2] === 4) {\n      format = gl.RGBA;\n    } else {\n      throw new Error('gl-texture2d: Invalid shape for pixel coords');\n    }\n  } else {\n    throw new Error('gl-texture2d: Invalid shape for texture');\n  }\n  if (type === gl.FLOAT && !gl.getExtension('OES_texture_float')) {\n    type = gl.UNSIGNED_BYTE;\n    packed = false;\n  }\n  var buffer, buf_store;\n  var size = array.size;\n  if (!packed) {\n    var stride = [shape[2], shape[2] * shape[0], 1];\n    buf_store = pool.malloc(size, dtype);\n    var buf_array = ndarray(buf_store, shape, stride, 0);\n    if ((dtype === 'float32' || dtype === 'float64') && type === gl.UNSIGNED_BYTE) {\n      convertFloatToUint8(buf_array, array);\n    } else {\n      ops.assign(buf_array, array);\n    }\n    buffer = buf_store.subarray(0, size);\n  } else if (array.offset === 0 && array.data.length === size) {\n    buffer = array.data;\n  } else {\n    buffer = array.data.subarray(array.offset, array.offset + size);\n  }\n  var tex = initTexture(gl);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, shape[0], shape[1], 0, format, type, buffer);\n  if (!packed) {\n    pool.free(buf_store);\n  }\n  return new Texture2D(gl, tex, shape[0], shape[1], format, type);\n}\nfunction createTexture2D(gl) {\n  if (arguments.length <= 1) {\n    throw new Error('gl-texture2d: Missing arguments for texture2d constructor');\n  }\n  if (!linearTypes) {\n    lazyInitLinearTypes(gl);\n  }\n  if (typeof arguments[1] === 'number') {\n    return createTextureShape(gl, arguments[1], arguments[2], arguments[3] || gl.RGBA, arguments[4] || gl.UNSIGNED_BYTE);\n  }\n  if (Array.isArray(arguments[1])) {\n    return createTextureShape(gl, arguments[1][0] | 0, arguments[1][1] | 0, arguments[2] || gl.RGBA, arguments[3] || gl.UNSIGNED_BYTE);\n  }\n  if (typeof arguments[1] === 'object') {\n    var obj = arguments[1];\n    var directData = acceptTextureDOM(obj) ? obj : obj.raw;\n    if (directData) {\n      return createTextureDOM(gl, directData, obj.width | 0, obj.height | 0, arguments[2] || gl.RGBA, arguments[3] || gl.UNSIGNED_BYTE);\n    } else if (obj.shape && obj.data && obj.stride) {\n      return createTextureArray(gl, obj);\n    }\n  }\n  throw new Error('gl-texture2d: Invalid arguments for texture2d constructor');\n}","map":{"version":3,"names":["ndarray","require","ops","pool","module","exports","createTexture2D","linearTypes","filterTypes","wrapTypes","lazyInitLinearTypes","gl","LINEAR","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","NEAREST","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","acceptTextureDOM","obj","HTMLCanvasElement","HTMLImageElement","HTMLVideoElement","ImageData","convertFloatToUint8","out","inp","muls","reshapeTexture","tex","w","h","maxSize","getParameter","MAX_TEXTURE_SIZE","Error","_shape","bind","texImage2D","TEXTURE_2D","format","type","_mipLevels","Texture2D","handle","width","height","_magFilter","_minFilter","_wrapS","_wrapT","_anisoSamples","parent","wrapVector","Object","defineProperties","get","set","v","wrapS","wrapT","_wrapVector","shapeVector","_shapeVector","proto","prototype","minFilter","FLOAT","indexOf","getExtension","texParameteri","TEXTURE_MIN_FILTER","magFilter","TEXTURE_MAG_FILTER","mipSamples","i","psamples","Math","max","ext","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_WRAP_S","TEXTURE_WRAP_T","wrap","Array","isArray","length","shape","x","unit","undefined","activeTexture","TEXTURE0","bindTexture","ACTIVE_TEXTURE","dispose","deleteTexture","generateMipmap","l","min","push","setPixels","data","x_off","y_off","mip_level","directData","raw","needsMip","texSubImage2D","stride","texSubImageArray","isPacked","cformat","ctype","mipLevels","array","dtype","slice","packed","UNSIGNED_BYTE","channels","LUMINANCE","offset","ALPHA","LUMINANCE_ALPHA","RGB","RGBA","size","subarray","pack_buffer","mallocFloat32","mallocUint8","pack_view","assign","freeFloat32","freeUint8","initTexture","createTexture","createTextureShape","maxTextureSize","createTextureDOM","createTextureArray","buffer","buf_store","malloc","buf_array","free","arguments"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/gl-texture2d/texture.js"],"sourcesContent":["'use strict'\n\nvar ndarray = require('ndarray')\nvar ops     = require('ndarray-ops')\nvar pool    = require('typedarray-pool')\n\nmodule.exports = createTexture2D\n\nvar linearTypes = null\nvar filterTypes = null\nvar wrapTypes   = null\n\nfunction lazyInitLinearTypes(gl) {\n  linearTypes = [\n    gl.LINEAR,\n    gl.NEAREST_MIPMAP_LINEAR,\n    gl.LINEAR_MIPMAP_NEAREST,\n    gl.LINEAR_MIPMAP_NEAREST\n  ]\n  filterTypes = [\n    gl.NEAREST,\n    gl.LINEAR,\n    gl.NEAREST_MIPMAP_NEAREST,\n    gl.NEAREST_MIPMAP_LINEAR,\n    gl.LINEAR_MIPMAP_NEAREST,\n    gl.LINEAR_MIPMAP_LINEAR\n  ]\n  wrapTypes = [\n    gl.REPEAT,\n    gl.CLAMP_TO_EDGE,\n    gl.MIRRORED_REPEAT\n  ]\n}\n\nfunction acceptTextureDOM (obj) {\n  return (\n    ('undefined' != typeof HTMLCanvasElement && obj instanceof HTMLCanvasElement) ||\n    ('undefined' != typeof HTMLImageElement && obj instanceof HTMLImageElement) ||\n    ('undefined' != typeof HTMLVideoElement && obj instanceof HTMLVideoElement) ||\n    ('undefined' != typeof ImageData && obj instanceof ImageData))\n}\n\nvar convertFloatToUint8 = function(out, inp) {\n  ops.muls(out, inp, 255.0)\n}\n\nfunction reshapeTexture(tex, w, h) {\n  var gl = tex.gl\n  var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)\n  if(w < 0 || w > maxSize || h < 0 || h > maxSize) {\n    throw new Error('gl-texture2d: Invalid texture size')\n  }\n  tex._shape = [w, h]\n  tex.bind()\n  gl.texImage2D(gl.TEXTURE_2D, 0, tex.format, w, h, 0, tex.format, tex.type, null)\n  tex._mipLevels = [0]\n  return tex\n}\n\nfunction Texture2D(gl, handle, width, height, format, type) {\n  this.gl = gl\n  this.handle = handle\n  this.format = format\n  this.type = type\n  this._shape = [width, height]\n  this._mipLevels = [0]\n  this._magFilter = gl.NEAREST\n  this._minFilter = gl.NEAREST\n  this._wrapS = gl.CLAMP_TO_EDGE\n  this._wrapT = gl.CLAMP_TO_EDGE\n  this._anisoSamples = 1\n\n  var parent = this\n  var wrapVector = [this._wrapS, this._wrapT]\n  Object.defineProperties(wrapVector, [\n    {\n      get: function() {\n        return parent._wrapS\n      },\n      set: function(v) {\n        return parent.wrapS = v\n      }\n    },\n    {\n      get: function() {\n        return parent._wrapT\n      },\n      set: function(v) {\n        return parent.wrapT = v\n      }\n    }\n  ])\n  this._wrapVector = wrapVector\n\n  var shapeVector = [this._shape[0], this._shape[1]]\n  Object.defineProperties(shapeVector, [\n    {\n      get: function() {\n        return parent._shape[0]\n      },\n      set: function(v) {\n        return parent.width = v\n      }\n    },\n    {\n      get: function() {\n        return parent._shape[1]\n      },\n      set: function(v) {\n        return parent.height = v\n      }\n    }\n  ])\n  this._shapeVector = shapeVector\n}\n\nvar proto = Texture2D.prototype\n\nObject.defineProperties(proto, {\n  minFilter: {\n    get: function() {\n      return this._minFilter\n    },\n    set: function(v) {\n      this.bind()\n      var gl = this.gl\n      if(this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {\n        if(!gl.getExtension('OES_texture_float_linear')) {\n          v = gl.NEAREST\n        }\n      }\n      if(filterTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown filter mode ' + v)\n      }\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, v)\n      return this._minFilter = v\n    }\n  },\n  magFilter: {\n    get: function() {\n      return this._magFilter\n    },\n    set: function(v) {\n      this.bind()\n      var gl = this.gl\n      if(this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {\n        if(!gl.getExtension('OES_texture_float_linear')) {\n          v = gl.NEAREST\n        }\n      }\n      if(filterTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown filter mode ' + v)\n      }\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, v)\n      return this._magFilter = v\n    }\n  },\n  mipSamples: {\n    get: function() {\n      return this._anisoSamples\n    },\n    set: function(i) {\n      var psamples = this._anisoSamples\n      this._anisoSamples = Math.max(i, 1)|0\n      if(psamples !== this._anisoSamples) {\n        var ext = this.gl.getExtension('EXT_texture_filter_anisotropic')\n        if(ext) {\n          this.gl.texParameterf(this.gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, this._anisoSamples)\n        }\n      }\n      return this._anisoSamples\n    }\n  },\n  wrapS: {\n    get: function() {\n      return this._wrapS\n    },\n    set: function(v) {\n      this.bind()\n      if(wrapTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown wrap mode ' + v)\n      }\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, v)\n      return this._wrapS = v\n    }\n  },\n  wrapT: {\n    get: function() {\n      return this._wrapT\n    },\n    set: function(v) {\n      this.bind()\n      if(wrapTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown wrap mode ' + v)\n      }\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, v)\n      return this._wrapT = v\n    }\n  },\n  wrap: {\n    get: function() {\n      return this._wrapVector\n    },\n    set: function(v) {\n      if(!Array.isArray(v)) {\n        v = [v,v]\n      }\n      if(v.length !== 2) {\n        throw new Error('gl-texture2d: Must specify wrap mode for rows and columns')\n      }\n      for(var i=0; i<2; ++i) {\n        if(wrapTypes.indexOf(v[i]) < 0) {\n          throw new Error('gl-texture2d: Unknown wrap mode ' + v)\n        }\n      }\n      this._wrapS = v[0]\n      this._wrapT = v[1]\n\n      var gl = this.gl\n      this.bind()\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this._wrapS)\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this._wrapT)\n\n      return v\n    }\n  },\n  shape: {\n    get: function() {\n      return this._shapeVector\n    },\n    set: function(x) {\n      if(!Array.isArray(x)) {\n        x = [x|0,x|0]\n      } else {\n        if(x.length !== 2) {\n          throw new Error('gl-texture2d: Invalid texture shape')\n        }\n      }\n      reshapeTexture(this, x[0]|0, x[1]|0)\n      return [x[0]|0, x[1]|0]\n    }\n  },\n  width: {\n    get: function() {\n      return this._shape[0]\n    },\n    set: function(w) {\n      w = w|0\n      reshapeTexture(this, w, this._shape[1])\n      return w\n    }\n  },\n  height: {\n    get: function() {\n      return this._shape[1]\n    },\n    set: function(h) {\n      h = h|0\n      reshapeTexture(this, this._shape[0], h)\n      return h\n    }\n  }\n})\n\nproto.bind = function(unit) {\n  var gl = this.gl\n  if(unit !== undefined) {\n    gl.activeTexture(gl.TEXTURE0 + (unit|0))\n  }\n  gl.bindTexture(gl.TEXTURE_2D, this.handle)\n  if(unit !== undefined) {\n    return (unit|0)\n  }\n  return gl.getParameter(gl.ACTIVE_TEXTURE) - gl.TEXTURE0\n}\n\nproto.dispose = function() {\n  this.gl.deleteTexture(this.handle)\n}\n\nproto.generateMipmap = function() {\n  this.bind()\n  this.gl.generateMipmap(this.gl.TEXTURE_2D)\n\n  //Update mip levels\n  var l = Math.min(this._shape[0], this._shape[1])\n  for(var i=0; l>0; ++i, l>>>=1) {\n    if(this._mipLevels.indexOf(i) < 0) {\n      this._mipLevels.push(i)\n    }\n  }\n}\n\nproto.setPixels = function(data, x_off, y_off, mip_level) {\n  var gl = this.gl\n  this.bind()\n  if(Array.isArray(x_off)) {\n    mip_level = y_off\n    y_off = x_off[1]|0\n    x_off = x_off[0]|0\n  } else {\n    x_off = x_off || 0\n    y_off = y_off || 0\n  }\n  mip_level = mip_level || 0\n  var directData = acceptTextureDOM(data) ? data : data.raw\n  if(directData) {\n    var needsMip = this._mipLevels.indexOf(mip_level) < 0\n    if(needsMip) {\n      gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, directData)\n      this._mipLevels.push(mip_level)\n    } else {\n      gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, this.format, this.type, directData)\n    }\n  } else if(data.shape && data.stride && data.data) {\n    if(data.shape.length < 2 ||\n       x_off + data.shape[1] > this._shape[1]>>>mip_level ||\n       y_off + data.shape[0] > this._shape[0]>>>mip_level ||\n       x_off < 0 ||\n       y_off < 0) {\n      throw new Error('gl-texture2d: Texture dimensions are out of bounds')\n    }\n    texSubImageArray(gl, x_off, y_off, mip_level, this.format, this.type, this._mipLevels, data)\n  } else {\n    throw new Error('gl-texture2d: Unsupported data type')\n  }\n}\n\n\nfunction isPacked(shape, stride) {\n  if(shape.length === 3) {\n    return  (stride[2] === 1) &&\n            (stride[1] === shape[0]*shape[2]) &&\n            (stride[0] === shape[2])\n  }\n  return  (stride[0] === 1) &&\n          (stride[1] === shape[0])\n}\n\nfunction texSubImageArray(gl, x_off, y_off, mip_level, cformat, ctype, mipLevels, array) {\n  var dtype = array.dtype\n  var shape = array.shape.slice()\n  if(shape.length < 2 || shape.length > 3) {\n    throw new Error('gl-texture2d: Invalid ndarray, must be 2d or 3d')\n  }\n  var type = 0, format = 0\n  var packed = isPacked(shape, array.stride.slice())\n  if(dtype === 'float32') {\n    type = gl.FLOAT\n  } else if(dtype === 'float64') {\n    type = gl.FLOAT\n    packed = false\n    dtype = 'float32'\n  } else if(dtype === 'uint8') {\n    type = gl.UNSIGNED_BYTE\n  } else {\n    type = gl.UNSIGNED_BYTE\n    packed = false\n    dtype = 'uint8'\n  }\n  var channels = 1\n  if(shape.length === 2) {\n    format = gl.LUMINANCE\n    shape = [shape[0], shape[1], 1]\n    array = ndarray(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset)\n  } else if(shape.length === 3) {\n    if(shape[2] === 1) {\n      format = gl.ALPHA\n    } else if(shape[2] === 2) {\n      format = gl.LUMINANCE_ALPHA\n    } else if(shape[2] === 3) {\n      format = gl.RGB\n    } else if(shape[2] === 4) {\n      format = gl.RGBA\n    } else {\n      throw new Error('gl-texture2d: Invalid shape for pixel coords')\n    }\n    channels = shape[2]\n  } else {\n    throw new Error('gl-texture2d: Invalid shape for texture')\n  }\n  //For 1-channel textures allow conversion between formats\n  if((format  === gl.LUMINANCE || format  === gl.ALPHA) &&\n     (cformat === gl.LUMINANCE || cformat === gl.ALPHA)) {\n    format = cformat\n  }\n  if(format !== cformat) {\n    throw new Error('gl-texture2d: Incompatible texture format for setPixels')\n  }\n  var size = array.size\n  var needsMip = mipLevels.indexOf(mip_level) < 0\n  if(needsMip) {\n    mipLevels.push(mip_level)\n  }\n  if(type === ctype && packed) {\n    //Array data types are compatible, can directly copy into texture\n    if(array.offset === 0 && array.data.length === size) {\n      if(needsMip) {\n        gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, array.data)\n      } else {\n        gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, array.data)\n      }\n    } else {\n      if(needsMip) {\n        gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, array.data.subarray(array.offset, array.offset+size))\n      } else {\n        gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, array.data.subarray(array.offset, array.offset+size))\n      }\n    }\n  } else {\n    //Need to do type conversion to pack data into buffer\n    var pack_buffer\n    if(ctype === gl.FLOAT) {\n      pack_buffer = pool.mallocFloat32(size)\n    } else {\n      pack_buffer = pool.mallocUint8(size)\n    }\n    var pack_view = ndarray(pack_buffer, shape, [shape[2], shape[2]*shape[0], 1])\n    if(type === gl.FLOAT && ctype === gl.UNSIGNED_BYTE) {\n      convertFloatToUint8(pack_view, array)\n    } else {\n      ops.assign(pack_view, array)\n    }\n    if(needsMip) {\n      gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, pack_buffer.subarray(0, size))\n    } else {\n      gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, pack_buffer.subarray(0, size))\n    }\n    if(ctype === gl.FLOAT) {\n      pool.freeFloat32(pack_buffer)\n    } else {\n      pool.freeUint8(pack_buffer)\n    }\n  }\n}\n\nfunction initTexture(gl) {\n  var tex = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, tex)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  return tex\n}\n\nfunction createTextureShape(gl, width, height, format, type) {\n  var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)\n  if(width < 0 || width > maxTextureSize || height < 0 || height  > maxTextureSize) {\n    throw new Error('gl-texture2d: Invalid texture shape')\n  }\n  if(type === gl.FLOAT && !gl.getExtension('OES_texture_float')) {\n    throw new Error('gl-texture2d: Floating point textures not supported on this platform')\n  }\n  var tex = initTexture(gl)\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, type, null)\n  return new Texture2D(gl, tex, width, height, format, type)\n}\n\nfunction createTextureDOM(gl, directData, width, height, format, type) {\n  var tex = initTexture(gl)\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, format, type, directData)\n  return new Texture2D(gl, tex, width, height, format, type)\n}\n\n//Creates a texture from an ndarray\nfunction createTextureArray(gl, array) {\n  var dtype = array.dtype\n  var shape = array.shape.slice()\n  var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)\n  if(shape[0] < 0 || shape[0] > maxSize || shape[1] < 0 || shape[1] > maxSize) {\n    throw new Error('gl-texture2d: Invalid texture size')\n  }\n  var packed = isPacked(shape, array.stride.slice())\n  var type = 0\n  if(dtype === 'float32') {\n    type = gl.FLOAT\n  } else if(dtype === 'float64') {\n    type = gl.FLOAT\n    packed = false\n    dtype = 'float32'\n  } else if(dtype === 'uint8') {\n    type = gl.UNSIGNED_BYTE\n  } else {\n    type = gl.UNSIGNED_BYTE\n    packed = false\n    dtype = 'uint8'\n  }\n  var format = 0\n  if(shape.length === 2) {\n    format = gl.LUMINANCE\n    shape = [shape[0], shape[1], 1]\n    array = ndarray(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset)\n  } else if(shape.length === 3) {\n    if(shape[2] === 1) {\n      format = gl.ALPHA\n    } else if(shape[2] === 2) {\n      format = gl.LUMINANCE_ALPHA\n    } else if(shape[2] === 3) {\n      format = gl.RGB\n    } else if(shape[2] === 4) {\n      format = gl.RGBA\n    } else {\n      throw new Error('gl-texture2d: Invalid shape for pixel coords')\n    }\n  } else {\n    throw new Error('gl-texture2d: Invalid shape for texture')\n  }\n  if(type === gl.FLOAT && !gl.getExtension('OES_texture_float')) {\n    type = gl.UNSIGNED_BYTE\n    packed = false\n  }\n  var buffer, buf_store\n  var size = array.size\n  if(!packed) {\n    var stride = [shape[2], shape[2]*shape[0], 1]\n    buf_store = pool.malloc(size, dtype)\n    var buf_array = ndarray(buf_store, shape, stride, 0)\n    if((dtype === 'float32' || dtype === 'float64') && type === gl.UNSIGNED_BYTE) {\n      convertFloatToUint8(buf_array, array)\n    } else {\n      ops.assign(buf_array, array)\n    }\n    buffer = buf_store.subarray(0, size)\n  } else if (array.offset === 0 && array.data.length === size) {\n    buffer = array.data\n  } else {\n    buffer = array.data.subarray(array.offset, array.offset + size)\n  }\n  var tex = initTexture(gl)\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, shape[0], shape[1], 0, format, type, buffer)\n  if(!packed) {\n    pool.free(buf_store)\n  }\n  return new Texture2D(gl, tex, shape[0], shape[1], format, type)\n}\n\nfunction createTexture2D(gl) {\n  if(arguments.length <= 1) {\n    throw new Error('gl-texture2d: Missing arguments for texture2d constructor')\n  }\n  if(!linearTypes) {\n    lazyInitLinearTypes(gl)\n  }\n  if(typeof arguments[1] === 'number') {\n    return createTextureShape(gl, arguments[1], arguments[2], arguments[3]||gl.RGBA, arguments[4]||gl.UNSIGNED_BYTE)\n  }\n  if(Array.isArray(arguments[1])) {\n    return createTextureShape(gl, arguments[1][0]|0, arguments[1][1]|0, arguments[2]||gl.RGBA, arguments[3]||gl.UNSIGNED_BYTE)\n  }\n  if(typeof arguments[1] === 'object') {\n    var obj = arguments[1]\n    var directData = acceptTextureDOM(obj) ? obj : obj.raw\n    if (directData) {\n      return createTextureDOM(gl, directData, obj.width|0, obj.height|0, arguments[2]||gl.RGBA, arguments[3]||gl.UNSIGNED_BYTE)\n    } else if(obj.shape && obj.data && obj.stride) {\n      return createTextureArray(gl, obj)\n    }\n  }\n  throw new Error('gl-texture2d: Invalid arguments for texture2d constructor')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
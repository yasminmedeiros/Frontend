{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar isNumeric = require('fast-isnumeric');\nvar Registry = require('../registry');\nvar PlotSchema = require('../plot_api/plot_schema');\nvar Template = require('../plot_api/plot_template');\nvar Lib = require('../lib');\nvar Color = require('../components/color');\nvar BADNUM = require('../constants/numerical').BADNUM;\nvar axisIDs = require('../plots/cartesian/axis_ids');\nvar animationAttrs = require('./animation_attributes');\nvar frameAttrs = require('./frame_attributes');\nvar relinkPrivateKeys = Lib.relinkPrivateKeys;\nvar _ = Lib._;\nvar plots = module.exports = {};\n\n// Expose registry methods on Plots for backward-compatibility\nLib.extendFlat(plots, Registry);\nplots.attributes = require('./attributes');\nplots.attributes.type.values = plots.allTypes;\nplots.fontAttrs = require('./font_attributes');\nplots.layoutAttributes = require('./layout_attributes');\n\n// TODO make this a plot attribute?\nplots.fontWeight = 'normal';\nvar transformsRegistry = plots.transformsRegistry;\nvar commandModule = require('./command');\nplots.executeAPICommand = commandModule.executeAPICommand;\nplots.computeAPICommandBindings = commandModule.computeAPICommandBindings;\nplots.manageCommandObserver = commandModule.manageCommandObserver;\nplots.hasSimpleAPICommandBindings = commandModule.hasSimpleAPICommandBindings;\n\n// in some cases the browser doesn't seem to know how big\n// the text is at first, so it needs to draw it,\n// then wait a little, then draw it again\nplots.redrawText = function (gd) {\n  gd = Lib.getGraphDiv(gd);\n\n  // do not work if polar is present\n  if (gd.data && gd.data[0] && gd.data[0].r) return;\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      Registry.getComponentMethod('annotations', 'draw')(gd);\n      Registry.getComponentMethod('legend', 'draw')(gd);\n      (gd.calcdata || []).forEach(function (d) {\n        if (d[0] && d[0].t && d[0].t.cb) d[0].t.cb();\n      });\n      resolve(plots.previousPromises(gd));\n    }, 300);\n  });\n};\n\n// resize plot about the container size\nplots.resize = function (gd) {\n  gd = Lib.getGraphDiv(gd);\n  return new Promise(function (resolve, reject) {\n    function isHidden(gd) {\n      var display = window.getComputedStyle(gd).display;\n      return !display || display === 'none';\n    }\n    if (!gd || isHidden(gd)) {\n      reject(new Error('Resize must be passed a displayed plot div element.'));\n    }\n    if (gd._redrawTimer) clearTimeout(gd._redrawTimer);\n    gd._redrawTimer = setTimeout(function () {\n      // return if there is nothing to resize or is hidden\n      if (!gd.layout || gd.layout.width && gd.layout.height || isHidden(gd)) {\n        resolve(gd);\n        return;\n      }\n      delete gd.layout.width;\n      delete gd.layout.height;\n\n      // autosizing doesn't count as a change that needs saving\n      var oldchanged = gd.changed;\n\n      // nor should it be included in the undo queue\n      gd.autoplay = true;\n      Registry.call('relayout', gd, {\n        autosize: true\n      }).then(function () {\n        gd.changed = oldchanged;\n        resolve(gd);\n      });\n    }, 100);\n  });\n};\n\n// for use in Lib.syncOrAsync, check if there are any\n// pending promises in this plot and wait for them\nplots.previousPromises = function (gd) {\n  if ((gd._promises || []).length) {\n    return Promise.all(gd._promises).then(function () {\n      gd._promises = [];\n    });\n  }\n};\n\n/**\n * Adds the 'Edit chart' link.\n * Note that now Plotly.plot() calls this so it can regenerate whenever it replots\n *\n * Add source links to your graph inside the 'showSources' config argument.\n */\nplots.addLinks = function (gd) {\n  // Do not do anything if showLink and showSources are not set to true in config\n  if (!gd._context.showLink && !gd._context.showSources) return;\n  var fullLayout = gd._fullLayout;\n  var linkContainer = Lib.ensureSingle(fullLayout._paper, 'text', 'js-plot-link-container', function (s) {\n    s.style({\n      'font-family': '\"Open Sans\", Arial, sans-serif',\n      'font-size': '12px',\n      'fill': Color.defaultLine,\n      'pointer-events': 'all'\n    }).each(function () {\n      var links = d3.select(this);\n      links.append('tspan').classed('js-link-to-tool', true);\n      links.append('tspan').classed('js-link-spacer', true);\n      links.append('tspan').classed('js-sourcelinks', true);\n    });\n  });\n\n  // The text node inside svg\n  var text = linkContainer.node();\n  var attrs = {\n    y: fullLayout._paper.attr('height') - 9\n  };\n\n  // If text's width is bigger than the layout\n  // Check that text is a child node or document.body\n  // because otherwise IE/Edge might throw an exception\n  // when calling getComputedTextLength().\n  // Apparently offsetParent is null for invisibles.\n  if (document.body.contains(text) && text.getComputedTextLength() >= fullLayout.width - 20) {\n    // Align the text at the left\n    attrs['text-anchor'] = 'start';\n    attrs.x = 5;\n  } else {\n    // Align the text at the right\n    attrs['text-anchor'] = 'end';\n    attrs.x = fullLayout._paper.attr('width') - 7;\n  }\n  linkContainer.attr(attrs);\n  var toolspan = linkContainer.select('.js-link-to-tool');\n  var spacespan = linkContainer.select('.js-link-spacer');\n  var sourcespan = linkContainer.select('.js-sourcelinks');\n  if (gd._context.showSources) gd._context.showSources(gd);\n\n  // 'view in plotly' link for embedded plots\n  if (gd._context.showLink) positionPlayWithData(gd, toolspan);\n\n  // separator if we have both sources and tool link\n  spacespan.text(toolspan.text() && sourcespan.text() ? ' - ' : '');\n};\n\n// note that now this function is only adding the brand in\n// iframes and 3rd-party apps\nfunction positionPlayWithData(gd, container) {\n  container.text('');\n  var link = container.append('a').attr({\n    'xlink:xlink:href': '#',\n    'class': 'link--impt link--embedview',\n    'font-weight': 'bold'\n  }).text(gd._context.linkText + ' ' + String.fromCharCode(187));\n  if (gd._context.sendData) {\n    link.on('click', function () {\n      plots.sendDataToCloud(gd);\n    });\n  } else {\n    var path = window.location.pathname.split('/');\n    var query = window.location.search;\n    link.attr({\n      'xlink:xlink:show': 'new',\n      'xlink:xlink:href': '/' + path[2].split('.')[0] + '/' + path[1] + query\n    });\n  }\n}\nplots.sendDataToCloud = function (gd) {\n  gd.emit('plotly_beforeexport');\n  var baseUrl = (window.PLOTLYENV || {}).BASE_URL || gd._context.plotlyServerURL;\n  var hiddenformDiv = d3.select(gd).append('div').attr('id', 'hiddenform').style('display', 'none');\n  var hiddenform = hiddenformDiv.append('form').attr({\n    action: baseUrl + '/external',\n    method: 'post',\n    target: '_blank'\n  });\n  var hiddenformInput = hiddenform.append('input').attr({\n    type: 'text',\n    name: 'data'\n  });\n  hiddenformInput.node().value = plots.graphJson(gd, false, 'keepdata');\n  hiddenform.node().submit();\n  hiddenformDiv.remove();\n  gd.emit('plotly_afterexport');\n  return false;\n};\nvar d3FormatKeys = ['days', 'shortDays', 'months', 'shortMonths', 'periods', 'dateTime', 'date', 'time', 'decimal', 'thousands', 'grouping', 'currency'];\nvar extraFormatKeys = ['year', 'month', 'dayMonth', 'dayMonthYear'];\n\n/*\n * Fill in default values\n * @param {DOM element} gd\n * @param {object} opts\n * @param {boolean} opts.skipUpdateCalc: normally if the existing gd.calcdata looks\n *   compatible with the new gd._fullData we finish by linking the new _fullData traces\n *   to the old gd.calcdata, so it's correctly set if we're not going to recalc. But also,\n *   if there are calcTransforms on the trace, we first remap data arrays from the old full\n *   trace into the new one. Use skipUpdateCalc to defer this (needed by Plotly.react)\n *\n * gd.data, gd.layout:\n *   are precisely what the user specified (except as modified by cleanData/cleanLayout),\n *   these fields shouldn't be modified (except for filling in some auto values)\n *   nor used directly after the supply defaults step.\n *\n * gd._fullData, gd._fullLayout:\n *   are complete descriptions of how to draw the plot,\n *   use these fields in all required computations.\n *\n * gd._fullLayout._modules\n *   is a list of all the trace modules required to draw the plot.\n *\n * gd._fullLayout._visibleModules\n *   subset of _modules, a list of modules corresponding to visible:true traces.\n *\n * gd._fullLayout._basePlotModules\n *   is a list of all the plot modules required to draw the plot.\n *\n * gd._fullLayout._transformModules\n *   is a list of all the transform modules invoked.\n *\n */\nplots.supplyDefaults = function (gd, opts) {\n  var skipUpdateCalc = opts && opts.skipUpdateCalc;\n  var oldFullLayout = gd._fullLayout || {};\n  if (oldFullLayout._skipDefaults) {\n    delete oldFullLayout._skipDefaults;\n    return;\n  }\n  var newFullLayout = gd._fullLayout = {};\n  var newLayout = gd.layout || {};\n  var oldFullData = gd._fullData || [];\n  var newFullData = gd._fullData = [];\n  var newData = gd.data || [];\n  var oldCalcdata = gd.calcdata || [];\n  var context = gd._context || {};\n  var i;\n\n  // Create all the storage space for frames, but only if doesn't already exist\n  if (!gd._transitionData) plots.createTransitionData(gd);\n\n  // So we only need to do this once (and since we have gd here)\n  // get the translated placeholder titles.\n  // These ones get used as default values so need to be known at supplyDefaults\n  // others keep their blank defaults but render the placeholder as desired later\n  // TODO: make these work the same way, only inserting the placeholder text at draw time?\n  // The challenge is that this has slightly different behavior right now in editable mode:\n  // using the placeholder as default makes this text permanently (but lightly) visible,\n  // but explicit '' for these titles gives you a placeholder that's hidden until you mouse\n  // over it - so you're not distracted by it if you really don't want a title, but if you do\n  // and you're new to plotly you may not be able to find it.\n  // When editable=false the two behave the same, no title is drawn.\n  newFullLayout._dfltTitle = {\n    plot: _(gd, 'Click to enter Plot title'),\n    x: _(gd, 'Click to enter X axis title'),\n    y: _(gd, 'Click to enter Y axis title'),\n    colorbar: _(gd, 'Click to enter Colorscale title'),\n    annotation: _(gd, 'new text')\n  };\n  newFullLayout._traceWord = _(gd, 'trace');\n  var formatObj = getFormatObj(gd, d3FormatKeys);\n\n  // stash the token from context so mapbox subplots can use it as default\n  newFullLayout._mapboxAccessToken = context.mapboxAccessToken;\n\n  // first fill in what we can of layout without looking at data\n  // because fullData needs a few things from layout\n  if (oldFullLayout._initialAutoSizeIsDone) {\n    // coerce the updated layout while preserving width and height\n    var oldWidth = oldFullLayout.width;\n    var oldHeight = oldFullLayout.height;\n    plots.supplyLayoutGlobalDefaults(newLayout, newFullLayout, formatObj);\n    if (!newLayout.width) newFullLayout.width = oldWidth;\n    if (!newLayout.height) newFullLayout.height = oldHeight;\n    plots.sanitizeMargins(newFullLayout);\n  } else {\n    // coerce the updated layout and autosize if needed\n    plots.supplyLayoutGlobalDefaults(newLayout, newFullLayout, formatObj);\n    var missingWidthOrHeight = !newLayout.width || !newLayout.height;\n    var autosize = newFullLayout.autosize;\n    var autosizable = context.autosizable;\n    var initialAutoSize = missingWidthOrHeight && (autosize || autosizable);\n    if (initialAutoSize) plots.plotAutoSize(gd, newLayout, newFullLayout);else if (missingWidthOrHeight) plots.sanitizeMargins(newFullLayout);\n\n    // for backwards-compatibility with Plotly v1.x.x\n    if (!autosize && missingWidthOrHeight) {\n      newLayout.width = newFullLayout.width;\n      newLayout.height = newFullLayout.height;\n    }\n  }\n  newFullLayout._d3locale = getFormatter(formatObj, newFullLayout.separators);\n  newFullLayout._extraFormat = getFormatObj(gd, extraFormatKeys);\n  newFullLayout._initialAutoSizeIsDone = true;\n\n  // keep track of how many traces are inputted\n  newFullLayout._dataLength = newData.length;\n\n  // clear the lists of trace and baseplot modules, and subplots\n  newFullLayout._modules = [];\n  newFullLayout._visibleModules = [];\n  newFullLayout._basePlotModules = [];\n  var subplots = newFullLayout._subplots = emptySubplotLists();\n\n  // initialize axis and subplot hash objects for splom-generated grids\n  var splomAxes = newFullLayout._splomAxes = {\n    x: {},\n    y: {}\n  };\n  var splomSubplots = newFullLayout._splomSubplots = {};\n  // initialize splom grid defaults\n  newFullLayout._splomGridDflt = {};\n\n  // for stacked area traces to share config across traces\n  newFullLayout._scatterStackOpts = {};\n  // for the first scatter trace on each subplot (so it knows tonext->tozero)\n  newFullLayout._firstScatter = {};\n\n  // for traces to request a default rangeslider on their x axes\n  // eg set `_requestRangeslider.x2 = true` for xaxis2\n  newFullLayout._requestRangeslider = {};\n\n  // pull uids from old data to use as new defaults\n  newFullLayout._traceUids = getTraceUids(oldFullData, newData);\n\n  // then do the data\n  newFullLayout._globalTransforms = (gd._context || {}).globalTransforms;\n  plots.supplyDataDefaults(newData, newFullData, newLayout, newFullLayout);\n\n  // redo grid size defaults with info about splom x/y axes,\n  // and fill in generated cartesian axes and subplots\n  var splomXa = Object.keys(splomAxes.x);\n  var splomYa = Object.keys(splomAxes.y);\n  if (splomXa.length > 1 && splomYa.length > 1) {\n    Registry.getComponentMethod('grid', 'sizeDefaults')(newLayout, newFullLayout);\n    for (i = 0; i < splomXa.length; i++) {\n      Lib.pushUnique(subplots.xaxis, splomXa[i]);\n    }\n    for (i = 0; i < splomYa.length; i++) {\n      Lib.pushUnique(subplots.yaxis, splomYa[i]);\n    }\n    for (var k in splomSubplots) {\n      Lib.pushUnique(subplots.cartesian, k);\n    }\n  }\n\n  // attach helper method to check whether a plot type is present on graph\n  newFullLayout._has = plots._hasPlotType.bind(newFullLayout);\n  if (oldFullData.length === newFullData.length) {\n    for (i = 0; i < newFullData.length; i++) {\n      relinkPrivateKeys(newFullData[i], oldFullData[i]);\n    }\n  }\n\n  // finally, fill in the pieces of layout that may need to look at data\n  plots.supplyLayoutModuleDefaults(newLayout, newFullLayout, newFullData, gd._transitionData);\n\n  // Special cases that introduce interactions between traces.\n  // This is after relinkPrivateKeys so we can use those in crossTraceDefaults\n  // and after layout module defaults, so we can use eg barmode\n  var _modules = newFullLayout._visibleModules;\n  var crossTraceDefaultsFuncs = [];\n  for (i = 0; i < _modules.length; i++) {\n    var funci = _modules[i].crossTraceDefaults;\n    // some trace types share crossTraceDefaults (ie histogram2d, histogram2dcontour)\n    if (funci) Lib.pushUnique(crossTraceDefaultsFuncs, funci);\n  }\n  for (i = 0; i < crossTraceDefaultsFuncs.length; i++) {\n    crossTraceDefaultsFuncs[i](newFullData, newFullLayout);\n  }\n  Registry.getComponentMethod('colorscale', 'crossTraceDefaults')(newFullData, newFullLayout);\n\n  // turn on flag to optimize large splom-only graphs\n  // mostly by omitting SVG layers during Cartesian.drawFramework\n  newFullLayout._hasOnlyLargeSploms = newFullLayout._basePlotModules.length === 1 && newFullLayout._basePlotModules[0].name === 'splom' && splomXa.length > 15 && splomYa.length > 15 && newFullLayout.shapes.length === 0 && newFullLayout.images.length === 0;\n\n  // TODO remove in v2.0.0\n  // add has-plot-type refs to fullLayout for backward compatibility\n  newFullLayout._hasCartesian = newFullLayout._has('cartesian');\n  newFullLayout._hasGeo = newFullLayout._has('geo');\n  newFullLayout._hasGL3D = newFullLayout._has('gl3d');\n  newFullLayout._hasGL2D = newFullLayout._has('gl2d');\n  newFullLayout._hasTernary = newFullLayout._has('ternary');\n  newFullLayout._hasPie = newFullLayout._has('pie');\n\n  // relink / initialize subplot axis objects\n  plots.linkSubplots(newFullData, newFullLayout, oldFullData, oldFullLayout);\n\n  // clean subplots and other artifacts from previous plot calls\n  plots.cleanPlot(newFullData, newFullLayout, oldFullData, oldFullLayout);\n\n  // relink functions and _ attributes to promote consistency between plots\n  relinkPrivateKeys(newFullLayout, oldFullLayout);\n\n  // For persisting GUI-driven changes in layout\n  // _preGUI and _tracePreGUI were already copied over in relinkPrivateKeys\n  if (!newFullLayout._preGUI) newFullLayout._preGUI = {};\n  // track trace GUI changes by uid rather than by trace index\n  if (!newFullLayout._tracePreGUI) newFullLayout._tracePreGUI = {};\n  var tracePreGUI = newFullLayout._tracePreGUI;\n  var uids = {};\n  var uid;\n  for (uid in tracePreGUI) {\n    uids[uid] = 'old';\n  }\n  for (i = 0; i < newFullData.length; i++) {\n    uid = newFullData[i]._fullInput.uid;\n    if (!uids[uid]) tracePreGUI[uid] = {};\n    uids[uid] = 'new';\n  }\n  for (uid in uids) {\n    if (uids[uid] === 'old') delete tracePreGUI[uid];\n  }\n\n  // set up containers for margin calculations\n  initMargins(newFullLayout);\n\n  // collect and do some initial calculations for rangesliders\n  Registry.getComponentMethod('rangeslider', 'makeData')(newFullLayout);\n\n  // update object references in calcdata\n  if (!skipUpdateCalc && oldCalcdata.length === newFullData.length) {\n    plots.supplyDefaultsUpdateCalc(oldCalcdata, newFullData);\n  }\n};\nplots.supplyDefaultsUpdateCalc = function (oldCalcdata, newFullData) {\n  for (var i = 0; i < newFullData.length; i++) {\n    var newTrace = newFullData[i];\n    var cd0 = (oldCalcdata[i] || [])[0];\n    if (cd0 && cd0.trace) {\n      var oldTrace = cd0.trace;\n      if (oldTrace._hasCalcTransform) {\n        var arrayAttrs = oldTrace._arrayAttrs;\n        var j, astr, oldArrayVal;\n        for (j = 0; j < arrayAttrs.length; j++) {\n          astr = arrayAttrs[j];\n          oldArrayVal = Lib.nestedProperty(oldTrace, astr).get().slice();\n          Lib.nestedProperty(newTrace, astr).set(oldArrayVal);\n        }\n      }\n      cd0.trace = newTrace;\n    }\n  }\n};\n\n/**\n * Create a list of uid strings satisfying (in this order of importance):\n * 1. all unique, all strings\n * 2. matches input uids if provided\n * 3. matches previous data uids\n */\nfunction getTraceUids(oldFullData, newData) {\n  var len = newData.length;\n  var oldFullInput = [];\n  var i, prevFullInput;\n  for (i = 0; i < oldFullData.length; i++) {\n    var thisFullInput = oldFullData[i]._fullInput;\n    if (thisFullInput !== prevFullInput) oldFullInput.push(thisFullInput);\n    prevFullInput = thisFullInput;\n  }\n  var oldLen = oldFullInput.length;\n  var out = new Array(len);\n  var seenUids = {};\n  function setUid(uid, i) {\n    out[i] = uid;\n    seenUids[uid] = 1;\n  }\n  function tryUid(uid, i) {\n    if (uid && typeof uid === 'string' && !seenUids[uid]) {\n      setUid(uid, i);\n      return true;\n    }\n  }\n  for (i = 0; i < len; i++) {\n    var newUid = newData[i].uid;\n    if (typeof newUid === 'number') newUid = String(newUid);\n    if (tryUid(newUid, i)) continue;\n    if (i < oldLen && tryUid(oldFullInput[i].uid, i)) continue;\n    setUid(Lib.randstr(seenUids), i);\n  }\n  return out;\n}\n\n/**\n * Make a container for collecting subplots we need to display.\n *\n * Finds all subplot types we need to enumerate once and caches it,\n * but makes a new output object each time.\n * Single-trace subplots (which have no `id`) such as pie, table, etc\n * do not need to be collected because we just draw all visible traces.\n */\nfunction emptySubplotLists() {\n  var collectableSubplotTypes = Registry.collectableSubplotTypes;\n  var out = {};\n  var i, j;\n  if (!collectableSubplotTypes) {\n    collectableSubplotTypes = [];\n    var subplotsRegistry = Registry.subplotsRegistry;\n    for (var subplotType in subplotsRegistry) {\n      var subplotModule = subplotsRegistry[subplotType];\n      var subplotAttr = subplotModule.attr;\n      if (subplotAttr) {\n        collectableSubplotTypes.push(subplotType);\n\n        // special case, currently just for cartesian:\n        // we need to enumerate axes, not just subplots\n        if (Array.isArray(subplotAttr)) {\n          for (j = 0; j < subplotAttr.length; j++) {\n            Lib.pushUnique(collectableSubplotTypes, subplotAttr[j]);\n          }\n        }\n      }\n    }\n  }\n  for (i = 0; i < collectableSubplotTypes.length; i++) {\n    out[collectableSubplotTypes[i]] = [];\n  }\n  return out;\n}\n\n/**\n * getFormatObj: use _context to get the format object from locale.\n * Used to get d3.locale argument object and extraFormat argument object\n *\n * Regarding d3.locale argument :\n * decimal and thousands can be overridden later by layout.separators\n * grouping and currency are not presently used by our automatic number\n * formatting system but can be used by custom formats.\n *\n * @returns {object} d3.locale format object\n */\nfunction getFormatObj(gd, formatKeys) {\n  var locale = gd._context.locale;\n  if (!locale) locale === 'en-US';\n  var formatDone = false;\n  var formatObj = {};\n  function includeFormat(newFormat) {\n    var formatFinished = true;\n    for (var i = 0; i < formatKeys.length; i++) {\n      var formatKey = formatKeys[i];\n      if (!formatObj[formatKey]) {\n        if (newFormat[formatKey]) {\n          formatObj[formatKey] = newFormat[formatKey];\n        } else formatFinished = false;\n      }\n    }\n    if (formatFinished) formatDone = true;\n  }\n\n  // same as localize, look for format parts in each format spec in the chain\n  for (var i = 0; i < 2; i++) {\n    var locales = gd._context.locales;\n    for (var j = 0; j < 2; j++) {\n      var formatj = (locales[locale] || {}).format;\n      if (formatj) {\n        includeFormat(formatj);\n        if (formatDone) break;\n      }\n      locales = Registry.localeRegistry;\n    }\n    var baseLocale = locale.split('-')[0];\n    if (formatDone || baseLocale === locale) break;\n    locale = baseLocale;\n  }\n\n  // lastly pick out defaults from english (non-US, as DMY is so much more common)\n  if (!formatDone) includeFormat(Registry.localeRegistry.en.format);\n  return formatObj;\n}\n\n/**\n * getFormatter: combine the final separators with the locale formatting object\n * we pulled earlier to generate number and time formatters\n * TODO: remove separators in v2, only use locale, so we don't need this step?\n *\n * @param {object} formatObj: d3.locale format object\n * @param {string} separators: length-2 string to override decimal and thousands\n *   separators in number formatting\n *\n * @returns {object} {numberFormat, timeFormat} d3 formatter factory functions\n *   for numbers and time\n */\nfunction getFormatter(formatObj, separators) {\n  formatObj.decimal = separators.charAt(0);\n  formatObj.thousands = separators.charAt(1);\n  return d3.locale(formatObj);\n}\n\n// Create storage for all of the data related to frames and transitions:\nplots.createTransitionData = function (gd) {\n  // Set up the default keyframe if it doesn't exist:\n  if (!gd._transitionData) {\n    gd._transitionData = {};\n  }\n  if (!gd._transitionData._frames) {\n    gd._transitionData._frames = [];\n  }\n  if (!gd._transitionData._frameHash) {\n    gd._transitionData._frameHash = {};\n  }\n  if (!gd._transitionData._counter) {\n    gd._transitionData._counter = 0;\n  }\n  if (!gd._transitionData._interruptCallbacks) {\n    gd._transitionData._interruptCallbacks = [];\n  }\n};\n\n// helper function to be bound to fullLayout to check\n// whether a certain plot type is present on plot\n// or trace has a category\nplots._hasPlotType = function (category) {\n  var i;\n\n  // check base plot modules\n  var basePlotModules = this._basePlotModules || [];\n  for (i = 0; i < basePlotModules.length; i++) {\n    if (basePlotModules[i].name === category) return true;\n  }\n\n  // check trace modules (including non-visible:true)\n  var modules = this._modules || [];\n  for (i = 0; i < modules.length; i++) {\n    var name = modules[i].name;\n    if (name === category) return true;\n    // N.B. this is modules[i] along with 'categories' as a hash object\n    var _module = Registry.modules[name];\n    if (_module && _module.categories[category]) return true;\n  }\n  return false;\n};\nplots.cleanPlot = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var i, j;\n  var basePlotModules = oldFullLayout._basePlotModules || [];\n  for (i = 0; i < basePlotModules.length; i++) {\n    var _module = basePlotModules[i];\n    if (_module.clean) {\n      _module.clean(newFullData, newFullLayout, oldFullData, oldFullLayout);\n    }\n  }\n  var hadGl = oldFullLayout._has && oldFullLayout._has('gl');\n  var hasGl = newFullLayout._has && newFullLayout._has('gl');\n  if (hadGl && !hasGl) {\n    if (oldFullLayout._glcontainer !== undefined) {\n      oldFullLayout._glcontainer.selectAll('.gl-canvas').remove();\n      oldFullLayout._glcontainer.selectAll('.no-webgl').remove();\n      oldFullLayout._glcanvas = null;\n    }\n  }\n  var hasInfoLayer = !!oldFullLayout._infolayer;\n  oldLoop: for (i = 0; i < oldFullData.length; i++) {\n    var oldTrace = oldFullData[i];\n    var oldUid = oldTrace.uid;\n    for (j = 0; j < newFullData.length; j++) {\n      var newTrace = newFullData[j];\n      if (oldUid === newTrace.uid) continue oldLoop;\n    }\n\n    // clean old colorbars\n    if (hasInfoLayer) {\n      oldFullLayout._infolayer.select('.cb' + oldUid).remove();\n    }\n  }\n  if (oldFullLayout._zoomlayer) {\n    oldFullLayout._zoomlayer.selectAll('.select-outline').remove();\n  }\n};\nplots.linkSubplots = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var i, j;\n  var oldSubplots = oldFullLayout._plots || {};\n  var newSubplots = newFullLayout._plots = {};\n  var newSubplotList = newFullLayout._subplots;\n  var mockGd = {\n    _fullData: newFullData,\n    _fullLayout: newFullLayout\n  };\n  var ids = newSubplotList.cartesian.concat(newSubplotList.gl2d || []);\n  for (i = 0; i < ids.length; i++) {\n    var id = ids[i];\n    var oldSubplot = oldSubplots[id];\n    var xaxis = axisIDs.getFromId(mockGd, id, 'x');\n    var yaxis = axisIDs.getFromId(mockGd, id, 'y');\n    var plotinfo;\n\n    // link or create subplot object\n    if (oldSubplot) {\n      plotinfo = newSubplots[id] = oldSubplot;\n    } else {\n      plotinfo = newSubplots[id] = {};\n      plotinfo.id = id;\n    }\n\n    // add these axis ids to each others' subplot lists\n    xaxis._counterAxes.push(yaxis._id);\n    yaxis._counterAxes.push(xaxis._id);\n    xaxis._subplotsWith.push(id);\n    yaxis._subplotsWith.push(id);\n\n    // update x and y axis layout object refs\n    plotinfo.xaxis = xaxis;\n    plotinfo.yaxis = yaxis;\n\n    // By default, we clip at the subplot level,\n    // but if one trace on a given subplot has *cliponaxis* set to false,\n    // we need to clip at the trace module layer level;\n    // find this out here, once of for all.\n    plotinfo._hasClipOnAxisFalse = false;\n    for (j = 0; j < newFullData.length; j++) {\n      var trace = newFullData[j];\n      if (trace.xaxis === plotinfo.xaxis._id && trace.yaxis === plotinfo.yaxis._id && trace.cliponaxis === false) {\n        plotinfo._hasClipOnAxisFalse = true;\n        break;\n      }\n    }\n  }\n\n  // while we're at it, link overlaying axes to their main axes and\n  // anchored axes to the axes they're anchored to\n  var axList = axisIDs.list(mockGd, null, true);\n  var ax;\n  for (i = 0; i < axList.length; i++) {\n    ax = axList[i];\n    var mainAx = null;\n    if (ax.overlaying) {\n      mainAx = axisIDs.getFromId(mockGd, ax.overlaying);\n\n      // you cannot overlay an axis that's already overlaying another\n      if (mainAx && mainAx.overlaying) {\n        ax.overlaying = false;\n        mainAx = null;\n      }\n    }\n    ax._mainAxis = mainAx || ax;\n\n    /*\n     * For now force overlays to overlay completely... so they\n     * can drag together correctly and share backgrounds.\n     * Later perhaps we make separate axis domain and\n     * tick/line domain or something, so they can still share\n     * the (possibly larger) dragger and background but don't\n     * have to both be drawn over that whole domain\n     */\n    if (mainAx) ax.domain = mainAx.domain.slice();\n    ax._anchorAxis = ax.anchor === 'free' ? null : axisIDs.getFromId(mockGd, ax.anchor);\n  }\n\n  // finally, we can find the main subplot for each axis\n  // (on which the ticks & labels are drawn)\n  for (i = 0; i < axList.length; i++) {\n    ax = axList[i];\n    ax._counterAxes.sort(axisIDs.idSort);\n    ax._subplotsWith.sort(Lib.subplotSort);\n    ax._mainSubplot = findMainSubplot(ax, newFullLayout);\n  }\n};\nfunction findMainSubplot(ax, fullLayout) {\n  var mockGd = {\n    _fullLayout: fullLayout\n  };\n  var isX = ax._id.charAt(0) === 'x';\n  var anchorAx = ax._mainAxis._anchorAxis;\n  var mainSubplotID = '';\n  var nextBestMainSubplotID = '';\n  var anchorID = '';\n\n  // First try the main ID with the anchor\n  if (anchorAx) {\n    anchorID = anchorAx._mainAxis._id;\n    mainSubplotID = isX ? ax._id + anchorID : anchorID + ax._id;\n  }\n\n  // Then look for a subplot with the counteraxis overlaying the anchor\n  // If that fails just use the first subplot including this axis\n  if (!mainSubplotID || !fullLayout._plots[mainSubplotID]) {\n    mainSubplotID = '';\n    var counterIDs = ax._counterAxes;\n    for (var j = 0; j < counterIDs.length; j++) {\n      var counterPart = counterIDs[j];\n      var id = isX ? ax._id + counterPart : counterPart + ax._id;\n      if (!nextBestMainSubplotID) nextBestMainSubplotID = id;\n      var counterAx = axisIDs.getFromId(mockGd, counterPart);\n      if (anchorID && counterAx.overlaying === anchorID) {\n        mainSubplotID = id;\n        break;\n      }\n    }\n  }\n  return mainSubplotID || nextBestMainSubplotID;\n}\n\n// This function clears any trace attributes with valType: color and\n// no set dflt filed in the plot schema. This is needed because groupby (which\n// is the only transform for which this currently applies) supplies parent\n// trace defaults, then expanded trace defaults. The result is that `null`\n// colors are default-supplied and inherited as a color instead of a null.\n// The result is that expanded trace default colors have no effect, with\n// the final result that groups are indistinguishable. This function clears\n// those colors so that individual groupby groups get unique colors.\nplots.clearExpandedTraceDefaultColors = function (trace) {\n  var colorAttrs, path, i;\n\n  // This uses weird closure state in order to satisfy the linter rule\n  // that we can't create functions in a loop.\n  function locateColorAttrs(attr, attrName, attrs, level) {\n    path[level] = attrName;\n    path.length = level + 1;\n    if (attr.valType === 'color' && attr.dflt === undefined) {\n      colorAttrs.push(path.join('.'));\n    }\n  }\n  path = [];\n\n  // Get the cached colorAttrs:\n  colorAttrs = trace._module._colorAttrs;\n\n  // Or else compute and cache the colorAttrs on the module:\n  if (!colorAttrs) {\n    trace._module._colorAttrs = colorAttrs = [];\n    PlotSchema.crawl(trace._module.attributes, locateColorAttrs);\n  }\n  for (i = 0; i < colorAttrs.length; i++) {\n    var origprop = Lib.nestedProperty(trace, '_input.' + colorAttrs[i]);\n    if (!origprop.get()) {\n      Lib.nestedProperty(trace, colorAttrs[i]).set(null);\n    }\n  }\n};\nplots.supplyDataDefaults = function (dataIn, dataOut, layout, fullLayout) {\n  var modules = fullLayout._modules;\n  var visibleModules = fullLayout._visibleModules;\n  var basePlotModules = fullLayout._basePlotModules;\n  var cnt = 0;\n  var colorCnt = 0;\n  var i, fullTrace, trace;\n  fullLayout._transformModules = [];\n  function pushModule(fullTrace) {\n    dataOut.push(fullTrace);\n    var _module = fullTrace._module;\n    if (!_module) return;\n    Lib.pushUnique(modules, _module);\n    if (fullTrace.visible === true) Lib.pushUnique(visibleModules, _module);\n    Lib.pushUnique(basePlotModules, fullTrace._module.basePlotModule);\n    cnt++;\n\n    // TODO: do we really want color not to increment for explicitly invisible traces?\n    // This logic is weird, but matches previous behavior: traces that you explicitly\n    // set to visible:false do not increment the color, but traces WE determine to be\n    // empty or invalid (and thus set to visible:false) DO increment color.\n    // I kind of think we should just let all traces increment color, visible or not.\n    // see mock: axes-autotype-empty vs. a test of restyling visible: false that\n    // I can't find right now...\n    if (fullTrace._input.visible !== false) colorCnt++;\n  }\n  var carpetIndex = {};\n  var carpetDependents = [];\n  var dataTemplate = (layout.template || {}).data || {};\n  var templater = Template.traceTemplater(dataTemplate);\n  for (i = 0; i < dataIn.length; i++) {\n    trace = dataIn[i];\n\n    // reuse uid we may have pulled out of oldFullData\n    // Note: templater supplies trace type\n    fullTrace = templater.newTrace(trace);\n    fullTrace.uid = fullLayout._traceUids[i];\n    plots.supplyTraceDefaults(trace, fullTrace, colorCnt, fullLayout, i);\n    fullTrace.index = i;\n    fullTrace._input = trace;\n    fullTrace._expandedIndex = cnt;\n    if (fullTrace.transforms && fullTrace.transforms.length) {\n      var sdInvisible = trace.visible !== false && fullTrace.visible === false;\n      var expandedTraces = applyTransforms(fullTrace, dataOut, layout, fullLayout);\n      for (var j = 0; j < expandedTraces.length; j++) {\n        var expandedTrace = expandedTraces[j];\n\n        // No further templating during transforms.\n        var fullExpandedTrace = {\n          _template: fullTrace._template,\n          type: fullTrace.type,\n          // set uid using parent uid and expanded index\n          // to promote consistency between update calls\n          uid: fullTrace.uid + j\n        };\n\n        // If the first supplyDefaults created `visible: false`,\n        // clear it before running supplyDefaults a second time,\n        // because sometimes there are items we still want to coerce\n        // inside trace modules before determining that the trace is\n        // again `visible: false`, for example partial visibilities\n        // in `splom` traces.\n        if (sdInvisible && expandedTrace.visible === false) {\n          delete expandedTrace.visible;\n        }\n        plots.supplyTraceDefaults(expandedTrace, fullExpandedTrace, cnt, fullLayout, i);\n\n        // relink private (i.e. underscore) keys expanded trace to full expanded trace so\n        // that transform supply-default methods can set _ keys for future use.\n        relinkPrivateKeys(fullExpandedTrace, expandedTrace);\n\n        // add info about parent data trace\n        fullExpandedTrace.index = i;\n        fullExpandedTrace._input = trace;\n        fullExpandedTrace._fullInput = fullTrace;\n\n        // add info about the expanded data\n        fullExpandedTrace._expandedIndex = cnt;\n        fullExpandedTrace._expandedInput = expandedTrace;\n        pushModule(fullExpandedTrace);\n      }\n    } else {\n      // add identify refs for consistency with transformed traces\n      fullTrace._fullInput = fullTrace;\n      fullTrace._expandedInput = fullTrace;\n      pushModule(fullTrace);\n    }\n    if (Registry.traceIs(fullTrace, 'carpetAxis')) {\n      carpetIndex[fullTrace.carpet] = fullTrace;\n    }\n    if (Registry.traceIs(fullTrace, 'carpetDependent')) {\n      carpetDependents.push(i);\n    }\n  }\n  for (i = 0; i < carpetDependents.length; i++) {\n    fullTrace = dataOut[carpetDependents[i]];\n    if (!fullTrace.visible) continue;\n    var carpetAxis = carpetIndex[fullTrace.carpet];\n    fullTrace._carpet = carpetAxis;\n    if (!carpetAxis || !carpetAxis.visible) {\n      fullTrace.visible = false;\n      continue;\n    }\n    fullTrace.xaxis = carpetAxis.xaxis;\n    fullTrace.yaxis = carpetAxis.yaxis;\n  }\n};\nplots.supplyAnimationDefaults = function (opts) {\n  opts = opts || {};\n  var i;\n  var optsOut = {};\n  function coerce(attr, dflt) {\n    return Lib.coerce(opts || {}, optsOut, animationAttrs, attr, dflt);\n  }\n  coerce('mode');\n  coerce('direction');\n  coerce('fromcurrent');\n  if (Array.isArray(opts.frame)) {\n    optsOut.frame = [];\n    for (i = 0; i < opts.frame.length; i++) {\n      optsOut.frame[i] = plots.supplyAnimationFrameDefaults(opts.frame[i] || {});\n    }\n  } else {\n    optsOut.frame = plots.supplyAnimationFrameDefaults(opts.frame || {});\n  }\n  if (Array.isArray(opts.transition)) {\n    optsOut.transition = [];\n    for (i = 0; i < opts.transition.length; i++) {\n      optsOut.transition[i] = plots.supplyAnimationTransitionDefaults(opts.transition[i] || {});\n    }\n  } else {\n    optsOut.transition = plots.supplyAnimationTransitionDefaults(opts.transition || {});\n  }\n  return optsOut;\n};\nplots.supplyAnimationFrameDefaults = function (opts) {\n  var optsOut = {};\n  function coerce(attr, dflt) {\n    return Lib.coerce(opts || {}, optsOut, animationAttrs.frame, attr, dflt);\n  }\n  coerce('duration');\n  coerce('redraw');\n  return optsOut;\n};\nplots.supplyAnimationTransitionDefaults = function (opts) {\n  var optsOut = {};\n  function coerce(attr, dflt) {\n    return Lib.coerce(opts || {}, optsOut, animationAttrs.transition, attr, dflt);\n  }\n  coerce('duration');\n  coerce('easing');\n  return optsOut;\n};\nplots.supplyFrameDefaults = function (frameIn) {\n  var frameOut = {};\n  function coerce(attr, dflt) {\n    return Lib.coerce(frameIn, frameOut, frameAttrs, attr, dflt);\n  }\n  coerce('group');\n  coerce('name');\n  coerce('traces');\n  coerce('baseframe');\n  coerce('data');\n  coerce('layout');\n  return frameOut;\n};\nplots.supplyTraceDefaults = function (traceIn, traceOut, colorIndex, layout, traceInIndex) {\n  var colorway = layout.colorway || Color.defaults;\n  var defaultColor = colorway[colorIndex % colorway.length];\n  var i;\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, plots.attributes, attr, dflt);\n  }\n  var visible = coerce('visible');\n  coerce('type');\n  coerce('name', layout._traceWord + ' ' + traceInIndex);\n  coerce('uirevision', layout.uirevision);\n\n  // we want even invisible traces to make their would-be subplots visible\n  // so coerce the subplot id(s) now no matter what\n  var _module = plots.getModule(traceOut);\n  traceOut._module = _module;\n  if (_module) {\n    var basePlotModule = _module.basePlotModule;\n    var subplotAttr = basePlotModule.attr;\n    var subplotAttrs = basePlotModule.attributes;\n    if (subplotAttr && subplotAttrs) {\n      var subplots = layout._subplots;\n      var subplotId = '';\n\n      // TODO - currently if we draw an empty gl2d subplot, it draws\n      // nothing then gets stuck and you can't get it back without newPlot\n      // sort this out in the regl refactor? but for now just drop empty gl2d subplots\n      if (basePlotModule.name !== 'gl2d' || visible) {\n        if (Array.isArray(subplotAttr)) {\n          for (i = 0; i < subplotAttr.length; i++) {\n            var attri = subplotAttr[i];\n            var vali = Lib.coerce(traceIn, traceOut, subplotAttrs, attri);\n            if (subplots[attri]) Lib.pushUnique(subplots[attri], vali);\n            subplotId += vali;\n          }\n        } else {\n          subplotId = Lib.coerce(traceIn, traceOut, subplotAttrs, subplotAttr);\n        }\n        if (subplots[basePlotModule.name]) {\n          Lib.pushUnique(subplots[basePlotModule.name], subplotId);\n        }\n      }\n    }\n  }\n  function coerceUnlessPruned(attr, dflt, cb) {\n    if (_module && attr in _module.attributes && _module.attributes[attr] === undefined) {\n      // Pruned\n    } else {\n      if (cb && typeof cb === 'function') {\n        cb();\n      } else {\n        coerce(attr, dflt);\n      }\n    }\n  }\n  if (visible) {\n    coerce('customdata');\n    coerce('ids');\n    if (Registry.traceIs(traceOut, 'showLegend')) {\n      traceOut._dfltShowLegend = true;\n      coerce('showlegend');\n      coerce('legendgroup');\n    } else {\n      traceOut._dfltShowLegend = false;\n    }\n    coerceUnlessPruned('hoverlabel', '', function () {\n      Registry.getComponentMethod('fx', 'supplyDefaults')(traceIn, traceOut, defaultColor, layout);\n    });\n\n    // TODO add per-base-plot-module trace defaults step\n\n    if (_module) {\n      _module.supplyDefaults(traceIn, traceOut, defaultColor, layout);\n      if (!traceOut.hovertemplate) Lib.coerceHoverinfo(traceIn, traceOut, layout);\n    }\n    if (!Registry.traceIs(traceOut, 'noOpacity')) coerce('opacity');\n    if (Registry.traceIs(traceOut, 'notLegendIsolatable')) {\n      // This clears out the legendonly state for traces like carpet that\n      // cannot be isolated in the legend\n      traceOut.visible = !!traceOut.visible;\n    }\n    if (_module && _module.selectPoints) {\n      coerce('selectedpoints');\n    }\n    plots.supplyTransformDefaults(traceIn, traceOut, layout);\n  }\n  return traceOut;\n};\n\n/**\n * hasMakesDataTransform: does this trace have a transform that makes its own\n * data, either by grabbing it from somewhere else or by creating it from input\n * parameters? If so, we should still keep going with supplyDefaults\n * even if the trace is invisible, which may just be because it has no data yet.\n */\nfunction hasMakesDataTransform(trace) {\n  var transforms = trace.transforms;\n  if (Array.isArray(transforms) && transforms.length) {\n    for (var i = 0; i < transforms.length; i++) {\n      var ti = transforms[i];\n      var _module = ti._module || transformsRegistry[ti.type];\n      if (_module && _module.makesData) return true;\n    }\n  }\n  return false;\n}\nplots.hasMakesDataTransform = hasMakesDataTransform;\nplots.supplyTransformDefaults = function (traceIn, traceOut, layout) {\n  // For now we only allow transforms on 1D traces, ie those that specify a _length.\n  // If we were to implement 2D transforms, we'd need to have each transform\n  // describe its own applicability and disable itself when it doesn't apply.\n  // Also allow transforms that make their own data, but not in globalTransforms\n  if (!(traceOut._length || hasMakesDataTransform(traceIn))) return;\n  var globalTransforms = layout._globalTransforms || [];\n  var transformModules = layout._transformModules || [];\n  if (!Array.isArray(traceIn.transforms) && globalTransforms.length === 0) return;\n  var containerIn = traceIn.transforms || [];\n  var transformList = globalTransforms.concat(containerIn);\n  var containerOut = traceOut.transforms = [];\n  for (var i = 0; i < transformList.length; i++) {\n    var transformIn = transformList[i];\n    var type = transformIn.type;\n    var _module = transformsRegistry[type];\n    var transformOut;\n\n    /*\n     * Supply defaults may run twice. First pass runs all supply defaults steps\n     * and adds the _module to any output transforms.\n     * If transforms exist another pass is run so that any generated traces also\n     * go through supply defaults. This has the effect of rerunning\n     * supplyTransformDefaults. If the transform does not have a `transform`\n     * function it could not have generated any new traces and the second stage\n     * is unnecessary. We detect this case with the following variables.\n     */\n    var isFirstStage = !(transformIn._module && transformIn._module === _module);\n    var doLaterStages = _module && typeof _module.transform === 'function';\n    if (!_module) Lib.warn('Unrecognized transform type ' + type + '.');\n    if (_module && _module.supplyDefaults && (isFirstStage || doLaterStages)) {\n      transformOut = _module.supplyDefaults(transformIn, traceOut, layout, traceIn);\n      transformOut.type = type;\n      transformOut._module = _module;\n      Lib.pushUnique(transformModules, _module);\n    } else {\n      transformOut = Lib.extendFlat({}, transformIn);\n    }\n    containerOut.push(transformOut);\n  }\n};\nfunction applyTransforms(fullTrace, fullData, layout, fullLayout) {\n  var container = fullTrace.transforms;\n  var dataOut = [fullTrace];\n  for (var i = 0; i < container.length; i++) {\n    var transform = container[i];\n    var _module = transformsRegistry[transform.type];\n    if (_module && _module.transform) {\n      dataOut = _module.transform(dataOut, {\n        transform: transform,\n        fullTrace: fullTrace,\n        fullData: fullData,\n        layout: layout,\n        fullLayout: fullLayout,\n        transformIndex: i\n      });\n    }\n  }\n  return dataOut;\n}\nplots.supplyLayoutGlobalDefaults = function (layoutIn, layoutOut, formatObj) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(layoutIn, layoutOut, plots.layoutAttributes, attr, dflt);\n  }\n  var template = layoutIn.template;\n  if (Lib.isPlainObject(template)) {\n    layoutOut.template = template;\n    layoutOut._template = template.layout;\n    layoutOut._dataTemplate = template.data;\n  }\n  var globalFont = Lib.coerceFont(coerce, 'font');\n  coerce('title.text', layoutOut._dfltTitle.plot);\n  Lib.coerceFont(coerce, 'title.font', {\n    family: globalFont.family,\n    size: Math.round(globalFont.size * 1.4),\n    color: globalFont.color\n  });\n  coerce('title.xref');\n  coerce('title.yref');\n  coerce('title.x');\n  coerce('title.y');\n  coerce('title.xanchor');\n  coerce('title.yanchor');\n  coerce('title.pad.t');\n  coerce('title.pad.r');\n  coerce('title.pad.b');\n  coerce('title.pad.l');\n\n  // Make sure that autosize is defaulted to *true*\n  // on layouts with no set width and height for backward compatibly,\n  // in particular https://plot.ly/javascript/responsive-fluid-layout/\n  //\n  // Before https://github.com/plotly/plotly.js/pull/635 ,\n  // layouts with no set width and height were set temporary set to 'initial'\n  // to pass through the autosize routine\n  //\n  // This behavior is subject to change in v2.\n  coerce('autosize', !(layoutIn.width && layoutIn.height));\n  coerce('width');\n  coerce('height');\n  coerce('margin.l');\n  coerce('margin.r');\n  coerce('margin.t');\n  coerce('margin.b');\n  coerce('margin.pad');\n  coerce('margin.autoexpand');\n  if (layoutIn.width && layoutIn.height) plots.sanitizeMargins(layoutOut);\n  Registry.getComponentMethod('grid', 'sizeDefaults')(layoutIn, layoutOut);\n  coerce('paper_bgcolor');\n  coerce('separators', formatObj.decimal + formatObj.thousands);\n  coerce('hidesources');\n  coerce('colorway');\n  coerce('datarevision');\n  var uirevision = coerce('uirevision');\n  coerce('editrevision', uirevision);\n  coerce('selectionrevision', uirevision);\n  coerce('modebar.orientation');\n  coerce('modebar.bgcolor', Color.addOpacity(layoutOut.paper_bgcolor, 0.5));\n  var modebarDefaultColor = Color.contrast(Color.rgb(layoutOut.modebar.bgcolor));\n  coerce('modebar.color', Color.addOpacity(modebarDefaultColor, 0.3));\n  coerce('modebar.activecolor', Color.addOpacity(modebarDefaultColor, 0.7));\n  coerce('modebar.uirevision', uirevision);\n  coerce('meta');\n\n  // do not include defaults in fullLayout when users do not set transition\n  if (Lib.isPlainObject(layoutIn.transition)) {\n    coerce('transition.duration');\n    coerce('transition.easing');\n    coerce('transition.ordering');\n  }\n  Registry.getComponentMethod('calendars', 'handleDefaults')(layoutIn, layoutOut, 'calendar');\n  Registry.getComponentMethod('fx', 'supplyLayoutGlobalDefaults')(layoutIn, layoutOut, coerce);\n};\nplots.plotAutoSize = function plotAutoSize(gd, layout, fullLayout) {\n  var context = gd._context || {};\n  var frameMargins = context.frameMargins;\n  var newWidth;\n  var newHeight;\n  var isPlotDiv = Lib.isPlotDiv(gd);\n  if (isPlotDiv) gd.emit('plotly_autosize');\n\n  // embedded in an iframe - just take the full iframe size\n  // if we get to this point, with no aspect ratio restrictions\n  if (context.fillFrame) {\n    newWidth = window.innerWidth;\n    newHeight = window.innerHeight;\n\n    // somehow we get a few extra px height sometimes...\n    // just hide it\n    document.body.style.overflow = 'hidden';\n  } else {\n    // plotly.js - let the developers do what they want, either\n    // provide height and width for the container div,\n    // specify size in layout, or take the defaults,\n    // but don't enforce any ratio restrictions\n    var computedStyle = isPlotDiv ? window.getComputedStyle(gd) : {};\n    newWidth = parseFloat(computedStyle.width) || parseFloat(computedStyle.maxWidth) || fullLayout.width;\n    newHeight = parseFloat(computedStyle.height) || parseFloat(computedStyle.maxHeight) || fullLayout.height;\n    if (isNumeric(frameMargins) && frameMargins > 0) {\n      var factor = 1 - 2 * frameMargins;\n      newWidth = Math.round(factor * newWidth);\n      newHeight = Math.round(factor * newHeight);\n    }\n  }\n  var minWidth = plots.layoutAttributes.width.min;\n  var minHeight = plots.layoutAttributes.height.min;\n  if (newWidth < minWidth) newWidth = minWidth;\n  if (newHeight < minHeight) newHeight = minHeight;\n  var widthHasChanged = !layout.width && Math.abs(fullLayout.width - newWidth) > 1;\n  var heightHasChanged = !layout.height && Math.abs(fullLayout.height - newHeight) > 1;\n  if (heightHasChanged || widthHasChanged) {\n    if (widthHasChanged) fullLayout.width = newWidth;\n    if (heightHasChanged) fullLayout.height = newHeight;\n  }\n\n  // cache initial autosize value, used in relayout when\n  // width or height values are set to null\n  if (!gd._initialAutoSize) {\n    gd._initialAutoSize = {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n  plots.sanitizeMargins(fullLayout);\n};\nplots.supplyLayoutModuleDefaults = function (layoutIn, layoutOut, fullData, transitionData) {\n  var componentsRegistry = Registry.componentsRegistry;\n  var basePlotModules = layoutOut._basePlotModules;\n  var component, i, _module;\n  var Cartesian = Registry.subplotsRegistry.cartesian;\n\n  // check if any components need to add more base plot modules\n  // that weren't captured by traces\n  for (component in componentsRegistry) {\n    _module = componentsRegistry[component];\n    if (_module.includeBasePlot) {\n      _module.includeBasePlot(layoutIn, layoutOut);\n    }\n  }\n\n  // make sure we *at least* have some cartesian axes\n  if (!basePlotModules.length) {\n    basePlotModules.push(Cartesian);\n  }\n\n  // ensure all cartesian axes have at least one subplot\n  if (layoutOut._has('cartesian')) {\n    Registry.getComponentMethod('grid', 'contentDefaults')(layoutIn, layoutOut);\n    Cartesian.finalizeSubplots(layoutIn, layoutOut);\n  }\n\n  // sort subplot lists\n  for (var subplotType in layoutOut._subplots) {\n    layoutOut._subplots[subplotType].sort(Lib.subplotSort);\n  }\n\n  // base plot module layout defaults\n  for (i = 0; i < basePlotModules.length; i++) {\n    _module = basePlotModules[i];\n\n    // e.g. pie does not have a layout-defaults step\n    if (_module.supplyLayoutDefaults) {\n      _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n    }\n  }\n\n  // trace module layout defaults\n  // use _modules rather than _visibleModules so that even\n  // legendonly traces can include settings - eg barmode, which affects\n  // legend.traceorder default value.\n  var modules = layoutOut._modules;\n  for (i = 0; i < modules.length; i++) {\n    _module = modules[i];\n    if (_module.supplyLayoutDefaults) {\n      _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n    }\n  }\n\n  // transform module layout defaults\n  var transformModules = layoutOut._transformModules;\n  for (i = 0; i < transformModules.length; i++) {\n    _module = transformModules[i];\n    if (_module.supplyLayoutDefaults) {\n      _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData, transitionData);\n    }\n  }\n  for (component in componentsRegistry) {\n    _module = componentsRegistry[component];\n    if (_module.supplyLayoutDefaults) {\n      _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n    }\n  }\n};\n\n// Remove all plotly attributes from a div so it can be replotted fresh\n// TODO: these really need to be encapsulated into a much smaller set...\nplots.purge = function (gd) {\n  // note: we DO NOT remove _context because it doesn't change when we insert\n  // a new plot, and may have been set outside of our scope.\n\n  var fullLayout = gd._fullLayout || {};\n  if (fullLayout._glcontainer !== undefined) {\n    fullLayout._glcontainer.selectAll('.gl-canvas').remove();\n    fullLayout._glcontainer.remove();\n    fullLayout._glcanvas = null;\n  }\n  if (fullLayout._geocontainer !== undefined) fullLayout._geocontainer.remove();\n\n  // remove modebar\n  if (fullLayout._modeBar) fullLayout._modeBar.destroy();\n  if (gd._transitionData) {\n    // Ensure any dangling callbacks are simply dropped if the plot is purged.\n    // This is more or less only actually important for testing.\n    if (gd._transitionData._interruptCallbacks) {\n      gd._transitionData._interruptCallbacks.length = 0;\n    }\n    if (gd._transitionData._animationRaf) {\n      window.cancelAnimationFrame(gd._transitionData._animationRaf);\n    }\n  }\n\n  // remove any planned throttles\n  Lib.clearThrottle();\n\n  // remove responsive handler\n  Lib.clearResponsive(gd);\n\n  // data and layout\n  delete gd.data;\n  delete gd.layout;\n  delete gd._fullData;\n  delete gd._fullLayout;\n  delete gd.calcdata;\n  delete gd.framework;\n  delete gd.empty;\n  delete gd.fid;\n  delete gd.undoqueue; // action queue\n  delete gd.undonum;\n  delete gd.autoplay; // are we doing an action that doesn't go in undo queue?\n  delete gd.changed;\n\n  // these get recreated on Plotly.plot anyway, but just to be safe\n  // (and to have a record of them...)\n  delete gd._promises;\n  delete gd._redrawTimer;\n  delete gd._hmlumcount;\n  delete gd._hmpixcount;\n  delete gd._transitionData;\n  delete gd._transitioning;\n  delete gd._initialAutoSize;\n  delete gd._transitioningWithDuration;\n\n  // created during certain events, that *should* clean them up\n  // themselves, but may not if there was an error\n  delete gd._dragging;\n  delete gd._dragged;\n  delete gd._hoverdata;\n  delete gd._snapshotInProgress;\n  delete gd._editing;\n  delete gd._replotPending;\n  delete gd._mouseDownTime;\n  delete gd._legendMouseDownTime;\n\n  // remove all event listeners\n  if (gd.removeAllListeners) gd.removeAllListeners();\n};\nplots.style = function (gd) {\n  var _modules = gd._fullLayout._visibleModules;\n  var styleModules = [];\n  var i;\n\n  // some trace modules reuse the same style method,\n  // make sure to not unnecessary call them multiple times.\n\n  for (i = 0; i < _modules.length; i++) {\n    var _module = _modules[i];\n    if (_module.style) {\n      Lib.pushUnique(styleModules, _module.style);\n    }\n  }\n  for (i = 0; i < styleModules.length; i++) {\n    styleModules[i](gd);\n  }\n};\nplots.sanitizeMargins = function (fullLayout) {\n  // polar doesn't do margins...\n  if (!fullLayout || !fullLayout.margin) return;\n  var width = fullLayout.width;\n  var height = fullLayout.height;\n  var margin = fullLayout.margin;\n  var plotWidth = width - (margin.l + margin.r);\n  var plotHeight = height - (margin.t + margin.b);\n  var correction;\n\n  // if margin.l + margin.r = 0 then plotWidth > 0\n  // as width >= 10 by supplyDefaults\n  // similarly for margin.t + margin.b\n\n  if (plotWidth < 0) {\n    correction = (width - 1) / (margin.l + margin.r);\n    margin.l = Math.floor(correction * margin.l);\n    margin.r = Math.floor(correction * margin.r);\n  }\n  if (plotHeight < 0) {\n    correction = (height - 1) / (margin.t + margin.b);\n    margin.t = Math.floor(correction * margin.t);\n    margin.b = Math.floor(correction * margin.b);\n  }\n};\nplots.clearAutoMarginIds = function (gd) {\n  gd._fullLayout._pushmarginIds = {};\n};\nplots.allowAutoMargin = function (gd, id) {\n  gd._fullLayout._pushmarginIds[id] = 1;\n};\nfunction initMargins(fullLayout) {\n  var margin = fullLayout.margin;\n  if (!fullLayout._size) {\n    var gs = fullLayout._size = {\n      l: Math.round(margin.l),\n      r: Math.round(margin.r),\n      t: Math.round(margin.t),\n      b: Math.round(margin.b),\n      p: Math.round(margin.pad)\n    };\n    gs.w = Math.round(fullLayout.width) - gs.l - gs.r;\n    gs.h = Math.round(fullLayout.height) - gs.t - gs.b;\n  }\n  if (!fullLayout._pushmargin) fullLayout._pushmargin = {};\n  if (!fullLayout._pushmarginIds) fullLayout._pushmarginIds = {};\n}\n\n/**\n * autoMargin: called by components that may need to expand the margins to\n * be rendered on-plot.\n *\n * @param {DOM element} gd\n * @param {string} id - an identifier unique (within this plot) to this object,\n *     so we can remove a previous margin expansion from the same object.\n * @param {object} o - the margin requirements of this object, or omit to delete\n *     this entry (like if it's hidden). Keys are:\n *     x, y: plot fraction of the anchor point.\n *     xl, xr, yt, yb: if the object has an extent defined in plot fraction,\n *         you can specify both edges as plot fractions in each dimension\n *     l, r, t, b: the pixels to pad past the plot fraction x[l|r] and y[t|b]\n *     pad: extra pixels to add in all directions, default 12 (why?)\n */\nplots.autoMargin = function (gd, id, o) {\n  var fullLayout = gd._fullLayout;\n  var pushMargin = fullLayout._pushmargin;\n  var pushMarginIds = fullLayout._pushmarginIds;\n  if (fullLayout.margin.autoexpand !== false) {\n    if (!o) {\n      delete pushMargin[id];\n      delete pushMarginIds[id];\n    } else {\n      var pad = o.pad;\n      if (pad === undefined) {\n        var margin = fullLayout.margin;\n        // if no explicit pad is given, use 12px unless there's a\n        // specified margin that's smaller than that\n        pad = Math.min(12, margin.l, margin.r, margin.t, margin.b);\n      }\n\n      // if the item is too big, just give it enough automargin to\n      // make sure you can still grab it and bring it back\n      if (o.l + o.r > fullLayout.width * 0.5) o.l = o.r = 0;\n      if (o.b + o.t > fullLayout.height * 0.5) o.b = o.t = 0;\n      var xl = o.xl !== undefined ? o.xl : o.x;\n      var xr = o.xr !== undefined ? o.xr : o.x;\n      var yt = o.yt !== undefined ? o.yt : o.y;\n      var yb = o.yb !== undefined ? o.yb : o.y;\n      pushMargin[id] = {\n        l: {\n          val: xl,\n          size: o.l + pad\n        },\n        r: {\n          val: xr,\n          size: o.r + pad\n        },\n        b: {\n          val: yb,\n          size: o.b + pad\n        },\n        t: {\n          val: yt,\n          size: o.t + pad\n        }\n      };\n      pushMarginIds[id] = 1;\n    }\n    if (!fullLayout._replotting) plots.doAutoMargin(gd);\n  }\n};\nplots.doAutoMargin = function (gd) {\n  var fullLayout = gd._fullLayout;\n  if (!fullLayout._size) fullLayout._size = {};\n  initMargins(fullLayout);\n  var gs = fullLayout._size;\n  var oldmargins = JSON.stringify(gs);\n  var margin = fullLayout.margin;\n\n  // adjust margins for outside components\n  // fullLayout.margin is the requested margin,\n  // fullLayout._size has margins and plotsize after adjustment\n  var ml = margin.l;\n  var mr = margin.r;\n  var mt = margin.t;\n  var mb = margin.b;\n  var pushMargin = fullLayout._pushmargin;\n  var pushMarginIds = fullLayout._pushmarginIds;\n  if (fullLayout.margin.autoexpand !== false) {\n    for (var k in pushMargin) {\n      if (!pushMarginIds[k]) delete pushMargin[k];\n    }\n\n    // fill in the requested margins\n    pushMargin.base = {\n      l: {\n        val: 0,\n        size: ml\n      },\n      r: {\n        val: 1,\n        size: mr\n      },\n      t: {\n        val: 1,\n        size: mt\n      },\n      b: {\n        val: 0,\n        size: mb\n      }\n    };\n\n    // now cycle through all the combinations of l and r\n    // (and t and b) to find the required margins\n\n    for (var k1 in pushMargin) {\n      var pushleft = pushMargin[k1].l || {};\n      var pushbottom = pushMargin[k1].b || {};\n      var fl = pushleft.val;\n      var pl = pushleft.size;\n      var fb = pushbottom.val;\n      var pb = pushbottom.size;\n      for (var k2 in pushMargin) {\n        if (isNumeric(pl) && pushMargin[k2].r) {\n          var fr = pushMargin[k2].r.val;\n          var pr = pushMargin[k2].r.size;\n          if (fr > fl) {\n            var newl = (pl * fr + (pr - fullLayout.width) * fl) / (fr - fl);\n            var newr = (pr * (1 - fl) + (pl - fullLayout.width) * (1 - fr)) / (fr - fl);\n            if (newl >= 0 && newr >= 0 && newl + newr > ml + mr) {\n              ml = newl;\n              mr = newr;\n            }\n          }\n        }\n        if (isNumeric(pb) && pushMargin[k2].t) {\n          var ft = pushMargin[k2].t.val;\n          var pt = pushMargin[k2].t.size;\n          if (ft > fb) {\n            var newb = (pb * ft + (pt - fullLayout.height) * fb) / (ft - fb);\n            var newt = (pt * (1 - fb) + (pb - fullLayout.height) * (1 - ft)) / (ft - fb);\n            if (newb >= 0 && newt >= 0 && newb + newt > mb + mt) {\n              mb = newb;\n              mt = newt;\n            }\n          }\n        }\n      }\n    }\n  }\n  gs.l = Math.round(ml);\n  gs.r = Math.round(mr);\n  gs.t = Math.round(mt);\n  gs.b = Math.round(mb);\n  gs.p = Math.round(margin.pad);\n  gs.w = Math.round(fullLayout.width) - gs.l - gs.r;\n  gs.h = Math.round(fullLayout.height) - gs.t - gs.b;\n\n  // if things changed and we're not already redrawing, trigger a redraw\n  if (!fullLayout._replotting && oldmargins !== '{}' && oldmargins !== JSON.stringify(fullLayout._size)) {\n    if ('_redrawFromAutoMarginCount' in fullLayout) {\n      fullLayout._redrawFromAutoMarginCount++;\n    } else {\n      fullLayout._redrawFromAutoMarginCount = 1;\n    }\n    return Registry.call('plot', gd);\n  }\n};\n\n/**\n * JSONify the graph data and layout\n *\n * This function needs to recurse because some src can be inside\n * sub-objects.\n *\n * It also strips out functions and private (starts with _) elements.\n * Therefore, we can add temporary things to data and layout that don't\n * get saved.\n *\n * @param gd The graphDiv\n * @param {Boolean} dataonly If true, don't return layout.\n * @param {'keepref'|'keepdata'|'keepall'} [mode='keepref'] Filter what's kept\n *      keepref: remove data for which there's a src present\n *          eg if there's xsrc present (and xsrc is well-formed,\n *          ie has : and some chars before it), strip out x\n *      keepdata: remove all src tags, don't remove the data itself\n *      keepall: keep data and src\n * @param {String} output If you specify 'object', the result will not be stringified\n * @param {Boolean} useDefaults If truthy, use _fullLayout and _fullData\n * @returns {Object|String}\n */\nplots.graphJson = function (gd, dataonly, mode, output, useDefaults) {\n  // if the defaults aren't supplied yet, we need to do that...\n  if (useDefaults && dataonly && !gd._fullData || useDefaults && !dataonly && !gd._fullLayout) {\n    plots.supplyDefaults(gd);\n  }\n  var data = useDefaults ? gd._fullData : gd.data;\n  var layout = useDefaults ? gd._fullLayout : gd.layout;\n  var frames = (gd._transitionData || {})._frames;\n  function stripObj(d) {\n    if (typeof d === 'function') {\n      return null;\n    }\n    if (Lib.isPlainObject(d)) {\n      var o = {};\n      var v, src;\n      for (v in d) {\n        // remove private elements and functions\n        // _ is for private, [ is a mistake ie [object Object]\n        if (typeof d[v] === 'function' || ['_', '['].indexOf(v.charAt(0)) !== -1) {\n          continue;\n        }\n\n        // look for src/data matches and remove the appropriate one\n        if (mode === 'keepdata') {\n          // keepdata: remove all ...src tags\n          if (v.substr(v.length - 3) === 'src') {\n            continue;\n          }\n        } else if (mode === 'keepstream') {\n          // keep sourced data if it's being streamed.\n          // similar to keepref, but if the 'stream' object exists\n          // in a trace, we will keep the data array.\n          src = d[v + 'src'];\n          if (typeof src === 'string' && src.indexOf(':') > 0) {\n            if (!Lib.isPlainObject(d.stream)) {\n              continue;\n            }\n          }\n        } else if (mode !== 'keepall') {\n          // keepref: remove sourced data but only\n          // if the source tag is well-formed\n          src = d[v + 'src'];\n          if (typeof src === 'string' && src.indexOf(':') > 0) {\n            continue;\n          }\n        }\n\n        // OK, we're including this... recurse into it\n        o[v] = stripObj(d[v]);\n      }\n      return o;\n    }\n    if (Array.isArray(d)) {\n      return d.map(stripObj);\n    }\n    if (Lib.isTypedArray(d)) {\n      return Lib.simpleMap(d, Lib.identity);\n    }\n\n    // convert native dates to date strings...\n    // mostly for external users exporting to plotly\n    if (Lib.isJSDate(d)) return Lib.ms2DateTimeLocal(+d);\n    return d;\n  }\n  var obj = {\n    data: (data || []).map(function (v) {\n      var d = stripObj(v);\n      // fit has some little arrays in it that don't contain data,\n      // just fit params and meta\n      if (dataonly) {\n        delete d.fit;\n      }\n      return d;\n    })\n  };\n  if (!dataonly) {\n    obj.layout = stripObj(layout);\n  }\n  if (gd.framework && gd.framework.isPolar) obj = gd.framework.getConfig();\n  if (frames) obj.frames = stripObj(frames);\n  return output === 'object' ? obj : JSON.stringify(obj);\n};\n\n/**\n * Modify a keyframe using a list of operations:\n *\n * @param {array of objects} operations\n *      Sequence of operations to be performed on the keyframes\n */\nplots.modifyFrames = function (gd, operations) {\n  var i, op, frame;\n  var _frames = gd._transitionData._frames;\n  var _frameHash = gd._transitionData._frameHash;\n  for (i = 0; i < operations.length; i++) {\n    op = operations[i];\n    switch (op.type) {\n      // No reason this couldn't exist, but is currently unused/untested:\n      /* case 'rename':\n          frame = _frames[op.index];\n          delete _frameHash[frame.name];\n          _frameHash[op.name] = frame;\n          frame.name = op.name;\n          break;*/\n      case 'replace':\n        frame = op.value;\n        var oldName = (_frames[op.index] || {}).name;\n        var newName = frame.name;\n        _frames[op.index] = _frameHash[newName] = frame;\n        if (newName !== oldName) {\n          // If name has changed in addition to replacement, then update\n          // the lookup table:\n          delete _frameHash[oldName];\n          _frameHash[newName] = frame;\n        }\n        break;\n      case 'insert':\n        frame = op.value;\n        _frameHash[frame.name] = frame;\n        _frames.splice(op.index, 0, frame);\n        break;\n      case 'delete':\n        frame = _frames[op.index];\n        delete _frameHash[frame.name];\n        _frames.splice(op.index, 1);\n        break;\n    }\n  }\n  return Promise.resolve();\n};\n\n/*\n * Compute a keyframe. Merge a keyframe into its base frame(s) and\n * expand properties.\n *\n * @param {object} frameLookup\n *      An object containing frames keyed by name (i.e. gd._transitionData._frameHash)\n * @param {string} frame\n *      The name of the keyframe to be computed\n *\n * Returns: a new object with the merged content\n */\nplots.computeFrame = function (gd, frameName) {\n  var frameLookup = gd._transitionData._frameHash;\n  var i, traceIndices, traceIndex, destIndex;\n\n  // Null or undefined will fail on .toString(). We'll allow numbers since we\n  // make it clear frames must be given string names, but we'll allow numbers\n  // here since they're otherwise fine for looking up frames as long as they're\n  // properly cast to strings. We really just want to ensure here that this\n  // 1) doesn't fail, and\n  // 2) doens't give an incorrect answer (which String(frameName) would)\n  if (!frameName) {\n    throw new Error('computeFrame must be given a string frame name');\n  }\n  var framePtr = frameLookup[frameName.toString()];\n\n  // Return false if the name is invalid:\n  if (!framePtr) {\n    return false;\n  }\n  var frameStack = [framePtr];\n  var frameNameStack = [framePtr.name];\n\n  // Follow frame pointers:\n  while (framePtr.baseframe && (framePtr = frameLookup[framePtr.baseframe.toString()])) {\n    // Avoid infinite loops:\n    if (frameNameStack.indexOf(framePtr.name) !== -1) break;\n    frameStack.push(framePtr);\n    frameNameStack.push(framePtr.name);\n  }\n\n  // A new object for the merged result:\n  var result = {};\n\n  // Merge, starting with the last and ending with the desired frame:\n  while (framePtr = frameStack.pop()) {\n    if (framePtr.layout) {\n      result.layout = plots.extendLayout(result.layout, framePtr.layout);\n    }\n    if (framePtr.data) {\n      if (!result.data) {\n        result.data = [];\n      }\n      traceIndices = framePtr.traces;\n      if (!traceIndices) {\n        // If not defined, assume serial order starting at zero\n        traceIndices = [];\n        for (i = 0; i < framePtr.data.length; i++) {\n          traceIndices[i] = i;\n        }\n      }\n      if (!result.traces) {\n        result.traces = [];\n      }\n      for (i = 0; i < framePtr.data.length; i++) {\n        // Loop through this frames data, find out where it should go,\n        // and merge it!\n        traceIndex = traceIndices[i];\n        if (traceIndex === undefined || traceIndex === null) {\n          continue;\n        }\n        destIndex = result.traces.indexOf(traceIndex);\n        if (destIndex === -1) {\n          destIndex = result.data.length;\n          result.traces[destIndex] = traceIndex;\n        }\n        result.data[destIndex] = plots.extendTrace(result.data[destIndex], framePtr.data[i]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n * Recompute the lookup table that maps frame name -> frame object. addFrames/\n * deleteFrames already manages this data one at a time, so the only time this\n * is necessary is if you poke around manually in `gd._transitionData._frames`\n * and create and haven't updated the lookup table.\n */\nplots.recomputeFrameHash = function (gd) {\n  var hash = gd._transitionData._frameHash = {};\n  var frames = gd._transitionData._frames;\n  for (var i = 0; i < frames.length; i++) {\n    var frame = frames[i];\n    if (frame && frame.name) {\n      hash[frame.name] = frame;\n    }\n  }\n};\n\n/**\n * Extend an object, treating container arrays very differently by extracting\n * their contents and merging them separately.\n *\n * This exists so that we can extendDeepNoArrays and avoid stepping into data\n * arrays without knowledge of the plot schema, but so that we may also manually\n * recurse into known container arrays, such as transforms.\n *\n * See extendTrace and extendLayout below for usage.\n */\nplots.extendObjectWithContainers = function (dest, src, containerPaths) {\n  var containerProp, containerVal, i, j, srcProp, destProp, srcContainer, destContainer;\n  var copy = Lib.extendDeepNoArrays({}, src || {});\n  var expandedObj = Lib.expandObjectPaths(copy);\n  var containerObj = {};\n\n  // Step through and extract any container properties. Otherwise extendDeepNoArrays\n  // will clobber any existing properties with an empty array and then supplyDefaults\n  // will reset everything to defaults.\n  if (containerPaths && containerPaths.length) {\n    for (i = 0; i < containerPaths.length; i++) {\n      containerProp = Lib.nestedProperty(expandedObj, containerPaths[i]);\n      containerVal = containerProp.get();\n      if (containerVal === undefined) {\n        Lib.nestedProperty(containerObj, containerPaths[i]).set(null);\n      } else {\n        containerProp.set(null);\n        Lib.nestedProperty(containerObj, containerPaths[i]).set(containerVal);\n      }\n    }\n  }\n  dest = Lib.extendDeepNoArrays(dest || {}, expandedObj);\n  if (containerPaths && containerPaths.length) {\n    for (i = 0; i < containerPaths.length; i++) {\n      srcProp = Lib.nestedProperty(containerObj, containerPaths[i]);\n      srcContainer = srcProp.get();\n      if (!srcContainer) continue;\n      destProp = Lib.nestedProperty(dest, containerPaths[i]);\n      destContainer = destProp.get();\n      if (!Array.isArray(destContainer)) {\n        destContainer = [];\n        destProp.set(destContainer);\n      }\n      for (j = 0; j < srcContainer.length; j++) {\n        var srcObj = srcContainer[j];\n        if (srcObj === null) destContainer[j] = null;else {\n          destContainer[j] = plots.extendObjectWithContainers(destContainer[j], srcObj);\n        }\n      }\n      destProp.set(destContainer);\n    }\n  }\n  return dest;\n};\nplots.dataArrayContainers = ['transforms', 'dimensions'];\nplots.layoutArrayContainers = Registry.layoutArrayContainers;\n\n/*\n * Extend a trace definition. This method:\n *\n *  1. directly transfers any array references\n *  2. manually recurses into container arrays like transforms\n *\n * The result is the original object reference with the new contents merged in.\n */\nplots.extendTrace = function (destTrace, srcTrace) {\n  return plots.extendObjectWithContainers(destTrace, srcTrace, plots.dataArrayContainers);\n};\n\n/*\n * Extend a layout definition. This method:\n *\n *  1. directly transfers any array references (not critically important for\n *     layout since there aren't really data arrays)\n *  2. manually recurses into container arrays like annotations\n *\n * The result is the original object reference with the new contents merged in.\n */\nplots.extendLayout = function (destLayout, srcLayout) {\n  return plots.extendObjectWithContainers(destLayout, srcLayout, plots.layoutArrayContainers);\n};\n\n/**\n * Transition to a set of new data and layout properties from Plotly.animate\n *\n * @param {DOM element} gd\n * @param {Object[]} data\n *      an array of data objects following the normal Plotly data definition format\n * @param {Object} layout\n *      a layout object, following normal Plotly layout format\n * @param {Number[]} traces\n *      indices of the corresponding traces specified in `data`\n * @param {Object} frameOpts\n *      options for the frame (i.e. whether to redraw post-transition)\n * @param {Object} transitionOpts\n *      options for the transition\n */\nplots.transition = function (gd, data, layout, traces, frameOpts, transitionOpts) {\n  var opts = {\n    redraw: frameOpts.redraw\n  };\n  var transitionedTraces = [];\n  var axEdits = [];\n  opts.prepareFn = function () {\n    var dataLength = Array.isArray(data) ? data.length : 0;\n    var traceIndices = traces.slice(0, dataLength);\n    for (var i = 0; i < traceIndices.length; i++) {\n      var traceIdx = traceIndices[i];\n      var trace = gd._fullData[traceIdx];\n      var module = trace._module;\n\n      // There's nothing to do if this module is not defined:\n      if (!module) continue;\n\n      // Don't register the trace as transitioned if it doesn't know what to do.\n      // If it *is* registered, it will receive a callback that it's responsible\n      // for calling in order to register the transition as having completed.\n      if (module.animatable) {\n        transitionedTraces.push(traceIdx);\n      }\n      gd.data[traceIndices[i]] = plots.extendTrace(gd.data[traceIndices[i]], data[i]);\n    }\n\n    // Follow the same procedure. Clone it so we don't mangle the input, then\n    // expand any object paths so we can merge deep into gd.layout:\n    var layoutUpdate = Lib.expandObjectPaths(Lib.extendDeepNoArrays({}, layout));\n\n    // Before merging though, we need to modify the incoming layout. We only\n    // know how to *transition* layout ranges, so it's imperative that a new\n    // range not be sent to the layout before the transition has started. So\n    // we must remove the things we can transition:\n    var axisAttrRe = /^[xy]axis[0-9]*$/;\n    for (var attr in layoutUpdate) {\n      if (!axisAttrRe.test(attr)) continue;\n      delete layoutUpdate[attr].range;\n    }\n    plots.extendLayout(gd.layout, layoutUpdate);\n\n    // Supply defaults after applying the incoming properties. Note that any attempt\n    // to simplify this step and reduce the amount of work resulted in the reconstruction\n    // of essentially the whole supplyDefaults step, so that it seems sensible to just use\n    // supplyDefaults even though it's heavier than would otherwise be desired for\n    // transitions:\n\n    // first delete calcdata so supplyDefaults knows a calc step is coming\n    delete gd.calcdata;\n    plots.supplyDefaults(gd);\n    plots.doCalcdata(gd);\n    var newLayout = Lib.expandObjectPaths(layout);\n    if (newLayout) {\n      var subplots = gd._fullLayout._plots;\n      for (var k in subplots) {\n        var plotinfo = subplots[k];\n        var xa = plotinfo.xaxis;\n        var ya = plotinfo.yaxis;\n        var xr0 = xa.range.slice();\n        var yr0 = ya.range.slice();\n        var xr1;\n        if (Array.isArray(newLayout[xa._name + '.range'])) {\n          xr1 = newLayout[xa._name + '.range'].slice();\n        } else if (Array.isArray((newLayout[xa._name] || {}).range)) {\n          xr1 = newLayout[xa._name].range.slice();\n        }\n        var yr1;\n        if (Array.isArray(newLayout[ya._name + '.range'])) {\n          yr1 = newLayout[ya._name + '.range'].slice();\n        } else if (Array.isArray((newLayout[ya._name] || {}).range)) {\n          yr1 = newLayout[ya._name].range.slice();\n        }\n        var editX;\n        if (xr0 && xr1 && (xr0[0] !== xr1[0] || xr0[1] !== xr1[1])) {\n          editX = {\n            xr0: xr0,\n            xr1: xr1\n          };\n        }\n        var editY;\n        if (yr0 && yr1 && (yr0[0] !== yr1[0] || yr0[1] !== yr1[1])) {\n          editY = {\n            yr0: yr0,\n            yr1: yr1\n          };\n        }\n        if (editX || editY) {\n          axEdits.push(Lib.extendFlat({\n            plotinfo: plotinfo\n          }, editX, editY));\n        }\n      }\n    }\n    return Promise.resolve();\n  };\n  opts.runFn = function (makeCallback) {\n    var traceTransitionOpts;\n    var basePlotModules = gd._fullLayout._basePlotModules;\n    var hasAxisTransition = axEdits.length;\n    var i;\n    if (layout) {\n      for (i = 0; i < basePlotModules.length; i++) {\n        if (basePlotModules[i].transitionAxes) {\n          basePlotModules[i].transitionAxes(gd, axEdits, transitionOpts, makeCallback);\n        }\n      }\n    }\n\n    // Here handle the exception that we refuse to animate scales and axes at the same\n    // time. In other words, if there's an axis transition, then set the data transition\n    // to instantaneous.\n    if (hasAxisTransition) {\n      traceTransitionOpts = Lib.extendFlat({}, transitionOpts);\n      traceTransitionOpts.duration = 0;\n      // This means do not transition traces,\n      // this happens on layout-only (e.g. axis range) animations\n      transitionedTraces = null;\n    } else {\n      traceTransitionOpts = transitionOpts;\n    }\n    for (i = 0; i < basePlotModules.length; i++) {\n      // Note that we pass a callback to *create* the callback that must be invoked on completion.\n      // This is since not all traces know about transitions, so it greatly simplifies matters if\n      // the trace is responsible for creating a callback, if needed, and then executing it when\n      // the time is right.\n      basePlotModules[i].plot(gd, transitionedTraces, traceTransitionOpts, makeCallback);\n    }\n  };\n  return _transition(gd, transitionOpts, opts);\n};\n\n/**\n * Transition to a set of new data and layout properties from Plotly.react\n *\n * @param {DOM element} gd\n * @param {object} restyleFlags\n * - anim {'all'|'some'}\n * @param {object} relayoutFlags\n * - anim {'all'|'some'}\n * @param {object} oldFullLayout : old (pre Plotly.react) fullLayout\n */\nplots.transitionFromReact = function (gd, restyleFlags, relayoutFlags, oldFullLayout) {\n  var fullLayout = gd._fullLayout;\n  var transitionOpts = fullLayout.transition;\n  var opts = {};\n  var axEdits = [];\n  opts.prepareFn = function () {\n    var subplots = fullLayout._plots;\n\n    // no need to redraw at end of transition,\n    // if all changes are animatable\n    opts.redraw = false;\n    if (restyleFlags.anim === 'some') opts.redraw = true;\n    if (relayoutFlags.anim === 'some') opts.redraw = true;\n    for (var k in subplots) {\n      var plotinfo = subplots[k];\n      var xa = plotinfo.xaxis;\n      var ya = plotinfo.yaxis;\n      var xr0 = oldFullLayout[xa._name].range.slice();\n      var yr0 = oldFullLayout[ya._name].range.slice();\n      var xr1 = xa.range.slice();\n      var yr1 = ya.range.slice();\n      xa.setScale();\n      ya.setScale();\n      var editX;\n      if (xr0[0] !== xr1[0] || xr0[1] !== xr1[1]) {\n        editX = {\n          xr0: xr0,\n          xr1: xr1\n        };\n      }\n      var editY;\n      if (yr0[0] !== yr1[0] || yr0[1] !== yr1[1]) {\n        editY = {\n          yr0: yr0,\n          yr1: yr1\n        };\n      }\n      if (editX || editY) {\n        axEdits.push(Lib.extendFlat({\n          plotinfo: plotinfo\n        }, editX, editY));\n      }\n    }\n    return Promise.resolve();\n  };\n  opts.runFn = function (makeCallback) {\n    var fullData = gd._fullData;\n    var fullLayout = gd._fullLayout;\n    var basePlotModules = fullLayout._basePlotModules;\n    var axisTransitionOpts;\n    var traceTransitionOpts;\n    var transitionedTraces;\n    var allTraceIndices = [];\n    for (var i = 0; i < fullData.length; i++) {\n      allTraceIndices.push(i);\n    }\n    function transitionAxes() {\n      for (var j = 0; j < basePlotModules.length; j++) {\n        if (basePlotModules[j].transitionAxes) {\n          basePlotModules[j].transitionAxes(gd, axEdits, axisTransitionOpts, makeCallback);\n        }\n      }\n    }\n    function transitionTraces() {\n      for (var j = 0; j < basePlotModules.length; j++) {\n        basePlotModules[j].plot(gd, transitionedTraces, traceTransitionOpts, makeCallback);\n      }\n    }\n    if (axEdits.length && restyleFlags.anim) {\n      if (transitionOpts.ordering === 'traces first') {\n        axisTransitionOpts = Lib.extendFlat({}, transitionOpts, {\n          duration: 0\n        });\n        transitionedTraces = allTraceIndices;\n        traceTransitionOpts = transitionOpts;\n        transitionTraces();\n        setTimeout(transitionAxes, transitionOpts.duration);\n      } else {\n        axisTransitionOpts = transitionOpts;\n        transitionedTraces = null;\n        traceTransitionOpts = Lib.extendFlat({}, transitionOpts, {\n          duration: 0\n        });\n        transitionAxes();\n        transitionTraces();\n      }\n    } else if (axEdits.length) {\n      axisTransitionOpts = transitionOpts;\n      transitionAxes();\n    } else if (restyleFlags.anim) {\n      transitionedTraces = allTraceIndices;\n      traceTransitionOpts = transitionOpts;\n      transitionTraces();\n    }\n  };\n  return _transition(gd, transitionOpts, opts);\n};\n\n/**\n * trace/layout transition wrapper that works\n * for transitions initiated by Plotly.animate and Plotly.react.\n *\n * @param {DOM element} gd\n * @param {object} transitionOpts\n * @param {object} opts\n * - redraw {boolean}\n * - prepareFn {function} *should return a Promise*\n * - runFn {function} ran inside executeTransitions\n */\nfunction _transition(gd, transitionOpts, opts) {\n  var aborted = false;\n  function executeCallbacks(list) {\n    var p = Promise.resolve();\n    if (!list) return p;\n    while (list.length) {\n      p = p.then(list.shift());\n    }\n    return p;\n  }\n  function flushCallbacks(list) {\n    if (!list) return;\n    while (list.length) {\n      list.shift();\n    }\n  }\n  function executeTransitions() {\n    gd.emit('plotly_transitioning', []);\n    return new Promise(function (resolve) {\n      // This flag is used to disabled things like autorange:\n      gd._transitioning = true;\n\n      // When instantaneous updates are coming through quickly, it's too much to simply disable\n      // all interaction, so store this flag so we can disambiguate whether mouse interactions\n      // should be fully disabled or not:\n      if (transitionOpts.duration > 0) {\n        gd._transitioningWithDuration = true;\n      }\n\n      // If another transition is triggered, this callback will be executed simply because it's\n      // in the interruptCallbacks queue. If this transition completes, it will instead flush\n      // that queue and forget about this callback.\n      gd._transitionData._interruptCallbacks.push(function () {\n        aborted = true;\n      });\n      if (opts.redraw) {\n        gd._transitionData._interruptCallbacks.push(function () {\n          return Registry.call('redraw', gd);\n        });\n      }\n\n      // Emit this and make sure it happens last:\n      gd._transitionData._interruptCallbacks.push(function () {\n        gd.emit('plotly_transitioninterrupted', []);\n      });\n\n      // Construct callbacks that are executed on transition end. This ensures the d3 transitions\n      // are *complete* before anything else is done.\n      var numCallbacks = 0;\n      var numCompleted = 0;\n      function makeCallback() {\n        numCallbacks++;\n        return function () {\n          numCompleted++;\n          // When all are complete, perform a redraw:\n          if (!aborted && numCompleted === numCallbacks) {\n            completeTransition(resolve);\n          }\n        };\n      }\n      opts.runFn(makeCallback);\n\n      // If nothing else creates a callback, then this will trigger the completion in the next tick:\n      setTimeout(makeCallback());\n    });\n  }\n  function completeTransition(callback) {\n    // This a simple workaround for tests which purge the graph before animations\n    // have completed. That's not a very common case, so this is the simplest\n    // fix.\n    if (!gd._transitionData) return;\n    flushCallbacks(gd._transitionData._interruptCallbacks);\n    return Promise.resolve().then(function () {\n      if (opts.redraw) {\n        return Registry.call('redraw', gd);\n      }\n    }).then(function () {\n      // Set transitioning false again once the redraw has occurred. This is used, for example,\n      // to prevent the trailing redraw from autoranging:\n      gd._transitioning = false;\n      gd._transitioningWithDuration = false;\n      gd.emit('plotly_transitioned', []);\n    }).then(callback);\n  }\n  function interruptPreviousTransitions() {\n    // Fail-safe against purged plot:\n    if (!gd._transitionData) return;\n\n    // If a transition is interrupted, set this to false. At the moment, the only thing that would\n    // interrupt a transition is another transition, so that it will momentarily be set to true\n    // again, but this determines whether autorange or dragbox work, so it's for the sake of\n    // cleanliness:\n    gd._transitioning = false;\n    return executeCallbacks(gd._transitionData._interruptCallbacks);\n  }\n  var seq = [plots.previousPromises, interruptPreviousTransitions, opts.prepareFn, plots.rehover, executeTransitions];\n  var transitionStarting = Lib.syncOrAsync(seq, gd);\n  if (!transitionStarting || !transitionStarting.then) {\n    transitionStarting = Promise.resolve();\n  }\n  return transitionStarting.then(function () {\n    return gd;\n  });\n}\nplots.doCalcdata = function (gd, traces) {\n  var axList = axisIDs.list(gd);\n  var fullData = gd._fullData;\n  var fullLayout = gd._fullLayout;\n  var trace, _module, i, j;\n\n  // XXX: Is this correct? Needs a closer look so that *some* traces can be recomputed without\n  // *all* needing doCalcdata:\n  var calcdata = new Array(fullData.length);\n  var oldCalcdata = (gd.calcdata || []).slice(0);\n  gd.calcdata = calcdata;\n\n  // extra helper variables\n\n  // how many box/violins plots do we have (in case they're grouped)\n  fullLayout._numBoxes = 0;\n  fullLayout._numViolins = 0;\n\n  // initialize violin per-scale-group stats container\n  fullLayout._violinScaleGroupStats = {};\n\n  // for calculating avg luminosity of heatmaps\n  gd._hmpixcount = 0;\n  gd._hmlumcount = 0;\n\n  // for sharing colors across pies (and for legend)\n  fullLayout._piecolormap = {};\n\n  // If traces were specified and this trace was not included,\n  // then transfer it over from the old calcdata:\n  for (i = 0; i < fullData.length; i++) {\n    if (Array.isArray(traces) && traces.indexOf(i) === -1) {\n      calcdata[i] = oldCalcdata[i];\n      continue;\n    }\n  }\n  for (i = 0; i < fullData.length; i++) {\n    trace = fullData[i];\n    trace._arrayAttrs = PlotSchema.findArrayAttributes(trace);\n\n    // keep track of trace extremes (for autorange) in here\n    trace._extremes = {};\n  }\n\n  // add polar axes to axis list\n  var polarIds = fullLayout._subplots.polar || [];\n  for (i = 0; i < polarIds.length; i++) {\n    axList.push(fullLayout[polarIds[i]].radialaxis, fullLayout[polarIds[i]].angularaxis);\n  }\n  setupAxisCategories(axList, fullData);\n  var hasCalcTransform = false;\n\n  // transform loop\n  for (i = 0; i < fullData.length; i++) {\n    trace = fullData[i];\n    if (trace.visible === true && trace.transforms) {\n      _module = trace._module;\n\n      // we need one round of trace module calc before\n      // the calc transform to 'fill in' the categories list\n      // used for example in the data-to-coordinate method\n      if (_module && _module.calc) {\n        var cdi = _module.calc(gd, trace);\n\n        // must clear scene 'batches', so that 2nd\n        // _module.calc call starts from scratch\n        if (cdi[0] && cdi[0].t && cdi[0].t._scene) {\n          delete cdi[0].t._scene.dirty;\n        }\n      }\n      for (j = 0; j < trace.transforms.length; j++) {\n        var transform = trace.transforms[j];\n        _module = transformsRegistry[transform.type];\n        if (_module && _module.calcTransform) {\n          trace._hasCalcTransform = true;\n          hasCalcTransform = true;\n          _module.calcTransform(gd, trace, transform);\n        }\n      }\n    }\n  }\n\n  // clear stuff that should recomputed in 'regular' loop\n  if (hasCalcTransform) setupAxisCategories(axList, fullData);\n  function calci(i, isContainer) {\n    trace = fullData[i];\n    _module = trace._module;\n    if (!!_module.isContainer !== isContainer) return;\n    var cd = [];\n    if (trace.visible === true) {\n      // clear existing ref in case it got relinked\n      delete trace._indexToPoints;\n      // keep ref of index-to-points map object of the *last* enabled transform,\n      // this index-to-points map object is required to determine the calcdata indices\n      // that correspond to input indices (e.g. from 'selectedpoints')\n      var transforms = trace.transforms || [];\n      for (j = transforms.length - 1; j >= 0; j--) {\n        if (transforms[j].enabled) {\n          trace._indexToPoints = transforms[j]._indexToPoints;\n          break;\n        }\n      }\n      if (_module && _module.calc) {\n        cd = _module.calc(gd, trace);\n      }\n    }\n\n    // Make sure there is a first point.\n    //\n    // This ensures there is a calcdata item for every trace,\n    // even if cartesian logic doesn't handle it (for things like legends).\n    if (!Array.isArray(cd) || !cd[0]) {\n      cd = [{\n        x: BADNUM,\n        y: BADNUM\n      }];\n    }\n\n    // add the trace-wide properties to the first point,\n    // per point properties to every point\n    // t is the holder for trace-wide properties\n    if (!cd[0].t) cd[0].t = {};\n    cd[0].trace = trace;\n    calcdata[i] = cd;\n  }\n\n  // 'regular' loop - make sure container traces (eg carpet) calc before\n  // contained traces (eg contourcarpet)\n  for (i = 0; i < fullData.length; i++) {\n    calci(i, true);\n  }\n  for (i = 0; i < fullData.length; i++) {\n    calci(i, false);\n  }\n  doCrossTraceCalc(gd);\n  Registry.getComponentMethod('fx', 'calc')(gd);\n  Registry.getComponentMethod('errorbars', 'calc')(gd);\n};\nfunction setupAxisCategories(axList, fullData) {\n  for (var i = 0; i < axList.length; i++) {\n    var ax = axList[i];\n    ax.clearCalc();\n    if (ax.type === 'multicategory') {\n      ax.setupMultiCategory(fullData);\n    }\n  }\n}\nfunction doCrossTraceCalc(gd) {\n  var fullLayout = gd._fullLayout;\n  var modules = fullLayout._visibleModules;\n  var hash = {};\n  var i, j, k;\n\n  // position and range calculations for traces that\n  // depend on each other ie bars (stacked or grouped)\n  // and boxes (grouped) push each other out of the way\n\n  for (j = 0; j < modules.length; j++) {\n    var _module = modules[j];\n    var fn = _module.crossTraceCalc;\n    if (fn) {\n      var spType = _module.basePlotModule.name;\n      if (hash[spType]) {\n        Lib.pushUnique(hash[spType], fn);\n      } else {\n        hash[spType] = [fn];\n      }\n    }\n  }\n  for (k in hash) {\n    var methods = hash[k];\n    var subplots = fullLayout._subplots[k];\n    if (Array.isArray(subplots)) {\n      for (i = 0; i < subplots.length; i++) {\n        var sp = subplots[i];\n        var spInfo = k === 'cartesian' ? fullLayout._plots[sp] : fullLayout[sp];\n        for (j = 0; j < methods.length; j++) {\n          methods[j](gd, spInfo, sp);\n        }\n      }\n    } else {\n      for (j = 0; j < methods.length; j++) {\n        methods[j](gd);\n      }\n    }\n  }\n}\nplots.rehover = function (gd) {\n  if (gd._fullLayout._rehover) {\n    gd._fullLayout._rehover();\n  }\n};\nplots.generalUpdatePerTraceModule = function (gd, subplot, subplotCalcData, subplotLayout) {\n  var traceHashOld = subplot.traceHash;\n  var traceHash = {};\n  var i;\n\n  // build up moduleName -> calcData hash\n  for (i = 0; i < subplotCalcData.length; i++) {\n    var calcTraces = subplotCalcData[i];\n    var trace = calcTraces[0].trace;\n\n    // skip over visible === false traces\n    // as they don't have `_module` ref\n    if (trace.visible) {\n      traceHash[trace.type] = traceHash[trace.type] || [];\n      traceHash[trace.type].push(calcTraces);\n    }\n  }\n\n  // when a trace gets deleted, make sure that its module's\n  // plot method is called so that it is properly\n  // removed from the DOM.\n  for (var moduleNameOld in traceHashOld) {\n    if (!traceHash[moduleNameOld]) {\n      var fakeCalcTrace = traceHashOld[moduleNameOld][0];\n      var fakeTrace = fakeCalcTrace[0].trace;\n      fakeTrace.visible = false;\n      traceHash[moduleNameOld] = [fakeCalcTrace];\n    }\n  }\n\n  // call module plot method\n  for (var moduleName in traceHash) {\n    var moduleCalcData = traceHash[moduleName];\n    var _module = moduleCalcData[0][0].trace._module;\n    _module.plot(gd, subplot, Lib.filterVisible(moduleCalcData), subplotLayout);\n  }\n\n  // update moduleName -> calcData hash\n  subplot.traceHash = traceHash;\n};","map":{"version":3,"names":["d3","require","isNumeric","Registry","PlotSchema","Template","Lib","Color","BADNUM","axisIDs","animationAttrs","frameAttrs","relinkPrivateKeys","_","plots","module","exports","extendFlat","attributes","type","values","allTypes","fontAttrs","layoutAttributes","fontWeight","transformsRegistry","commandModule","executeAPICommand","computeAPICommandBindings","manageCommandObserver","hasSimpleAPICommandBindings","redrawText","gd","getGraphDiv","data","r","Promise","resolve","setTimeout","getComponentMethod","calcdata","forEach","d","t","cb","previousPromises","resize","reject","isHidden","display","window","getComputedStyle","Error","_redrawTimer","clearTimeout","layout","width","height","oldchanged","changed","autoplay","call","autosize","then","_promises","length","all","addLinks","_context","showLink","showSources","fullLayout","_fullLayout","linkContainer","ensureSingle","_paper","s","style","defaultLine","each","links","select","append","classed","text","node","attrs","y","attr","document","body","contains","getComputedTextLength","x","toolspan","spacespan","sourcespan","positionPlayWithData","container","link","linkText","String","fromCharCode","sendData","on","sendDataToCloud","path","location","pathname","split","query","search","emit","baseUrl","PLOTLYENV","BASE_URL","plotlyServerURL","hiddenformDiv","hiddenform","action","method","target","hiddenformInput","name","value","graphJson","submit","remove","d3FormatKeys","extraFormatKeys","supplyDefaults","opts","skipUpdateCalc","oldFullLayout","_skipDefaults","newFullLayout","newLayout","oldFullData","_fullData","newFullData","newData","oldCalcdata","context","i","_transitionData","createTransitionData","_dfltTitle","plot","colorbar","annotation","_traceWord","formatObj","getFormatObj","_mapboxAccessToken","mapboxAccessToken","_initialAutoSizeIsDone","oldWidth","oldHeight","supplyLayoutGlobalDefaults","sanitizeMargins","missingWidthOrHeight","autosizable","initialAutoSize","plotAutoSize","_d3locale","getFormatter","separators","_extraFormat","_dataLength","_modules","_visibleModules","_basePlotModules","subplots","_subplots","emptySubplotLists","splomAxes","_splomAxes","splomSubplots","_splomSubplots","_splomGridDflt","_scatterStackOpts","_firstScatter","_requestRangeslider","_traceUids","getTraceUids","_globalTransforms","globalTransforms","supplyDataDefaults","splomXa","Object","keys","splomYa","pushUnique","xaxis","yaxis","k","cartesian","_has","_hasPlotType","bind","supplyLayoutModuleDefaults","crossTraceDefaultsFuncs","funci","crossTraceDefaults","_hasOnlyLargeSploms","shapes","images","_hasCartesian","_hasGeo","_hasGL3D","_hasGL2D","_hasTernary","_hasPie","linkSubplots","cleanPlot","_preGUI","_tracePreGUI","tracePreGUI","uids","uid","_fullInput","initMargins","supplyDefaultsUpdateCalc","newTrace","cd0","trace","oldTrace","_hasCalcTransform","arrayAttrs","_arrayAttrs","j","astr","oldArrayVal","nestedProperty","get","slice","set","len","oldFullInput","prevFullInput","thisFullInput","push","oldLen","out","Array","seenUids","setUid","tryUid","newUid","randstr","collectableSubplotTypes","subplotsRegistry","subplotType","subplotModule","subplotAttr","isArray","formatKeys","locale","formatDone","includeFormat","newFormat","formatFinished","formatKey","locales","formatj","format","localeRegistry","baseLocale","en","decimal","charAt","thousands","_frames","_frameHash","_counter","_interruptCallbacks","category","basePlotModules","modules","_module","categories","clean","hadGl","hasGl","_glcontainer","undefined","selectAll","_glcanvas","hasInfoLayer","_infolayer","oldLoop","oldUid","_zoomlayer","oldSubplots","_plots","newSubplots","newSubplotList","mockGd","ids","concat","gl2d","id","oldSubplot","getFromId","plotinfo","_counterAxes","_id","_subplotsWith","_hasClipOnAxisFalse","cliponaxis","axList","list","ax","mainAx","overlaying","_mainAxis","domain","_anchorAxis","anchor","sort","idSort","subplotSort","_mainSubplot","findMainSubplot","isX","anchorAx","mainSubplotID","nextBestMainSubplotID","anchorID","counterIDs","counterPart","counterAx","clearExpandedTraceDefaultColors","colorAttrs","locateColorAttrs","attrName","level","valType","dflt","join","_colorAttrs","crawl","origprop","dataIn","dataOut","visibleModules","cnt","colorCnt","fullTrace","_transformModules","pushModule","visible","basePlotModule","_input","carpetIndex","carpetDependents","dataTemplate","template","templater","traceTemplater","supplyTraceDefaults","index","_expandedIndex","transforms","sdInvisible","expandedTraces","applyTransforms","expandedTrace","fullExpandedTrace","_template","_expandedInput","traceIs","carpet","carpetAxis","_carpet","supplyAnimationDefaults","optsOut","coerce","frame","supplyAnimationFrameDefaults","transition","supplyAnimationTransitionDefaults","supplyFrameDefaults","frameIn","frameOut","traceIn","traceOut","colorIndex","traceInIndex","colorway","defaults","defaultColor","uirevision","getModule","subplotAttrs","subplotId","attri","vali","coerceUnlessPruned","_dfltShowLegend","hovertemplate","coerceHoverinfo","selectPoints","supplyTransformDefaults","hasMakesDataTransform","ti","makesData","_length","transformModules","containerIn","transformList","containerOut","transformIn","transformOut","isFirstStage","doLaterStages","transform","warn","fullData","transformIndex","layoutIn","layoutOut","isPlainObject","_dataTemplate","globalFont","coerceFont","family","size","Math","round","color","addOpacity","paper_bgcolor","modebarDefaultColor","contrast","rgb","modebar","bgcolor","frameMargins","newWidth","newHeight","isPlotDiv","fillFrame","innerWidth","innerHeight","overflow","computedStyle","parseFloat","maxWidth","maxHeight","factor","minWidth","min","minHeight","widthHasChanged","abs","heightHasChanged","_initialAutoSize","transitionData","componentsRegistry","component","Cartesian","includeBasePlot","finalizeSubplots","supplyLayoutDefaults","purge","_geocontainer","_modeBar","destroy","_animationRaf","cancelAnimationFrame","clearThrottle","clearResponsive","framework","empty","fid","undoqueue","undonum","_hmlumcount","_hmpixcount","_transitioning","_transitioningWithDuration","_dragging","_dragged","_hoverdata","_snapshotInProgress","_editing","_replotPending","_mouseDownTime","_legendMouseDownTime","removeAllListeners","styleModules","margin","plotWidth","l","plotHeight","b","correction","floor","clearAutoMarginIds","_pushmarginIds","allowAutoMargin","_size","gs","p","pad","w","h","_pushmargin","autoMargin","o","pushMargin","pushMarginIds","autoexpand","xl","xr","yt","yb","val","_replotting","doAutoMargin","oldmargins","JSON","stringify","ml","mr","mt","mb","base","k1","pushleft","pushbottom","fl","pl","fb","pb","k2","fr","pr","newl","newr","ft","pt","newb","newt","_redrawFromAutoMarginCount","dataonly","mode","output","useDefaults","frames","stripObj","v","src","indexOf","substr","stream","map","isTypedArray","simpleMap","identity","isJSDate","ms2DateTimeLocal","obj","fit","isPolar","getConfig","modifyFrames","operations","op","oldName","newName","splice","computeFrame","frameName","frameLookup","traceIndices","traceIndex","destIndex","framePtr","toString","frameStack","frameNameStack","baseframe","result","pop","extendLayout","traces","extendTrace","recomputeFrameHash","hash","extendObjectWithContainers","dest","containerPaths","containerProp","containerVal","srcProp","destProp","srcContainer","destContainer","copy","extendDeepNoArrays","expandedObj","expandObjectPaths","containerObj","srcObj","dataArrayContainers","layoutArrayContainers","destTrace","srcTrace","destLayout","srcLayout","frameOpts","transitionOpts","redraw","transitionedTraces","axEdits","prepareFn","dataLength","traceIdx","animatable","layoutUpdate","axisAttrRe","test","range","doCalcdata","xa","ya","xr0","yr0","xr1","_name","yr1","editX","editY","runFn","makeCallback","traceTransitionOpts","hasAxisTransition","transitionAxes","duration","_transition","transitionFromReact","restyleFlags","relayoutFlags","anim","setScale","axisTransitionOpts","allTraceIndices","transitionTraces","ordering","aborted","executeCallbacks","shift","flushCallbacks","executeTransitions","numCallbacks","numCompleted","completeTransition","callback","interruptPreviousTransitions","seq","rehover","transitionStarting","syncOrAsync","_numBoxes","_numViolins","_violinScaleGroupStats","_piecolormap","findArrayAttributes","_extremes","polarIds","polar","radialaxis","angularaxis","setupAxisCategories","hasCalcTransform","calc","cdi","_scene","dirty","calcTransform","calci","isContainer","cd","_indexToPoints","enabled","doCrossTraceCalc","clearCalc","setupMultiCategory","fn","crossTraceCalc","spType","methods","sp","spInfo","_rehover","generalUpdatePerTraceModule","subplot","subplotCalcData","subplotLayout","traceHashOld","traceHash","calcTraces","moduleNameOld","fakeCalcTrace","fakeTrace","moduleName","moduleCalcData","filterVisible"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/plots/plots.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar d3 = require('d3');\nvar isNumeric = require('fast-isnumeric');\n\nvar Registry = require('../registry');\nvar PlotSchema = require('../plot_api/plot_schema');\nvar Template = require('../plot_api/plot_template');\nvar Lib = require('../lib');\nvar Color = require('../components/color');\nvar BADNUM = require('../constants/numerical').BADNUM;\n\nvar axisIDs = require('../plots/cartesian/axis_ids');\n\nvar animationAttrs = require('./animation_attributes');\nvar frameAttrs = require('./frame_attributes');\n\nvar relinkPrivateKeys = Lib.relinkPrivateKeys;\nvar _ = Lib._;\n\nvar plots = module.exports = {};\n\n// Expose registry methods on Plots for backward-compatibility\nLib.extendFlat(plots, Registry);\n\nplots.attributes = require('./attributes');\nplots.attributes.type.values = plots.allTypes;\nplots.fontAttrs = require('./font_attributes');\nplots.layoutAttributes = require('./layout_attributes');\n\n// TODO make this a plot attribute?\nplots.fontWeight = 'normal';\n\nvar transformsRegistry = plots.transformsRegistry;\n\nvar commandModule = require('./command');\nplots.executeAPICommand = commandModule.executeAPICommand;\nplots.computeAPICommandBindings = commandModule.computeAPICommandBindings;\nplots.manageCommandObserver = commandModule.manageCommandObserver;\nplots.hasSimpleAPICommandBindings = commandModule.hasSimpleAPICommandBindings;\n\n// in some cases the browser doesn't seem to know how big\n// the text is at first, so it needs to draw it,\n// then wait a little, then draw it again\nplots.redrawText = function(gd) {\n    gd = Lib.getGraphDiv(gd);\n\n    // do not work if polar is present\n    if((gd.data && gd.data[0] && gd.data[0].r)) return;\n\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            Registry.getComponentMethod('annotations', 'draw')(gd);\n            Registry.getComponentMethod('legend', 'draw')(gd);\n\n            (gd.calcdata || []).forEach(function(d) {\n                if(d[0] && d[0].t && d[0].t.cb) d[0].t.cb();\n            });\n\n            resolve(plots.previousPromises(gd));\n        }, 300);\n    });\n};\n\n// resize plot about the container size\nplots.resize = function(gd) {\n    gd = Lib.getGraphDiv(gd);\n\n    return new Promise(function(resolve, reject) {\n\n        function isHidden(gd) {\n            var display = window.getComputedStyle(gd).display;\n            return !display || display === 'none';\n        }\n\n        if(!gd || isHidden(gd)) {\n            reject(new Error('Resize must be passed a displayed plot div element.'));\n        }\n\n        if(gd._redrawTimer) clearTimeout(gd._redrawTimer);\n\n        gd._redrawTimer = setTimeout(function() {\n            // return if there is nothing to resize or is hidden\n            if(!gd.layout || (gd.layout.width && gd.layout.height) || isHidden(gd)) {\n                resolve(gd);\n                return;\n            }\n\n            delete gd.layout.width;\n            delete gd.layout.height;\n\n            // autosizing doesn't count as a change that needs saving\n            var oldchanged = gd.changed;\n\n            // nor should it be included in the undo queue\n            gd.autoplay = true;\n\n            Registry.call('relayout', gd, {autosize: true}).then(function() {\n                gd.changed = oldchanged;\n                resolve(gd);\n            });\n        }, 100);\n    });\n};\n\n\n// for use in Lib.syncOrAsync, check if there are any\n// pending promises in this plot and wait for them\nplots.previousPromises = function(gd) {\n    if((gd._promises || []).length) {\n        return Promise.all(gd._promises)\n            .then(function() { gd._promises = []; });\n    }\n};\n\n/**\n * Adds the 'Edit chart' link.\n * Note that now Plotly.plot() calls this so it can regenerate whenever it replots\n *\n * Add source links to your graph inside the 'showSources' config argument.\n */\nplots.addLinks = function(gd) {\n    // Do not do anything if showLink and showSources are not set to true in config\n    if(!gd._context.showLink && !gd._context.showSources) return;\n\n    var fullLayout = gd._fullLayout;\n\n    var linkContainer = Lib.ensureSingle(fullLayout._paper, 'text', 'js-plot-link-container', function(s) {\n        s.style({\n            'font-family': '\"Open Sans\", Arial, sans-serif',\n            'font-size': '12px',\n            'fill': Color.defaultLine,\n            'pointer-events': 'all'\n        })\n        .each(function() {\n            var links = d3.select(this);\n            links.append('tspan').classed('js-link-to-tool', true);\n            links.append('tspan').classed('js-link-spacer', true);\n            links.append('tspan').classed('js-sourcelinks', true);\n        });\n    });\n\n    // The text node inside svg\n    var text = linkContainer.node();\n    var attrs = {y: fullLayout._paper.attr('height') - 9};\n\n    // If text's width is bigger than the layout\n    // Check that text is a child node or document.body\n    // because otherwise IE/Edge might throw an exception\n    // when calling getComputedTextLength().\n    // Apparently offsetParent is null for invisibles.\n    if(document.body.contains(text) && text.getComputedTextLength() >= (fullLayout.width - 20)) {\n        // Align the text at the left\n        attrs['text-anchor'] = 'start';\n        attrs.x = 5;\n    }\n    else {\n        // Align the text at the right\n        attrs['text-anchor'] = 'end';\n        attrs.x = fullLayout._paper.attr('width') - 7;\n    }\n\n    linkContainer.attr(attrs);\n\n    var toolspan = linkContainer.select('.js-link-to-tool');\n    var spacespan = linkContainer.select('.js-link-spacer');\n    var sourcespan = linkContainer.select('.js-sourcelinks');\n\n    if(gd._context.showSources) gd._context.showSources(gd);\n\n    // 'view in plotly' link for embedded plots\n    if(gd._context.showLink) positionPlayWithData(gd, toolspan);\n\n    // separator if we have both sources and tool link\n    spacespan.text((toolspan.text() && sourcespan.text()) ? ' - ' : '');\n};\n\n// note that now this function is only adding the brand in\n// iframes and 3rd-party apps\nfunction positionPlayWithData(gd, container) {\n    container.text('');\n    var link = container.append('a')\n        .attr({\n            'xlink:xlink:href': '#',\n            'class': 'link--impt link--embedview',\n            'font-weight': 'bold'\n        })\n        .text(gd._context.linkText + ' ' + String.fromCharCode(187));\n\n    if(gd._context.sendData) {\n        link.on('click', function() {\n            plots.sendDataToCloud(gd);\n        });\n    }\n    else {\n        var path = window.location.pathname.split('/');\n        var query = window.location.search;\n        link.attr({\n            'xlink:xlink:show': 'new',\n            'xlink:xlink:href': '/' + path[2].split('.')[0] + '/' + path[1] + query\n        });\n    }\n}\n\nplots.sendDataToCloud = function(gd) {\n    gd.emit('plotly_beforeexport');\n\n    var baseUrl = (window.PLOTLYENV || {}).BASE_URL || gd._context.plotlyServerURL;\n\n    var hiddenformDiv = d3.select(gd)\n        .append('div')\n        .attr('id', 'hiddenform')\n        .style('display', 'none');\n\n    var hiddenform = hiddenformDiv\n        .append('form')\n        .attr({\n            action: baseUrl + '/external',\n            method: 'post',\n            target: '_blank'\n        });\n\n    var hiddenformInput = hiddenform\n        .append('input')\n        .attr({\n            type: 'text',\n            name: 'data'\n        });\n\n    hiddenformInput.node().value = plots.graphJson(gd, false, 'keepdata');\n    hiddenform.node().submit();\n    hiddenformDiv.remove();\n\n    gd.emit('plotly_afterexport');\n    return false;\n};\n\nvar d3FormatKeys = [\n    'days', 'shortDays', 'months', 'shortMonths', 'periods',\n    'dateTime', 'date', 'time',\n    'decimal', 'thousands', 'grouping', 'currency'\n];\n\nvar extraFormatKeys = [\n    'year', 'month', 'dayMonth', 'dayMonthYear'\n];\n\n/*\n * Fill in default values\n * @param {DOM element} gd\n * @param {object} opts\n * @param {boolean} opts.skipUpdateCalc: normally if the existing gd.calcdata looks\n *   compatible with the new gd._fullData we finish by linking the new _fullData traces\n *   to the old gd.calcdata, so it's correctly set if we're not going to recalc. But also,\n *   if there are calcTransforms on the trace, we first remap data arrays from the old full\n *   trace into the new one. Use skipUpdateCalc to defer this (needed by Plotly.react)\n *\n * gd.data, gd.layout:\n *   are precisely what the user specified (except as modified by cleanData/cleanLayout),\n *   these fields shouldn't be modified (except for filling in some auto values)\n *   nor used directly after the supply defaults step.\n *\n * gd._fullData, gd._fullLayout:\n *   are complete descriptions of how to draw the plot,\n *   use these fields in all required computations.\n *\n * gd._fullLayout._modules\n *   is a list of all the trace modules required to draw the plot.\n *\n * gd._fullLayout._visibleModules\n *   subset of _modules, a list of modules corresponding to visible:true traces.\n *\n * gd._fullLayout._basePlotModules\n *   is a list of all the plot modules required to draw the plot.\n *\n * gd._fullLayout._transformModules\n *   is a list of all the transform modules invoked.\n *\n */\nplots.supplyDefaults = function(gd, opts) {\n    var skipUpdateCalc = opts && opts.skipUpdateCalc;\n    var oldFullLayout = gd._fullLayout || {};\n\n    if(oldFullLayout._skipDefaults) {\n        delete oldFullLayout._skipDefaults;\n        return;\n    }\n\n    var newFullLayout = gd._fullLayout = {};\n    var newLayout = gd.layout || {};\n\n    var oldFullData = gd._fullData || [];\n    var newFullData = gd._fullData = [];\n    var newData = gd.data || [];\n\n    var oldCalcdata = gd.calcdata || [];\n\n    var context = gd._context || {};\n\n    var i;\n\n    // Create all the storage space for frames, but only if doesn't already exist\n    if(!gd._transitionData) plots.createTransitionData(gd);\n\n    // So we only need to do this once (and since we have gd here)\n    // get the translated placeholder titles.\n    // These ones get used as default values so need to be known at supplyDefaults\n    // others keep their blank defaults but render the placeholder as desired later\n    // TODO: make these work the same way, only inserting the placeholder text at draw time?\n    // The challenge is that this has slightly different behavior right now in editable mode:\n    // using the placeholder as default makes this text permanently (but lightly) visible,\n    // but explicit '' for these titles gives you a placeholder that's hidden until you mouse\n    // over it - so you're not distracted by it if you really don't want a title, but if you do\n    // and you're new to plotly you may not be able to find it.\n    // When editable=false the two behave the same, no title is drawn.\n    newFullLayout._dfltTitle = {\n        plot: _(gd, 'Click to enter Plot title'),\n        x: _(gd, 'Click to enter X axis title'),\n        y: _(gd, 'Click to enter Y axis title'),\n        colorbar: _(gd, 'Click to enter Colorscale title'),\n        annotation: _(gd, 'new text')\n    };\n    newFullLayout._traceWord = _(gd, 'trace');\n\n    var formatObj = getFormatObj(gd, d3FormatKeys);\n\n    // stash the token from context so mapbox subplots can use it as default\n    newFullLayout._mapboxAccessToken = context.mapboxAccessToken;\n\n    // first fill in what we can of layout without looking at data\n    // because fullData needs a few things from layout\n    if(oldFullLayout._initialAutoSizeIsDone) {\n\n        // coerce the updated layout while preserving width and height\n        var oldWidth = oldFullLayout.width;\n        var oldHeight = oldFullLayout.height;\n\n        plots.supplyLayoutGlobalDefaults(newLayout, newFullLayout, formatObj);\n\n        if(!newLayout.width) newFullLayout.width = oldWidth;\n        if(!newLayout.height) newFullLayout.height = oldHeight;\n        plots.sanitizeMargins(newFullLayout);\n    }\n    else {\n\n        // coerce the updated layout and autosize if needed\n        plots.supplyLayoutGlobalDefaults(newLayout, newFullLayout, formatObj);\n\n        var missingWidthOrHeight = (!newLayout.width || !newLayout.height);\n        var autosize = newFullLayout.autosize;\n        var autosizable = context.autosizable;\n        var initialAutoSize = missingWidthOrHeight && (autosize || autosizable);\n\n        if(initialAutoSize) plots.plotAutoSize(gd, newLayout, newFullLayout);\n        else if(missingWidthOrHeight) plots.sanitizeMargins(newFullLayout);\n\n        // for backwards-compatibility with Plotly v1.x.x\n        if(!autosize && missingWidthOrHeight) {\n            newLayout.width = newFullLayout.width;\n            newLayout.height = newFullLayout.height;\n        }\n    }\n\n    newFullLayout._d3locale = getFormatter(formatObj, newFullLayout.separators);\n    newFullLayout._extraFormat = getFormatObj(gd, extraFormatKeys);\n\n    newFullLayout._initialAutoSizeIsDone = true;\n\n    // keep track of how many traces are inputted\n    newFullLayout._dataLength = newData.length;\n\n    // clear the lists of trace and baseplot modules, and subplots\n    newFullLayout._modules = [];\n    newFullLayout._visibleModules = [];\n    newFullLayout._basePlotModules = [];\n    var subplots = newFullLayout._subplots = emptySubplotLists();\n\n    // initialize axis and subplot hash objects for splom-generated grids\n    var splomAxes = newFullLayout._splomAxes = {x: {}, y: {}};\n    var splomSubplots = newFullLayout._splomSubplots = {};\n    // initialize splom grid defaults\n    newFullLayout._splomGridDflt = {};\n\n    // for stacked area traces to share config across traces\n    newFullLayout._scatterStackOpts = {};\n    // for the first scatter trace on each subplot (so it knows tonext->tozero)\n    newFullLayout._firstScatter = {};\n\n    // for traces to request a default rangeslider on their x axes\n    // eg set `_requestRangeslider.x2 = true` for xaxis2\n    newFullLayout._requestRangeslider = {};\n\n    // pull uids from old data to use as new defaults\n    newFullLayout._traceUids = getTraceUids(oldFullData, newData);\n\n    // then do the data\n    newFullLayout._globalTransforms = (gd._context || {}).globalTransforms;\n    plots.supplyDataDefaults(newData, newFullData, newLayout, newFullLayout);\n\n    // redo grid size defaults with info about splom x/y axes,\n    // and fill in generated cartesian axes and subplots\n    var splomXa = Object.keys(splomAxes.x);\n    var splomYa = Object.keys(splomAxes.y);\n    if(splomXa.length > 1 && splomYa.length > 1) {\n        Registry.getComponentMethod('grid', 'sizeDefaults')(newLayout, newFullLayout);\n\n        for(i = 0; i < splomXa.length; i++) {\n            Lib.pushUnique(subplots.xaxis, splomXa[i]);\n        }\n        for(i = 0; i < splomYa.length; i++) {\n            Lib.pushUnique(subplots.yaxis, splomYa[i]);\n        }\n        for(var k in splomSubplots) {\n            Lib.pushUnique(subplots.cartesian, k);\n        }\n    }\n\n    // attach helper method to check whether a plot type is present on graph\n    newFullLayout._has = plots._hasPlotType.bind(newFullLayout);\n\n    if(oldFullData.length === newFullData.length) {\n        for(i = 0; i < newFullData.length; i++) {\n            relinkPrivateKeys(newFullData[i], oldFullData[i]);\n        }\n    }\n\n    // finally, fill in the pieces of layout that may need to look at data\n    plots.supplyLayoutModuleDefaults(newLayout, newFullLayout, newFullData, gd._transitionData);\n\n    // Special cases that introduce interactions between traces.\n    // This is after relinkPrivateKeys so we can use those in crossTraceDefaults\n    // and after layout module defaults, so we can use eg barmode\n    var _modules = newFullLayout._visibleModules;\n    var crossTraceDefaultsFuncs = [];\n    for(i = 0; i < _modules.length; i++) {\n        var funci = _modules[i].crossTraceDefaults;\n        // some trace types share crossTraceDefaults (ie histogram2d, histogram2dcontour)\n        if(funci) Lib.pushUnique(crossTraceDefaultsFuncs, funci);\n    }\n    for(i = 0; i < crossTraceDefaultsFuncs.length; i++) {\n        crossTraceDefaultsFuncs[i](newFullData, newFullLayout);\n    }\n    Registry.getComponentMethod('colorscale', 'crossTraceDefaults')(newFullData, newFullLayout);\n\n    // turn on flag to optimize large splom-only graphs\n    // mostly by omitting SVG layers during Cartesian.drawFramework\n    newFullLayout._hasOnlyLargeSploms = (\n        newFullLayout._basePlotModules.length === 1 &&\n        newFullLayout._basePlotModules[0].name === 'splom' &&\n        splomXa.length > 15 &&\n        splomYa.length > 15 &&\n        newFullLayout.shapes.length === 0 &&\n        newFullLayout.images.length === 0\n    );\n\n    // TODO remove in v2.0.0\n    // add has-plot-type refs to fullLayout for backward compatibility\n    newFullLayout._hasCartesian = newFullLayout._has('cartesian');\n    newFullLayout._hasGeo = newFullLayout._has('geo');\n    newFullLayout._hasGL3D = newFullLayout._has('gl3d');\n    newFullLayout._hasGL2D = newFullLayout._has('gl2d');\n    newFullLayout._hasTernary = newFullLayout._has('ternary');\n    newFullLayout._hasPie = newFullLayout._has('pie');\n\n    // relink / initialize subplot axis objects\n    plots.linkSubplots(newFullData, newFullLayout, oldFullData, oldFullLayout);\n\n    // clean subplots and other artifacts from previous plot calls\n    plots.cleanPlot(newFullData, newFullLayout, oldFullData, oldFullLayout);\n\n    // relink functions and _ attributes to promote consistency between plots\n    relinkPrivateKeys(newFullLayout, oldFullLayout);\n\n    // For persisting GUI-driven changes in layout\n    // _preGUI and _tracePreGUI were already copied over in relinkPrivateKeys\n    if(!newFullLayout._preGUI) newFullLayout._preGUI = {};\n    // track trace GUI changes by uid rather than by trace index\n    if(!newFullLayout._tracePreGUI) newFullLayout._tracePreGUI = {};\n    var tracePreGUI = newFullLayout._tracePreGUI;\n    var uids = {};\n    var uid;\n    for(uid in tracePreGUI) uids[uid] = 'old';\n    for(i = 0; i < newFullData.length; i++) {\n        uid = newFullData[i]._fullInput.uid;\n        if(!uids[uid]) tracePreGUI[uid] = {};\n        uids[uid] = 'new';\n    }\n    for(uid in uids) {\n        if(uids[uid] === 'old') delete tracePreGUI[uid];\n    }\n\n    // set up containers for margin calculations\n    initMargins(newFullLayout);\n\n    // collect and do some initial calculations for rangesliders\n    Registry.getComponentMethod('rangeslider', 'makeData')(newFullLayout);\n\n    // update object references in calcdata\n    if(!skipUpdateCalc && oldCalcdata.length === newFullData.length) {\n        plots.supplyDefaultsUpdateCalc(oldCalcdata, newFullData);\n    }\n};\n\nplots.supplyDefaultsUpdateCalc = function(oldCalcdata, newFullData) {\n    for(var i = 0; i < newFullData.length; i++) {\n        var newTrace = newFullData[i];\n        var cd0 = (oldCalcdata[i] || [])[0];\n        if(cd0 && cd0.trace) {\n            var oldTrace = cd0.trace;\n            if(oldTrace._hasCalcTransform) {\n                var arrayAttrs = oldTrace._arrayAttrs;\n                var j, astr, oldArrayVal;\n\n                for(j = 0; j < arrayAttrs.length; j++) {\n                    astr = arrayAttrs[j];\n                    oldArrayVal = Lib.nestedProperty(oldTrace, astr).get().slice();\n                    Lib.nestedProperty(newTrace, astr).set(oldArrayVal);\n                }\n            }\n            cd0.trace = newTrace;\n        }\n    }\n};\n\n/**\n * Create a list of uid strings satisfying (in this order of importance):\n * 1. all unique, all strings\n * 2. matches input uids if provided\n * 3. matches previous data uids\n */\nfunction getTraceUids(oldFullData, newData) {\n    var len = newData.length;\n    var oldFullInput = [];\n    var i, prevFullInput;\n    for(i = 0; i < oldFullData.length; i++) {\n        var thisFullInput = oldFullData[i]._fullInput;\n        if(thisFullInput !== prevFullInput) oldFullInput.push(thisFullInput);\n        prevFullInput = thisFullInput;\n    }\n    var oldLen = oldFullInput.length;\n    var out = new Array(len);\n    var seenUids = {};\n\n    function setUid(uid, i) {\n        out[i] = uid;\n        seenUids[uid] = 1;\n    }\n\n    function tryUid(uid, i) {\n        if(uid && typeof uid === 'string' && !seenUids[uid]) {\n            setUid(uid, i);\n            return true;\n        }\n    }\n\n    for(i = 0; i < len; i++) {\n        var newUid = newData[i].uid;\n        if(typeof newUid === 'number') newUid = String(newUid);\n\n        if(tryUid(newUid, i)) continue;\n        if(i < oldLen && tryUid(oldFullInput[i].uid, i)) continue;\n        setUid(Lib.randstr(seenUids), i);\n    }\n\n    return out;\n}\n\n/**\n * Make a container for collecting subplots we need to display.\n *\n * Finds all subplot types we need to enumerate once and caches it,\n * but makes a new output object each time.\n * Single-trace subplots (which have no `id`) such as pie, table, etc\n * do not need to be collected because we just draw all visible traces.\n */\nfunction emptySubplotLists() {\n    var collectableSubplotTypes = Registry.collectableSubplotTypes;\n    var out = {};\n    var i, j;\n\n    if(!collectableSubplotTypes) {\n        collectableSubplotTypes = [];\n\n        var subplotsRegistry = Registry.subplotsRegistry;\n\n        for(var subplotType in subplotsRegistry) {\n            var subplotModule = subplotsRegistry[subplotType];\n            var subplotAttr = subplotModule.attr;\n\n            if(subplotAttr) {\n                collectableSubplotTypes.push(subplotType);\n\n                // special case, currently just for cartesian:\n                // we need to enumerate axes, not just subplots\n                if(Array.isArray(subplotAttr)) {\n                    for(j = 0; j < subplotAttr.length; j++) {\n                        Lib.pushUnique(collectableSubplotTypes, subplotAttr[j]);\n                    }\n                }\n            }\n        }\n    }\n\n    for(i = 0; i < collectableSubplotTypes.length; i++) {\n        out[collectableSubplotTypes[i]] = [];\n    }\n    return out;\n}\n\n/**\n * getFormatObj: use _context to get the format object from locale.\n * Used to get d3.locale argument object and extraFormat argument object\n *\n * Regarding d3.locale argument :\n * decimal and thousands can be overridden later by layout.separators\n * grouping and currency are not presently used by our automatic number\n * formatting system but can be used by custom formats.\n *\n * @returns {object} d3.locale format object\n */\nfunction getFormatObj(gd, formatKeys) {\n    var locale = gd._context.locale;\n    if(!locale) locale === 'en-US';\n\n    var formatDone = false;\n    var formatObj = {};\n\n    function includeFormat(newFormat) {\n        var formatFinished = true;\n        for(var i = 0; i < formatKeys.length; i++) {\n            var formatKey = formatKeys[i];\n            if(!formatObj[formatKey]) {\n                if(newFormat[formatKey]) {\n                    formatObj[formatKey] = newFormat[formatKey];\n                }\n                else formatFinished = false;\n            }\n        }\n        if(formatFinished) formatDone = true;\n    }\n\n    // same as localize, look for format parts in each format spec in the chain\n    for(var i = 0; i < 2; i++) {\n        var locales = gd._context.locales;\n        for(var j = 0; j < 2; j++) {\n            var formatj = (locales[locale] || {}).format;\n            if(formatj) {\n                includeFormat(formatj);\n                if(formatDone) break;\n            }\n            locales = Registry.localeRegistry;\n        }\n\n        var baseLocale = locale.split('-')[0];\n        if(formatDone || baseLocale === locale) break;\n        locale = baseLocale;\n    }\n\n    // lastly pick out defaults from english (non-US, as DMY is so much more common)\n    if(!formatDone) includeFormat(Registry.localeRegistry.en.format);\n\n    return formatObj;\n}\n\n/**\n * getFormatter: combine the final separators with the locale formatting object\n * we pulled earlier to generate number and time formatters\n * TODO: remove separators in v2, only use locale, so we don't need this step?\n *\n * @param {object} formatObj: d3.locale format object\n * @param {string} separators: length-2 string to override decimal and thousands\n *   separators in number formatting\n *\n * @returns {object} {numberFormat, timeFormat} d3 formatter factory functions\n *   for numbers and time\n */\nfunction getFormatter(formatObj, separators) {\n    formatObj.decimal = separators.charAt(0);\n    formatObj.thousands = separators.charAt(1);\n\n    return d3.locale(formatObj);\n}\n\n// Create storage for all of the data related to frames and transitions:\nplots.createTransitionData = function(gd) {\n    // Set up the default keyframe if it doesn't exist:\n    if(!gd._transitionData) {\n        gd._transitionData = {};\n    }\n\n    if(!gd._transitionData._frames) {\n        gd._transitionData._frames = [];\n    }\n\n    if(!gd._transitionData._frameHash) {\n        gd._transitionData._frameHash = {};\n    }\n\n    if(!gd._transitionData._counter) {\n        gd._transitionData._counter = 0;\n    }\n\n    if(!gd._transitionData._interruptCallbacks) {\n        gd._transitionData._interruptCallbacks = [];\n    }\n};\n\n// helper function to be bound to fullLayout to check\n// whether a certain plot type is present on plot\n// or trace has a category\nplots._hasPlotType = function(category) {\n    var i;\n\n    // check base plot modules\n    var basePlotModules = this._basePlotModules || [];\n    for(i = 0; i < basePlotModules.length; i++) {\n        if(basePlotModules[i].name === category) return true;\n    }\n\n    // check trace modules (including non-visible:true)\n    var modules = this._modules || [];\n    for(i = 0; i < modules.length; i++) {\n        var name = modules[i].name;\n        if(name === category) return true;\n        // N.B. this is modules[i] along with 'categories' as a hash object\n        var _module = Registry.modules[name];\n        if(_module && _module.categories[category]) return true;\n    }\n\n    return false;\n};\n\nplots.cleanPlot = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var i, j;\n\n    var basePlotModules = oldFullLayout._basePlotModules || [];\n    for(i = 0; i < basePlotModules.length; i++) {\n        var _module = basePlotModules[i];\n\n        if(_module.clean) {\n            _module.clean(newFullData, newFullLayout, oldFullData, oldFullLayout);\n        }\n    }\n\n    var hadGl = oldFullLayout._has && oldFullLayout._has('gl');\n    var hasGl = newFullLayout._has && newFullLayout._has('gl');\n\n    if(hadGl && !hasGl) {\n        if(oldFullLayout._glcontainer !== undefined) {\n            oldFullLayout._glcontainer.selectAll('.gl-canvas').remove();\n            oldFullLayout._glcontainer.selectAll('.no-webgl').remove();\n            oldFullLayout._glcanvas = null;\n        }\n    }\n\n    var hasInfoLayer = !!oldFullLayout._infolayer;\n\n    oldLoop:\n    for(i = 0; i < oldFullData.length; i++) {\n        var oldTrace = oldFullData[i];\n        var oldUid = oldTrace.uid;\n\n        for(j = 0; j < newFullData.length; j++) {\n            var newTrace = newFullData[j];\n\n            if(oldUid === newTrace.uid) continue oldLoop;\n        }\n\n        // clean old colorbars\n        if(hasInfoLayer) {\n            oldFullLayout._infolayer.select('.cb' + oldUid).remove();\n        }\n    }\n\n    if(oldFullLayout._zoomlayer) {\n        oldFullLayout._zoomlayer.selectAll('.select-outline').remove();\n    }\n};\n\nplots.linkSubplots = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var i, j;\n\n    var oldSubplots = oldFullLayout._plots || {};\n    var newSubplots = newFullLayout._plots = {};\n    var newSubplotList = newFullLayout._subplots;\n\n    var mockGd = {\n        _fullData: newFullData,\n        _fullLayout: newFullLayout\n    };\n\n    var ids = newSubplotList.cartesian.concat(newSubplotList.gl2d || []);\n\n    for(i = 0; i < ids.length; i++) {\n        var id = ids[i];\n        var oldSubplot = oldSubplots[id];\n        var xaxis = axisIDs.getFromId(mockGd, id, 'x');\n        var yaxis = axisIDs.getFromId(mockGd, id, 'y');\n        var plotinfo;\n\n        // link or create subplot object\n        if(oldSubplot) {\n            plotinfo = newSubplots[id] = oldSubplot;\n        } else {\n            plotinfo = newSubplots[id] = {};\n            plotinfo.id = id;\n        }\n\n        // add these axis ids to each others' subplot lists\n        xaxis._counterAxes.push(yaxis._id);\n        yaxis._counterAxes.push(xaxis._id);\n        xaxis._subplotsWith.push(id);\n        yaxis._subplotsWith.push(id);\n\n        // update x and y axis layout object refs\n        plotinfo.xaxis = xaxis;\n        plotinfo.yaxis = yaxis;\n\n        // By default, we clip at the subplot level,\n        // but if one trace on a given subplot has *cliponaxis* set to false,\n        // we need to clip at the trace module layer level;\n        // find this out here, once of for all.\n        plotinfo._hasClipOnAxisFalse = false;\n\n        for(j = 0; j < newFullData.length; j++) {\n            var trace = newFullData[j];\n\n            if(\n                trace.xaxis === plotinfo.xaxis._id &&\n                trace.yaxis === plotinfo.yaxis._id &&\n                trace.cliponaxis === false\n            ) {\n                plotinfo._hasClipOnAxisFalse = true;\n                break;\n            }\n        }\n    }\n\n    // while we're at it, link overlaying axes to their main axes and\n    // anchored axes to the axes they're anchored to\n    var axList = axisIDs.list(mockGd, null, true);\n    var ax;\n    for(i = 0; i < axList.length; i++) {\n        ax = axList[i];\n        var mainAx = null;\n\n        if(ax.overlaying) {\n            mainAx = axisIDs.getFromId(mockGd, ax.overlaying);\n\n            // you cannot overlay an axis that's already overlaying another\n            if(mainAx && mainAx.overlaying) {\n                ax.overlaying = false;\n                mainAx = null;\n            }\n        }\n        ax._mainAxis = mainAx || ax;\n\n        /*\n         * For now force overlays to overlay completely... so they\n         * can drag together correctly and share backgrounds.\n         * Later perhaps we make separate axis domain and\n         * tick/line domain or something, so they can still share\n         * the (possibly larger) dragger and background but don't\n         * have to both be drawn over that whole domain\n         */\n        if(mainAx) ax.domain = mainAx.domain.slice();\n\n        ax._anchorAxis = ax.anchor === 'free' ?\n            null :\n            axisIDs.getFromId(mockGd, ax.anchor);\n    }\n\n    // finally, we can find the main subplot for each axis\n    // (on which the ticks & labels are drawn)\n    for(i = 0; i < axList.length; i++) {\n        ax = axList[i];\n        ax._counterAxes.sort(axisIDs.idSort);\n        ax._subplotsWith.sort(Lib.subplotSort);\n        ax._mainSubplot = findMainSubplot(ax, newFullLayout);\n    }\n};\n\nfunction findMainSubplot(ax, fullLayout) {\n    var mockGd = {_fullLayout: fullLayout};\n\n    var isX = ax._id.charAt(0) === 'x';\n    var anchorAx = ax._mainAxis._anchorAxis;\n    var mainSubplotID = '';\n    var nextBestMainSubplotID = '';\n    var anchorID = '';\n\n    // First try the main ID with the anchor\n    if(anchorAx) {\n        anchorID = anchorAx._mainAxis._id;\n        mainSubplotID = isX ? (ax._id + anchorID) : (anchorID + ax._id);\n    }\n\n    // Then look for a subplot with the counteraxis overlaying the anchor\n    // If that fails just use the first subplot including this axis\n    if(!mainSubplotID || !fullLayout._plots[mainSubplotID]) {\n        mainSubplotID = '';\n\n        var counterIDs = ax._counterAxes;\n        for(var j = 0; j < counterIDs.length; j++) {\n            var counterPart = counterIDs[j];\n            var id = isX ? (ax._id + counterPart) : (counterPart + ax._id);\n            if(!nextBestMainSubplotID) nextBestMainSubplotID = id;\n            var counterAx = axisIDs.getFromId(mockGd, counterPart);\n            if(anchorID && counterAx.overlaying === anchorID) {\n                mainSubplotID = id;\n                break;\n            }\n        }\n    }\n\n    return mainSubplotID || nextBestMainSubplotID;\n}\n\n// This function clears any trace attributes with valType: color and\n// no set dflt filed in the plot schema. This is needed because groupby (which\n// is the only transform for which this currently applies) supplies parent\n// trace defaults, then expanded trace defaults. The result is that `null`\n// colors are default-supplied and inherited as a color instead of a null.\n// The result is that expanded trace default colors have no effect, with\n// the final result that groups are indistinguishable. This function clears\n// those colors so that individual groupby groups get unique colors.\nplots.clearExpandedTraceDefaultColors = function(trace) {\n    var colorAttrs, path, i;\n\n    // This uses weird closure state in order to satisfy the linter rule\n    // that we can't create functions in a loop.\n    function locateColorAttrs(attr, attrName, attrs, level) {\n        path[level] = attrName;\n        path.length = level + 1;\n        if(attr.valType === 'color' && attr.dflt === undefined) {\n            colorAttrs.push(path.join('.'));\n        }\n    }\n\n    path = [];\n\n    // Get the cached colorAttrs:\n    colorAttrs = trace._module._colorAttrs;\n\n    // Or else compute and cache the colorAttrs on the module:\n    if(!colorAttrs) {\n        trace._module._colorAttrs = colorAttrs = [];\n        PlotSchema.crawl(\n            trace._module.attributes,\n            locateColorAttrs\n        );\n    }\n\n    for(i = 0; i < colorAttrs.length; i++) {\n        var origprop = Lib.nestedProperty(trace, '_input.' + colorAttrs[i]);\n\n        if(!origprop.get()) {\n            Lib.nestedProperty(trace, colorAttrs[i]).set(null);\n        }\n    }\n};\n\n\nplots.supplyDataDefaults = function(dataIn, dataOut, layout, fullLayout) {\n    var modules = fullLayout._modules;\n    var visibleModules = fullLayout._visibleModules;\n    var basePlotModules = fullLayout._basePlotModules;\n    var cnt = 0;\n    var colorCnt = 0;\n\n    var i, fullTrace, trace;\n\n    fullLayout._transformModules = [];\n\n    function pushModule(fullTrace) {\n        dataOut.push(fullTrace);\n\n        var _module = fullTrace._module;\n        if(!_module) return;\n\n        Lib.pushUnique(modules, _module);\n        if(fullTrace.visible === true) Lib.pushUnique(visibleModules, _module);\n        Lib.pushUnique(basePlotModules, fullTrace._module.basePlotModule);\n        cnt++;\n\n        // TODO: do we really want color not to increment for explicitly invisible traces?\n        // This logic is weird, but matches previous behavior: traces that you explicitly\n        // set to visible:false do not increment the color, but traces WE determine to be\n        // empty or invalid (and thus set to visible:false) DO increment color.\n        // I kind of think we should just let all traces increment color, visible or not.\n        // see mock: axes-autotype-empty vs. a test of restyling visible: false that\n        // I can't find right now...\n        if(fullTrace._input.visible !== false) colorCnt++;\n    }\n\n    var carpetIndex = {};\n    var carpetDependents = [];\n    var dataTemplate = (layout.template || {}).data || {};\n    var templater = Template.traceTemplater(dataTemplate);\n\n    for(i = 0; i < dataIn.length; i++) {\n        trace = dataIn[i];\n\n        // reuse uid we may have pulled out of oldFullData\n        // Note: templater supplies trace type\n        fullTrace = templater.newTrace(trace);\n        fullTrace.uid = fullLayout._traceUids[i];\n        plots.supplyTraceDefaults(trace, fullTrace, colorCnt, fullLayout, i);\n\n        fullTrace.index = i;\n        fullTrace._input = trace;\n        fullTrace._expandedIndex = cnt;\n\n        if(fullTrace.transforms && fullTrace.transforms.length) {\n            var sdInvisible = trace.visible !== false && fullTrace.visible === false;\n\n            var expandedTraces = applyTransforms(fullTrace, dataOut, layout, fullLayout);\n\n            for(var j = 0; j < expandedTraces.length; j++) {\n                var expandedTrace = expandedTraces[j];\n\n                // No further templating during transforms.\n                var fullExpandedTrace = {\n                    _template: fullTrace._template,\n                    type: fullTrace.type,\n                    // set uid using parent uid and expanded index\n                    // to promote consistency between update calls\n                    uid: fullTrace.uid + j\n                };\n\n                // If the first supplyDefaults created `visible: false`,\n                // clear it before running supplyDefaults a second time,\n                // because sometimes there are items we still want to coerce\n                // inside trace modules before determining that the trace is\n                // again `visible: false`, for example partial visibilities\n                // in `splom` traces.\n                if(sdInvisible && expandedTrace.visible === false) {\n                    delete expandedTrace.visible;\n                }\n\n                plots.supplyTraceDefaults(expandedTrace, fullExpandedTrace, cnt, fullLayout, i);\n\n                // relink private (i.e. underscore) keys expanded trace to full expanded trace so\n                // that transform supply-default methods can set _ keys for future use.\n                relinkPrivateKeys(fullExpandedTrace, expandedTrace);\n\n                // add info about parent data trace\n                fullExpandedTrace.index = i;\n                fullExpandedTrace._input = trace;\n                fullExpandedTrace._fullInput = fullTrace;\n\n                // add info about the expanded data\n                fullExpandedTrace._expandedIndex = cnt;\n                fullExpandedTrace._expandedInput = expandedTrace;\n\n                pushModule(fullExpandedTrace);\n            }\n        }\n        else {\n            // add identify refs for consistency with transformed traces\n            fullTrace._fullInput = fullTrace;\n            fullTrace._expandedInput = fullTrace;\n\n            pushModule(fullTrace);\n        }\n\n        if(Registry.traceIs(fullTrace, 'carpetAxis')) {\n            carpetIndex[fullTrace.carpet] = fullTrace;\n        }\n\n        if(Registry.traceIs(fullTrace, 'carpetDependent')) {\n            carpetDependents.push(i);\n        }\n    }\n\n    for(i = 0; i < carpetDependents.length; i++) {\n        fullTrace = dataOut[carpetDependents[i]];\n\n        if(!fullTrace.visible) continue;\n\n        var carpetAxis = carpetIndex[fullTrace.carpet];\n        fullTrace._carpet = carpetAxis;\n\n        if(!carpetAxis || !carpetAxis.visible) {\n            fullTrace.visible = false;\n            continue;\n        }\n\n        fullTrace.xaxis = carpetAxis.xaxis;\n        fullTrace.yaxis = carpetAxis.yaxis;\n    }\n};\n\nplots.supplyAnimationDefaults = function(opts) {\n    opts = opts || {};\n    var i;\n    var optsOut = {};\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(opts || {}, optsOut, animationAttrs, attr, dflt);\n    }\n\n    coerce('mode');\n    coerce('direction');\n    coerce('fromcurrent');\n\n    if(Array.isArray(opts.frame)) {\n        optsOut.frame = [];\n        for(i = 0; i < opts.frame.length; i++) {\n            optsOut.frame[i] = plots.supplyAnimationFrameDefaults(opts.frame[i] || {});\n        }\n    } else {\n        optsOut.frame = plots.supplyAnimationFrameDefaults(opts.frame || {});\n    }\n\n    if(Array.isArray(opts.transition)) {\n        optsOut.transition = [];\n        for(i = 0; i < opts.transition.length; i++) {\n            optsOut.transition[i] = plots.supplyAnimationTransitionDefaults(opts.transition[i] || {});\n        }\n    } else {\n        optsOut.transition = plots.supplyAnimationTransitionDefaults(opts.transition || {});\n    }\n\n    return optsOut;\n};\n\nplots.supplyAnimationFrameDefaults = function(opts) {\n    var optsOut = {};\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(opts || {}, optsOut, animationAttrs.frame, attr, dflt);\n    }\n\n    coerce('duration');\n    coerce('redraw');\n\n    return optsOut;\n};\n\nplots.supplyAnimationTransitionDefaults = function(opts) {\n    var optsOut = {};\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(opts || {}, optsOut, animationAttrs.transition, attr, dflt);\n    }\n\n    coerce('duration');\n    coerce('easing');\n\n    return optsOut;\n};\n\nplots.supplyFrameDefaults = function(frameIn) {\n    var frameOut = {};\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(frameIn, frameOut, frameAttrs, attr, dflt);\n    }\n\n    coerce('group');\n    coerce('name');\n    coerce('traces');\n    coerce('baseframe');\n    coerce('data');\n    coerce('layout');\n\n    return frameOut;\n};\n\nplots.supplyTraceDefaults = function(traceIn, traceOut, colorIndex, layout, traceInIndex) {\n    var colorway = layout.colorway || Color.defaults;\n    var defaultColor = colorway[colorIndex % colorway.length];\n\n    var i;\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(traceIn, traceOut, plots.attributes, attr, dflt);\n    }\n\n    var visible = coerce('visible');\n\n    coerce('type');\n    coerce('name', layout._traceWord + ' ' + traceInIndex);\n\n    coerce('uirevision', layout.uirevision);\n\n    // we want even invisible traces to make their would-be subplots visible\n    // so coerce the subplot id(s) now no matter what\n    var _module = plots.getModule(traceOut);\n\n    traceOut._module = _module;\n    if(_module) {\n        var basePlotModule = _module.basePlotModule;\n        var subplotAttr = basePlotModule.attr;\n        var subplotAttrs = basePlotModule.attributes;\n        if(subplotAttr && subplotAttrs) {\n            var subplots = layout._subplots;\n            var subplotId = '';\n\n            // TODO - currently if we draw an empty gl2d subplot, it draws\n            // nothing then gets stuck and you can't get it back without newPlot\n            // sort this out in the regl refactor? but for now just drop empty gl2d subplots\n            if(basePlotModule.name !== 'gl2d' || visible) {\n                if(Array.isArray(subplotAttr)) {\n                    for(i = 0; i < subplotAttr.length; i++) {\n                        var attri = subplotAttr[i];\n                        var vali = Lib.coerce(traceIn, traceOut, subplotAttrs, attri);\n\n                        if(subplots[attri]) Lib.pushUnique(subplots[attri], vali);\n                        subplotId += vali;\n                    }\n                }\n                else {\n                    subplotId = Lib.coerce(traceIn, traceOut, subplotAttrs, subplotAttr);\n                }\n\n                if(subplots[basePlotModule.name]) {\n                    Lib.pushUnique(subplots[basePlotModule.name], subplotId);\n                }\n            }\n        }\n    }\n\n    function coerceUnlessPruned(attr, dflt, cb) {\n        if(_module && (attr in _module.attributes) && _module.attributes[attr] === undefined) {\n            // Pruned\n        } else {\n            if(cb && typeof cb === 'function') {\n                cb();\n            } else {\n                coerce(attr, dflt);\n            }\n        }\n    }\n\n    if(visible) {\n        coerce('customdata');\n        coerce('ids');\n\n        if(Registry.traceIs(traceOut, 'showLegend')) {\n            traceOut._dfltShowLegend = true;\n            coerce('showlegend');\n            coerce('legendgroup');\n        }\n        else {\n            traceOut._dfltShowLegend = false;\n        }\n\n        coerceUnlessPruned('hoverlabel', '', function() {\n            Registry.getComponentMethod(\n                'fx',\n                'supplyDefaults'\n            )(traceIn, traceOut, defaultColor, layout);\n        });\n\n        // TODO add per-base-plot-module trace defaults step\n\n        if(_module) {\n            _module.supplyDefaults(traceIn, traceOut, defaultColor, layout);\n            if(!traceOut.hovertemplate) Lib.coerceHoverinfo(traceIn, traceOut, layout);\n        }\n\n        if(!Registry.traceIs(traceOut, 'noOpacity')) coerce('opacity');\n\n        if(Registry.traceIs(traceOut, 'notLegendIsolatable')) {\n            // This clears out the legendonly state for traces like carpet that\n            // cannot be isolated in the legend\n            traceOut.visible = !!traceOut.visible;\n        }\n\n        if(_module && _module.selectPoints) {\n            coerce('selectedpoints');\n        }\n\n        plots.supplyTransformDefaults(traceIn, traceOut, layout);\n    }\n\n    return traceOut;\n};\n\n/**\n * hasMakesDataTransform: does this trace have a transform that makes its own\n * data, either by grabbing it from somewhere else or by creating it from input\n * parameters? If so, we should still keep going with supplyDefaults\n * even if the trace is invisible, which may just be because it has no data yet.\n */\nfunction hasMakesDataTransform(trace) {\n    var transforms = trace.transforms;\n    if(Array.isArray(transforms) && transforms.length) {\n        for(var i = 0; i < transforms.length; i++) {\n            var ti = transforms[i];\n            var _module = ti._module || transformsRegistry[ti.type];\n            if(_module && _module.makesData) return true;\n        }\n    }\n    return false;\n}\n\nplots.hasMakesDataTransform = hasMakesDataTransform;\n\nplots.supplyTransformDefaults = function(traceIn, traceOut, layout) {\n    // For now we only allow transforms on 1D traces, ie those that specify a _length.\n    // If we were to implement 2D transforms, we'd need to have each transform\n    // describe its own applicability and disable itself when it doesn't apply.\n    // Also allow transforms that make their own data, but not in globalTransforms\n    if(!(traceOut._length || hasMakesDataTransform(traceIn))) return;\n\n    var globalTransforms = layout._globalTransforms || [];\n    var transformModules = layout._transformModules || [];\n\n    if(!Array.isArray(traceIn.transforms) && globalTransforms.length === 0) return;\n\n    var containerIn = traceIn.transforms || [];\n    var transformList = globalTransforms.concat(containerIn);\n    var containerOut = traceOut.transforms = [];\n\n    for(var i = 0; i < transformList.length; i++) {\n        var transformIn = transformList[i];\n        var type = transformIn.type;\n        var _module = transformsRegistry[type];\n        var transformOut;\n\n        /*\n         * Supply defaults may run twice. First pass runs all supply defaults steps\n         * and adds the _module to any output transforms.\n         * If transforms exist another pass is run so that any generated traces also\n         * go through supply defaults. This has the effect of rerunning\n         * supplyTransformDefaults. If the transform does not have a `transform`\n         * function it could not have generated any new traces and the second stage\n         * is unnecessary. We detect this case with the following variables.\n         */\n        var isFirstStage = !(transformIn._module && transformIn._module === _module);\n        var doLaterStages = _module && typeof _module.transform === 'function';\n\n        if(!_module) Lib.warn('Unrecognized transform type ' + type + '.');\n\n        if(_module && _module.supplyDefaults && (isFirstStage || doLaterStages)) {\n            transformOut = _module.supplyDefaults(transformIn, traceOut, layout, traceIn);\n            transformOut.type = type;\n            transformOut._module = _module;\n\n            Lib.pushUnique(transformModules, _module);\n        }\n        else {\n            transformOut = Lib.extendFlat({}, transformIn);\n        }\n\n        containerOut.push(transformOut);\n    }\n};\n\nfunction applyTransforms(fullTrace, fullData, layout, fullLayout) {\n    var container = fullTrace.transforms;\n    var dataOut = [fullTrace];\n\n    for(var i = 0; i < container.length; i++) {\n        var transform = container[i];\n        var _module = transformsRegistry[transform.type];\n\n        if(_module && _module.transform) {\n            dataOut = _module.transform(dataOut, {\n                transform: transform,\n                fullTrace: fullTrace,\n                fullData: fullData,\n                layout: layout,\n                fullLayout: fullLayout,\n                transformIndex: i\n            });\n        }\n    }\n\n    return dataOut;\n}\n\nplots.supplyLayoutGlobalDefaults = function(layoutIn, layoutOut, formatObj) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(layoutIn, layoutOut, plots.layoutAttributes, attr, dflt);\n    }\n\n    var template = layoutIn.template;\n    if(Lib.isPlainObject(template)) {\n        layoutOut.template = template;\n        layoutOut._template = template.layout;\n        layoutOut._dataTemplate = template.data;\n    }\n\n    var globalFont = Lib.coerceFont(coerce, 'font');\n\n    coerce('title.text', layoutOut._dfltTitle.plot);\n\n    Lib.coerceFont(coerce, 'title.font', {\n        family: globalFont.family,\n        size: Math.round(globalFont.size * 1.4),\n        color: globalFont.color\n    });\n\n    coerce('title.xref');\n    coerce('title.yref');\n    coerce('title.x');\n    coerce('title.y');\n    coerce('title.xanchor');\n    coerce('title.yanchor');\n    coerce('title.pad.t');\n    coerce('title.pad.r');\n    coerce('title.pad.b');\n    coerce('title.pad.l');\n\n    // Make sure that autosize is defaulted to *true*\n    // on layouts with no set width and height for backward compatibly,\n    // in particular https://plot.ly/javascript/responsive-fluid-layout/\n    //\n    // Before https://github.com/plotly/plotly.js/pull/635 ,\n    // layouts with no set width and height were set temporary set to 'initial'\n    // to pass through the autosize routine\n    //\n    // This behavior is subject to change in v2.\n    coerce('autosize', !(layoutIn.width && layoutIn.height));\n\n    coerce('width');\n    coerce('height');\n    coerce('margin.l');\n    coerce('margin.r');\n    coerce('margin.t');\n    coerce('margin.b');\n    coerce('margin.pad');\n    coerce('margin.autoexpand');\n\n    if(layoutIn.width && layoutIn.height) plots.sanitizeMargins(layoutOut);\n\n    Registry.getComponentMethod('grid', 'sizeDefaults')(layoutIn, layoutOut);\n\n    coerce('paper_bgcolor');\n\n    coerce('separators', formatObj.decimal + formatObj.thousands);\n    coerce('hidesources');\n\n    coerce('colorway');\n\n    coerce('datarevision');\n    var uirevision = coerce('uirevision');\n    coerce('editrevision', uirevision);\n    coerce('selectionrevision', uirevision);\n\n    coerce('modebar.orientation');\n    coerce('modebar.bgcolor', Color.addOpacity(layoutOut.paper_bgcolor, 0.5));\n    var modebarDefaultColor = Color.contrast(Color.rgb(layoutOut.modebar.bgcolor));\n    coerce('modebar.color', Color.addOpacity(modebarDefaultColor, 0.3));\n    coerce('modebar.activecolor', Color.addOpacity(modebarDefaultColor, 0.7));\n    coerce('modebar.uirevision', uirevision);\n\n    coerce('meta');\n\n    // do not include defaults in fullLayout when users do not set transition\n    if(Lib.isPlainObject(layoutIn.transition)) {\n        coerce('transition.duration');\n        coerce('transition.easing');\n        coerce('transition.ordering');\n    }\n\n    Registry.getComponentMethod(\n        'calendars',\n        'handleDefaults'\n    )(layoutIn, layoutOut, 'calendar');\n\n    Registry.getComponentMethod(\n        'fx',\n        'supplyLayoutGlobalDefaults'\n    )(layoutIn, layoutOut, coerce);\n};\n\nplots.plotAutoSize = function plotAutoSize(gd, layout, fullLayout) {\n    var context = gd._context || {};\n    var frameMargins = context.frameMargins;\n    var newWidth;\n    var newHeight;\n\n    var isPlotDiv = Lib.isPlotDiv(gd);\n\n    if(isPlotDiv) gd.emit('plotly_autosize');\n\n    // embedded in an iframe - just take the full iframe size\n    // if we get to this point, with no aspect ratio restrictions\n    if(context.fillFrame) {\n        newWidth = window.innerWidth;\n        newHeight = window.innerHeight;\n\n        // somehow we get a few extra px height sometimes...\n        // just hide it\n        document.body.style.overflow = 'hidden';\n    }\n    else {\n        // plotly.js - let the developers do what they want, either\n        // provide height and width for the container div,\n        // specify size in layout, or take the defaults,\n        // but don't enforce any ratio restrictions\n        var computedStyle = isPlotDiv ? window.getComputedStyle(gd) : {};\n\n        newWidth = parseFloat(computedStyle.width) || parseFloat(computedStyle.maxWidth) || fullLayout.width;\n        newHeight = parseFloat(computedStyle.height) || parseFloat(computedStyle.maxHeight) || fullLayout.height;\n\n        if(isNumeric(frameMargins) && frameMargins > 0) {\n            var factor = 1 - 2 * frameMargins;\n            newWidth = Math.round(factor * newWidth);\n            newHeight = Math.round(factor * newHeight);\n        }\n    }\n\n    var minWidth = plots.layoutAttributes.width.min;\n    var minHeight = plots.layoutAttributes.height.min;\n    if(newWidth < minWidth) newWidth = minWidth;\n    if(newHeight < minHeight) newHeight = minHeight;\n\n    var widthHasChanged = !layout.width &&\n        (Math.abs(fullLayout.width - newWidth) > 1);\n    var heightHasChanged = !layout.height &&\n        (Math.abs(fullLayout.height - newHeight) > 1);\n\n    if(heightHasChanged || widthHasChanged) {\n        if(widthHasChanged) fullLayout.width = newWidth;\n        if(heightHasChanged) fullLayout.height = newHeight;\n    }\n\n    // cache initial autosize value, used in relayout when\n    // width or height values are set to null\n    if(!gd._initialAutoSize) {\n        gd._initialAutoSize = { width: newWidth, height: newHeight };\n    }\n\n    plots.sanitizeMargins(fullLayout);\n};\n\nplots.supplyLayoutModuleDefaults = function(layoutIn, layoutOut, fullData, transitionData) {\n    var componentsRegistry = Registry.componentsRegistry;\n    var basePlotModules = layoutOut._basePlotModules;\n    var component, i, _module;\n\n    var Cartesian = Registry.subplotsRegistry.cartesian;\n\n    // check if any components need to add more base plot modules\n    // that weren't captured by traces\n    for(component in componentsRegistry) {\n        _module = componentsRegistry[component];\n\n        if(_module.includeBasePlot) {\n            _module.includeBasePlot(layoutIn, layoutOut);\n        }\n    }\n\n    // make sure we *at least* have some cartesian axes\n    if(!basePlotModules.length) {\n        basePlotModules.push(Cartesian);\n    }\n\n    // ensure all cartesian axes have at least one subplot\n    if(layoutOut._has('cartesian')) {\n        Registry.getComponentMethod('grid', 'contentDefaults')(layoutIn, layoutOut);\n        Cartesian.finalizeSubplots(layoutIn, layoutOut);\n    }\n\n    // sort subplot lists\n    for(var subplotType in layoutOut._subplots) {\n        layoutOut._subplots[subplotType].sort(Lib.subplotSort);\n    }\n\n    // base plot module layout defaults\n    for(i = 0; i < basePlotModules.length; i++) {\n        _module = basePlotModules[i];\n\n        // e.g. pie does not have a layout-defaults step\n        if(_module.supplyLayoutDefaults) {\n            _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n        }\n    }\n\n    // trace module layout defaults\n    // use _modules rather than _visibleModules so that even\n    // legendonly traces can include settings - eg barmode, which affects\n    // legend.traceorder default value.\n    var modules = layoutOut._modules;\n    for(i = 0; i < modules.length; i++) {\n        _module = modules[i];\n\n        if(_module.supplyLayoutDefaults) {\n            _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n        }\n    }\n\n    // transform module layout defaults\n    var transformModules = layoutOut._transformModules;\n    for(i = 0; i < transformModules.length; i++) {\n        _module = transformModules[i];\n\n        if(_module.supplyLayoutDefaults) {\n            _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData, transitionData);\n        }\n    }\n\n    for(component in componentsRegistry) {\n        _module = componentsRegistry[component];\n\n        if(_module.supplyLayoutDefaults) {\n            _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n        }\n    }\n};\n\n// Remove all plotly attributes from a div so it can be replotted fresh\n// TODO: these really need to be encapsulated into a much smaller set...\nplots.purge = function(gd) {\n    // note: we DO NOT remove _context because it doesn't change when we insert\n    // a new plot, and may have been set outside of our scope.\n\n    var fullLayout = gd._fullLayout || {};\n    if(fullLayout._glcontainer !== undefined) {\n        fullLayout._glcontainer.selectAll('.gl-canvas').remove();\n        fullLayout._glcontainer.remove();\n        fullLayout._glcanvas = null;\n    }\n    if(fullLayout._geocontainer !== undefined) fullLayout._geocontainer.remove();\n\n    // remove modebar\n    if(fullLayout._modeBar) fullLayout._modeBar.destroy();\n\n    if(gd._transitionData) {\n        // Ensure any dangling callbacks are simply dropped if the plot is purged.\n        // This is more or less only actually important for testing.\n        if(gd._transitionData._interruptCallbacks) {\n            gd._transitionData._interruptCallbacks.length = 0;\n        }\n\n        if(gd._transitionData._animationRaf) {\n            window.cancelAnimationFrame(gd._transitionData._animationRaf);\n        }\n    }\n\n    // remove any planned throttles\n    Lib.clearThrottle();\n\n    // remove responsive handler\n    Lib.clearResponsive(gd);\n\n    // data and layout\n    delete gd.data;\n    delete gd.layout;\n    delete gd._fullData;\n    delete gd._fullLayout;\n    delete gd.calcdata;\n    delete gd.framework;\n    delete gd.empty;\n\n    delete gd.fid;\n\n    delete gd.undoqueue; // action queue\n    delete gd.undonum;\n    delete gd.autoplay; // are we doing an action that doesn't go in undo queue?\n    delete gd.changed;\n\n    // these get recreated on Plotly.plot anyway, but just to be safe\n    // (and to have a record of them...)\n    delete gd._promises;\n    delete gd._redrawTimer;\n    delete gd._hmlumcount;\n    delete gd._hmpixcount;\n    delete gd._transitionData;\n    delete gd._transitioning;\n    delete gd._initialAutoSize;\n    delete gd._transitioningWithDuration;\n\n    // created during certain events, that *should* clean them up\n    // themselves, but may not if there was an error\n    delete gd._dragging;\n    delete gd._dragged;\n    delete gd._hoverdata;\n    delete gd._snapshotInProgress;\n    delete gd._editing;\n    delete gd._replotPending;\n    delete gd._mouseDownTime;\n    delete gd._legendMouseDownTime;\n\n    // remove all event listeners\n    if(gd.removeAllListeners) gd.removeAllListeners();\n};\n\nplots.style = function(gd) {\n    var _modules = gd._fullLayout._visibleModules;\n    var styleModules = [];\n    var i;\n\n    // some trace modules reuse the same style method,\n    // make sure to not unnecessary call them multiple times.\n\n    for(i = 0; i < _modules.length; i++) {\n        var _module = _modules[i];\n        if(_module.style) {\n            Lib.pushUnique(styleModules, _module.style);\n        }\n    }\n\n    for(i = 0; i < styleModules.length; i++) {\n        styleModules[i](gd);\n    }\n};\n\nplots.sanitizeMargins = function(fullLayout) {\n    // polar doesn't do margins...\n    if(!fullLayout || !fullLayout.margin) return;\n\n    var width = fullLayout.width;\n    var height = fullLayout.height;\n    var margin = fullLayout.margin;\n    var plotWidth = width - (margin.l + margin.r);\n    var plotHeight = height - (margin.t + margin.b);\n    var correction;\n\n    // if margin.l + margin.r = 0 then plotWidth > 0\n    // as width >= 10 by supplyDefaults\n    // similarly for margin.t + margin.b\n\n    if(plotWidth < 0) {\n        correction = (width - 1) / (margin.l + margin.r);\n        margin.l = Math.floor(correction * margin.l);\n        margin.r = Math.floor(correction * margin.r);\n    }\n\n    if(plotHeight < 0) {\n        correction = (height - 1) / (margin.t + margin.b);\n        margin.t = Math.floor(correction * margin.t);\n        margin.b = Math.floor(correction * margin.b);\n    }\n};\n\nplots.clearAutoMarginIds = function(gd) {\n    gd._fullLayout._pushmarginIds = {};\n};\n\nplots.allowAutoMargin = function(gd, id) {\n    gd._fullLayout._pushmarginIds[id] = 1;\n};\n\nfunction initMargins(fullLayout) {\n    var margin = fullLayout.margin;\n\n    if(!fullLayout._size) {\n        var gs = fullLayout._size = {\n            l: Math.round(margin.l),\n            r: Math.round(margin.r),\n            t: Math.round(margin.t),\n            b: Math.round(margin.b),\n            p: Math.round(margin.pad)\n        };\n        gs.w = Math.round(fullLayout.width) - gs.l - gs.r;\n        gs.h = Math.round(fullLayout.height) - gs.t - gs.b;\n    }\n    if(!fullLayout._pushmargin) fullLayout._pushmargin = {};\n    if(!fullLayout._pushmarginIds) fullLayout._pushmarginIds = {};\n}\n\n/**\n * autoMargin: called by components that may need to expand the margins to\n * be rendered on-plot.\n *\n * @param {DOM element} gd\n * @param {string} id - an identifier unique (within this plot) to this object,\n *     so we can remove a previous margin expansion from the same object.\n * @param {object} o - the margin requirements of this object, or omit to delete\n *     this entry (like if it's hidden). Keys are:\n *     x, y: plot fraction of the anchor point.\n *     xl, xr, yt, yb: if the object has an extent defined in plot fraction,\n *         you can specify both edges as plot fractions in each dimension\n *     l, r, t, b: the pixels to pad past the plot fraction x[l|r] and y[t|b]\n *     pad: extra pixels to add in all directions, default 12 (why?)\n */\nplots.autoMargin = function(gd, id, o) {\n    var fullLayout = gd._fullLayout;\n\n    var pushMargin = fullLayout._pushmargin;\n    var pushMarginIds = fullLayout._pushmarginIds;\n\n    if(fullLayout.margin.autoexpand !== false) {\n        if(!o) {\n            delete pushMargin[id];\n            delete pushMarginIds[id];\n        }\n        else {\n            var pad = o.pad;\n            if(pad === undefined) {\n                var margin = fullLayout.margin;\n                // if no explicit pad is given, use 12px unless there's a\n                // specified margin that's smaller than that\n                pad = Math.min(12, margin.l, margin.r, margin.t, margin.b);\n            }\n\n            // if the item is too big, just give it enough automargin to\n            // make sure you can still grab it and bring it back\n            if(o.l + o.r > fullLayout.width * 0.5) o.l = o.r = 0;\n            if(o.b + o.t > fullLayout.height * 0.5) o.b = o.t = 0;\n\n            var xl = o.xl !== undefined ? o.xl : o.x;\n            var xr = o.xr !== undefined ? o.xr : o.x;\n            var yt = o.yt !== undefined ? o.yt : o.y;\n            var yb = o.yb !== undefined ? o.yb : o.y;\n\n            pushMargin[id] = {\n                l: {val: xl, size: o.l + pad},\n                r: {val: xr, size: o.r + pad},\n                b: {val: yb, size: o.b + pad},\n                t: {val: yt, size: o.t + pad}\n            };\n            pushMarginIds[id] = 1;\n        }\n\n        if(!fullLayout._replotting) plots.doAutoMargin(gd);\n    }\n};\n\nplots.doAutoMargin = function(gd) {\n    var fullLayout = gd._fullLayout;\n    if(!fullLayout._size) fullLayout._size = {};\n    initMargins(fullLayout);\n\n    var gs = fullLayout._size;\n    var oldmargins = JSON.stringify(gs);\n    var margin = fullLayout.margin;\n\n    // adjust margins for outside components\n    // fullLayout.margin is the requested margin,\n    // fullLayout._size has margins and plotsize after adjustment\n    var ml = margin.l;\n    var mr = margin.r;\n    var mt = margin.t;\n    var mb = margin.b;\n    var pushMargin = fullLayout._pushmargin;\n    var pushMarginIds = fullLayout._pushmarginIds;\n\n    if(fullLayout.margin.autoexpand !== false) {\n\n        for(var k in pushMargin) {\n            if(!pushMarginIds[k]) delete pushMargin[k];\n        }\n\n        // fill in the requested margins\n        pushMargin.base = {\n            l: {val: 0, size: ml},\n            r: {val: 1, size: mr},\n            t: {val: 1, size: mt},\n            b: {val: 0, size: mb}\n        };\n\n        // now cycle through all the combinations of l and r\n        // (and t and b) to find the required margins\n\n        for(var k1 in pushMargin) {\n\n            var pushleft = pushMargin[k1].l || {};\n            var pushbottom = pushMargin[k1].b || {};\n            var fl = pushleft.val;\n            var pl = pushleft.size;\n            var fb = pushbottom.val;\n            var pb = pushbottom.size;\n\n            for(var k2 in pushMargin) {\n                if(isNumeric(pl) && pushMargin[k2].r) {\n                    var fr = pushMargin[k2].r.val;\n                    var pr = pushMargin[k2].r.size;\n\n                    if(fr > fl) {\n                        var newl = (pl * fr +\n                            (pr - fullLayout.width) * fl) / (fr - fl);\n                        var newr = (pr * (1 - fl) +\n                            (pl - fullLayout.width) * (1 - fr)) / (fr - fl);\n                        if(newl >= 0 && newr >= 0 && newl + newr > ml + mr) {\n                            ml = newl;\n                            mr = newr;\n                        }\n                    }\n                }\n\n                if(isNumeric(pb) && pushMargin[k2].t) {\n                    var ft = pushMargin[k2].t.val;\n                    var pt = pushMargin[k2].t.size;\n\n                    if(ft > fb) {\n                        var newb = (pb * ft +\n                            (pt - fullLayout.height) * fb) / (ft - fb);\n                        var newt = (pt * (1 - fb) +\n                            (pb - fullLayout.height) * (1 - ft)) / (ft - fb);\n                        if(newb >= 0 && newt >= 0 && newb + newt > mb + mt) {\n                            mb = newb;\n                            mt = newt;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    gs.l = Math.round(ml);\n    gs.r = Math.round(mr);\n    gs.t = Math.round(mt);\n    gs.b = Math.round(mb);\n    gs.p = Math.round(margin.pad);\n    gs.w = Math.round(fullLayout.width) - gs.l - gs.r;\n    gs.h = Math.round(fullLayout.height) - gs.t - gs.b;\n\n    // if things changed and we're not already redrawing, trigger a redraw\n    if(!fullLayout._replotting &&\n        oldmargins !== '{}' &&\n        oldmargins !== JSON.stringify(fullLayout._size)\n    ) {\n        if('_redrawFromAutoMarginCount' in fullLayout) {\n            fullLayout._redrawFromAutoMarginCount++;\n        } else {\n            fullLayout._redrawFromAutoMarginCount = 1;\n        }\n        return Registry.call('plot', gd);\n    }\n};\n\n/**\n * JSONify the graph data and layout\n *\n * This function needs to recurse because some src can be inside\n * sub-objects.\n *\n * It also strips out functions and private (starts with _) elements.\n * Therefore, we can add temporary things to data and layout that don't\n * get saved.\n *\n * @param gd The graphDiv\n * @param {Boolean} dataonly If true, don't return layout.\n * @param {'keepref'|'keepdata'|'keepall'} [mode='keepref'] Filter what's kept\n *      keepref: remove data for which there's a src present\n *          eg if there's xsrc present (and xsrc is well-formed,\n *          ie has : and some chars before it), strip out x\n *      keepdata: remove all src tags, don't remove the data itself\n *      keepall: keep data and src\n * @param {String} output If you specify 'object', the result will not be stringified\n * @param {Boolean} useDefaults If truthy, use _fullLayout and _fullData\n * @returns {Object|String}\n */\nplots.graphJson = function(gd, dataonly, mode, output, useDefaults) {\n    // if the defaults aren't supplied yet, we need to do that...\n    if((useDefaults && dataonly && !gd._fullData) ||\n            (useDefaults && !dataonly && !gd._fullLayout)) {\n        plots.supplyDefaults(gd);\n    }\n\n    var data = (useDefaults) ? gd._fullData : gd.data;\n    var layout = (useDefaults) ? gd._fullLayout : gd.layout;\n    var frames = (gd._transitionData || {})._frames;\n\n    function stripObj(d) {\n        if(typeof d === 'function') {\n            return null;\n        }\n        if(Lib.isPlainObject(d)) {\n            var o = {};\n            var v, src;\n            for(v in d) {\n                // remove private elements and functions\n                // _ is for private, [ is a mistake ie [object Object]\n                if(typeof d[v] === 'function' ||\n                        ['_', '['].indexOf(v.charAt(0)) !== -1) {\n                    continue;\n                }\n\n                // look for src/data matches and remove the appropriate one\n                if(mode === 'keepdata') {\n                    // keepdata: remove all ...src tags\n                    if(v.substr(v.length - 3) === 'src') {\n                        continue;\n                    }\n                }\n                else if(mode === 'keepstream') {\n                    // keep sourced data if it's being streamed.\n                    // similar to keepref, but if the 'stream' object exists\n                    // in a trace, we will keep the data array.\n                    src = d[v + 'src'];\n                    if(typeof src === 'string' && src.indexOf(':') > 0) {\n                        if(!Lib.isPlainObject(d.stream)) {\n                            continue;\n                        }\n                    }\n                }\n                else if(mode !== 'keepall') {\n                    // keepref: remove sourced data but only\n                    // if the source tag is well-formed\n                    src = d[v + 'src'];\n                    if(typeof src === 'string' && src.indexOf(':') > 0) {\n                        continue;\n                    }\n                }\n\n                // OK, we're including this... recurse into it\n                o[v] = stripObj(d[v]);\n            }\n            return o;\n        }\n\n        if(Array.isArray(d)) {\n            return d.map(stripObj);\n        }\n\n        if(Lib.isTypedArray(d)) {\n            return Lib.simpleMap(d, Lib.identity);\n        }\n\n        // convert native dates to date strings...\n        // mostly for external users exporting to plotly\n        if(Lib.isJSDate(d)) return Lib.ms2DateTimeLocal(+d);\n\n        return d;\n    }\n\n    var obj = {\n        data: (data || []).map(function(v) {\n            var d = stripObj(v);\n            // fit has some little arrays in it that don't contain data,\n            // just fit params and meta\n            if(dataonly) { delete d.fit; }\n            return d;\n        })\n    };\n    if(!dataonly) { obj.layout = stripObj(layout); }\n\n    if(gd.framework && gd.framework.isPolar) obj = gd.framework.getConfig();\n\n    if(frames) obj.frames = stripObj(frames);\n\n    return (output === 'object') ? obj : JSON.stringify(obj);\n};\n\n/**\n * Modify a keyframe using a list of operations:\n *\n * @param {array of objects} operations\n *      Sequence of operations to be performed on the keyframes\n */\nplots.modifyFrames = function(gd, operations) {\n    var i, op, frame;\n    var _frames = gd._transitionData._frames;\n    var _frameHash = gd._transitionData._frameHash;\n\n    for(i = 0; i < operations.length; i++) {\n        op = operations[i];\n\n        switch(op.type) {\n            // No reason this couldn't exist, but is currently unused/untested:\n            /* case 'rename':\n                frame = _frames[op.index];\n                delete _frameHash[frame.name];\n                _frameHash[op.name] = frame;\n                frame.name = op.name;\n                break;*/\n            case 'replace':\n                frame = op.value;\n                var oldName = (_frames[op.index] || {}).name;\n                var newName = frame.name;\n                _frames[op.index] = _frameHash[newName] = frame;\n\n                if(newName !== oldName) {\n                    // If name has changed in addition to replacement, then update\n                    // the lookup table:\n                    delete _frameHash[oldName];\n                    _frameHash[newName] = frame;\n                }\n\n                break;\n            case 'insert':\n                frame = op.value;\n                _frameHash[frame.name] = frame;\n                _frames.splice(op.index, 0, frame);\n                break;\n            case 'delete':\n                frame = _frames[op.index];\n                delete _frameHash[frame.name];\n                _frames.splice(op.index, 1);\n                break;\n        }\n    }\n\n    return Promise.resolve();\n};\n\n/*\n * Compute a keyframe. Merge a keyframe into its base frame(s) and\n * expand properties.\n *\n * @param {object} frameLookup\n *      An object containing frames keyed by name (i.e. gd._transitionData._frameHash)\n * @param {string} frame\n *      The name of the keyframe to be computed\n *\n * Returns: a new object with the merged content\n */\nplots.computeFrame = function(gd, frameName) {\n    var frameLookup = gd._transitionData._frameHash;\n    var i, traceIndices, traceIndex, destIndex;\n\n    // Null or undefined will fail on .toString(). We'll allow numbers since we\n    // make it clear frames must be given string names, but we'll allow numbers\n    // here since they're otherwise fine for looking up frames as long as they're\n    // properly cast to strings. We really just want to ensure here that this\n    // 1) doesn't fail, and\n    // 2) doens't give an incorrect answer (which String(frameName) would)\n    if(!frameName) {\n        throw new Error('computeFrame must be given a string frame name');\n    }\n\n    var framePtr = frameLookup[frameName.toString()];\n\n    // Return false if the name is invalid:\n    if(!framePtr) {\n        return false;\n    }\n\n    var frameStack = [framePtr];\n    var frameNameStack = [framePtr.name];\n\n    // Follow frame pointers:\n    while(framePtr.baseframe && (framePtr = frameLookup[framePtr.baseframe.toString()])) {\n        // Avoid infinite loops:\n        if(frameNameStack.indexOf(framePtr.name) !== -1) break;\n\n        frameStack.push(framePtr);\n        frameNameStack.push(framePtr.name);\n    }\n\n    // A new object for the merged result:\n    var result = {};\n\n    // Merge, starting with the last and ending with the desired frame:\n    while((framePtr = frameStack.pop())) {\n        if(framePtr.layout) {\n            result.layout = plots.extendLayout(result.layout, framePtr.layout);\n        }\n\n        if(framePtr.data) {\n            if(!result.data) {\n                result.data = [];\n            }\n            traceIndices = framePtr.traces;\n\n            if(!traceIndices) {\n                // If not defined, assume serial order starting at zero\n                traceIndices = [];\n                for(i = 0; i < framePtr.data.length; i++) {\n                    traceIndices[i] = i;\n                }\n            }\n\n            if(!result.traces) {\n                result.traces = [];\n            }\n\n            for(i = 0; i < framePtr.data.length; i++) {\n                // Loop through this frames data, find out where it should go,\n                // and merge it!\n                traceIndex = traceIndices[i];\n                if(traceIndex === undefined || traceIndex === null) {\n                    continue;\n                }\n\n                destIndex = result.traces.indexOf(traceIndex);\n                if(destIndex === -1) {\n                    destIndex = result.data.length;\n                    result.traces[destIndex] = traceIndex;\n                }\n\n                result.data[destIndex] = plots.extendTrace(result.data[destIndex], framePtr.data[i]);\n            }\n        }\n    }\n\n    return result;\n};\n\n/*\n * Recompute the lookup table that maps frame name -> frame object. addFrames/\n * deleteFrames already manages this data one at a time, so the only time this\n * is necessary is if you poke around manually in `gd._transitionData._frames`\n * and create and haven't updated the lookup table.\n */\nplots.recomputeFrameHash = function(gd) {\n    var hash = gd._transitionData._frameHash = {};\n    var frames = gd._transitionData._frames;\n    for(var i = 0; i < frames.length; i++) {\n        var frame = frames[i];\n        if(frame && frame.name) {\n            hash[frame.name] = frame;\n        }\n    }\n};\n\n/**\n * Extend an object, treating container arrays very differently by extracting\n * their contents and merging them separately.\n *\n * This exists so that we can extendDeepNoArrays and avoid stepping into data\n * arrays without knowledge of the plot schema, but so that we may also manually\n * recurse into known container arrays, such as transforms.\n *\n * See extendTrace and extendLayout below for usage.\n */\nplots.extendObjectWithContainers = function(dest, src, containerPaths) {\n    var containerProp, containerVal, i, j, srcProp, destProp, srcContainer, destContainer;\n    var copy = Lib.extendDeepNoArrays({}, src || {});\n    var expandedObj = Lib.expandObjectPaths(copy);\n    var containerObj = {};\n\n    // Step through and extract any container properties. Otherwise extendDeepNoArrays\n    // will clobber any existing properties with an empty array and then supplyDefaults\n    // will reset everything to defaults.\n    if(containerPaths && containerPaths.length) {\n        for(i = 0; i < containerPaths.length; i++) {\n            containerProp = Lib.nestedProperty(expandedObj, containerPaths[i]);\n            containerVal = containerProp.get();\n\n            if(containerVal === undefined) {\n                Lib.nestedProperty(containerObj, containerPaths[i]).set(null);\n            }\n            else {\n                containerProp.set(null);\n                Lib.nestedProperty(containerObj, containerPaths[i]).set(containerVal);\n            }\n        }\n    }\n\n    dest = Lib.extendDeepNoArrays(dest || {}, expandedObj);\n\n    if(containerPaths && containerPaths.length) {\n        for(i = 0; i < containerPaths.length; i++) {\n            srcProp = Lib.nestedProperty(containerObj, containerPaths[i]);\n            srcContainer = srcProp.get();\n\n            if(!srcContainer) continue;\n\n            destProp = Lib.nestedProperty(dest, containerPaths[i]);\n            destContainer = destProp.get();\n\n            if(!Array.isArray(destContainer)) {\n                destContainer = [];\n                destProp.set(destContainer);\n            }\n\n            for(j = 0; j < srcContainer.length; j++) {\n                var srcObj = srcContainer[j];\n\n                if(srcObj === null) destContainer[j] = null;\n                else {\n                    destContainer[j] = plots.extendObjectWithContainers(destContainer[j], srcObj);\n                }\n            }\n\n            destProp.set(destContainer);\n        }\n    }\n\n    return dest;\n};\n\nplots.dataArrayContainers = ['transforms', 'dimensions'];\nplots.layoutArrayContainers = Registry.layoutArrayContainers;\n\n/*\n * Extend a trace definition. This method:\n *\n *  1. directly transfers any array references\n *  2. manually recurses into container arrays like transforms\n *\n * The result is the original object reference with the new contents merged in.\n */\nplots.extendTrace = function(destTrace, srcTrace) {\n    return plots.extendObjectWithContainers(destTrace, srcTrace, plots.dataArrayContainers);\n};\n\n/*\n * Extend a layout definition. This method:\n *\n *  1. directly transfers any array references (not critically important for\n *     layout since there aren't really data arrays)\n *  2. manually recurses into container arrays like annotations\n *\n * The result is the original object reference with the new contents merged in.\n */\nplots.extendLayout = function(destLayout, srcLayout) {\n    return plots.extendObjectWithContainers(destLayout, srcLayout, plots.layoutArrayContainers);\n};\n\n/**\n * Transition to a set of new data and layout properties from Plotly.animate\n *\n * @param {DOM element} gd\n * @param {Object[]} data\n *      an array of data objects following the normal Plotly data definition format\n * @param {Object} layout\n *      a layout object, following normal Plotly layout format\n * @param {Number[]} traces\n *      indices of the corresponding traces specified in `data`\n * @param {Object} frameOpts\n *      options for the frame (i.e. whether to redraw post-transition)\n * @param {Object} transitionOpts\n *      options for the transition\n */\nplots.transition = function(gd, data, layout, traces, frameOpts, transitionOpts) {\n    var opts = {redraw: frameOpts.redraw};\n    var transitionedTraces = [];\n    var axEdits = [];\n\n    opts.prepareFn = function() {\n        var dataLength = Array.isArray(data) ? data.length : 0;\n        var traceIndices = traces.slice(0, dataLength);\n\n        for(var i = 0; i < traceIndices.length; i++) {\n            var traceIdx = traceIndices[i];\n            var trace = gd._fullData[traceIdx];\n            var module = trace._module;\n\n            // There's nothing to do if this module is not defined:\n            if(!module) continue;\n\n            // Don't register the trace as transitioned if it doesn't know what to do.\n            // If it *is* registered, it will receive a callback that it's responsible\n            // for calling in order to register the transition as having completed.\n            if(module.animatable) {\n                transitionedTraces.push(traceIdx);\n            }\n\n            gd.data[traceIndices[i]] = plots.extendTrace(gd.data[traceIndices[i]], data[i]);\n        }\n\n        // Follow the same procedure. Clone it so we don't mangle the input, then\n        // expand any object paths so we can merge deep into gd.layout:\n        var layoutUpdate = Lib.expandObjectPaths(Lib.extendDeepNoArrays({}, layout));\n\n        // Before merging though, we need to modify the incoming layout. We only\n        // know how to *transition* layout ranges, so it's imperative that a new\n        // range not be sent to the layout before the transition has started. So\n        // we must remove the things we can transition:\n        var axisAttrRe = /^[xy]axis[0-9]*$/;\n        for(var attr in layoutUpdate) {\n            if(!axisAttrRe.test(attr)) continue;\n            delete layoutUpdate[attr].range;\n        }\n\n        plots.extendLayout(gd.layout, layoutUpdate);\n\n        // Supply defaults after applying the incoming properties. Note that any attempt\n        // to simplify this step and reduce the amount of work resulted in the reconstruction\n        // of essentially the whole supplyDefaults step, so that it seems sensible to just use\n        // supplyDefaults even though it's heavier than would otherwise be desired for\n        // transitions:\n\n        // first delete calcdata so supplyDefaults knows a calc step is coming\n        delete gd.calcdata;\n\n        plots.supplyDefaults(gd);\n        plots.doCalcdata(gd);\n\n        var newLayout = Lib.expandObjectPaths(layout);\n\n        if(newLayout) {\n            var subplots = gd._fullLayout._plots;\n\n            for(var k in subplots) {\n                var plotinfo = subplots[k];\n                var xa = plotinfo.xaxis;\n                var ya = plotinfo.yaxis;\n                var xr0 = xa.range.slice();\n                var yr0 = ya.range.slice();\n\n                var xr1;\n                if(Array.isArray(newLayout[xa._name + '.range'])) {\n                    xr1 = newLayout[xa._name + '.range'].slice();\n                } else if(Array.isArray((newLayout[xa._name] || {}).range)) {\n                    xr1 = newLayout[xa._name].range.slice();\n                }\n\n                var yr1;\n                if(Array.isArray(newLayout[ya._name + '.range'])) {\n                    yr1 = newLayout[ya._name + '.range'].slice();\n                } else if(Array.isArray((newLayout[ya._name] || {}).range)) {\n                    yr1 = newLayout[ya._name].range.slice();\n                }\n\n                var editX;\n                if(xr0 && xr1 && (xr0[0] !== xr1[0] || xr0[1] !== xr1[1])) {\n                    editX = {xr0: xr0, xr1: xr1};\n                }\n\n                var editY;\n                if(yr0 && yr1 && (yr0[0] !== yr1[0] || yr0[1] !== yr1[1])) {\n                    editY = {yr0: yr0, yr1: yr1};\n                }\n\n                if(editX || editY) {\n                    axEdits.push(Lib.extendFlat({plotinfo: plotinfo}, editX, editY));\n                }\n            }\n        }\n\n        return Promise.resolve();\n    };\n\n    opts.runFn = function(makeCallback) {\n        var traceTransitionOpts;\n        var basePlotModules = gd._fullLayout._basePlotModules;\n        var hasAxisTransition = axEdits.length;\n        var i;\n\n        if(layout) {\n            for(i = 0; i < basePlotModules.length; i++) {\n                if(basePlotModules[i].transitionAxes) {\n                    basePlotModules[i].transitionAxes(gd, axEdits, transitionOpts, makeCallback);\n                }\n            }\n        }\n\n        // Here handle the exception that we refuse to animate scales and axes at the same\n        // time. In other words, if there's an axis transition, then set the data transition\n        // to instantaneous.\n        if(hasAxisTransition) {\n            traceTransitionOpts = Lib.extendFlat({}, transitionOpts);\n            traceTransitionOpts.duration = 0;\n            // This means do not transition traces,\n            // this happens on layout-only (e.g. axis range) animations\n            transitionedTraces = null;\n        } else {\n            traceTransitionOpts = transitionOpts;\n        }\n\n        for(i = 0; i < basePlotModules.length; i++) {\n            // Note that we pass a callback to *create* the callback that must be invoked on completion.\n            // This is since not all traces know about transitions, so it greatly simplifies matters if\n            // the trace is responsible for creating a callback, if needed, and then executing it when\n            // the time is right.\n            basePlotModules[i].plot(gd, transitionedTraces, traceTransitionOpts, makeCallback);\n        }\n    };\n\n    return _transition(gd, transitionOpts, opts);\n};\n\n/**\n * Transition to a set of new data and layout properties from Plotly.react\n *\n * @param {DOM element} gd\n * @param {object} restyleFlags\n * - anim {'all'|'some'}\n * @param {object} relayoutFlags\n * - anim {'all'|'some'}\n * @param {object} oldFullLayout : old (pre Plotly.react) fullLayout\n */\nplots.transitionFromReact = function(gd, restyleFlags, relayoutFlags, oldFullLayout) {\n    var fullLayout = gd._fullLayout;\n    var transitionOpts = fullLayout.transition;\n    var opts = {};\n    var axEdits = [];\n\n    opts.prepareFn = function() {\n        var subplots = fullLayout._plots;\n\n        // no need to redraw at end of transition,\n        // if all changes are animatable\n        opts.redraw = false;\n        if(restyleFlags.anim === 'some') opts.redraw = true;\n        if(relayoutFlags.anim === 'some') opts.redraw = true;\n\n        for(var k in subplots) {\n            var plotinfo = subplots[k];\n            var xa = plotinfo.xaxis;\n            var ya = plotinfo.yaxis;\n            var xr0 = oldFullLayout[xa._name].range.slice();\n            var yr0 = oldFullLayout[ya._name].range.slice();\n            var xr1 = xa.range.slice();\n            var yr1 = ya.range.slice();\n\n            xa.setScale();\n            ya.setScale();\n\n            var editX;\n            if(xr0[0] !== xr1[0] || xr0[1] !== xr1[1]) {\n                editX = {xr0: xr0, xr1: xr1};\n            }\n\n            var editY;\n            if(yr0[0] !== yr1[0] || yr0[1] !== yr1[1]) {\n                editY = {yr0: yr0, yr1: yr1};\n            }\n\n            if(editX || editY) {\n                axEdits.push(Lib.extendFlat({plotinfo: plotinfo}, editX, editY));\n            }\n        }\n\n        return Promise.resolve();\n    };\n\n    opts.runFn = function(makeCallback) {\n        var fullData = gd._fullData;\n        var fullLayout = gd._fullLayout;\n        var basePlotModules = fullLayout._basePlotModules;\n\n        var axisTransitionOpts;\n        var traceTransitionOpts;\n        var transitionedTraces;\n\n        var allTraceIndices = [];\n        for(var i = 0; i < fullData.length; i++) {\n            allTraceIndices.push(i);\n        }\n\n        function transitionAxes() {\n            for(var j = 0; j < basePlotModules.length; j++) {\n                if(basePlotModules[j].transitionAxes) {\n                    basePlotModules[j].transitionAxes(gd, axEdits, axisTransitionOpts, makeCallback);\n                }\n            }\n        }\n\n        function transitionTraces() {\n            for(var j = 0; j < basePlotModules.length; j++) {\n                basePlotModules[j].plot(gd, transitionedTraces, traceTransitionOpts, makeCallback);\n            }\n        }\n\n        if(axEdits.length && restyleFlags.anim) {\n            if(transitionOpts.ordering === 'traces first') {\n                axisTransitionOpts = Lib.extendFlat({}, transitionOpts, {duration: 0});\n                transitionedTraces = allTraceIndices;\n                traceTransitionOpts = transitionOpts;\n                transitionTraces();\n                setTimeout(transitionAxes, transitionOpts.duration);\n            } else {\n                axisTransitionOpts = transitionOpts;\n                transitionedTraces = null;\n                traceTransitionOpts = Lib.extendFlat({}, transitionOpts, {duration: 0});\n                transitionAxes();\n                transitionTraces();\n            }\n        } else if(axEdits.length) {\n            axisTransitionOpts = transitionOpts;\n            transitionAxes();\n        } else if(restyleFlags.anim) {\n            transitionedTraces = allTraceIndices;\n            traceTransitionOpts = transitionOpts;\n            transitionTraces();\n        }\n    };\n\n    return _transition(gd, transitionOpts, opts);\n};\n\n/**\n * trace/layout transition wrapper that works\n * for transitions initiated by Plotly.animate and Plotly.react.\n *\n * @param {DOM element} gd\n * @param {object} transitionOpts\n * @param {object} opts\n * - redraw {boolean}\n * - prepareFn {function} *should return a Promise*\n * - runFn {function} ran inside executeTransitions\n */\nfunction _transition(gd, transitionOpts, opts) {\n    var aborted = false;\n\n    function executeCallbacks(list) {\n        var p = Promise.resolve();\n        if(!list) return p;\n        while(list.length) {\n            p = p.then((list.shift()));\n        }\n        return p;\n    }\n\n    function flushCallbacks(list) {\n        if(!list) return;\n        while(list.length) {\n            list.shift();\n        }\n    }\n\n    function executeTransitions() {\n        gd.emit('plotly_transitioning', []);\n\n        return new Promise(function(resolve) {\n            // This flag is used to disabled things like autorange:\n            gd._transitioning = true;\n\n            // When instantaneous updates are coming through quickly, it's too much to simply disable\n            // all interaction, so store this flag so we can disambiguate whether mouse interactions\n            // should be fully disabled or not:\n            if(transitionOpts.duration > 0) {\n                gd._transitioningWithDuration = true;\n            }\n\n            // If another transition is triggered, this callback will be executed simply because it's\n            // in the interruptCallbacks queue. If this transition completes, it will instead flush\n            // that queue and forget about this callback.\n            gd._transitionData._interruptCallbacks.push(function() {\n                aborted = true;\n            });\n\n            if(opts.redraw) {\n                gd._transitionData._interruptCallbacks.push(function() {\n                    return Registry.call('redraw', gd);\n                });\n            }\n\n            // Emit this and make sure it happens last:\n            gd._transitionData._interruptCallbacks.push(function() {\n                gd.emit('plotly_transitioninterrupted', []);\n            });\n\n            // Construct callbacks that are executed on transition end. This ensures the d3 transitions\n            // are *complete* before anything else is done.\n            var numCallbacks = 0;\n            var numCompleted = 0;\n            function makeCallback() {\n                numCallbacks++;\n                return function() {\n                    numCompleted++;\n                    // When all are complete, perform a redraw:\n                    if(!aborted && numCompleted === numCallbacks) {\n                        completeTransition(resolve);\n                    }\n                };\n            }\n\n            opts.runFn(makeCallback);\n\n            // If nothing else creates a callback, then this will trigger the completion in the next tick:\n            setTimeout(makeCallback());\n        });\n    }\n\n    function completeTransition(callback) {\n        // This a simple workaround for tests which purge the graph before animations\n        // have completed. That's not a very common case, so this is the simplest\n        // fix.\n        if(!gd._transitionData) return;\n\n        flushCallbacks(gd._transitionData._interruptCallbacks);\n\n        return Promise.resolve().then(function() {\n            if(opts.redraw) {\n                return Registry.call('redraw', gd);\n            }\n        }).then(function() {\n            // Set transitioning false again once the redraw has occurred. This is used, for example,\n            // to prevent the trailing redraw from autoranging:\n            gd._transitioning = false;\n            gd._transitioningWithDuration = false;\n\n            gd.emit('plotly_transitioned', []);\n        }).then(callback);\n    }\n\n    function interruptPreviousTransitions() {\n        // Fail-safe against purged plot:\n        if(!gd._transitionData) return;\n\n        // If a transition is interrupted, set this to false. At the moment, the only thing that would\n        // interrupt a transition is another transition, so that it will momentarily be set to true\n        // again, but this determines whether autorange or dragbox work, so it's for the sake of\n        // cleanliness:\n        gd._transitioning = false;\n\n        return executeCallbacks(gd._transitionData._interruptCallbacks);\n    }\n\n    var seq = [\n        plots.previousPromises,\n        interruptPreviousTransitions,\n        opts.prepareFn,\n        plots.rehover,\n        executeTransitions\n    ];\n\n    var transitionStarting = Lib.syncOrAsync(seq, gd);\n\n    if(!transitionStarting || !transitionStarting.then) {\n        transitionStarting = Promise.resolve();\n    }\n\n    return transitionStarting.then(function() { return gd; });\n}\n\nplots.doCalcdata = function(gd, traces) {\n    var axList = axisIDs.list(gd);\n    var fullData = gd._fullData;\n    var fullLayout = gd._fullLayout;\n\n    var trace, _module, i, j;\n\n    // XXX: Is this correct? Needs a closer look so that *some* traces can be recomputed without\n    // *all* needing doCalcdata:\n    var calcdata = new Array(fullData.length);\n    var oldCalcdata = (gd.calcdata || []).slice(0);\n    gd.calcdata = calcdata;\n\n    // extra helper variables\n\n    // how many box/violins plots do we have (in case they're grouped)\n    fullLayout._numBoxes = 0;\n    fullLayout._numViolins = 0;\n\n    // initialize violin per-scale-group stats container\n    fullLayout._violinScaleGroupStats = {};\n\n    // for calculating avg luminosity of heatmaps\n    gd._hmpixcount = 0;\n    gd._hmlumcount = 0;\n\n    // for sharing colors across pies (and for legend)\n    fullLayout._piecolormap = {};\n\n    // If traces were specified and this trace was not included,\n    // then transfer it over from the old calcdata:\n    for(i = 0; i < fullData.length; i++) {\n        if(Array.isArray(traces) && traces.indexOf(i) === -1) {\n            calcdata[i] = oldCalcdata[i];\n            continue;\n        }\n    }\n\n    for(i = 0; i < fullData.length; i++) {\n        trace = fullData[i];\n\n        trace._arrayAttrs = PlotSchema.findArrayAttributes(trace);\n\n        // keep track of trace extremes (for autorange) in here\n        trace._extremes = {};\n    }\n\n    // add polar axes to axis list\n    var polarIds = fullLayout._subplots.polar || [];\n    for(i = 0; i < polarIds.length; i++) {\n        axList.push(\n            fullLayout[polarIds[i]].radialaxis,\n            fullLayout[polarIds[i]].angularaxis\n        );\n    }\n\n    setupAxisCategories(axList, fullData);\n\n    var hasCalcTransform = false;\n\n    // transform loop\n    for(i = 0; i < fullData.length; i++) {\n        trace = fullData[i];\n\n        if(trace.visible === true && trace.transforms) {\n            _module = trace._module;\n\n            // we need one round of trace module calc before\n            // the calc transform to 'fill in' the categories list\n            // used for example in the data-to-coordinate method\n            if(_module && _module.calc) {\n                var cdi = _module.calc(gd, trace);\n\n                // must clear scene 'batches', so that 2nd\n                // _module.calc call starts from scratch\n                if(cdi[0] && cdi[0].t && cdi[0].t._scene) {\n                    delete cdi[0].t._scene.dirty;\n                }\n            }\n\n            for(j = 0; j < trace.transforms.length; j++) {\n                var transform = trace.transforms[j];\n\n                _module = transformsRegistry[transform.type];\n                if(_module && _module.calcTransform) {\n                    trace._hasCalcTransform = true;\n                    hasCalcTransform = true;\n                    _module.calcTransform(gd, trace, transform);\n                }\n            }\n        }\n    }\n\n    // clear stuff that should recomputed in 'regular' loop\n    if(hasCalcTransform) setupAxisCategories(axList, fullData);\n\n    function calci(i, isContainer) {\n        trace = fullData[i];\n        _module = trace._module;\n\n        if(!!_module.isContainer !== isContainer) return;\n\n        var cd = [];\n\n        if(trace.visible === true) {\n\n            // clear existing ref in case it got relinked\n            delete trace._indexToPoints;\n            // keep ref of index-to-points map object of the *last* enabled transform,\n            // this index-to-points map object is required to determine the calcdata indices\n            // that correspond to input indices (e.g. from 'selectedpoints')\n            var transforms = trace.transforms || [];\n            for(j = transforms.length - 1; j >= 0; j--) {\n                if(transforms[j].enabled) {\n                    trace._indexToPoints = transforms[j]._indexToPoints;\n                    break;\n                }\n            }\n\n            if(_module && _module.calc) {\n                cd = _module.calc(gd, trace);\n            }\n        }\n\n        // Make sure there is a first point.\n        //\n        // This ensures there is a calcdata item for every trace,\n        // even if cartesian logic doesn't handle it (for things like legends).\n        if(!Array.isArray(cd) || !cd[0]) {\n            cd = [{x: BADNUM, y: BADNUM}];\n        }\n\n        // add the trace-wide properties to the first point,\n        // per point properties to every point\n        // t is the holder for trace-wide properties\n        if(!cd[0].t) cd[0].t = {};\n        cd[0].trace = trace;\n\n        calcdata[i] = cd;\n    }\n\n    // 'regular' loop - make sure container traces (eg carpet) calc before\n    // contained traces (eg contourcarpet)\n    for(i = 0; i < fullData.length; i++) calci(i, true);\n    for(i = 0; i < fullData.length; i++) calci(i, false);\n\n    doCrossTraceCalc(gd);\n\n    Registry.getComponentMethod('fx', 'calc')(gd);\n    Registry.getComponentMethod('errorbars', 'calc')(gd);\n};\n\nfunction setupAxisCategories(axList, fullData) {\n    for(var i = 0; i < axList.length; i++) {\n        var ax = axList[i];\n        ax.clearCalc();\n        if(ax.type === 'multicategory') {\n            ax.setupMultiCategory(fullData);\n        }\n    }\n}\n\nfunction doCrossTraceCalc(gd) {\n    var fullLayout = gd._fullLayout;\n    var modules = fullLayout._visibleModules;\n    var hash = {};\n    var i, j, k;\n\n    // position and range calculations for traces that\n    // depend on each other ie bars (stacked or grouped)\n    // and boxes (grouped) push each other out of the way\n\n    for(j = 0; j < modules.length; j++) {\n        var _module = modules[j];\n        var fn = _module.crossTraceCalc;\n        if(fn) {\n            var spType = _module.basePlotModule.name;\n            if(hash[spType]) {\n                Lib.pushUnique(hash[spType], fn);\n            } else {\n                hash[spType] = [fn];\n            }\n        }\n    }\n\n    for(k in hash) {\n        var methods = hash[k];\n        var subplots = fullLayout._subplots[k];\n\n        if(Array.isArray(subplots)) {\n            for(i = 0; i < subplots.length; i++) {\n                var sp = subplots[i];\n                var spInfo = k === 'cartesian' ?\n                    fullLayout._plots[sp] :\n                    fullLayout[sp];\n\n                for(j = 0; j < methods.length; j++) {\n                    methods[j](gd, spInfo, sp);\n                }\n            }\n        }\n        else {\n            for(j = 0; j < methods.length; j++) {\n                methods[j](gd);\n            }\n        }\n    }\n}\n\nplots.rehover = function(gd) {\n    if(gd._fullLayout._rehover) {\n        gd._fullLayout._rehover();\n    }\n};\n\nplots.generalUpdatePerTraceModule = function(gd, subplot, subplotCalcData, subplotLayout) {\n    var traceHashOld = subplot.traceHash;\n    var traceHash = {};\n    var i;\n\n    // build up moduleName -> calcData hash\n    for(i = 0; i < subplotCalcData.length; i++) {\n        var calcTraces = subplotCalcData[i];\n        var trace = calcTraces[0].trace;\n\n        // skip over visible === false traces\n        // as they don't have `_module` ref\n        if(trace.visible) {\n            traceHash[trace.type] = traceHash[trace.type] || [];\n            traceHash[trace.type].push(calcTraces);\n        }\n    }\n\n    // when a trace gets deleted, make sure that its module's\n    // plot method is called so that it is properly\n    // removed from the DOM.\n    for(var moduleNameOld in traceHashOld) {\n        if(!traceHash[moduleNameOld]) {\n            var fakeCalcTrace = traceHashOld[moduleNameOld][0];\n            var fakeTrace = fakeCalcTrace[0].trace;\n\n            fakeTrace.visible = false;\n            traceHash[moduleNameOld] = [fakeCalcTrace];\n        }\n    }\n\n    // call module plot method\n    for(var moduleName in traceHash) {\n        var moduleCalcData = traceHash[moduleName];\n        var _module = moduleCalcData[0][0].trace._module;\n\n        _module.plot(gd, subplot, Lib.filterVisible(moduleCalcData), subplotLayout);\n    }\n\n    // update moduleName -> calcData hash\n    subplot.traceHash = traceHash;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
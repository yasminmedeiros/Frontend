{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar mod = require('./mod').mod;\n\n/*\n * look for intersection of two line segments\n *   (1->2 and 3->4) - returns array [x,y] if they do, null if not\n */\nexports.segmentsIntersect = segmentsIntersect;\nfunction segmentsIntersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n  var a = x2 - x1;\n  var b = x3 - x1;\n  var c = x4 - x3;\n  var d = y2 - y1;\n  var e = y3 - y1;\n  var f = y4 - y3;\n  var det = a * f - c * d;\n  // parallel lines? intersection is undefined\n  // ignore the case where they are colinear\n  if (det === 0) return null;\n  var t = (b * f - c * e) / det;\n  var u = (b * d - a * e) / det;\n  // segments do not intersect?\n  if (u < 0 || u > 1 || t < 0 || t > 1) return null;\n  return {\n    x: x1 + a * t,\n    y: y1 + d * t\n  };\n}\n\n/*\n * find the minimum distance between two line segments (1->2 and 3->4)\n */\nexports.segmentDistance = function segmentDistance(x1, y1, x2, y2, x3, y3, x4, y4) {\n  if (segmentsIntersect(x1, y1, x2, y2, x3, y3, x4, y4)) return 0;\n\n  // the two segments and their lengths squared\n  var x12 = x2 - x1;\n  var y12 = y2 - y1;\n  var x34 = x4 - x3;\n  var y34 = y4 - y3;\n  var ll12 = x12 * x12 + y12 * y12;\n  var ll34 = x34 * x34 + y34 * y34;\n\n  // calculate distance squared, then take the sqrt at the very end\n  var dist2 = Math.min(perpDistance2(x12, y12, ll12, x3 - x1, y3 - y1), perpDistance2(x12, y12, ll12, x4 - x1, y4 - y1), perpDistance2(x34, y34, ll34, x1 - x3, y1 - y3), perpDistance2(x34, y34, ll34, x2 - x3, y2 - y3));\n  return Math.sqrt(dist2);\n};\n\n/*\n * distance squared from segment ab to point c\n * [xab, yab] is the vector b-a\n * [xac, yac] is the vector c-a\n * llab is the length squared of (b-a), just to simplify calculation\n */\nfunction perpDistance2(xab, yab, llab, xac, yac) {\n  var fcAB = xac * xab + yac * yab;\n  if (fcAB < 0) {\n    // point c is closer to point a\n    return xac * xac + yac * yac;\n  } else if (fcAB > llab) {\n    // point c is closer to point b\n    var xbc = xac - xab;\n    var ybc = yac - yab;\n    return xbc * xbc + ybc * ybc;\n  } else {\n    // perpendicular distance is the shortest\n    var crossProduct = xac * yab - yac * xab;\n    return crossProduct * crossProduct / llab;\n  }\n}\n\n// a very short-term cache for getTextLocation, just because\n// we're often looping over the same locations multiple times\n// invalidated as soon as we look at a different path\nvar locationCache, workingPath, workingTextWidth;\n\n// turn a path and position along it into x, y, and angle for the given text\nexports.getTextLocation = function getTextLocation(path, totalPathLen, positionOnPath, textWidth) {\n  if (path !== workingPath || textWidth !== workingTextWidth) {\n    locationCache = {};\n    workingPath = path;\n    workingTextWidth = textWidth;\n  }\n  if (locationCache[positionOnPath]) {\n    return locationCache[positionOnPath];\n  }\n\n  // for the angle, use points on the path separated by the text width\n  // even though due to curvature, the text will cover a bit more than that\n  var p0 = path.getPointAtLength(mod(positionOnPath - textWidth / 2, totalPathLen));\n  var p1 = path.getPointAtLength(mod(positionOnPath + textWidth / 2, totalPathLen));\n  // note: atan handles 1/0 nicely\n  var theta = Math.atan((p1.y - p0.y) / (p1.x - p0.x));\n  // center the text at 2/3 of the center position plus 1/3 the p0/p1 midpoint\n  // that's the average position of this segment, assuming it's roughly quadratic\n  var pCenter = path.getPointAtLength(mod(positionOnPath, totalPathLen));\n  var x = (pCenter.x * 4 + p0.x + p1.x) / 6;\n  var y = (pCenter.y * 4 + p0.y + p1.y) / 6;\n  var out = {\n    x: x,\n    y: y,\n    theta: theta\n  };\n  locationCache[positionOnPath] = out;\n  return out;\n};\nexports.clearLocationCache = function () {\n  workingPath = null;\n};\n\n/*\n * Find the segment of `path` that's within the visible area\n * given by `bounds` {left, right, top, bottom}, to within a\n * precision of `buffer` px\n *\n * returns: undefined if nothing is visible, else object:\n * {\n *   min: position where the path first enters bounds, or 0 if it\n *        starts within bounds\n *   max: position where the path last exits bounds, or the path length\n *        if it finishes within bounds\n *   len: max - min, ie the length of visible path\n *   total: the total path length - just included so the caller doesn't\n *        need to call path.getTotalLength() again\n *   isClosed: true iff the start and end points of the path are both visible\n *        and are at the same point\n * }\n *\n * Works by starting from either end and repeatedly finding the distance from\n * that point to the plot area, and if it's outside the plot, moving along the\n * path by that distance (because the plot must be at least that far away on\n * the path). Note that if a path enters, exits, and re-enters the plot, we\n * will not capture this behavior.\n */\nexports.getVisibleSegment = function getVisibleSegment(path, bounds, buffer) {\n  var left = bounds.left;\n  var right = bounds.right;\n  var top = bounds.top;\n  var bottom = bounds.bottom;\n  var pMin = 0;\n  var pTotal = path.getTotalLength();\n  var pMax = pTotal;\n  var pt0, ptTotal;\n  function getDistToPlot(len) {\n    var pt = path.getPointAtLength(len);\n\n    // hold on to the start and end points for `closed`\n    if (len === 0) pt0 = pt;else if (len === pTotal) ptTotal = pt;\n    var dx = pt.x < left ? left - pt.x : pt.x > right ? pt.x - right : 0;\n    var dy = pt.y < top ? top - pt.y : pt.y > bottom ? pt.y - bottom : 0;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n  var distToPlot = getDistToPlot(pMin);\n  while (distToPlot) {\n    pMin += distToPlot + buffer;\n    if (pMin > pMax) return;\n    distToPlot = getDistToPlot(pMin);\n  }\n  distToPlot = getDistToPlot(pMax);\n  while (distToPlot) {\n    pMax -= distToPlot + buffer;\n    if (pMin > pMax) return;\n    distToPlot = getDistToPlot(pMax);\n  }\n  return {\n    min: pMin,\n    max: pMax,\n    len: pMax - pMin,\n    total: pTotal,\n    isClosed: pMin === 0 && pMax === pTotal && Math.abs(pt0.x - ptTotal.x) < 0.1 && Math.abs(pt0.y - ptTotal.y) < 0.1\n  };\n};\n\n/**\n * Find point on SVG path corresponding to a given constraint coordinate\n *\n * @param {SVGPathElement} path\n * @param {Number} val : constraint coordinate value\n * @param {String} coord : 'x' or 'y' the constraint coordinate\n * @param {Object} opts :\n *  - {Number} pathLength : supply total path length before hand\n *  - {Number} tolerance\n *  - {Number} iterationLimit\n * @return {SVGPoint}\n */\nexports.findPointOnPath = function findPointOnPath(path, val, coord, opts) {\n  opts = opts || {};\n  var pathLength = opts.pathLength || path.getTotalLength();\n  var tolerance = opts.tolerance || 1e-3;\n  var iterationLimit = opts.iterationLimit || 30;\n\n  // if path starts at a val greater than the path tail (like on vertical violins),\n  // we must flip the sign of the computed diff.\n  var mul = path.getPointAtLength(0)[coord] > path.getPointAtLength(pathLength)[coord] ? -1 : 1;\n  var i = 0;\n  var b0 = 0;\n  var b1 = pathLength;\n  var mid;\n  var pt;\n  var diff;\n  while (i < iterationLimit) {\n    mid = (b0 + b1) / 2;\n    pt = path.getPointAtLength(mid);\n    diff = pt[coord] - val;\n    if (Math.abs(diff) < tolerance) {\n      return pt;\n    } else {\n      if (mul * diff > 0) {\n        b1 = mid;\n      } else {\n        b0 = mid;\n      }\n      i++;\n    }\n  }\n  return pt;\n};","map":{"version":3,"names":["mod","require","exports","segmentsIntersect","x1","y1","x2","y2","x3","y3","x4","y4","a","b","c","d","e","f","det","t","u","x","y","segmentDistance","x12","y12","x34","y34","ll12","ll34","dist2","Math","min","perpDistance2","sqrt","xab","yab","llab","xac","yac","fcAB","xbc","ybc","crossProduct","locationCache","workingPath","workingTextWidth","getTextLocation","path","totalPathLen","positionOnPath","textWidth","p0","getPointAtLength","p1","theta","atan","pCenter","out","clearLocationCache","getVisibleSegment","bounds","buffer","left","right","top","bottom","pMin","pTotal","getTotalLength","pMax","pt0","ptTotal","getDistToPlot","len","pt","dx","dy","distToPlot","max","total","isClosed","abs","findPointOnPath","val","coord","opts","pathLength","tolerance","iterationLimit","mul","i","b0","b1","mid","diff"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/lib/geometry2d.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar mod = require('./mod').mod;\n\n/*\n * look for intersection of two line segments\n *   (1->2 and 3->4) - returns array [x,y] if they do, null if not\n */\nexports.segmentsIntersect = segmentsIntersect;\nfunction segmentsIntersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n    var a = x2 - x1;\n    var b = x3 - x1;\n    var c = x4 - x3;\n    var d = y2 - y1;\n    var e = y3 - y1;\n    var f = y4 - y3;\n    var det = a * f - c * d;\n    // parallel lines? intersection is undefined\n    // ignore the case where they are colinear\n    if(det === 0) return null;\n    var t = (b * f - c * e) / det;\n    var u = (b * d - a * e) / det;\n    // segments do not intersect?\n    if(u < 0 || u > 1 || t < 0 || t > 1) return null;\n\n    return {x: x1 + a * t, y: y1 + d * t};\n}\n\n/*\n * find the minimum distance between two line segments (1->2 and 3->4)\n */\nexports.segmentDistance = function segmentDistance(x1, y1, x2, y2, x3, y3, x4, y4) {\n    if(segmentsIntersect(x1, y1, x2, y2, x3, y3, x4, y4)) return 0;\n\n    // the two segments and their lengths squared\n    var x12 = x2 - x1;\n    var y12 = y2 - y1;\n    var x34 = x4 - x3;\n    var y34 = y4 - y3;\n    var ll12 = x12 * x12 + y12 * y12;\n    var ll34 = x34 * x34 + y34 * y34;\n\n    // calculate distance squared, then take the sqrt at the very end\n    var dist2 = Math.min(\n        perpDistance2(x12, y12, ll12, x3 - x1, y3 - y1),\n        perpDistance2(x12, y12, ll12, x4 - x1, y4 - y1),\n        perpDistance2(x34, y34, ll34, x1 - x3, y1 - y3),\n        perpDistance2(x34, y34, ll34, x2 - x3, y2 - y3)\n    );\n\n    return Math.sqrt(dist2);\n};\n\n/*\n * distance squared from segment ab to point c\n * [xab, yab] is the vector b-a\n * [xac, yac] is the vector c-a\n * llab is the length squared of (b-a), just to simplify calculation\n */\nfunction perpDistance2(xab, yab, llab, xac, yac) {\n    var fcAB = (xac * xab + yac * yab);\n    if(fcAB < 0) {\n        // point c is closer to point a\n        return xac * xac + yac * yac;\n    }\n    else if(fcAB > llab) {\n        // point c is closer to point b\n        var xbc = xac - xab;\n        var ybc = yac - yab;\n        return xbc * xbc + ybc * ybc;\n    }\n    else {\n        // perpendicular distance is the shortest\n        var crossProduct = xac * yab - yac * xab;\n        return crossProduct * crossProduct / llab;\n    }\n}\n\n// a very short-term cache for getTextLocation, just because\n// we're often looping over the same locations multiple times\n// invalidated as soon as we look at a different path\nvar locationCache, workingPath, workingTextWidth;\n\n// turn a path and position along it into x, y, and angle for the given text\nexports.getTextLocation = function getTextLocation(path, totalPathLen, positionOnPath, textWidth) {\n    if(path !== workingPath || textWidth !== workingTextWidth) {\n        locationCache = {};\n        workingPath = path;\n        workingTextWidth = textWidth;\n    }\n    if(locationCache[positionOnPath]) {\n        return locationCache[positionOnPath];\n    }\n\n    // for the angle, use points on the path separated by the text width\n    // even though due to curvature, the text will cover a bit more than that\n    var p0 = path.getPointAtLength(mod(positionOnPath - textWidth / 2, totalPathLen));\n    var p1 = path.getPointAtLength(mod(positionOnPath + textWidth / 2, totalPathLen));\n    // note: atan handles 1/0 nicely\n    var theta = Math.atan((p1.y - p0.y) / (p1.x - p0.x));\n    // center the text at 2/3 of the center position plus 1/3 the p0/p1 midpoint\n    // that's the average position of this segment, assuming it's roughly quadratic\n    var pCenter = path.getPointAtLength(mod(positionOnPath, totalPathLen));\n    var x = (pCenter.x * 4 + p0.x + p1.x) / 6;\n    var y = (pCenter.y * 4 + p0.y + p1.y) / 6;\n\n    var out = {x: x, y: y, theta: theta};\n    locationCache[positionOnPath] = out;\n    return out;\n};\n\nexports.clearLocationCache = function() {\n    workingPath = null;\n};\n\n/*\n * Find the segment of `path` that's within the visible area\n * given by `bounds` {left, right, top, bottom}, to within a\n * precision of `buffer` px\n *\n * returns: undefined if nothing is visible, else object:\n * {\n *   min: position where the path first enters bounds, or 0 if it\n *        starts within bounds\n *   max: position where the path last exits bounds, or the path length\n *        if it finishes within bounds\n *   len: max - min, ie the length of visible path\n *   total: the total path length - just included so the caller doesn't\n *        need to call path.getTotalLength() again\n *   isClosed: true iff the start and end points of the path are both visible\n *        and are at the same point\n * }\n *\n * Works by starting from either end and repeatedly finding the distance from\n * that point to the plot area, and if it's outside the plot, moving along the\n * path by that distance (because the plot must be at least that far away on\n * the path). Note that if a path enters, exits, and re-enters the plot, we\n * will not capture this behavior.\n */\nexports.getVisibleSegment = function getVisibleSegment(path, bounds, buffer) {\n    var left = bounds.left;\n    var right = bounds.right;\n    var top = bounds.top;\n    var bottom = bounds.bottom;\n\n    var pMin = 0;\n    var pTotal = path.getTotalLength();\n    var pMax = pTotal;\n\n    var pt0, ptTotal;\n\n    function getDistToPlot(len) {\n        var pt = path.getPointAtLength(len);\n\n        // hold on to the start and end points for `closed`\n        if(len === 0) pt0 = pt;\n        else if(len === pTotal) ptTotal = pt;\n\n        var dx = (pt.x < left) ? left - pt.x : (pt.x > right ? pt.x - right : 0);\n        var dy = (pt.y < top) ? top - pt.y : (pt.y > bottom ? pt.y - bottom : 0);\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    var distToPlot = getDistToPlot(pMin);\n    while(distToPlot) {\n        pMin += distToPlot + buffer;\n        if(pMin > pMax) return;\n        distToPlot = getDistToPlot(pMin);\n    }\n\n    distToPlot = getDistToPlot(pMax);\n    while(distToPlot) {\n        pMax -= distToPlot + buffer;\n        if(pMin > pMax) return;\n        distToPlot = getDistToPlot(pMax);\n    }\n\n    return {\n        min: pMin,\n        max: pMax,\n        len: pMax - pMin,\n        total: pTotal,\n        isClosed: pMin === 0 && pMax === pTotal &&\n            Math.abs(pt0.x - ptTotal.x) < 0.1 &&\n            Math.abs(pt0.y - ptTotal.y) < 0.1\n    };\n};\n\n/**\n * Find point on SVG path corresponding to a given constraint coordinate\n *\n * @param {SVGPathElement} path\n * @param {Number} val : constraint coordinate value\n * @param {String} coord : 'x' or 'y' the constraint coordinate\n * @param {Object} opts :\n *  - {Number} pathLength : supply total path length before hand\n *  - {Number} tolerance\n *  - {Number} iterationLimit\n * @return {SVGPoint}\n */\nexports.findPointOnPath = function findPointOnPath(path, val, coord, opts) {\n    opts = opts || {};\n\n    var pathLength = opts.pathLength || path.getTotalLength();\n    var tolerance = opts.tolerance || 1e-3;\n    var iterationLimit = opts.iterationLimit || 30;\n\n    // if path starts at a val greater than the path tail (like on vertical violins),\n    // we must flip the sign of the computed diff.\n    var mul = path.getPointAtLength(0)[coord] > path.getPointAtLength(pathLength)[coord] ? -1 : 1;\n\n    var i = 0;\n    var b0 = 0;\n    var b1 = pathLength;\n    var mid;\n    var pt;\n    var diff;\n\n    while(i < iterationLimit) {\n        mid = (b0 + b1) / 2;\n        pt = path.getPointAtLength(mid);\n        diff = pt[coord] - val;\n\n        if(Math.abs(diff) < tolerance) {\n            return pt;\n        } else {\n            if(mul * diff > 0) {\n                b1 = mid;\n            } else {\n                b0 = mid;\n            }\n            i++;\n        }\n    }\n    return pt;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,OAAO,CAAC,CAACD,GAAG;;AAE9B;AACA;AACA;AACA;AACAE,OAAO,CAACC,iBAAiB,GAAGA,iBAAiB;AAC7C,SAASA,iBAAiB,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;EACvD,IAAIC,CAAC,GAAGN,EAAE,GAAGF,EAAE;EACf,IAAIS,CAAC,GAAGL,EAAE,GAAGJ,EAAE;EACf,IAAIU,CAAC,GAAGJ,EAAE,GAAGF,EAAE;EACf,IAAIO,CAAC,GAAGR,EAAE,GAAGF,EAAE;EACf,IAAIW,CAAC,GAAGP,EAAE,GAAGJ,EAAE;EACf,IAAIY,CAAC,GAAGN,EAAE,GAAGF,EAAE;EACf,IAAIS,GAAG,GAAGN,CAAC,GAAGK,CAAC,GAAGH,CAAC,GAAGC,CAAC;EACvB;EACA;EACA,IAAGG,GAAG,KAAK,CAAC,EAAE,OAAO,IAAI;EACzB,IAAIC,CAAC,GAAG,CAACN,CAAC,GAAGI,CAAC,GAAGH,CAAC,GAAGE,CAAC,IAAIE,GAAG;EAC7B,IAAIE,CAAC,GAAG,CAACP,CAAC,GAAGE,CAAC,GAAGH,CAAC,GAAGI,CAAC,IAAIE,GAAG;EAC7B;EACA,IAAGE,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAG,CAAC,IAAID,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE,OAAO,IAAI;EAEhD,OAAO;IAACE,CAAC,EAAEjB,EAAE,GAAGQ,CAAC,GAAGO,CAAC;IAAEG,CAAC,EAAEjB,EAAE,GAAGU,CAAC,GAAGI;EAAC,CAAC;AACzC;;AAEA;AACA;AACA;AACAjB,OAAO,CAACqB,eAAe,GAAG,SAASA,eAAe,CAACnB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;EAC/E,IAAGR,iBAAiB,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,EAAE,OAAO,CAAC;;EAE9D;EACA,IAAIa,GAAG,GAAGlB,EAAE,GAAGF,EAAE;EACjB,IAAIqB,GAAG,GAAGlB,EAAE,GAAGF,EAAE;EACjB,IAAIqB,GAAG,GAAGhB,EAAE,GAAGF,EAAE;EACjB,IAAImB,GAAG,GAAGhB,EAAE,GAAGF,EAAE;EACjB,IAAImB,IAAI,GAAGJ,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG;EAChC,IAAII,IAAI,GAAGH,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG;;EAEhC;EACA,IAAIG,KAAK,GAAGC,IAAI,CAACC,GAAG,CAChBC,aAAa,CAACT,GAAG,EAAEC,GAAG,EAAEG,IAAI,EAAEpB,EAAE,GAAGJ,EAAE,EAAEK,EAAE,GAAGJ,EAAE,CAAC,EAC/C4B,aAAa,CAACT,GAAG,EAAEC,GAAG,EAAEG,IAAI,EAAElB,EAAE,GAAGN,EAAE,EAAEO,EAAE,GAAGN,EAAE,CAAC,EAC/C4B,aAAa,CAACP,GAAG,EAAEC,GAAG,EAAEE,IAAI,EAAEzB,EAAE,GAAGI,EAAE,EAAEH,EAAE,GAAGI,EAAE,CAAC,EAC/CwB,aAAa,CAACP,GAAG,EAAEC,GAAG,EAAEE,IAAI,EAAEvB,EAAE,GAAGE,EAAE,EAAED,EAAE,GAAGE,EAAE,CAAC,CAClD;EAED,OAAOsB,IAAI,CAACG,IAAI,CAACJ,KAAK,CAAC;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,aAAa,CAACE,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAE;EAC7C,IAAIC,IAAI,GAAIF,GAAG,GAAGH,GAAG,GAAGI,GAAG,GAAGH,GAAI;EAClC,IAAGI,IAAI,GAAG,CAAC,EAAE;IACT;IACA,OAAOF,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG;EAChC,CAAC,MACI,IAAGC,IAAI,GAAGH,IAAI,EAAE;IACjB;IACA,IAAII,GAAG,GAAGH,GAAG,GAAGH,GAAG;IACnB,IAAIO,GAAG,GAAGH,GAAG,GAAGH,GAAG;IACnB,OAAOK,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG;EAChC,CAAC,MACI;IACD;IACA,IAAIC,YAAY,GAAGL,GAAG,GAAGF,GAAG,GAAGG,GAAG,GAAGJ,GAAG;IACxC,OAAOQ,YAAY,GAAGA,YAAY,GAAGN,IAAI;EAC7C;AACJ;;AAEA;AACA;AACA;AACA,IAAIO,aAAa,EAAEC,WAAW,EAAEC,gBAAgB;;AAEhD;AACA5C,OAAO,CAAC6C,eAAe,GAAG,SAASA,eAAe,CAACC,IAAI,EAAEC,YAAY,EAAEC,cAAc,EAAEC,SAAS,EAAE;EAC9F,IAAGH,IAAI,KAAKH,WAAW,IAAIM,SAAS,KAAKL,gBAAgB,EAAE;IACvDF,aAAa,GAAG,CAAC,CAAC;IAClBC,WAAW,GAAGG,IAAI;IAClBF,gBAAgB,GAAGK,SAAS;EAChC;EACA,IAAGP,aAAa,CAACM,cAAc,CAAC,EAAE;IAC9B,OAAON,aAAa,CAACM,cAAc,CAAC;EACxC;;EAEA;EACA;EACA,IAAIE,EAAE,GAAGJ,IAAI,CAACK,gBAAgB,CAACrD,GAAG,CAACkD,cAAc,GAAGC,SAAS,GAAG,CAAC,EAAEF,YAAY,CAAC,CAAC;EACjF,IAAIK,EAAE,GAAGN,IAAI,CAACK,gBAAgB,CAACrD,GAAG,CAACkD,cAAc,GAAGC,SAAS,GAAG,CAAC,EAAEF,YAAY,CAAC,CAAC;EACjF;EACA,IAAIM,KAAK,GAAGxB,IAAI,CAACyB,IAAI,CAAC,CAACF,EAAE,CAAChC,CAAC,GAAG8B,EAAE,CAAC9B,CAAC,KAAKgC,EAAE,CAACjC,CAAC,GAAG+B,EAAE,CAAC/B,CAAC,CAAC,CAAC;EACpD;EACA;EACA,IAAIoC,OAAO,GAAGT,IAAI,CAACK,gBAAgB,CAACrD,GAAG,CAACkD,cAAc,EAAED,YAAY,CAAC,CAAC;EACtE,IAAI5B,CAAC,GAAG,CAACoC,OAAO,CAACpC,CAAC,GAAG,CAAC,GAAG+B,EAAE,CAAC/B,CAAC,GAAGiC,EAAE,CAACjC,CAAC,IAAI,CAAC;EACzC,IAAIC,CAAC,GAAG,CAACmC,OAAO,CAACnC,CAAC,GAAG,CAAC,GAAG8B,EAAE,CAAC9B,CAAC,GAAGgC,EAAE,CAAChC,CAAC,IAAI,CAAC;EAEzC,IAAIoC,GAAG,GAAG;IAACrC,CAAC,EAAEA,CAAC;IAAEC,CAAC,EAAEA,CAAC;IAAEiC,KAAK,EAAEA;EAAK,CAAC;EACpCX,aAAa,CAACM,cAAc,CAAC,GAAGQ,GAAG;EACnC,OAAOA,GAAG;AACd,CAAC;AAEDxD,OAAO,CAACyD,kBAAkB,GAAG,YAAW;EACpCd,WAAW,GAAG,IAAI;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3C,OAAO,CAAC0D,iBAAiB,GAAG,SAASA,iBAAiB,CAACZ,IAAI,EAAEa,MAAM,EAAEC,MAAM,EAAE;EACzE,IAAIC,IAAI,GAAGF,MAAM,CAACE,IAAI;EACtB,IAAIC,KAAK,GAAGH,MAAM,CAACG,KAAK;EACxB,IAAIC,GAAG,GAAGJ,MAAM,CAACI,GAAG;EACpB,IAAIC,MAAM,GAAGL,MAAM,CAACK,MAAM;EAE1B,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAIC,MAAM,GAAGpB,IAAI,CAACqB,cAAc,EAAE;EAClC,IAAIC,IAAI,GAAGF,MAAM;EAEjB,IAAIG,GAAG,EAAEC,OAAO;EAEhB,SAASC,aAAa,CAACC,GAAG,EAAE;IACxB,IAAIC,EAAE,GAAG3B,IAAI,CAACK,gBAAgB,CAACqB,GAAG,CAAC;;IAEnC;IACA,IAAGA,GAAG,KAAK,CAAC,EAAEH,GAAG,GAAGI,EAAE,CAAC,KAClB,IAAGD,GAAG,KAAKN,MAAM,EAAEI,OAAO,GAAGG,EAAE;IAEpC,IAAIC,EAAE,GAAID,EAAE,CAACtD,CAAC,GAAG0C,IAAI,GAAIA,IAAI,GAAGY,EAAE,CAACtD,CAAC,GAAIsD,EAAE,CAACtD,CAAC,GAAG2C,KAAK,GAAGW,EAAE,CAACtD,CAAC,GAAG2C,KAAK,GAAG,CAAE;IACxE,IAAIa,EAAE,GAAIF,EAAE,CAACrD,CAAC,GAAG2C,GAAG,GAAIA,GAAG,GAAGU,EAAE,CAACrD,CAAC,GAAIqD,EAAE,CAACrD,CAAC,GAAG4C,MAAM,GAAGS,EAAE,CAACrD,CAAC,GAAG4C,MAAM,GAAG,CAAE;IACxE,OAAOnC,IAAI,CAACG,IAAI,CAAC0C,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;EACvC;EAEA,IAAIC,UAAU,GAAGL,aAAa,CAACN,IAAI,CAAC;EACpC,OAAMW,UAAU,EAAE;IACdX,IAAI,IAAIW,UAAU,GAAGhB,MAAM;IAC3B,IAAGK,IAAI,GAAGG,IAAI,EAAE;IAChBQ,UAAU,GAAGL,aAAa,CAACN,IAAI,CAAC;EACpC;EAEAW,UAAU,GAAGL,aAAa,CAACH,IAAI,CAAC;EAChC,OAAMQ,UAAU,EAAE;IACdR,IAAI,IAAIQ,UAAU,GAAGhB,MAAM;IAC3B,IAAGK,IAAI,GAAGG,IAAI,EAAE;IAChBQ,UAAU,GAAGL,aAAa,CAACH,IAAI,CAAC;EACpC;EAEA,OAAO;IACHtC,GAAG,EAAEmC,IAAI;IACTY,GAAG,EAAET,IAAI;IACTI,GAAG,EAAEJ,IAAI,GAAGH,IAAI;IAChBa,KAAK,EAAEZ,MAAM;IACba,QAAQ,EAAEd,IAAI,KAAK,CAAC,IAAIG,IAAI,KAAKF,MAAM,IACnCrC,IAAI,CAACmD,GAAG,CAACX,GAAG,CAAClD,CAAC,GAAGmD,OAAO,CAACnD,CAAC,CAAC,GAAG,GAAG,IACjCU,IAAI,CAACmD,GAAG,CAACX,GAAG,CAACjD,CAAC,GAAGkD,OAAO,CAAClD,CAAC,CAAC,GAAG;EACtC,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApB,OAAO,CAACiF,eAAe,GAAG,SAASA,eAAe,CAACnC,IAAI,EAAEoC,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAE;EACvEA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EAEjB,IAAIC,UAAU,GAAGD,IAAI,CAACC,UAAU,IAAIvC,IAAI,CAACqB,cAAc,EAAE;EACzD,IAAImB,SAAS,GAAGF,IAAI,CAACE,SAAS,IAAI,IAAI;EACtC,IAAIC,cAAc,GAAGH,IAAI,CAACG,cAAc,IAAI,EAAE;;EAE9C;EACA;EACA,IAAIC,GAAG,GAAG1C,IAAI,CAACK,gBAAgB,CAAC,CAAC,CAAC,CAACgC,KAAK,CAAC,GAAGrC,IAAI,CAACK,gBAAgB,CAACkC,UAAU,CAAC,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EAE7F,IAAIM,CAAC,GAAG,CAAC;EACT,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAGN,UAAU;EACnB,IAAIO,GAAG;EACP,IAAInB,EAAE;EACN,IAAIoB,IAAI;EAER,OAAMJ,CAAC,GAAGF,cAAc,EAAE;IACtBK,GAAG,GAAG,CAACF,EAAE,GAAGC,EAAE,IAAI,CAAC;IACnBlB,EAAE,GAAG3B,IAAI,CAACK,gBAAgB,CAACyC,GAAG,CAAC;IAC/BC,IAAI,GAAGpB,EAAE,CAACU,KAAK,CAAC,GAAGD,GAAG;IAEtB,IAAGrD,IAAI,CAACmD,GAAG,CAACa,IAAI,CAAC,GAAGP,SAAS,EAAE;MAC3B,OAAOb,EAAE;IACb,CAAC,MAAM;MACH,IAAGe,GAAG,GAAGK,IAAI,GAAG,CAAC,EAAE;QACfF,EAAE,GAAGC,GAAG;MACZ,CAAC,MAAM;QACHF,EAAE,GAAGE,GAAG;MACZ;MACAH,CAAC,EAAE;IACP;EACJ;EACA,OAAOhB,EAAE;AACb,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
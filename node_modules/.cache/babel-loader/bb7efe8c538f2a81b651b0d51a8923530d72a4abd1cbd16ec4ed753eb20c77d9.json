{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar layoutAttributes = require('./layout_attributes');\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(layoutIn, layoutOut, layoutAttributes, attr, dflt);\n  }\n  var clickmode = coerce('clickmode');\n  var dragMode = coerce('dragmode');\n  if (dragMode === 'select') coerce('selectdirection');\n  var hovermodeDflt;\n  if (layoutOut._has('cartesian')) {\n    if (clickmode.indexOf('select') > -1) {\n      hovermodeDflt = 'closest';\n    } else {\n      // flag for 'horizontal' plots:\n      // determines the state of the mode bar 'compare' hovermode button\n      layoutOut._isHoriz = isHoriz(fullData);\n      hovermodeDflt = layoutOut._isHoriz ? 'y' : 'x';\n    }\n  } else hovermodeDflt = 'closest';\n  var hoverMode = coerce('hovermode', hovermodeDflt);\n  if (hoverMode) {\n    coerce('hoverdistance');\n    coerce('spikedistance');\n  }\n\n  // if only mapbox or geo subplots is present on graph,\n  // reset 'zoom' dragmode to 'pan' until 'zoom' is implemented,\n  // so that the correct modebar button is active\n  var hasMapbox = layoutOut._has('mapbox');\n  var hasGeo = layoutOut._has('geo');\n  var len = layoutOut._basePlotModules.length;\n  if (layoutOut.dragmode === 'zoom' && ((hasMapbox || hasGeo) && len === 1 || hasMapbox && hasGeo && len === 2)) {\n    layoutOut.dragmode = 'pan';\n  }\n};\nfunction isHoriz(fullData) {\n  var out = true;\n  for (var i = 0; i < fullData.length; i++) {\n    var trace = fullData[i];\n    if (trace.orientation !== 'h') {\n      out = false;\n      break;\n    }\n  }\n  return out;\n}","map":{"version":3,"names":["Lib","require","layoutAttributes","module","exports","supplyLayoutDefaults","layoutIn","layoutOut","fullData","coerce","attr","dflt","clickmode","dragMode","hovermodeDflt","_has","indexOf","_isHoriz","isHoriz","hoverMode","hasMapbox","hasGeo","len","_basePlotModules","length","dragmode","out","i","trace","orientation"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/components/fx/layout_defaults.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar layoutAttributes = require('./layout_attributes');\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(layoutIn, layoutOut, layoutAttributes, attr, dflt);\n    }\n\n    var clickmode = coerce('clickmode');\n\n    var dragMode = coerce('dragmode');\n    if(dragMode === 'select') coerce('selectdirection');\n\n    var hovermodeDflt;\n    if(layoutOut._has('cartesian')) {\n        if(clickmode.indexOf('select') > -1) {\n            hovermodeDflt = 'closest';\n        } else {\n            // flag for 'horizontal' plots:\n            // determines the state of the mode bar 'compare' hovermode button\n            layoutOut._isHoriz = isHoriz(fullData);\n            hovermodeDflt = layoutOut._isHoriz ? 'y' : 'x';\n        }\n    }\n    else hovermodeDflt = 'closest';\n\n    var hoverMode = coerce('hovermode', hovermodeDflt);\n    if(hoverMode) {\n        coerce('hoverdistance');\n        coerce('spikedistance');\n    }\n\n    // if only mapbox or geo subplots is present on graph,\n    // reset 'zoom' dragmode to 'pan' until 'zoom' is implemented,\n    // so that the correct modebar button is active\n    var hasMapbox = layoutOut._has('mapbox');\n    var hasGeo = layoutOut._has('geo');\n    var len = layoutOut._basePlotModules.length;\n\n    if(layoutOut.dragmode === 'zoom' && (\n        ((hasMapbox || hasGeo) && len === 1) ||\n        (hasMapbox && hasGeo && len === 2)\n    )) {\n        layoutOut.dragmode = 'pan';\n    }\n};\n\nfunction isHoriz(fullData) {\n    var out = true;\n\n    for(var i = 0; i < fullData.length; i++) {\n        var trace = fullData[i];\n\n        if(trace.orientation !== 'h') {\n            out = false;\n            break;\n        }\n    }\n\n    return out;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC9B,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAErDE,MAAM,CAACC,OAAO,GAAG,SAASC,oBAAoB,CAACC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,EAAE;EAC1E,SAASC,MAAM,CAACC,IAAI,EAAEC,IAAI,EAAE;IACxB,OAAOX,GAAG,CAACS,MAAM,CAACH,QAAQ,EAAEC,SAAS,EAAEL,gBAAgB,EAAEQ,IAAI,EAAEC,IAAI,CAAC;EACxE;EAEA,IAAIC,SAAS,GAAGH,MAAM,CAAC,WAAW,CAAC;EAEnC,IAAII,QAAQ,GAAGJ,MAAM,CAAC,UAAU,CAAC;EACjC,IAAGI,QAAQ,KAAK,QAAQ,EAAEJ,MAAM,CAAC,iBAAiB,CAAC;EAEnD,IAAIK,aAAa;EACjB,IAAGP,SAAS,CAACQ,IAAI,CAAC,WAAW,CAAC,EAAE;IAC5B,IAAGH,SAAS,CAACI,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;MACjCF,aAAa,GAAG,SAAS;IAC7B,CAAC,MAAM;MACH;MACA;MACAP,SAAS,CAACU,QAAQ,GAAGC,OAAO,CAACV,QAAQ,CAAC;MACtCM,aAAa,GAAGP,SAAS,CAACU,QAAQ,GAAG,GAAG,GAAG,GAAG;IAClD;EACJ,CAAC,MACIH,aAAa,GAAG,SAAS;EAE9B,IAAIK,SAAS,GAAGV,MAAM,CAAC,WAAW,EAAEK,aAAa,CAAC;EAClD,IAAGK,SAAS,EAAE;IACVV,MAAM,CAAC,eAAe,CAAC;IACvBA,MAAM,CAAC,eAAe,CAAC;EAC3B;;EAEA;EACA;EACA;EACA,IAAIW,SAAS,GAAGb,SAAS,CAACQ,IAAI,CAAC,QAAQ,CAAC;EACxC,IAAIM,MAAM,GAAGd,SAAS,CAACQ,IAAI,CAAC,KAAK,CAAC;EAClC,IAAIO,GAAG,GAAGf,SAAS,CAACgB,gBAAgB,CAACC,MAAM;EAE3C,IAAGjB,SAAS,CAACkB,QAAQ,KAAK,MAAM,KAC3B,CAACL,SAAS,IAAIC,MAAM,KAAKC,GAAG,KAAK,CAAC,IAClCF,SAAS,IAAIC,MAAM,IAAIC,GAAG,KAAK,CAAE,CACrC,EAAE;IACCf,SAAS,CAACkB,QAAQ,GAAG,KAAK;EAC9B;AACJ,CAAC;AAED,SAASP,OAAO,CAACV,QAAQ,EAAE;EACvB,IAAIkB,GAAG,GAAG,IAAI;EAEd,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,QAAQ,CAACgB,MAAM,EAAEG,CAAC,EAAE,EAAE;IACrC,IAAIC,KAAK,GAAGpB,QAAQ,CAACmB,CAAC,CAAC;IAEvB,IAAGC,KAAK,CAACC,WAAW,KAAK,GAAG,EAAE;MAC1BH,GAAG,GAAG,KAAK;MACX;IACJ;EACJ;EAEA,OAAOA,GAAG;AACd"},"metadata":{},"sourceType":"script","externalDependencies":[]}
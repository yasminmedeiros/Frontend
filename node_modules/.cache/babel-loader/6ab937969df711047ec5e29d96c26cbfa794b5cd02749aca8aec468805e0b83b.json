{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar numConstants = require('../../constants/numerical');\nvar BADNUM = numConstants.BADNUM;\nvar LOG_CLIP = numConstants.LOG_CLIP;\nvar LOG_CLIP_PLUS = LOG_CLIP + 0.5;\nvar LOG_CLIP_MINUS = LOG_CLIP - 0.5;\nvar Lib = require('../../lib');\nvar segmentsIntersect = Lib.segmentsIntersect;\nvar constrain = Lib.constrain;\nvar constants = require('./constants');\nmodule.exports = function linePoints(d, opts) {\n  var xa = opts.xaxis;\n  var ya = opts.yaxis;\n  var xLog = xa.type === 'log';\n  var yLog = ya.type === 'log';\n  var xLen = xa._length;\n  var yLen = ya._length;\n  var connectGaps = opts.connectGaps;\n  var baseTolerance = opts.baseTolerance;\n  var shape = opts.shape;\n  var linear = shape === 'linear';\n  var segments = [];\n  var minTolerance = constants.minTolerance;\n  var pts = new Array(d.length);\n  var pti = 0;\n  var i;\n\n  // pt variables are pixel coordinates [x,y] of one point\n  // these four are the outputs of clustering on a line\n  var clusterStartPt, clusterEndPt, clusterHighPt, clusterLowPt;\n\n  // \"this\" is the next point we're considering adding to the cluster\n  var thisPt;\n\n  // did we encounter the high point first, then a low point, or vice versa?\n  var clusterHighFirst;\n\n  // the first two points in the cluster determine its unit vector\n  // so the second is always in the \"High\" direction\n  var clusterUnitVector;\n\n  // the pixel delta from clusterStartPt\n  var thisVector;\n\n  // val variables are (signed) pixel distances along the cluster vector\n  var clusterRefDist, clusterHighVal, clusterLowVal, thisVal;\n\n  // deviation variables are (signed) pixel distances normal to the cluster vector\n  var clusterMinDeviation, clusterMaxDeviation, thisDeviation;\n\n  // turn one calcdata point into pixel coordinates\n  function getPt(index) {\n    var di = d[index];\n    if (!di) return false;\n    var x = xa.c2p(di.x);\n    var y = ya.c2p(di.y);\n\n    // if non-positive log values, set them VERY far off-screen\n    // so the line looks essentially straight from the previous point.\n    if (x === BADNUM) {\n      if (xLog) x = xa.c2p(di.x, true);\n      if (x === BADNUM) return false;\n      // If BOTH were bad log values, make the line follow a constant\n      // exponent rather than a constant slope\n      if (yLog && y === BADNUM) {\n        x *= Math.abs(xa._m * yLen * (xa._m > 0 ? LOG_CLIP_PLUS : LOG_CLIP_MINUS) / (ya._m * xLen * (ya._m > 0 ? LOG_CLIP_PLUS : LOG_CLIP_MINUS)));\n      }\n      x *= 1000;\n    }\n    if (y === BADNUM) {\n      if (yLog) y = ya.c2p(di.y, true);\n      if (y === BADNUM) return false;\n      y *= 1000;\n    }\n    return [x, y];\n  }\n  function crossesViewport(xFrac0, yFrac0, xFrac1, yFrac1) {\n    var dx = xFrac1 - xFrac0;\n    var dy = yFrac1 - yFrac0;\n    var dx0 = 0.5 - xFrac0;\n    var dy0 = 0.5 - yFrac0;\n    var norm2 = dx * dx + dy * dy;\n    var dot = dx * dx0 + dy * dy0;\n    if (dot > 0 && dot < norm2) {\n      var cross = dx0 * dy - dy0 * dx;\n      if (cross * cross < norm2) return true;\n    }\n  }\n  var latestXFrac, latestYFrac;\n  // if we're off-screen, increase tolerance over baseTolerance\n  function getTolerance(pt, nextPt) {\n    var xFrac = pt[0] / xLen;\n    var yFrac = pt[1] / yLen;\n    var offScreenFraction = Math.max(0, -xFrac, xFrac - 1, -yFrac, yFrac - 1);\n    if (offScreenFraction && latestXFrac !== undefined && crossesViewport(xFrac, yFrac, latestXFrac, latestYFrac)) {\n      offScreenFraction = 0;\n    }\n    if (offScreenFraction && nextPt && crossesViewport(xFrac, yFrac, nextPt[0] / xLen, nextPt[1] / yLen)) {\n      offScreenFraction = 0;\n    }\n    return (1 + constants.toleranceGrowth * offScreenFraction) * baseTolerance;\n  }\n  function ptDist(pt1, pt2) {\n    var dx = pt1[0] - pt2[0];\n    var dy = pt1[1] - pt2[1];\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  // last bit of filtering: clip paths that are VERY far off-screen\n  // so we don't get near the browser's hard limit (+/- 2^29 px in Chrome and FF)\n\n  var maxScreensAway = constants.maxScreensAway;\n\n  // find the intersections between the segment from pt1 to pt2\n  // and the large rectangle maxScreensAway around the viewport\n  // if one of pt1 and pt2 is inside and the other outside, there\n  // will be only one intersection.\n  // if both are outside there will be 0 or 2 intersections\n  // (or 1 if it's right at a corner - we'll treat that like 0)\n  // returns an array of intersection pts\n  var xEdge0 = -xLen * maxScreensAway;\n  var xEdge1 = xLen * (1 + maxScreensAway);\n  var yEdge0 = -yLen * maxScreensAway;\n  var yEdge1 = yLen * (1 + maxScreensAway);\n  var edges = [[xEdge0, yEdge0, xEdge1, yEdge0], [xEdge1, yEdge0, xEdge1, yEdge1], [xEdge1, yEdge1, xEdge0, yEdge1], [xEdge0, yEdge1, xEdge0, yEdge0]];\n  var xEdge, yEdge, lastXEdge, lastYEdge, lastFarPt, edgePt;\n\n  // for linear line shape, edge intersections should be linearly interpolated\n  // spline uses this too, which isn't precisely correct but is actually pretty\n  // good, because Catmull-Rom weights far-away points less in creating the curvature\n  function getLinearEdgeIntersections(pt1, pt2) {\n    var out = [];\n    var ptCount = 0;\n    for (var i = 0; i < 4; i++) {\n      var edge = edges[i];\n      var ptInt = segmentsIntersect(pt1[0], pt1[1], pt2[0], pt2[1], edge[0], edge[1], edge[2], edge[3]);\n      if (ptInt && (!ptCount || Math.abs(ptInt.x - out[0][0]) > 1 || Math.abs(ptInt.y - out[0][1]) > 1)) {\n        ptInt = [ptInt.x, ptInt.y];\n        // if we have 2 intersections, make sure the closest one to pt1 comes first\n        if (ptCount && ptDist(ptInt, pt1) < ptDist(out[0], pt1)) out.unshift(ptInt);else out.push(ptInt);\n        ptCount++;\n      }\n    }\n    return out;\n  }\n  function onlyConstrainedPoint(pt) {\n    if (pt[0] < xEdge0 || pt[0] > xEdge1 || pt[1] < yEdge0 || pt[1] > yEdge1) {\n      return [constrain(pt[0], xEdge0, xEdge1), constrain(pt[1], yEdge0, yEdge1)];\n    }\n  }\n  function sameEdge(pt1, pt2) {\n    if (pt1[0] === pt2[0] && (pt1[0] === xEdge0 || pt1[0] === xEdge1)) return true;\n    if (pt1[1] === pt2[1] && (pt1[1] === yEdge0 || pt1[1] === yEdge1)) return true;\n  }\n\n  // for line shapes hv and vh, movement in the two dimensions is decoupled,\n  // so all we need to do is constrain each dimension independently\n  function getHVEdgeIntersections(pt1, pt2) {\n    var out = [];\n    var ptInt1 = onlyConstrainedPoint(pt1);\n    var ptInt2 = onlyConstrainedPoint(pt2);\n    if (ptInt1 && ptInt2 && sameEdge(ptInt1, ptInt2)) return out;\n    if (ptInt1) out.push(ptInt1);\n    if (ptInt2) out.push(ptInt2);\n    return out;\n  }\n\n  // hvh and vhv we sometimes have to move one of the intersection points\n  // out BEYOND the clipping rect, by a maximum of a factor of 2, so that\n  // the midpoint line is drawn in the right place\n  function getABAEdgeIntersections(dim, limit0, limit1) {\n    return function (pt1, pt2) {\n      var ptInt1 = onlyConstrainedPoint(pt1);\n      var ptInt2 = onlyConstrainedPoint(pt2);\n      var out = [];\n      if (ptInt1 && ptInt2 && sameEdge(ptInt1, ptInt2)) return out;\n      if (ptInt1) out.push(ptInt1);\n      if (ptInt2) out.push(ptInt2);\n      var midShift = 2 * Lib.constrain((pt1[dim] + pt2[dim]) / 2, limit0, limit1) - ((ptInt1 || pt1)[dim] + (ptInt2 || pt2)[dim]);\n      if (midShift) {\n        var ptToAlter;\n        if (ptInt1 && ptInt2) {\n          ptToAlter = midShift > 0 === ptInt1[dim] > ptInt2[dim] ? ptInt1 : ptInt2;\n        } else ptToAlter = ptInt1 || ptInt2;\n        ptToAlter[dim] += midShift;\n      }\n      return out;\n    };\n  }\n  var getEdgeIntersections;\n  if (shape === 'linear' || shape === 'spline') {\n    getEdgeIntersections = getLinearEdgeIntersections;\n  } else if (shape === 'hv' || shape === 'vh') {\n    getEdgeIntersections = getHVEdgeIntersections;\n  } else if (shape === 'hvh') getEdgeIntersections = getABAEdgeIntersections(0, xEdge0, xEdge1);else if (shape === 'vhv') getEdgeIntersections = getABAEdgeIntersections(1, yEdge0, yEdge1);\n\n  // a segment pt1->pt2 entirely outside the nearby region:\n  // find the corner it gets closest to touching\n  function getClosestCorner(pt1, pt2) {\n    var dx = pt2[0] - pt1[0];\n    var m = (pt2[1] - pt1[1]) / dx;\n    var b = (pt1[1] * pt2[0] - pt2[1] * pt1[0]) / dx;\n    if (b > 0) return [m > 0 ? xEdge0 : xEdge1, yEdge1];else return [m > 0 ? xEdge1 : xEdge0, yEdge0];\n  }\n  function updateEdge(pt) {\n    var x = pt[0];\n    var y = pt[1];\n    var xSame = x === pts[pti - 1][0];\n    var ySame = y === pts[pti - 1][1];\n    // duplicate point?\n    if (xSame && ySame) return;\n    if (pti > 1) {\n      // backtracking along an edge?\n      var xSame2 = x === pts[pti - 2][0];\n      var ySame2 = y === pts[pti - 2][1];\n      if (xSame && (x === xEdge0 || x === xEdge1) && xSame2) {\n        if (ySame2) pti--; // backtracking exactly - drop prev pt and don't add\n        else pts[pti - 1] = pt; // not exact: replace the prev pt\n      } else if (ySame && (y === yEdge0 || y === yEdge1) && ySame2) {\n        if (xSame2) pti--;else pts[pti - 1] = pt;\n      } else pts[pti++] = pt;\n    } else pts[pti++] = pt;\n  }\n  function updateEdgesForReentry(pt) {\n    // if we're outside the nearby region and going back in,\n    // we may need to loop around a corner point\n    if (pts[pti - 1][0] !== pt[0] && pts[pti - 1][1] !== pt[1]) {\n      updateEdge([lastXEdge, lastYEdge]);\n    }\n    updateEdge(pt);\n    lastFarPt = null;\n    lastXEdge = lastYEdge = 0;\n  }\n  function addPt(pt) {\n    latestXFrac = pt[0] / xLen;\n    latestYFrac = pt[1] / yLen;\n    // Are we more than maxScreensAway off-screen any direction?\n    // if so, clip to this box, but in such a way that on-screen\n    // drawing is unchanged\n    xEdge = pt[0] < xEdge0 ? xEdge0 : pt[0] > xEdge1 ? xEdge1 : 0;\n    yEdge = pt[1] < yEdge0 ? yEdge0 : pt[1] > yEdge1 ? yEdge1 : 0;\n    if (xEdge || yEdge) {\n      // to get fills right - if first point is far, push it toward the\n      // screen in whichever direction(s) are far\n      if (!pti) {\n        pts[pti++] = [xEdge || pt[0], yEdge || pt[1]];\n      } else if (lastFarPt) {\n        // both this point and the last are outside the nearby region\n        // check if we're crossing the nearby region\n        var intersections = getEdgeIntersections(lastFarPt, pt);\n        if (intersections.length > 1) {\n          updateEdgesForReentry(intersections[0]);\n          pts[pti++] = intersections[1];\n        }\n      }\n      // we're leaving the nearby region - add the point where we left it\n      else {\n        edgePt = getEdgeIntersections(pts[pti - 1], pt)[0];\n        pts[pti++] = edgePt;\n      }\n      var lastPt = pts[pti - 1];\n      if (xEdge && yEdge && (lastPt[0] !== xEdge || lastPt[1] !== yEdge)) {\n        // we've gone out beyond a new corner: add the corner too\n        // so that the next point will take the right winding\n        if (lastFarPt) {\n          if (lastXEdge !== xEdge && lastYEdge !== yEdge) {\n            if (lastXEdge && lastYEdge) {\n              // we've gone around to an opposite corner - we\n              // need to add the correct extra corner\n              // in order to get the right winding\n              updateEdge(getClosestCorner(lastFarPt, pt));\n            } else {\n              // we're coming from a far edge - the extra corner\n              // we need is determined uniquely by the sectors\n              updateEdge([lastXEdge || xEdge, lastYEdge || yEdge]);\n            }\n          } else if (lastXEdge && lastYEdge) {\n            updateEdge([lastXEdge, lastYEdge]);\n          }\n        }\n        updateEdge([xEdge, yEdge]);\n      } else if (lastXEdge - xEdge && lastYEdge - yEdge) {\n        // we're coming from an edge or far corner to an edge - again the\n        // extra corner we need is uniquely determined by the sectors\n        updateEdge([xEdge || lastXEdge, yEdge || lastYEdge]);\n      }\n      lastFarPt = pt;\n      lastXEdge = xEdge;\n      lastYEdge = yEdge;\n    } else {\n      if (lastFarPt) {\n        // this point is in range but the previous wasn't: add its entry pt first\n        updateEdgesForReentry(getEdgeIntersections(lastFarPt, pt)[0]);\n      }\n      pts[pti++] = pt;\n    }\n  }\n\n  // loop over ALL points in this trace\n  for (i = 0; i < d.length; i++) {\n    clusterStartPt = getPt(i);\n    if (!clusterStartPt) continue;\n    pti = 0;\n    lastFarPt = null;\n    addPt(clusterStartPt);\n\n    // loop over one segment of the trace\n    for (i++; i < d.length; i++) {\n      clusterHighPt = getPt(i);\n      if (!clusterHighPt) {\n        if (connectGaps) continue;else break;\n      }\n\n      // can't decimate if nonlinear line shape\n      // TODO: we *could* decimate [hv]{2,3} shapes if we restricted clusters to horz or vert again\n      // but spline would be verrry awkward to decimate\n      if (!linear || !opts.simplify) {\n        addPt(clusterHighPt);\n        continue;\n      }\n      var nextPt = getPt(i + 1);\n      clusterRefDist = ptDist(clusterHighPt, clusterStartPt);\n      if (clusterRefDist < getTolerance(clusterHighPt, nextPt) * minTolerance) continue;\n      clusterUnitVector = [(clusterHighPt[0] - clusterStartPt[0]) / clusterRefDist, (clusterHighPt[1] - clusterStartPt[1]) / clusterRefDist];\n      clusterLowPt = clusterStartPt;\n      clusterHighVal = clusterRefDist;\n      clusterLowVal = clusterMinDeviation = clusterMaxDeviation = 0;\n      clusterHighFirst = false;\n      clusterEndPt = clusterHighPt;\n\n      // loop over one cluster of points that collapse onto one line\n      for (i++; i < d.length; i++) {\n        thisPt = nextPt;\n        nextPt = getPt(i + 1);\n        if (!thisPt) {\n          if (connectGaps) continue;else break;\n        }\n        thisVector = [thisPt[0] - clusterStartPt[0], thisPt[1] - clusterStartPt[1]];\n        // cross product (or dot with normal to the cluster vector)\n        thisDeviation = thisVector[0] * clusterUnitVector[1] - thisVector[1] * clusterUnitVector[0];\n        clusterMinDeviation = Math.min(clusterMinDeviation, thisDeviation);\n        clusterMaxDeviation = Math.max(clusterMaxDeviation, thisDeviation);\n        if (clusterMaxDeviation - clusterMinDeviation > getTolerance(thisPt, nextPt)) break;\n        clusterEndPt = thisPt;\n        thisVal = thisVector[0] * clusterUnitVector[0] + thisVector[1] * clusterUnitVector[1];\n        if (thisVal > clusterHighVal) {\n          clusterHighVal = thisVal;\n          clusterHighPt = thisPt;\n          clusterHighFirst = false;\n        } else if (thisVal < clusterLowVal) {\n          clusterLowVal = thisVal;\n          clusterLowPt = thisPt;\n          clusterHighFirst = true;\n        }\n      }\n\n      // insert this cluster into pts\n      // we've already inserted the start pt, now check if we have high and low pts\n      if (clusterHighFirst) {\n        addPt(clusterHighPt);\n        if (clusterEndPt !== clusterLowPt) addPt(clusterLowPt);\n      } else {\n        if (clusterLowPt !== clusterStartPt) addPt(clusterLowPt);\n        if (clusterEndPt !== clusterHighPt) addPt(clusterHighPt);\n      }\n      // and finally insert the end pt\n      addPt(clusterEndPt);\n\n      // have we reached the end of this segment?\n      if (i >= d.length || !thisPt) break;\n\n      // otherwise we have an out-of-cluster point to insert as next clusterStartPt\n      addPt(thisPt);\n      clusterStartPt = thisPt;\n    }\n\n    // to get fills right - repeat what we did at the start\n    if (lastFarPt) updateEdge([lastXEdge || lastFarPt[0], lastYEdge || lastFarPt[1]]);\n    segments.push(pts.slice(0, pti));\n  }\n  return segments;\n};","map":{"version":3,"names":["numConstants","require","BADNUM","LOG_CLIP","LOG_CLIP_PLUS","LOG_CLIP_MINUS","Lib","segmentsIntersect","constrain","constants","module","exports","linePoints","d","opts","xa","xaxis","ya","yaxis","xLog","type","yLog","xLen","_length","yLen","connectGaps","baseTolerance","shape","linear","segments","minTolerance","pts","Array","length","pti","i","clusterStartPt","clusterEndPt","clusterHighPt","clusterLowPt","thisPt","clusterHighFirst","clusterUnitVector","thisVector","clusterRefDist","clusterHighVal","clusterLowVal","thisVal","clusterMinDeviation","clusterMaxDeviation","thisDeviation","getPt","index","di","x","c2p","y","Math","abs","_m","crossesViewport","xFrac0","yFrac0","xFrac1","yFrac1","dx","dy","dx0","dy0","norm2","dot","cross","latestXFrac","latestYFrac","getTolerance","pt","nextPt","xFrac","yFrac","offScreenFraction","max","undefined","toleranceGrowth","ptDist","pt1","pt2","sqrt","maxScreensAway","xEdge0","xEdge1","yEdge0","yEdge1","edges","xEdge","yEdge","lastXEdge","lastYEdge","lastFarPt","edgePt","getLinearEdgeIntersections","out","ptCount","edge","ptInt","unshift","push","onlyConstrainedPoint","sameEdge","getHVEdgeIntersections","ptInt1","ptInt2","getABAEdgeIntersections","dim","limit0","limit1","midShift","ptToAlter","getEdgeIntersections","getClosestCorner","m","b","updateEdge","xSame","ySame","xSame2","ySame2","updateEdgesForReentry","addPt","intersections","lastPt","simplify","min","slice"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/scatter/line_points.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar numConstants = require('../../constants/numerical');\nvar BADNUM = numConstants.BADNUM;\nvar LOG_CLIP = numConstants.LOG_CLIP;\nvar LOG_CLIP_PLUS = LOG_CLIP + 0.5;\nvar LOG_CLIP_MINUS = LOG_CLIP - 0.5;\nvar Lib = require('../../lib');\nvar segmentsIntersect = Lib.segmentsIntersect;\nvar constrain = Lib.constrain;\nvar constants = require('./constants');\n\n\nmodule.exports = function linePoints(d, opts) {\n    var xa = opts.xaxis;\n    var ya = opts.yaxis;\n    var xLog = xa.type === 'log';\n    var yLog = ya.type === 'log';\n    var xLen = xa._length;\n    var yLen = ya._length;\n    var connectGaps = opts.connectGaps;\n    var baseTolerance = opts.baseTolerance;\n    var shape = opts.shape;\n    var linear = shape === 'linear';\n    var segments = [];\n    var minTolerance = constants.minTolerance;\n    var pts = new Array(d.length);\n    var pti = 0;\n\n    var i;\n\n    // pt variables are pixel coordinates [x,y] of one point\n    // these four are the outputs of clustering on a line\n    var clusterStartPt, clusterEndPt, clusterHighPt, clusterLowPt;\n\n    // \"this\" is the next point we're considering adding to the cluster\n    var thisPt;\n\n    // did we encounter the high point first, then a low point, or vice versa?\n    var clusterHighFirst;\n\n    // the first two points in the cluster determine its unit vector\n    // so the second is always in the \"High\" direction\n    var clusterUnitVector;\n\n    // the pixel delta from clusterStartPt\n    var thisVector;\n\n    // val variables are (signed) pixel distances along the cluster vector\n    var clusterRefDist, clusterHighVal, clusterLowVal, thisVal;\n\n    // deviation variables are (signed) pixel distances normal to the cluster vector\n    var clusterMinDeviation, clusterMaxDeviation, thisDeviation;\n\n    // turn one calcdata point into pixel coordinates\n    function getPt(index) {\n        var di = d[index];\n        if(!di) return false;\n        var x = xa.c2p(di.x);\n        var y = ya.c2p(di.y);\n\n        // if non-positive log values, set them VERY far off-screen\n        // so the line looks essentially straight from the previous point.\n        if(x === BADNUM) {\n            if(xLog) x = xa.c2p(di.x, true);\n            if(x === BADNUM) return false;\n            // If BOTH were bad log values, make the line follow a constant\n            // exponent rather than a constant slope\n            if(yLog && y === BADNUM) {\n                x *= Math.abs(xa._m * yLen * (xa._m > 0 ? LOG_CLIP_PLUS : LOG_CLIP_MINUS) /\n                    (ya._m * xLen * (ya._m > 0 ? LOG_CLIP_PLUS : LOG_CLIP_MINUS)));\n            }\n            x *= 1000;\n        }\n        if(y === BADNUM) {\n            if(yLog) y = ya.c2p(di.y, true);\n            if(y === BADNUM) return false;\n            y *= 1000;\n        }\n        return [x, y];\n    }\n\n    function crossesViewport(xFrac0, yFrac0, xFrac1, yFrac1) {\n        var dx = xFrac1 - xFrac0;\n        var dy = yFrac1 - yFrac0;\n        var dx0 = 0.5 - xFrac0;\n        var dy0 = 0.5 - yFrac0;\n        var norm2 = dx * dx + dy * dy;\n        var dot = dx * dx0 + dy * dy0;\n        if(dot > 0 && dot < norm2) {\n            var cross = dx0 * dy - dy0 * dx;\n            if(cross * cross < norm2) return true;\n        }\n    }\n\n    var latestXFrac, latestYFrac;\n    // if we're off-screen, increase tolerance over baseTolerance\n    function getTolerance(pt, nextPt) {\n        var xFrac = pt[0] / xLen;\n        var yFrac = pt[1] / yLen;\n        var offScreenFraction = Math.max(0, -xFrac, xFrac - 1, -yFrac, yFrac - 1);\n        if(offScreenFraction && (latestXFrac !== undefined) &&\n            crossesViewport(xFrac, yFrac, latestXFrac, latestYFrac)\n        ) {\n            offScreenFraction = 0;\n        }\n        if(offScreenFraction && nextPt &&\n            crossesViewport(xFrac, yFrac, nextPt[0] / xLen, nextPt[1] / yLen)\n        ) {\n            offScreenFraction = 0;\n        }\n\n        return (1 + constants.toleranceGrowth * offScreenFraction) * baseTolerance;\n    }\n\n    function ptDist(pt1, pt2) {\n        var dx = pt1[0] - pt2[0];\n        var dy = pt1[1] - pt2[1];\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    // last bit of filtering: clip paths that are VERY far off-screen\n    // so we don't get near the browser's hard limit (+/- 2^29 px in Chrome and FF)\n\n    var maxScreensAway = constants.maxScreensAway;\n\n    // find the intersections between the segment from pt1 to pt2\n    // and the large rectangle maxScreensAway around the viewport\n    // if one of pt1 and pt2 is inside and the other outside, there\n    // will be only one intersection.\n    // if both are outside there will be 0 or 2 intersections\n    // (or 1 if it's right at a corner - we'll treat that like 0)\n    // returns an array of intersection pts\n    var xEdge0 = -xLen * maxScreensAway;\n    var xEdge1 = xLen * (1 + maxScreensAway);\n    var yEdge0 = -yLen * maxScreensAway;\n    var yEdge1 = yLen * (1 + maxScreensAway);\n    var edges = [\n        [xEdge0, yEdge0, xEdge1, yEdge0],\n        [xEdge1, yEdge0, xEdge1, yEdge1],\n        [xEdge1, yEdge1, xEdge0, yEdge1],\n        [xEdge0, yEdge1, xEdge0, yEdge0]\n    ];\n    var xEdge, yEdge, lastXEdge, lastYEdge, lastFarPt, edgePt;\n\n    // for linear line shape, edge intersections should be linearly interpolated\n    // spline uses this too, which isn't precisely correct but is actually pretty\n    // good, because Catmull-Rom weights far-away points less in creating the curvature\n    function getLinearEdgeIntersections(pt1, pt2) {\n        var out = [];\n        var ptCount = 0;\n        for(var i = 0; i < 4; i++) {\n            var edge = edges[i];\n            var ptInt = segmentsIntersect(pt1[0], pt1[1], pt2[0], pt2[1],\n                edge[0], edge[1], edge[2], edge[3]);\n            if(ptInt && (!ptCount ||\n                Math.abs(ptInt.x - out[0][0]) > 1 ||\n                Math.abs(ptInt.y - out[0][1]) > 1\n            )) {\n                ptInt = [ptInt.x, ptInt.y];\n                // if we have 2 intersections, make sure the closest one to pt1 comes first\n                if(ptCount && ptDist(ptInt, pt1) < ptDist(out[0], pt1)) out.unshift(ptInt);\n                else out.push(ptInt);\n                ptCount++;\n            }\n        }\n        return out;\n    }\n\n    function onlyConstrainedPoint(pt) {\n        if(pt[0] < xEdge0 || pt[0] > xEdge1 || pt[1] < yEdge0 || pt[1] > yEdge1) {\n            return [constrain(pt[0], xEdge0, xEdge1), constrain(pt[1], yEdge0, yEdge1)];\n        }\n    }\n\n    function sameEdge(pt1, pt2) {\n        if(pt1[0] === pt2[0] && (pt1[0] === xEdge0 || pt1[0] === xEdge1)) return true;\n        if(pt1[1] === pt2[1] && (pt1[1] === yEdge0 || pt1[1] === yEdge1)) return true;\n    }\n\n    // for line shapes hv and vh, movement in the two dimensions is decoupled,\n    // so all we need to do is constrain each dimension independently\n    function getHVEdgeIntersections(pt1, pt2) {\n        var out = [];\n        var ptInt1 = onlyConstrainedPoint(pt1);\n        var ptInt2 = onlyConstrainedPoint(pt2);\n        if(ptInt1 && ptInt2 && sameEdge(ptInt1, ptInt2)) return out;\n\n        if(ptInt1) out.push(ptInt1);\n        if(ptInt2) out.push(ptInt2);\n        return out;\n    }\n\n    // hvh and vhv we sometimes have to move one of the intersection points\n    // out BEYOND the clipping rect, by a maximum of a factor of 2, so that\n    // the midpoint line is drawn in the right place\n    function getABAEdgeIntersections(dim, limit0, limit1) {\n        return function(pt1, pt2) {\n            var ptInt1 = onlyConstrainedPoint(pt1);\n            var ptInt2 = onlyConstrainedPoint(pt2);\n\n            var out = [];\n            if(ptInt1 && ptInt2 && sameEdge(ptInt1, ptInt2)) return out;\n\n            if(ptInt1) out.push(ptInt1);\n            if(ptInt2) out.push(ptInt2);\n\n            var midShift = 2 * Lib.constrain((pt1[dim] + pt2[dim]) / 2, limit0, limit1) -\n                ((ptInt1 || pt1)[dim] + (ptInt2 || pt2)[dim]);\n            if(midShift) {\n                var ptToAlter;\n                if(ptInt1 && ptInt2) {\n                    ptToAlter = (midShift > 0 === ptInt1[dim] > ptInt2[dim]) ? ptInt1 : ptInt2;\n                }\n                else ptToAlter = ptInt1 || ptInt2;\n\n                ptToAlter[dim] += midShift;\n            }\n\n            return out;\n        };\n    }\n\n    var getEdgeIntersections;\n    if(shape === 'linear' || shape === 'spline') {\n        getEdgeIntersections = getLinearEdgeIntersections;\n    }\n    else if(shape === 'hv' || shape === 'vh') {\n        getEdgeIntersections = getHVEdgeIntersections;\n    }\n    else if(shape === 'hvh') getEdgeIntersections = getABAEdgeIntersections(0, xEdge0, xEdge1);\n    else if(shape === 'vhv') getEdgeIntersections = getABAEdgeIntersections(1, yEdge0, yEdge1);\n\n    // a segment pt1->pt2 entirely outside the nearby region:\n    // find the corner it gets closest to touching\n    function getClosestCorner(pt1, pt2) {\n        var dx = pt2[0] - pt1[0];\n        var m = (pt2[1] - pt1[1]) / dx;\n        var b = (pt1[1] * pt2[0] - pt2[1] * pt1[0]) / dx;\n\n        if(b > 0) return [m > 0 ? xEdge0 : xEdge1, yEdge1];\n        else return [m > 0 ? xEdge1 : xEdge0, yEdge0];\n    }\n\n    function updateEdge(pt) {\n        var x = pt[0];\n        var y = pt[1];\n        var xSame = x === pts[pti - 1][0];\n        var ySame = y === pts[pti - 1][1];\n        // duplicate point?\n        if(xSame && ySame) return;\n        if(pti > 1) {\n            // backtracking along an edge?\n            var xSame2 = x === pts[pti - 2][0];\n            var ySame2 = y === pts[pti - 2][1];\n            if(xSame && (x === xEdge0 || x === xEdge1) && xSame2) {\n                if(ySame2) pti--; // backtracking exactly - drop prev pt and don't add\n                else pts[pti - 1] = pt; // not exact: replace the prev pt\n            }\n            else if(ySame && (y === yEdge0 || y === yEdge1) && ySame2) {\n                if(xSame2) pti--;\n                else pts[pti - 1] = pt;\n            }\n            else pts[pti++] = pt;\n        }\n        else pts[pti++] = pt;\n    }\n\n    function updateEdgesForReentry(pt) {\n        // if we're outside the nearby region and going back in,\n        // we may need to loop around a corner point\n        if(pts[pti - 1][0] !== pt[0] && pts[pti - 1][1] !== pt[1]) {\n            updateEdge([lastXEdge, lastYEdge]);\n        }\n        updateEdge(pt);\n        lastFarPt = null;\n        lastXEdge = lastYEdge = 0;\n    }\n\n    function addPt(pt) {\n        latestXFrac = pt[0] / xLen;\n        latestYFrac = pt[1] / yLen;\n        // Are we more than maxScreensAway off-screen any direction?\n        // if so, clip to this box, but in such a way that on-screen\n        // drawing is unchanged\n        xEdge = (pt[0] < xEdge0) ? xEdge0 : (pt[0] > xEdge1) ? xEdge1 : 0;\n        yEdge = (pt[1] < yEdge0) ? yEdge0 : (pt[1] > yEdge1) ? yEdge1 : 0;\n        if(xEdge || yEdge) {\n            // to get fills right - if first point is far, push it toward the\n            // screen in whichever direction(s) are far\n            if(!pti) {\n                pts[pti++] = [xEdge || pt[0], yEdge || pt[1]];\n            }\n            else if(lastFarPt) {\n                // both this point and the last are outside the nearby region\n                // check if we're crossing the nearby region\n                var intersections = getEdgeIntersections(lastFarPt, pt);\n                if(intersections.length > 1) {\n                    updateEdgesForReentry(intersections[0]);\n                    pts[pti++] = intersections[1];\n                }\n            }\n            // we're leaving the nearby region - add the point where we left it\n            else {\n                edgePt = getEdgeIntersections(pts[pti - 1], pt)[0];\n                pts[pti++] = edgePt;\n            }\n\n            var lastPt = pts[pti - 1];\n            if(xEdge && yEdge && (lastPt[0] !== xEdge || lastPt[1] !== yEdge)) {\n                // we've gone out beyond a new corner: add the corner too\n                // so that the next point will take the right winding\n                if(lastFarPt) {\n                    if(lastXEdge !== xEdge && lastYEdge !== yEdge) {\n                        if(lastXEdge && lastYEdge) {\n                            // we've gone around to an opposite corner - we\n                            // need to add the correct extra corner\n                            // in order to get the right winding\n                            updateEdge(getClosestCorner(lastFarPt, pt));\n                        }\n                        else {\n                            // we're coming from a far edge - the extra corner\n                            // we need is determined uniquely by the sectors\n                            updateEdge([lastXEdge || xEdge, lastYEdge || yEdge]);\n                        }\n                    }\n                    else if(lastXEdge && lastYEdge) {\n                        updateEdge([lastXEdge, lastYEdge]);\n                    }\n                }\n                updateEdge([xEdge, yEdge]);\n            }\n            else if((lastXEdge - xEdge) && (lastYEdge - yEdge)) {\n                // we're coming from an edge or far corner to an edge - again the\n                // extra corner we need is uniquely determined by the sectors\n                updateEdge([xEdge || lastXEdge, yEdge || lastYEdge]);\n            }\n            lastFarPt = pt;\n            lastXEdge = xEdge;\n            lastYEdge = yEdge;\n        }\n        else {\n            if(lastFarPt) {\n                // this point is in range but the previous wasn't: add its entry pt first\n                updateEdgesForReentry(getEdgeIntersections(lastFarPt, pt)[0]);\n            }\n\n            pts[pti++] = pt;\n        }\n    }\n\n    // loop over ALL points in this trace\n    for(i = 0; i < d.length; i++) {\n        clusterStartPt = getPt(i);\n        if(!clusterStartPt) continue;\n\n        pti = 0;\n        lastFarPt = null;\n        addPt(clusterStartPt);\n\n        // loop over one segment of the trace\n        for(i++; i < d.length; i++) {\n            clusterHighPt = getPt(i);\n            if(!clusterHighPt) {\n                if(connectGaps) continue;\n                else break;\n            }\n\n            // can't decimate if nonlinear line shape\n            // TODO: we *could* decimate [hv]{2,3} shapes if we restricted clusters to horz or vert again\n            // but spline would be verrry awkward to decimate\n            if(!linear || !opts.simplify) {\n                addPt(clusterHighPt);\n                continue;\n            }\n\n            var nextPt = getPt(i + 1);\n\n            clusterRefDist = ptDist(clusterHighPt, clusterStartPt);\n\n            if(clusterRefDist < getTolerance(clusterHighPt, nextPt) * minTolerance) continue;\n\n            clusterUnitVector = [\n                (clusterHighPt[0] - clusterStartPt[0]) / clusterRefDist,\n                (clusterHighPt[1] - clusterStartPt[1]) / clusterRefDist\n            ];\n\n            clusterLowPt = clusterStartPt;\n            clusterHighVal = clusterRefDist;\n            clusterLowVal = clusterMinDeviation = clusterMaxDeviation = 0;\n            clusterHighFirst = false;\n            clusterEndPt = clusterHighPt;\n\n            // loop over one cluster of points that collapse onto one line\n            for(i++; i < d.length; i++) {\n                thisPt = nextPt;\n                nextPt = getPt(i + 1);\n                if(!thisPt) {\n                    if(connectGaps) continue;\n                    else break;\n                }\n                thisVector = [\n                    thisPt[0] - clusterStartPt[0],\n                    thisPt[1] - clusterStartPt[1]\n                ];\n                // cross product (or dot with normal to the cluster vector)\n                thisDeviation = thisVector[0] * clusterUnitVector[1] - thisVector[1] * clusterUnitVector[0];\n                clusterMinDeviation = Math.min(clusterMinDeviation, thisDeviation);\n                clusterMaxDeviation = Math.max(clusterMaxDeviation, thisDeviation);\n\n                if(clusterMaxDeviation - clusterMinDeviation > getTolerance(thisPt, nextPt)) break;\n\n                clusterEndPt = thisPt;\n                thisVal = thisVector[0] * clusterUnitVector[0] + thisVector[1] * clusterUnitVector[1];\n\n                if(thisVal > clusterHighVal) {\n                    clusterHighVal = thisVal;\n                    clusterHighPt = thisPt;\n                    clusterHighFirst = false;\n                } else if(thisVal < clusterLowVal) {\n                    clusterLowVal = thisVal;\n                    clusterLowPt = thisPt;\n                    clusterHighFirst = true;\n                }\n            }\n\n            // insert this cluster into pts\n            // we've already inserted the start pt, now check if we have high and low pts\n            if(clusterHighFirst) {\n                addPt(clusterHighPt);\n                if(clusterEndPt !== clusterLowPt) addPt(clusterLowPt);\n            } else {\n                if(clusterLowPt !== clusterStartPt) addPt(clusterLowPt);\n                if(clusterEndPt !== clusterHighPt) addPt(clusterHighPt);\n            }\n            // and finally insert the end pt\n            addPt(clusterEndPt);\n\n            // have we reached the end of this segment?\n            if(i >= d.length || !thisPt) break;\n\n            // otherwise we have an out-of-cluster point to insert as next clusterStartPt\n            addPt(thisPt);\n            clusterStartPt = thisPt;\n        }\n\n        // to get fills right - repeat what we did at the start\n        if(lastFarPt) updateEdge([lastXEdge || lastFarPt[0], lastYEdge || lastFarPt[1]]);\n\n        segments.push(pts.slice(0, pti));\n    }\n\n    return segments;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AACvD,IAAIC,MAAM,GAAGF,YAAY,CAACE,MAAM;AAChC,IAAIC,QAAQ,GAAGH,YAAY,CAACG,QAAQ;AACpC,IAAIC,aAAa,GAAGD,QAAQ,GAAG,GAAG;AAClC,IAAIE,cAAc,GAAGF,QAAQ,GAAG,GAAG;AACnC,IAAIG,GAAG,GAAGL,OAAO,CAAC,WAAW,CAAC;AAC9B,IAAIM,iBAAiB,GAAGD,GAAG,CAACC,iBAAiB;AAC7C,IAAIC,SAAS,GAAGF,GAAG,CAACE,SAAS;AAC7B,IAAIC,SAAS,GAAGR,OAAO,CAAC,aAAa,CAAC;AAGtCS,MAAM,CAACC,OAAO,GAAG,SAASC,UAAU,CAACC,CAAC,EAAEC,IAAI,EAAE;EAC1C,IAAIC,EAAE,GAAGD,IAAI,CAACE,KAAK;EACnB,IAAIC,EAAE,GAAGH,IAAI,CAACI,KAAK;EACnB,IAAIC,IAAI,GAAGJ,EAAE,CAACK,IAAI,KAAK,KAAK;EAC5B,IAAIC,IAAI,GAAGJ,EAAE,CAACG,IAAI,KAAK,KAAK;EAC5B,IAAIE,IAAI,GAAGP,EAAE,CAACQ,OAAO;EACrB,IAAIC,IAAI,GAAGP,EAAE,CAACM,OAAO;EACrB,IAAIE,WAAW,GAAGX,IAAI,CAACW,WAAW;EAClC,IAAIC,aAAa,GAAGZ,IAAI,CAACY,aAAa;EACtC,IAAIC,KAAK,GAAGb,IAAI,CAACa,KAAK;EACtB,IAAIC,MAAM,GAAGD,KAAK,KAAK,QAAQ;EAC/B,IAAIE,QAAQ,GAAG,EAAE;EACjB,IAAIC,YAAY,GAAGrB,SAAS,CAACqB,YAAY;EACzC,IAAIC,GAAG,GAAG,IAAIC,KAAK,CAACnB,CAAC,CAACoB,MAAM,CAAC;EAC7B,IAAIC,GAAG,GAAG,CAAC;EAEX,IAAIC,CAAC;;EAEL;EACA;EACA,IAAIC,cAAc,EAAEC,YAAY,EAAEC,aAAa,EAAEC,YAAY;;EAE7D;EACA,IAAIC,MAAM;;EAEV;EACA,IAAIC,gBAAgB;;EAEpB;EACA;EACA,IAAIC,iBAAiB;;EAErB;EACA,IAAIC,UAAU;;EAEd;EACA,IAAIC,cAAc,EAAEC,cAAc,EAAEC,aAAa,EAAEC,OAAO;;EAE1D;EACA,IAAIC,mBAAmB,EAAEC,mBAAmB,EAAEC,aAAa;;EAE3D;EACA,SAASC,KAAK,CAACC,KAAK,EAAE;IAClB,IAAIC,EAAE,GAAGxC,CAAC,CAACuC,KAAK,CAAC;IACjB,IAAG,CAACC,EAAE,EAAE,OAAO,KAAK;IACpB,IAAIC,CAAC,GAAGvC,EAAE,CAACwC,GAAG,CAACF,EAAE,CAACC,CAAC,CAAC;IACpB,IAAIE,CAAC,GAAGvC,EAAE,CAACsC,GAAG,CAACF,EAAE,CAACG,CAAC,CAAC;;IAEpB;IACA;IACA,IAAGF,CAAC,KAAKpD,MAAM,EAAE;MACb,IAAGiB,IAAI,EAAEmC,CAAC,GAAGvC,EAAE,CAACwC,GAAG,CAACF,EAAE,CAACC,CAAC,EAAE,IAAI,CAAC;MAC/B,IAAGA,CAAC,KAAKpD,MAAM,EAAE,OAAO,KAAK;MAC7B;MACA;MACA,IAAGmB,IAAI,IAAImC,CAAC,KAAKtD,MAAM,EAAE;QACrBoD,CAAC,IAAIG,IAAI,CAACC,GAAG,CAAC3C,EAAE,CAAC4C,EAAE,GAAGnC,IAAI,IAAIT,EAAE,CAAC4C,EAAE,GAAG,CAAC,GAAGvD,aAAa,GAAGC,cAAc,CAAC,IACpEY,EAAE,CAAC0C,EAAE,GAAGrC,IAAI,IAAIL,EAAE,CAAC0C,EAAE,GAAG,CAAC,GAAGvD,aAAa,GAAGC,cAAc,CAAC,CAAC,CAAC;MACtE;MACAiD,CAAC,IAAI,IAAI;IACb;IACA,IAAGE,CAAC,KAAKtD,MAAM,EAAE;MACb,IAAGmB,IAAI,EAAEmC,CAAC,GAAGvC,EAAE,CAACsC,GAAG,CAACF,EAAE,CAACG,CAAC,EAAE,IAAI,CAAC;MAC/B,IAAGA,CAAC,KAAKtD,MAAM,EAAE,OAAO,KAAK;MAC7BsD,CAAC,IAAI,IAAI;IACb;IACA,OAAO,CAACF,CAAC,EAAEE,CAAC,CAAC;EACjB;EAEA,SAASI,eAAe,CAACC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAE;IACrD,IAAIC,EAAE,GAAGF,MAAM,GAAGF,MAAM;IACxB,IAAIK,EAAE,GAAGF,MAAM,GAAGF,MAAM;IACxB,IAAIK,GAAG,GAAG,GAAG,GAAGN,MAAM;IACtB,IAAIO,GAAG,GAAG,GAAG,GAAGN,MAAM;IACtB,IAAIO,KAAK,GAAGJ,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE;IAC7B,IAAII,GAAG,GAAGL,EAAE,GAAGE,GAAG,GAAGD,EAAE,GAAGE,GAAG;IAC7B,IAAGE,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAGD,KAAK,EAAE;MACvB,IAAIE,KAAK,GAAGJ,GAAG,GAAGD,EAAE,GAAGE,GAAG,GAAGH,EAAE;MAC/B,IAAGM,KAAK,GAAGA,KAAK,GAAGF,KAAK,EAAE,OAAO,IAAI;IACzC;EACJ;EAEA,IAAIG,WAAW,EAAEC,WAAW;EAC5B;EACA,SAASC,YAAY,CAACC,EAAE,EAAEC,MAAM,EAAE;IAC9B,IAAIC,KAAK,GAAGF,EAAE,CAAC,CAAC,CAAC,GAAGrD,IAAI;IACxB,IAAIwD,KAAK,GAAGH,EAAE,CAAC,CAAC,CAAC,GAAGnD,IAAI;IACxB,IAAIuD,iBAAiB,GAAGtB,IAAI,CAACuB,GAAG,CAAC,CAAC,EAAE,CAACH,KAAK,EAAEA,KAAK,GAAG,CAAC,EAAE,CAACC,KAAK,EAAEA,KAAK,GAAG,CAAC,CAAC;IACzE,IAAGC,iBAAiB,IAAKP,WAAW,KAAKS,SAAU,IAC/CrB,eAAe,CAACiB,KAAK,EAAEC,KAAK,EAAEN,WAAW,EAAEC,WAAW,CAAC,EACzD;MACEM,iBAAiB,GAAG,CAAC;IACzB;IACA,IAAGA,iBAAiB,IAAIH,MAAM,IAC1BhB,eAAe,CAACiB,KAAK,EAAEC,KAAK,EAAEF,MAAM,CAAC,CAAC,CAAC,GAAGtD,IAAI,EAAEsD,MAAM,CAAC,CAAC,CAAC,GAAGpD,IAAI,CAAC,EACnE;MACEuD,iBAAiB,GAAG,CAAC;IACzB;IAEA,OAAO,CAAC,CAAC,GAAGtE,SAAS,CAACyE,eAAe,GAAGH,iBAAiB,IAAIrD,aAAa;EAC9E;EAEA,SAASyD,MAAM,CAACC,GAAG,EAAEC,GAAG,EAAE;IACtB,IAAIpB,EAAE,GAAGmB,GAAG,CAAC,CAAC,CAAC,GAAGC,GAAG,CAAC,CAAC,CAAC;IACxB,IAAInB,EAAE,GAAGkB,GAAG,CAAC,CAAC,CAAC,GAAGC,GAAG,CAAC,CAAC,CAAC;IACxB,OAAO5B,IAAI,CAAC6B,IAAI,CAACrB,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;EACvC;;EAEA;EACA;;EAEA,IAAIqB,cAAc,GAAG9E,SAAS,CAAC8E,cAAc;;EAE7C;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,MAAM,GAAG,CAAClE,IAAI,GAAGiE,cAAc;EACnC,IAAIE,MAAM,GAAGnE,IAAI,IAAI,CAAC,GAAGiE,cAAc,CAAC;EACxC,IAAIG,MAAM,GAAG,CAAClE,IAAI,GAAG+D,cAAc;EACnC,IAAII,MAAM,GAAGnE,IAAI,IAAI,CAAC,GAAG+D,cAAc,CAAC;EACxC,IAAIK,KAAK,GAAG,CACR,CAACJ,MAAM,EAAEE,MAAM,EAAED,MAAM,EAAEC,MAAM,CAAC,EAChC,CAACD,MAAM,EAAEC,MAAM,EAAED,MAAM,EAAEE,MAAM,CAAC,EAChC,CAACF,MAAM,EAAEE,MAAM,EAAEH,MAAM,EAAEG,MAAM,CAAC,EAChC,CAACH,MAAM,EAAEG,MAAM,EAAEH,MAAM,EAAEE,MAAM,CAAC,CACnC;EACD,IAAIG,KAAK,EAAEC,KAAK,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAEC,MAAM;;EAEzD;EACA;EACA;EACA,SAASC,0BAA0B,CAACf,GAAG,EAAEC,GAAG,EAAE;IAC1C,IAAIe,GAAG,GAAG,EAAE;IACZ,IAAIC,OAAO,GAAG,CAAC;IACf,KAAI,IAAIlE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACvB,IAAImE,IAAI,GAAGV,KAAK,CAACzD,CAAC,CAAC;MACnB,IAAIoE,KAAK,GAAGhG,iBAAiB,CAAC6E,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEC,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EACxDiB,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;MACvC,IAAGC,KAAK,KAAK,CAACF,OAAO,IACjB5C,IAAI,CAACC,GAAG,CAAC6C,KAAK,CAACjD,CAAC,GAAG8C,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IACjC3C,IAAI,CAACC,GAAG,CAAC6C,KAAK,CAAC/C,CAAC,GAAG4C,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,EAAE;QACCG,KAAK,GAAG,CAACA,KAAK,CAACjD,CAAC,EAAEiD,KAAK,CAAC/C,CAAC,CAAC;QAC1B;QACA,IAAG6C,OAAO,IAAIlB,MAAM,CAACoB,KAAK,EAAEnB,GAAG,CAAC,GAAGD,MAAM,CAACiB,GAAG,CAAC,CAAC,CAAC,EAAEhB,GAAG,CAAC,EAAEgB,GAAG,CAACI,OAAO,CAACD,KAAK,CAAC,CAAC,KACtEH,GAAG,CAACK,IAAI,CAACF,KAAK,CAAC;QACpBF,OAAO,EAAE;MACb;IACJ;IACA,OAAOD,GAAG;EACd;EAEA,SAASM,oBAAoB,CAAC/B,EAAE,EAAE;IAC9B,IAAGA,EAAE,CAAC,CAAC,CAAC,GAAGa,MAAM,IAAIb,EAAE,CAAC,CAAC,CAAC,GAAGc,MAAM,IAAId,EAAE,CAAC,CAAC,CAAC,GAAGe,MAAM,IAAIf,EAAE,CAAC,CAAC,CAAC,GAAGgB,MAAM,EAAE;MACrE,OAAO,CAACnF,SAAS,CAACmE,EAAE,CAAC,CAAC,CAAC,EAAEa,MAAM,EAAEC,MAAM,CAAC,EAAEjF,SAAS,CAACmE,EAAE,CAAC,CAAC,CAAC,EAAEe,MAAM,EAAEC,MAAM,CAAC,CAAC;IAC/E;EACJ;EAEA,SAASgB,QAAQ,CAACvB,GAAG,EAAEC,GAAG,EAAE;IACxB,IAAGD,GAAG,CAAC,CAAC,CAAC,KAAKC,GAAG,CAAC,CAAC,CAAC,KAAKD,GAAG,CAAC,CAAC,CAAC,KAAKI,MAAM,IAAIJ,GAAG,CAAC,CAAC,CAAC,KAAKK,MAAM,CAAC,EAAE,OAAO,IAAI;IAC7E,IAAGL,GAAG,CAAC,CAAC,CAAC,KAAKC,GAAG,CAAC,CAAC,CAAC,KAAKD,GAAG,CAAC,CAAC,CAAC,KAAKM,MAAM,IAAIN,GAAG,CAAC,CAAC,CAAC,KAAKO,MAAM,CAAC,EAAE,OAAO,IAAI;EACjF;;EAEA;EACA;EACA,SAASiB,sBAAsB,CAACxB,GAAG,EAAEC,GAAG,EAAE;IACtC,IAAIe,GAAG,GAAG,EAAE;IACZ,IAAIS,MAAM,GAAGH,oBAAoB,CAACtB,GAAG,CAAC;IACtC,IAAI0B,MAAM,GAAGJ,oBAAoB,CAACrB,GAAG,CAAC;IACtC,IAAGwB,MAAM,IAAIC,MAAM,IAAIH,QAAQ,CAACE,MAAM,EAAEC,MAAM,CAAC,EAAE,OAAOV,GAAG;IAE3D,IAAGS,MAAM,EAAET,GAAG,CAACK,IAAI,CAACI,MAAM,CAAC;IAC3B,IAAGC,MAAM,EAAEV,GAAG,CAACK,IAAI,CAACK,MAAM,CAAC;IAC3B,OAAOV,GAAG;EACd;;EAEA;EACA;EACA;EACA,SAASW,uBAAuB,CAACC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAE;IAClD,OAAO,UAAS9B,GAAG,EAAEC,GAAG,EAAE;MACtB,IAAIwB,MAAM,GAAGH,oBAAoB,CAACtB,GAAG,CAAC;MACtC,IAAI0B,MAAM,GAAGJ,oBAAoB,CAACrB,GAAG,CAAC;MAEtC,IAAIe,GAAG,GAAG,EAAE;MACZ,IAAGS,MAAM,IAAIC,MAAM,IAAIH,QAAQ,CAACE,MAAM,EAAEC,MAAM,CAAC,EAAE,OAAOV,GAAG;MAE3D,IAAGS,MAAM,EAAET,GAAG,CAACK,IAAI,CAACI,MAAM,CAAC;MAC3B,IAAGC,MAAM,EAAEV,GAAG,CAACK,IAAI,CAACK,MAAM,CAAC;MAE3B,IAAIK,QAAQ,GAAG,CAAC,GAAG7G,GAAG,CAACE,SAAS,CAAC,CAAC4E,GAAG,CAAC4B,GAAG,CAAC,GAAG3B,GAAG,CAAC2B,GAAG,CAAC,IAAI,CAAC,EAAEC,MAAM,EAAEC,MAAM,CAAC,IACtE,CAACL,MAAM,IAAIzB,GAAG,EAAE4B,GAAG,CAAC,GAAG,CAACF,MAAM,IAAIzB,GAAG,EAAE2B,GAAG,CAAC,CAAC;MACjD,IAAGG,QAAQ,EAAE;QACT,IAAIC,SAAS;QACb,IAAGP,MAAM,IAAIC,MAAM,EAAE;UACjBM,SAAS,GAAID,QAAQ,GAAG,CAAC,KAAKN,MAAM,CAACG,GAAG,CAAC,GAAGF,MAAM,CAACE,GAAG,CAAC,GAAIH,MAAM,GAAGC,MAAM;QAC9E,CAAC,MACIM,SAAS,GAAGP,MAAM,IAAIC,MAAM;QAEjCM,SAAS,CAACJ,GAAG,CAAC,IAAIG,QAAQ;MAC9B;MAEA,OAAOf,GAAG;IACd,CAAC;EACL;EAEA,IAAIiB,oBAAoB;EACxB,IAAG1F,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,QAAQ,EAAE;IACzC0F,oBAAoB,GAAGlB,0BAA0B;EACrD,CAAC,MACI,IAAGxE,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,IAAI,EAAE;IACtC0F,oBAAoB,GAAGT,sBAAsB;EACjD,CAAC,MACI,IAAGjF,KAAK,KAAK,KAAK,EAAE0F,oBAAoB,GAAGN,uBAAuB,CAAC,CAAC,EAAEvB,MAAM,EAAEC,MAAM,CAAC,CAAC,KACtF,IAAG9D,KAAK,KAAK,KAAK,EAAE0F,oBAAoB,GAAGN,uBAAuB,CAAC,CAAC,EAAErB,MAAM,EAAEC,MAAM,CAAC;;EAE1F;EACA;EACA,SAAS2B,gBAAgB,CAAClC,GAAG,EAAEC,GAAG,EAAE;IAChC,IAAIpB,EAAE,GAAGoB,GAAG,CAAC,CAAC,CAAC,GAAGD,GAAG,CAAC,CAAC,CAAC;IACxB,IAAImC,CAAC,GAAG,CAAClC,GAAG,CAAC,CAAC,CAAC,GAAGD,GAAG,CAAC,CAAC,CAAC,IAAInB,EAAE;IAC9B,IAAIuD,CAAC,GAAG,CAACpC,GAAG,CAAC,CAAC,CAAC,GAAGC,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGD,GAAG,CAAC,CAAC,CAAC,IAAInB,EAAE;IAEhD,IAAGuD,CAAC,GAAG,CAAC,EAAE,OAAO,CAACD,CAAC,GAAG,CAAC,GAAG/B,MAAM,GAAGC,MAAM,EAAEE,MAAM,CAAC,CAAC,KAC9C,OAAO,CAAC4B,CAAC,GAAG,CAAC,GAAG9B,MAAM,GAAGD,MAAM,EAAEE,MAAM,CAAC;EACjD;EAEA,SAAS+B,UAAU,CAAC9C,EAAE,EAAE;IACpB,IAAIrB,CAAC,GAAGqB,EAAE,CAAC,CAAC,CAAC;IACb,IAAInB,CAAC,GAAGmB,EAAE,CAAC,CAAC,CAAC;IACb,IAAI+C,KAAK,GAAGpE,CAAC,KAAKvB,GAAG,CAACG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACjC,IAAIyF,KAAK,GAAGnE,CAAC,KAAKzB,GAAG,CAACG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACjC;IACA,IAAGwF,KAAK,IAAIC,KAAK,EAAE;IACnB,IAAGzF,GAAG,GAAG,CAAC,EAAE;MACR;MACA,IAAI0F,MAAM,GAAGtE,CAAC,KAAKvB,GAAG,CAACG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAClC,IAAI2F,MAAM,GAAGrE,CAAC,KAAKzB,GAAG,CAACG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAClC,IAAGwF,KAAK,KAAKpE,CAAC,KAAKkC,MAAM,IAAIlC,CAAC,KAAKmC,MAAM,CAAC,IAAImC,MAAM,EAAE;QAClD,IAAGC,MAAM,EAAE3F,GAAG,EAAE,CAAC,CAAC;QAAA,KACbH,GAAG,CAACG,GAAG,GAAG,CAAC,CAAC,GAAGyC,EAAE,CAAC,CAAC;MAC5B,CAAC,MACI,IAAGgD,KAAK,KAAKnE,CAAC,KAAKkC,MAAM,IAAIlC,CAAC,KAAKmC,MAAM,CAAC,IAAIkC,MAAM,EAAE;QACvD,IAAGD,MAAM,EAAE1F,GAAG,EAAE,CAAC,KACZH,GAAG,CAACG,GAAG,GAAG,CAAC,CAAC,GAAGyC,EAAE;MAC1B,CAAC,MACI5C,GAAG,CAACG,GAAG,EAAE,CAAC,GAAGyC,EAAE;IACxB,CAAC,MACI5C,GAAG,CAACG,GAAG,EAAE,CAAC,GAAGyC,EAAE;EACxB;EAEA,SAASmD,qBAAqB,CAACnD,EAAE,EAAE;IAC/B;IACA;IACA,IAAG5C,GAAG,CAACG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAKyC,EAAE,CAAC,CAAC,CAAC,IAAI5C,GAAG,CAACG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAKyC,EAAE,CAAC,CAAC,CAAC,EAAE;MACvD8C,UAAU,CAAC,CAAC1B,SAAS,EAAEC,SAAS,CAAC,CAAC;IACtC;IACAyB,UAAU,CAAC9C,EAAE,CAAC;IACdsB,SAAS,GAAG,IAAI;IAChBF,SAAS,GAAGC,SAAS,GAAG,CAAC;EAC7B;EAEA,SAAS+B,KAAK,CAACpD,EAAE,EAAE;IACfH,WAAW,GAAGG,EAAE,CAAC,CAAC,CAAC,GAAGrD,IAAI;IAC1BmD,WAAW,GAAGE,EAAE,CAAC,CAAC,CAAC,GAAGnD,IAAI;IAC1B;IACA;IACA;IACAqE,KAAK,GAAIlB,EAAE,CAAC,CAAC,CAAC,GAAGa,MAAM,GAAIA,MAAM,GAAIb,EAAE,CAAC,CAAC,CAAC,GAAGc,MAAM,GAAIA,MAAM,GAAG,CAAC;IACjEK,KAAK,GAAInB,EAAE,CAAC,CAAC,CAAC,GAAGe,MAAM,GAAIA,MAAM,GAAIf,EAAE,CAAC,CAAC,CAAC,GAAGgB,MAAM,GAAIA,MAAM,GAAG,CAAC;IACjE,IAAGE,KAAK,IAAIC,KAAK,EAAE;MACf;MACA;MACA,IAAG,CAAC5D,GAAG,EAAE;QACLH,GAAG,CAACG,GAAG,EAAE,CAAC,GAAG,CAAC2D,KAAK,IAAIlB,EAAE,CAAC,CAAC,CAAC,EAAEmB,KAAK,IAAInB,EAAE,CAAC,CAAC,CAAC,CAAC;MACjD,CAAC,MACI,IAAGsB,SAAS,EAAE;QACf;QACA;QACA,IAAI+B,aAAa,GAAGX,oBAAoB,CAACpB,SAAS,EAAEtB,EAAE,CAAC;QACvD,IAAGqD,aAAa,CAAC/F,MAAM,GAAG,CAAC,EAAE;UACzB6F,qBAAqB,CAACE,aAAa,CAAC,CAAC,CAAC,CAAC;UACvCjG,GAAG,CAACG,GAAG,EAAE,CAAC,GAAG8F,aAAa,CAAC,CAAC,CAAC;QACjC;MACJ;MACA;MAAA,KACK;QACD9B,MAAM,GAAGmB,oBAAoB,CAACtF,GAAG,CAACG,GAAG,GAAG,CAAC,CAAC,EAAEyC,EAAE,CAAC,CAAC,CAAC,CAAC;QAClD5C,GAAG,CAACG,GAAG,EAAE,CAAC,GAAGgE,MAAM;MACvB;MAEA,IAAI+B,MAAM,GAAGlG,GAAG,CAACG,GAAG,GAAG,CAAC,CAAC;MACzB,IAAG2D,KAAK,IAAIC,KAAK,KAAKmC,MAAM,CAAC,CAAC,CAAC,KAAKpC,KAAK,IAAIoC,MAAM,CAAC,CAAC,CAAC,KAAKnC,KAAK,CAAC,EAAE;QAC/D;QACA;QACA,IAAGG,SAAS,EAAE;UACV,IAAGF,SAAS,KAAKF,KAAK,IAAIG,SAAS,KAAKF,KAAK,EAAE;YAC3C,IAAGC,SAAS,IAAIC,SAAS,EAAE;cACvB;cACA;cACA;cACAyB,UAAU,CAACH,gBAAgB,CAACrB,SAAS,EAAEtB,EAAE,CAAC,CAAC;YAC/C,CAAC,MACI;cACD;cACA;cACA8C,UAAU,CAAC,CAAC1B,SAAS,IAAIF,KAAK,EAAEG,SAAS,IAAIF,KAAK,CAAC,CAAC;YACxD;UACJ,CAAC,MACI,IAAGC,SAAS,IAAIC,SAAS,EAAE;YAC5ByB,UAAU,CAAC,CAAC1B,SAAS,EAAEC,SAAS,CAAC,CAAC;UACtC;QACJ;QACAyB,UAAU,CAAC,CAAC5B,KAAK,EAAEC,KAAK,CAAC,CAAC;MAC9B,CAAC,MACI,IAAIC,SAAS,GAAGF,KAAK,IAAMG,SAAS,GAAGF,KAAM,EAAE;QAChD;QACA;QACA2B,UAAU,CAAC,CAAC5B,KAAK,IAAIE,SAAS,EAAED,KAAK,IAAIE,SAAS,CAAC,CAAC;MACxD;MACAC,SAAS,GAAGtB,EAAE;MACdoB,SAAS,GAAGF,KAAK;MACjBG,SAAS,GAAGF,KAAK;IACrB,CAAC,MACI;MACD,IAAGG,SAAS,EAAE;QACV;QACA6B,qBAAqB,CAACT,oBAAoB,CAACpB,SAAS,EAAEtB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MACjE;MAEA5C,GAAG,CAACG,GAAG,EAAE,CAAC,GAAGyC,EAAE;IACnB;EACJ;;EAEA;EACA,KAAIxC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,CAAC,CAACoB,MAAM,EAAEE,CAAC,EAAE,EAAE;IAC1BC,cAAc,GAAGe,KAAK,CAAChB,CAAC,CAAC;IACzB,IAAG,CAACC,cAAc,EAAE;IAEpBF,GAAG,GAAG,CAAC;IACP+D,SAAS,GAAG,IAAI;IAChB8B,KAAK,CAAC3F,cAAc,CAAC;;IAErB;IACA,KAAID,CAAC,EAAE,EAAEA,CAAC,GAAGtB,CAAC,CAACoB,MAAM,EAAEE,CAAC,EAAE,EAAE;MACxBG,aAAa,GAAGa,KAAK,CAAChB,CAAC,CAAC;MACxB,IAAG,CAACG,aAAa,EAAE;QACf,IAAGb,WAAW,EAAE,SAAS,KACpB;MACT;;MAEA;MACA;MACA;MACA,IAAG,CAACG,MAAM,IAAI,CAACd,IAAI,CAACoH,QAAQ,EAAE;QAC1BH,KAAK,CAACzF,aAAa,CAAC;QACpB;MACJ;MAEA,IAAIsC,MAAM,GAAGzB,KAAK,CAAChB,CAAC,GAAG,CAAC,CAAC;MAEzBS,cAAc,GAAGuC,MAAM,CAAC7C,aAAa,EAAEF,cAAc,CAAC;MAEtD,IAAGQ,cAAc,GAAG8B,YAAY,CAACpC,aAAa,EAAEsC,MAAM,CAAC,GAAG9C,YAAY,EAAE;MAExEY,iBAAiB,GAAG,CAChB,CAACJ,aAAa,CAAC,CAAC,CAAC,GAAGF,cAAc,CAAC,CAAC,CAAC,IAAIQ,cAAc,EACvD,CAACN,aAAa,CAAC,CAAC,CAAC,GAAGF,cAAc,CAAC,CAAC,CAAC,IAAIQ,cAAc,CAC1D;MAEDL,YAAY,GAAGH,cAAc;MAC7BS,cAAc,GAAGD,cAAc;MAC/BE,aAAa,GAAGE,mBAAmB,GAAGC,mBAAmB,GAAG,CAAC;MAC7DR,gBAAgB,GAAG,KAAK;MACxBJ,YAAY,GAAGC,aAAa;;MAE5B;MACA,KAAIH,CAAC,EAAE,EAAEA,CAAC,GAAGtB,CAAC,CAACoB,MAAM,EAAEE,CAAC,EAAE,EAAE;QACxBK,MAAM,GAAGoC,MAAM;QACfA,MAAM,GAAGzB,KAAK,CAAChB,CAAC,GAAG,CAAC,CAAC;QACrB,IAAG,CAACK,MAAM,EAAE;UACR,IAAGf,WAAW,EAAE,SAAS,KACpB;QACT;QACAkB,UAAU,GAAG,CACTH,MAAM,CAAC,CAAC,CAAC,GAAGJ,cAAc,CAAC,CAAC,CAAC,EAC7BI,MAAM,CAAC,CAAC,CAAC,GAAGJ,cAAc,CAAC,CAAC,CAAC,CAChC;QACD;QACAc,aAAa,GAAGP,UAAU,CAAC,CAAC,CAAC,GAAGD,iBAAiB,CAAC,CAAC,CAAC,GAAGC,UAAU,CAAC,CAAC,CAAC,GAAGD,iBAAiB,CAAC,CAAC,CAAC;QAC3FM,mBAAmB,GAAGS,IAAI,CAAC0E,GAAG,CAACnF,mBAAmB,EAAEE,aAAa,CAAC;QAClED,mBAAmB,GAAGQ,IAAI,CAACuB,GAAG,CAAC/B,mBAAmB,EAAEC,aAAa,CAAC;QAElE,IAAGD,mBAAmB,GAAGD,mBAAmB,GAAG0B,YAAY,CAAClC,MAAM,EAAEoC,MAAM,CAAC,EAAE;QAE7EvC,YAAY,GAAGG,MAAM;QACrBO,OAAO,GAAGJ,UAAU,CAAC,CAAC,CAAC,GAAGD,iBAAiB,CAAC,CAAC,CAAC,GAAGC,UAAU,CAAC,CAAC,CAAC,GAAGD,iBAAiB,CAAC,CAAC,CAAC;QAErF,IAAGK,OAAO,GAAGF,cAAc,EAAE;UACzBA,cAAc,GAAGE,OAAO;UACxBT,aAAa,GAAGE,MAAM;UACtBC,gBAAgB,GAAG,KAAK;QAC5B,CAAC,MAAM,IAAGM,OAAO,GAAGD,aAAa,EAAE;UAC/BA,aAAa,GAAGC,OAAO;UACvBR,YAAY,GAAGC,MAAM;UACrBC,gBAAgB,GAAG,IAAI;QAC3B;MACJ;;MAEA;MACA;MACA,IAAGA,gBAAgB,EAAE;QACjBsF,KAAK,CAACzF,aAAa,CAAC;QACpB,IAAGD,YAAY,KAAKE,YAAY,EAAEwF,KAAK,CAACxF,YAAY,CAAC;MACzD,CAAC,MAAM;QACH,IAAGA,YAAY,KAAKH,cAAc,EAAE2F,KAAK,CAACxF,YAAY,CAAC;QACvD,IAAGF,YAAY,KAAKC,aAAa,EAAEyF,KAAK,CAACzF,aAAa,CAAC;MAC3D;MACA;MACAyF,KAAK,CAAC1F,YAAY,CAAC;;MAEnB;MACA,IAAGF,CAAC,IAAItB,CAAC,CAACoB,MAAM,IAAI,CAACO,MAAM,EAAE;;MAE7B;MACAuF,KAAK,CAACvF,MAAM,CAAC;MACbJ,cAAc,GAAGI,MAAM;IAC3B;;IAEA;IACA,IAAGyD,SAAS,EAAEwB,UAAU,CAAC,CAAC1B,SAAS,IAAIE,SAAS,CAAC,CAAC,CAAC,EAAED,SAAS,IAAIC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAEhFpE,QAAQ,CAAC4E,IAAI,CAAC1E,GAAG,CAACqG,KAAK,CAAC,CAAC,EAAElG,GAAG,CAAC,CAAC;EACpC;EAEA,OAAOL,QAAQ;AACnB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
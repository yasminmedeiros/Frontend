{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nexports.init2dArray = function (rowLength, colLength) {\n  var array = new Array(rowLength);\n  for (var i = 0; i < rowLength; i++) {\n    array[i] = new Array(colLength);\n  }\n  return array;\n};\n\n/**\n * transpose a (possibly ragged) 2d array z. inspired by\n * http://stackoverflow.com/questions/17428587/\n * transposing-a-2d-array-in-javascript\n */\nexports.transposeRagged = function (z) {\n  var maxlen = 0;\n  var zlen = z.length;\n  var i, j;\n  // Maximum row length:\n  for (i = 0; i < zlen; i++) {\n    maxlen = Math.max(maxlen, z[i].length);\n  }\n  var t = new Array(maxlen);\n  for (i = 0; i < maxlen; i++) {\n    t[i] = new Array(zlen);\n    for (j = 0; j < zlen; j++) {\n      t[i][j] = z[j][i];\n    }\n  }\n  return t;\n};\n\n// our own dot function so that we don't need to include numeric\nexports.dot = function (x, y) {\n  if (!(x.length && y.length) || x.length !== y.length) return null;\n  var len = x.length;\n  var out;\n  var i;\n  if (x[0].length) {\n    // mat-vec or mat-mat\n    out = new Array(len);\n    for (i = 0; i < len; i++) {\n      out[i] = exports.dot(x[i], y);\n    }\n  } else if (y[0].length) {\n    // vec-mat\n    var yTranspose = exports.transposeRagged(y);\n    out = new Array(yTranspose.length);\n    for (i = 0; i < yTranspose.length; i++) {\n      out[i] = exports.dot(x, yTranspose[i]);\n    }\n  } else {\n    // vec-vec\n    out = 0;\n    for (i = 0; i < len; i++) {\n      out += x[i] * y[i];\n    }\n  }\n  return out;\n};\n\n// translate by (x,y)\nexports.translationMatrix = function (x, y) {\n  return [[1, 0, x], [0, 1, y], [0, 0, 1]];\n};\n\n// rotate by alpha around (0,0)\nexports.rotationMatrix = function (alpha) {\n  var a = alpha * Math.PI / 180;\n  return [[Math.cos(a), -Math.sin(a), 0], [Math.sin(a), Math.cos(a), 0], [0, 0, 1]];\n};\n\n// rotate by alpha around (x,y)\nexports.rotationXYMatrix = function (a, x, y) {\n  return exports.dot(exports.dot(exports.translationMatrix(x, y), exports.rotationMatrix(a)), exports.translationMatrix(-x, -y));\n};\n\n// applies a 2D transformation matrix to either x and y params or an [x,y] array\nexports.apply2DTransform = function (transform) {\n  return function () {\n    var args = arguments;\n    if (args.length === 3) {\n      args = args[0];\n    } // from map\n    var xy = arguments.length === 1 ? args[0] : [args[0], args[1]];\n    return exports.dot(transform, [xy[0], xy[1], 1]).slice(0, 2);\n  };\n};\n\n// applies a 2D transformation matrix to an [x1,y1,x2,y2] array (to transform a segment)\nexports.apply2DTransform2 = function (transform) {\n  var at = exports.apply2DTransform(transform);\n  return function (xys) {\n    return at(xys.slice(0, 2)).concat(at(xys.slice(2, 4)));\n  };\n};","map":{"version":3,"names":["exports","init2dArray","rowLength","colLength","array","Array","i","transposeRagged","z","maxlen","zlen","length","j","Math","max","t","dot","x","y","len","out","yTranspose","translationMatrix","rotationMatrix","alpha","a","PI","cos","sin","rotationXYMatrix","apply2DTransform","transform","args","arguments","xy","slice","apply2DTransform2","at","xys","concat"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/lib/matrix.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\n\nexports.init2dArray = function(rowLength, colLength) {\n    var array = new Array(rowLength);\n    for(var i = 0; i < rowLength; i++) array[i] = new Array(colLength);\n    return array;\n};\n\n/**\n * transpose a (possibly ragged) 2d array z. inspired by\n * http://stackoverflow.com/questions/17428587/\n * transposing-a-2d-array-in-javascript\n */\nexports.transposeRagged = function(z) {\n    var maxlen = 0;\n    var zlen = z.length;\n    var i, j;\n    // Maximum row length:\n    for(i = 0; i < zlen; i++) maxlen = Math.max(maxlen, z[i].length);\n\n    var t = new Array(maxlen);\n    for(i = 0; i < maxlen; i++) {\n        t[i] = new Array(zlen);\n        for(j = 0; j < zlen; j++) t[i][j] = z[j][i];\n    }\n\n    return t;\n};\n\n// our own dot function so that we don't need to include numeric\nexports.dot = function(x, y) {\n    if(!(x.length && y.length) || x.length !== y.length) return null;\n\n    var len = x.length;\n    var out;\n    var i;\n\n    if(x[0].length) {\n        // mat-vec or mat-mat\n        out = new Array(len);\n        for(i = 0; i < len; i++) out[i] = exports.dot(x[i], y);\n    }\n    else if(y[0].length) {\n        // vec-mat\n        var yTranspose = exports.transposeRagged(y);\n        out = new Array(yTranspose.length);\n        for(i = 0; i < yTranspose.length; i++) out[i] = exports.dot(x, yTranspose[i]);\n    }\n    else {\n        // vec-vec\n        out = 0;\n        for(i = 0; i < len; i++) out += x[i] * y[i];\n    }\n\n    return out;\n};\n\n// translate by (x,y)\nexports.translationMatrix = function(x, y) {\n    return [[1, 0, x], [0, 1, y], [0, 0, 1]];\n};\n\n// rotate by alpha around (0,0)\nexports.rotationMatrix = function(alpha) {\n    var a = alpha * Math.PI / 180;\n    return [[Math.cos(a), -Math.sin(a), 0],\n            [Math.sin(a), Math.cos(a), 0],\n            [0, 0, 1]];\n};\n\n// rotate by alpha around (x,y)\nexports.rotationXYMatrix = function(a, x, y) {\n    return exports.dot(\n        exports.dot(exports.translationMatrix(x, y),\n                    exports.rotationMatrix(a)),\n        exports.translationMatrix(-x, -y));\n};\n\n// applies a 2D transformation matrix to either x and y params or an [x,y] array\nexports.apply2DTransform = function(transform) {\n    return function() {\n        var args = arguments;\n        if(args.length === 3) {\n            args = args[0];\n        }// from map\n        var xy = arguments.length === 1 ? args[0] : [args[0], args[1]];\n        return exports.dot(transform, [xy[0], xy[1], 1]).slice(0, 2);\n    };\n};\n\n// applies a 2D transformation matrix to an [x1,y1,x2,y2] array (to transform a segment)\nexports.apply2DTransform2 = function(transform) {\n    var at = exports.apply2DTransform(transform);\n    return function(xys) {\n        return at(xys.slice(0, 2)).concat(at(xys.slice(2, 4)));\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
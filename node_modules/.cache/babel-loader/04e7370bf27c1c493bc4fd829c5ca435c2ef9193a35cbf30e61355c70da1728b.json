{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\nmodule.exports = function convert(scene) {\n  var fullSceneLayout = scene.fullSceneLayout;\n  var anns = fullSceneLayout.annotations;\n  for (var i = 0; i < anns.length; i++) {\n    mockAnnAxes(anns[i], scene);\n  }\n  scene.fullLayout._infolayer.selectAll('.annotation-' + scene.id).remove();\n};\nfunction mockAnnAxes(ann, scene) {\n  var fullSceneLayout = scene.fullSceneLayout;\n  var domain = fullSceneLayout.domain;\n  var size = scene.fullLayout._size;\n  var base = {\n    // this gets fill in on render\n    pdata: null,\n    // to get setConvert to not execute cleanly\n    type: 'linear',\n    // don't try to update them on `editable: true`\n    autorange: false,\n    // set infinite range so that annotation draw routine\n    // does not try to remove 'outside-range' annotations,\n    // this case is handled in the render loop\n    range: [-Infinity, Infinity]\n  };\n  ann._xa = {};\n  Lib.extendFlat(ann._xa, base);\n  Axes.setConvert(ann._xa);\n  ann._xa._offset = size.l + domain.x[0] * size.w;\n  ann._xa.l2p = function () {\n    return 0.5 * (1 + ann._pdata[0] / ann._pdata[3]) * size.w * (domain.x[1] - domain.x[0]);\n  };\n  ann._ya = {};\n  Lib.extendFlat(ann._ya, base);\n  Axes.setConvert(ann._ya);\n  ann._ya._offset = size.t + (1 - domain.y[1]) * size.h;\n  ann._ya.l2p = function () {\n    return 0.5 * (1 - ann._pdata[1] / ann._pdata[3]) * size.h * (domain.y[1] - domain.y[0]);\n  };\n}","map":{"version":3,"names":["Lib","require","Axes","module","exports","convert","scene","fullSceneLayout","anns","annotations","i","length","mockAnnAxes","fullLayout","_infolayer","selectAll","id","remove","ann","domain","size","_size","base","pdata","type","autorange","range","Infinity","_xa","extendFlat","setConvert","_offset","l","x","w","l2p","_pdata","_ya","t","y","h"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/components/annotations3d/convert.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\n\nmodule.exports = function convert(scene) {\n    var fullSceneLayout = scene.fullSceneLayout;\n    var anns = fullSceneLayout.annotations;\n\n    for(var i = 0; i < anns.length; i++) {\n        mockAnnAxes(anns[i], scene);\n    }\n\n    scene.fullLayout._infolayer\n        .selectAll('.annotation-' + scene.id)\n        .remove();\n};\n\nfunction mockAnnAxes(ann, scene) {\n    var fullSceneLayout = scene.fullSceneLayout;\n    var domain = fullSceneLayout.domain;\n    var size = scene.fullLayout._size;\n\n    var base = {\n        // this gets fill in on render\n        pdata: null,\n\n        // to get setConvert to not execute cleanly\n        type: 'linear',\n\n        // don't try to update them on `editable: true`\n        autorange: false,\n\n        // set infinite range so that annotation draw routine\n        // does not try to remove 'outside-range' annotations,\n        // this case is handled in the render loop\n        range: [-Infinity, Infinity]\n    };\n\n    ann._xa = {};\n    Lib.extendFlat(ann._xa, base);\n    Axes.setConvert(ann._xa);\n    ann._xa._offset = size.l + domain.x[0] * size.w;\n    ann._xa.l2p = function() {\n        return 0.5 * (1 + ann._pdata[0] / ann._pdata[3]) * size.w * (domain.x[1] - domain.x[0]);\n    };\n\n    ann._ya = {};\n    Lib.extendFlat(ann._ya, base);\n    Axes.setConvert(ann._ya);\n    ann._ya._offset = size.t + (1 - domain.y[1]) * size.h;\n    ann._ya.l2p = function() {\n        return 0.5 * (1 - ann._pdata[1] / ann._pdata[3]) * size.h * (domain.y[1] - domain.y[0]);\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC9B,IAAIC,IAAI,GAAGD,OAAO,CAAC,4BAA4B,CAAC;AAEhDE,MAAM,CAACC,OAAO,GAAG,SAASC,OAAO,CAACC,KAAK,EAAE;EACrC,IAAIC,eAAe,GAAGD,KAAK,CAACC,eAAe;EAC3C,IAAIC,IAAI,GAAGD,eAAe,CAACE,WAAW;EAEtC,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACjCE,WAAW,CAACJ,IAAI,CAACE,CAAC,CAAC,EAAEJ,KAAK,CAAC;EAC/B;EAEAA,KAAK,CAACO,UAAU,CAACC,UAAU,CACtBC,SAAS,CAAC,cAAc,GAAGT,KAAK,CAACU,EAAE,CAAC,CACpCC,MAAM,EAAE;AACjB,CAAC;AAED,SAASL,WAAW,CAACM,GAAG,EAAEZ,KAAK,EAAE;EAC7B,IAAIC,eAAe,GAAGD,KAAK,CAACC,eAAe;EAC3C,IAAIY,MAAM,GAAGZ,eAAe,CAACY,MAAM;EACnC,IAAIC,IAAI,GAAGd,KAAK,CAACO,UAAU,CAACQ,KAAK;EAEjC,IAAIC,IAAI,GAAG;IACP;IACAC,KAAK,EAAE,IAAI;IAEX;IACAC,IAAI,EAAE,QAAQ;IAEd;IACAC,SAAS,EAAE,KAAK;IAEhB;IACA;IACA;IACAC,KAAK,EAAE,CAAC,CAACC,QAAQ,EAAEA,QAAQ;EAC/B,CAAC;EAEDT,GAAG,CAACU,GAAG,GAAG,CAAC,CAAC;EACZ5B,GAAG,CAAC6B,UAAU,CAACX,GAAG,CAACU,GAAG,EAAEN,IAAI,CAAC;EAC7BpB,IAAI,CAAC4B,UAAU,CAACZ,GAAG,CAACU,GAAG,CAAC;EACxBV,GAAG,CAACU,GAAG,CAACG,OAAO,GAAGX,IAAI,CAACY,CAAC,GAAGb,MAAM,CAACc,CAAC,CAAC,CAAC,CAAC,GAAGb,IAAI,CAACc,CAAC;EAC/ChB,GAAG,CAACU,GAAG,CAACO,GAAG,GAAG,YAAW;IACrB,OAAO,GAAG,IAAI,CAAC,GAAGjB,GAAG,CAACkB,MAAM,CAAC,CAAC,CAAC,GAAGlB,GAAG,CAACkB,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGhB,IAAI,CAACc,CAAC,IAAIf,MAAM,CAACc,CAAC,CAAC,CAAC,CAAC,GAAGd,MAAM,CAACc,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3F,CAAC;EAEDf,GAAG,CAACmB,GAAG,GAAG,CAAC,CAAC;EACZrC,GAAG,CAAC6B,UAAU,CAACX,GAAG,CAACmB,GAAG,EAAEf,IAAI,CAAC;EAC7BpB,IAAI,CAAC4B,UAAU,CAACZ,GAAG,CAACmB,GAAG,CAAC;EACxBnB,GAAG,CAACmB,GAAG,CAACN,OAAO,GAAGX,IAAI,CAACkB,CAAC,GAAG,CAAC,CAAC,GAAGnB,MAAM,CAACoB,CAAC,CAAC,CAAC,CAAC,IAAInB,IAAI,CAACoB,CAAC;EACrDtB,GAAG,CAACmB,GAAG,CAACF,GAAG,GAAG,YAAW;IACrB,OAAO,GAAG,IAAI,CAAC,GAAGjB,GAAG,CAACkB,MAAM,CAAC,CAAC,CAAC,GAAGlB,GAAG,CAACkB,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGhB,IAAI,CAACoB,CAAC,IAAIrB,MAAM,CAACoB,CAAC,CAAC,CAAC,CAAC,GAAGpB,MAAM,CAACoB,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3F,CAAC;AACL"},"metadata":{},"sourceType":"script","externalDependencies":[]}
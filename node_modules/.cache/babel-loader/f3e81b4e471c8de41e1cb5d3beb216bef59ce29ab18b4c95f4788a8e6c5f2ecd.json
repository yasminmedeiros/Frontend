{"ast":null,"code":"module.exports = tokenize;\nvar literals100 = require('./lib/literals'),\n  operators = require('./lib/operators'),\n  builtins100 = require('./lib/builtins'),\n  literals300es = require('./lib/literals-300es'),\n  builtins300es = require('./lib/builtins-300es');\nvar NORMAL = 999 // <-- never emitted\n  ,\n  TOKEN = 9999 // <-- never emitted\n  ,\n  BLOCK_COMMENT = 0,\n  LINE_COMMENT = 1,\n  PREPROCESSOR = 2,\n  OPERATOR = 3,\n  INTEGER = 4,\n  FLOAT = 5,\n  IDENT = 6,\n  BUILTIN = 7,\n  KEYWORD = 8,\n  WHITESPACE = 9,\n  EOF = 10,\n  HEX = 11;\nvar map = ['block-comment', 'line-comment', 'preprocessor', 'operator', 'integer', 'float', 'ident', 'builtin', 'keyword', 'whitespace', 'eof', 'integer'];\nfunction tokenize(opt) {\n  var i = 0,\n    total = 0,\n    mode = NORMAL,\n    c,\n    last,\n    content = [],\n    tokens = [],\n    token_idx = 0,\n    token_offs = 0,\n    line = 1,\n    col = 0,\n    start = 0,\n    isnum = false,\n    isoperator = false,\n    input = '',\n    len;\n  opt = opt || {};\n  var allBuiltins = builtins100;\n  var allLiterals = literals100;\n  if (opt.version === '300 es') {\n    allBuiltins = builtins300es;\n    allLiterals = literals300es;\n  }\n\n  // cache by name\n  var builtinsDict = {},\n    literalsDict = {};\n  for (var i = 0; i < allBuiltins.length; i++) {\n    builtinsDict[allBuiltins[i]] = true;\n  }\n  for (var i = 0; i < allLiterals.length; i++) {\n    literalsDict[allLiterals[i]] = true;\n  }\n  return function (data) {\n    tokens = [];\n    if (data !== null) return write(data);\n    return end();\n  };\n  function token(data) {\n    if (data.length) {\n      tokens.push({\n        type: map[mode],\n        data: data,\n        position: start,\n        line: line,\n        column: col\n      });\n    }\n  }\n  function write(chunk) {\n    i = 0;\n    if (chunk.toString) chunk = chunk.toString();\n    input += chunk.replace(/\\r\\n/g, '\\n');\n    len = input.length;\n    var last;\n    while (c = input[i], i < len) {\n      last = i;\n      switch (mode) {\n        case BLOCK_COMMENT:\n          i = block_comment();\n          break;\n        case LINE_COMMENT:\n          i = line_comment();\n          break;\n        case PREPROCESSOR:\n          i = preprocessor();\n          break;\n        case OPERATOR:\n          i = operator();\n          break;\n        case INTEGER:\n          i = integer();\n          break;\n        case HEX:\n          i = hex();\n          break;\n        case FLOAT:\n          i = decimal();\n          break;\n        case TOKEN:\n          i = readtoken();\n          break;\n        case WHITESPACE:\n          i = whitespace();\n          break;\n        case NORMAL:\n          i = normal();\n          break;\n      }\n      if (last !== i) {\n        switch (input[last]) {\n          case '\\n':\n            col = 0;\n            ++line;\n            break;\n          default:\n            ++col;\n            break;\n        }\n      }\n    }\n    total += i;\n    input = input.slice(i);\n    return tokens;\n  }\n  function end(chunk) {\n    if (content.length) {\n      token(content.join(''));\n    }\n    mode = EOF;\n    token('(eof)');\n    return tokens;\n  }\n  function normal() {\n    content = content.length ? [] : content;\n    if (last === '/' && c === '*') {\n      start = total + i - 1;\n      mode = BLOCK_COMMENT;\n      last = c;\n      return i + 1;\n    }\n    if (last === '/' && c === '/') {\n      start = total + i - 1;\n      mode = LINE_COMMENT;\n      last = c;\n      return i + 1;\n    }\n    if (c === '#') {\n      mode = PREPROCESSOR;\n      start = total + i;\n      return i;\n    }\n    if (/\\s/.test(c)) {\n      mode = WHITESPACE;\n      start = total + i;\n      return i;\n    }\n    isnum = /\\d/.test(c);\n    isoperator = /[^\\w_]/.test(c);\n    start = total + i;\n    mode = isnum ? INTEGER : isoperator ? OPERATOR : TOKEN;\n    return i;\n  }\n  function whitespace() {\n    if (/[^\\s]/g.test(c)) {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n  function preprocessor() {\n    if ((c === '\\r' || c === '\\n') && last !== '\\\\') {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n  function line_comment() {\n    return preprocessor();\n  }\n  function block_comment() {\n    if (c === '/' && last === '*') {\n      content.push(c);\n      token(content.join(''));\n      mode = NORMAL;\n      return i + 1;\n    }\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n  function operator() {\n    if (last === '.' && /\\d/.test(c)) {\n      mode = FLOAT;\n      return i;\n    }\n    if (last === '/' && c === '*') {\n      mode = BLOCK_COMMENT;\n      return i;\n    }\n    if (last === '/' && c === '/') {\n      mode = LINE_COMMENT;\n      return i;\n    }\n    if (c === '.' && content.length) {\n      while (determine_operator(content)) {\n        ;\n      }\n      mode = FLOAT;\n      return i;\n    }\n    if (c === ';' || c === ')' || c === '(') {\n      if (content.length) while (determine_operator(content)) {\n        ;\n      }\n      token(c);\n      mode = NORMAL;\n      return i + 1;\n    }\n    var is_composite_operator = content.length === 2 && c !== '=';\n    if (/[\\w_\\d\\s]/.test(c) || is_composite_operator) {\n      while (determine_operator(content)) {\n        ;\n      }\n      mode = NORMAL;\n      return i;\n    }\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n  function determine_operator(buf) {\n    var j = 0,\n      idx,\n      res;\n    do {\n      idx = operators.indexOf(buf.slice(0, buf.length + j).join(''));\n      res = operators[idx];\n      if (idx === -1) {\n        if (j-- + buf.length > 0) continue;\n        res = buf.slice(0, 1).join('');\n      }\n      token(res);\n      start += res.length;\n      content = content.slice(res.length);\n      return content.length;\n    } while (1);\n  }\n  function hex() {\n    if (/[^a-fA-F0-9]/.test(c)) {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n  function integer() {\n    if (c === '.') {\n      content.push(c);\n      mode = FLOAT;\n      last = c;\n      return i + 1;\n    }\n    if (/[eE]/.test(c)) {\n      content.push(c);\n      mode = FLOAT;\n      last = c;\n      return i + 1;\n    }\n    if (c === 'x' && content.length === 1 && content[0] === '0') {\n      mode = HEX;\n      content.push(c);\n      last = c;\n      return i + 1;\n    }\n    if (/[^\\d]/.test(c)) {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n  function decimal() {\n    if (c === 'f') {\n      content.push(c);\n      last = c;\n      i += 1;\n    }\n    if (/[eE]/.test(c)) {\n      content.push(c);\n      last = c;\n      return i + 1;\n    }\n    if ((c === '-' || c === '+') && /[eE]/.test(last)) {\n      content.push(c);\n      last = c;\n      return i + 1;\n    }\n    if (/[^\\d]/.test(c)) {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n  function readtoken() {\n    if (/[^\\d\\w_]/.test(c)) {\n      var contentstr = content.join('');\n      if (literalsDict[contentstr]) {\n        mode = KEYWORD;\n      } else if (builtinsDict[contentstr]) {\n        mode = BUILTIN;\n      } else {\n        mode = IDENT;\n      }\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n}","map":{"version":3,"names":["module","exports","tokenize","literals100","require","operators","builtins100","literals300es","builtins300es","NORMAL","TOKEN","BLOCK_COMMENT","LINE_COMMENT","PREPROCESSOR","OPERATOR","INTEGER","FLOAT","IDENT","BUILTIN","KEYWORD","WHITESPACE","EOF","HEX","map","opt","i","total","mode","c","last","content","tokens","token_idx","token_offs","line","col","start","isnum","isoperator","input","len","allBuiltins","allLiterals","version","builtinsDict","literalsDict","length","data","write","end","token","push","type","position","column","chunk","toString","replace","block_comment","line_comment","preprocessor","operator","integer","hex","decimal","readtoken","whitespace","normal","slice","join","test","determine_operator","is_composite_operator","buf","j","idx","res","indexOf","contentstr"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/glsl-tokenizer/index.js"],"sourcesContent":["module.exports = tokenize\r\n\r\nvar literals100 = require('./lib/literals')\r\n  , operators = require('./lib/operators')\r\n  , builtins100 = require('./lib/builtins')\r\n  , literals300es = require('./lib/literals-300es')\r\n  , builtins300es = require('./lib/builtins-300es')\r\n\r\nvar NORMAL = 999          // <-- never emitted\r\n  , TOKEN = 9999          // <-- never emitted\r\n  , BLOCK_COMMENT = 0\r\n  , LINE_COMMENT = 1\r\n  , PREPROCESSOR = 2\r\n  , OPERATOR = 3\r\n  , INTEGER = 4\r\n  , FLOAT = 5\r\n  , IDENT = 6\r\n  , BUILTIN = 7\r\n  , KEYWORD = 8\r\n  , WHITESPACE = 9\r\n  , EOF = 10\r\n  , HEX = 11\r\n\r\nvar map = [\r\n    'block-comment'\r\n  , 'line-comment'\r\n  , 'preprocessor'\r\n  , 'operator'\r\n  , 'integer'\r\n  , 'float'\r\n  , 'ident'\r\n  , 'builtin'\r\n  , 'keyword'\r\n  , 'whitespace'\r\n  , 'eof'\r\n  , 'integer'\r\n]\r\n\r\nfunction tokenize(opt) {\r\n  var i = 0\r\n    , total = 0\r\n    , mode = NORMAL\r\n    , c\r\n    , last\r\n    , content = []\r\n    , tokens = []\r\n    , token_idx = 0\r\n    , token_offs = 0\r\n    , line = 1\r\n    , col = 0\r\n    , start = 0\r\n    , isnum = false\r\n    , isoperator = false\r\n    , input = ''\r\n    , len\r\n\r\n  opt = opt || {}\r\n  var allBuiltins = builtins100\r\n  var allLiterals = literals100\r\n  if (opt.version === '300 es') {\r\n    allBuiltins = builtins300es\r\n    allLiterals = literals300es\r\n  }\r\n\r\n  // cache by name\r\n  var builtinsDict = {}, literalsDict = {}\r\n  for (var i = 0; i < allBuiltins.length; i++) {\r\n    builtinsDict[allBuiltins[i]] = true\r\n  }\r\n  for (var i = 0; i < allLiterals.length; i++) {\r\n    literalsDict[allLiterals[i]] = true\r\n  }\r\n\r\n  return function(data) {\r\n    tokens = []\r\n    if (data !== null) return write(data)\r\n    return end()\r\n  }\r\n\r\n  function token(data) {\r\n    if (data.length) {\r\n      tokens.push({\r\n        type: map[mode]\r\n      , data: data\r\n      , position: start\r\n      , line: line\r\n      , column: col\r\n      })\r\n    }\r\n  }\r\n\r\n  function write(chunk) {\r\n    i = 0\r\n\r\n    if (chunk.toString) chunk = chunk.toString()\r\n\r\n    input += chunk.replace(/\\r\\n/g, '\\n')\r\n    len = input.length\r\n\r\n\r\n    var last\r\n\r\n    while(c = input[i], i < len) {\r\n      last = i\r\n\r\n      switch(mode) {\r\n        case BLOCK_COMMENT: i = block_comment(); break\r\n        case LINE_COMMENT: i = line_comment(); break\r\n        case PREPROCESSOR: i = preprocessor(); break\r\n        case OPERATOR: i = operator(); break\r\n        case INTEGER: i = integer(); break\r\n        case HEX: i = hex(); break\r\n        case FLOAT: i = decimal(); break\r\n        case TOKEN: i = readtoken(); break\r\n        case WHITESPACE: i = whitespace(); break\r\n        case NORMAL: i = normal(); break\r\n      }\r\n\r\n      if(last !== i) {\r\n        switch(input[last]) {\r\n          case '\\n': col = 0; ++line; break\r\n          default: ++col; break\r\n        }\r\n      }\r\n    }\r\n\r\n    total += i\r\n    input = input.slice(i)\r\n    return tokens\r\n  }\r\n\r\n  function end(chunk) {\r\n    if(content.length) {\r\n      token(content.join(''))\r\n    }\r\n\r\n    mode = EOF\r\n    token('(eof)')\r\n    return tokens\r\n  }\r\n\r\n  function normal() {\r\n    content = content.length ? [] : content\r\n\r\n    if(last === '/' && c === '*') {\r\n      start = total + i - 1\r\n      mode = BLOCK_COMMENT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(last === '/' && c === '/') {\r\n      start = total + i - 1\r\n      mode = LINE_COMMENT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(c === '#') {\r\n      mode = PREPROCESSOR\r\n      start = total + i\r\n      return i\r\n    }\r\n\r\n    if(/\\s/.test(c)) {\r\n      mode = WHITESPACE\r\n      start = total + i\r\n      return i\r\n    }\r\n\r\n    isnum = /\\d/.test(c)\r\n    isoperator = /[^\\w_]/.test(c)\r\n\r\n    start = total + i\r\n    mode = isnum ? INTEGER : isoperator ? OPERATOR : TOKEN\r\n    return i\r\n  }\r\n\r\n  function whitespace() {\r\n    if(/[^\\s]/g.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function preprocessor() {\r\n    if((c === '\\r' || c === '\\n') && last !== '\\\\') {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function line_comment() {\r\n    return preprocessor()\r\n  }\r\n\r\n  function block_comment() {\r\n    if(c === '/' && last === '*') {\r\n      content.push(c)\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i + 1\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function operator() {\r\n    if(last === '.' && /\\d/.test(c)) {\r\n      mode = FLOAT\r\n      return i\r\n    }\r\n\r\n    if(last === '/' && c === '*') {\r\n      mode = BLOCK_COMMENT\r\n      return i\r\n    }\r\n\r\n    if(last === '/' && c === '/') {\r\n      mode = LINE_COMMENT\r\n      return i\r\n    }\r\n\r\n    if(c === '.' && content.length) {\r\n      while(determine_operator(content));\r\n\r\n      mode = FLOAT\r\n      return i\r\n    }\r\n\r\n    if(c === ';' || c === ')' || c === '(') {\r\n      if(content.length) while(determine_operator(content));\r\n      token(c)\r\n      mode = NORMAL\r\n      return i + 1\r\n    }\r\n\r\n    var is_composite_operator = content.length === 2 && c !== '='\r\n    if(/[\\w_\\d\\s]/.test(c) || is_composite_operator) {\r\n      while(determine_operator(content));\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function determine_operator(buf) {\r\n    var j = 0\r\n      , idx\r\n      , res\r\n\r\n    do {\r\n      idx = operators.indexOf(buf.slice(0, buf.length + j).join(''))\r\n      res = operators[idx]\r\n\r\n      if(idx === -1) {\r\n        if(j-- + buf.length > 0) continue\r\n        res = buf.slice(0, 1).join('')\r\n      }\r\n\r\n      token(res)\r\n\r\n      start += res.length\r\n      content = content.slice(res.length)\r\n      return content.length\r\n    } while(1)\r\n  }\r\n\r\n  function hex() {\r\n    if(/[^a-fA-F0-9]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function integer() {\r\n    if(c === '.') {\r\n      content.push(c)\r\n      mode = FLOAT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[eE]/.test(c)) {\r\n      content.push(c)\r\n      mode = FLOAT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(c === 'x' && content.length === 1 && content[0] === '0') {\r\n      mode = HEX\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[^\\d]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function decimal() {\r\n    if(c === 'f') {\r\n      content.push(c)\r\n      last = c\r\n      i += 1\r\n    }\r\n\r\n    if(/[eE]/.test(c)) {\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if ((c === '-' || c === '+') && /[eE]/.test(last)) {\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[^\\d]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function readtoken() {\r\n    if(/[^\\d\\w_]/.test(c)) {\r\n      var contentstr = content.join('')\r\n      if(literalsDict[contentstr]) {\r\n        mode = KEYWORD\r\n      } else if(builtinsDict[contentstr]) {\r\n        mode = BUILTIN\r\n      } else {\r\n        mode = IDENT\r\n      }\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
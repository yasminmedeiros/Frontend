{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar toLogRange = require('../../lib/to_log_range');\n\n/*\n * convertCoords: when converting an axis between log and linear\n * you need to alter any images on that axis to keep them\n * pointing at the same data point.\n * In v2.0 this will become obsolete (or perhaps size will still need conversion?)\n * we convert size by declaring that the maximum extent *in data units* should be\n * the same, assuming the image is anchored by its center (could remove that restriction\n * if we think it's important) even though the actual left and right values will not be\n * quite the same since the scale becomes nonlinear (and central anchor means the pixel\n * center of the image, not the data units center)\n *\n * gd: the plot div\n * ax: the axis being changed\n * newType: the type it's getting\n * doExtra: function(attr, val) from inside relayout that sets the attribute.\n *     Use this to make the changes as it's aware if any other changes in the\n *     same relayout call should override this conversion.\n */\nmodule.exports = function convertCoords(gd, ax, newType, doExtra) {\n  ax = ax || {};\n  var toLog = newType === 'log' && ax.type === 'linear';\n  var fromLog = newType === 'linear' && ax.type === 'log';\n  if (!(toLog || fromLog)) return;\n  var images = gd._fullLayout.images;\n  var axLetter = ax._id.charAt(0);\n  var image;\n  var attrPrefix;\n  for (var i = 0; i < images.length; i++) {\n    image = images[i];\n    attrPrefix = 'images[' + i + '].';\n    if (image[axLetter + 'ref'] === ax._id) {\n      var currentPos = image[axLetter];\n      var currentSize = image['size' + axLetter];\n      var newPos = null;\n      var newSize = null;\n      if (toLog) {\n        newPos = toLogRange(currentPos, ax.range);\n\n        // this is the inverse of the conversion we do in fromLog below\n        // so that the conversion is reversible (notice the fromLog conversion\n        // is like sinh, and this one looks like arcsinh)\n        var dx = currentSize / Math.pow(10, newPos) / 2;\n        newSize = 2 * Math.log(dx + Math.sqrt(1 + dx * dx)) / Math.LN10;\n      } else {\n        newPos = Math.pow(10, currentPos);\n        newSize = newPos * (Math.pow(10, currentSize / 2) - Math.pow(10, -currentSize / 2));\n      }\n\n      // if conversion failed, delete the value so it can get a default later on\n      if (!isNumeric(newPos)) {\n        newPos = null;\n        newSize = null;\n      } else if (!isNumeric(newSize)) newSize = null;\n      doExtra(attrPrefix + axLetter, newPos);\n      doExtra(attrPrefix + 'size' + axLetter, newSize);\n    }\n  }\n};","map":{"version":3,"names":["isNumeric","require","toLogRange","module","exports","convertCoords","gd","ax","newType","doExtra","toLog","type","fromLog","images","_fullLayout","axLetter","_id","charAt","image","attrPrefix","i","length","currentPos","currentSize","newPos","newSize","range","dx","Math","pow","log","sqrt","LN10"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/components/images/convert_coords.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar toLogRange = require('../../lib/to_log_range');\n\n/*\n * convertCoords: when converting an axis between log and linear\n * you need to alter any images on that axis to keep them\n * pointing at the same data point.\n * In v2.0 this will become obsolete (or perhaps size will still need conversion?)\n * we convert size by declaring that the maximum extent *in data units* should be\n * the same, assuming the image is anchored by its center (could remove that restriction\n * if we think it's important) even though the actual left and right values will not be\n * quite the same since the scale becomes nonlinear (and central anchor means the pixel\n * center of the image, not the data units center)\n *\n * gd: the plot div\n * ax: the axis being changed\n * newType: the type it's getting\n * doExtra: function(attr, val) from inside relayout that sets the attribute.\n *     Use this to make the changes as it's aware if any other changes in the\n *     same relayout call should override this conversion.\n */\nmodule.exports = function convertCoords(gd, ax, newType, doExtra) {\n    ax = ax || {};\n\n    var toLog = (newType === 'log') && (ax.type === 'linear');\n    var fromLog = (newType === 'linear') && (ax.type === 'log');\n\n    if(!(toLog || fromLog)) return;\n\n    var images = gd._fullLayout.images;\n    var axLetter = ax._id.charAt(0);\n    var image;\n    var attrPrefix;\n\n    for(var i = 0; i < images.length; i++) {\n        image = images[i];\n        attrPrefix = 'images[' + i + '].';\n\n        if(image[axLetter + 'ref'] === ax._id) {\n            var currentPos = image[axLetter];\n            var currentSize = image['size' + axLetter];\n            var newPos = null;\n            var newSize = null;\n\n            if(toLog) {\n                newPos = toLogRange(currentPos, ax.range);\n\n                // this is the inverse of the conversion we do in fromLog below\n                // so that the conversion is reversible (notice the fromLog conversion\n                // is like sinh, and this one looks like arcsinh)\n                var dx = currentSize / Math.pow(10, newPos) / 2;\n                newSize = 2 * Math.log(dx + Math.sqrt(1 + dx * dx)) / Math.LN10;\n            }\n            else {\n                newPos = Math.pow(10, currentPos);\n                newSize = newPos * (Math.pow(10, currentSize / 2) - Math.pow(10, -currentSize / 2));\n            }\n\n            // if conversion failed, delete the value so it can get a default later on\n            if(!isNumeric(newPos)) {\n                newPos = null;\n                newSize = null;\n            }\n            else if(!isNumeric(newSize)) newSize = null;\n\n            doExtra(attrPrefix + axLetter, newPos);\n            doExtra(attrPrefix + 'size' + axLetter, newSize);\n        }\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACzC,IAAIC,UAAU,GAAGD,OAAO,CAAC,wBAAwB,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,SAASC,aAAa,CAACC,EAAE,EAAEC,EAAE,EAAEC,OAAO,EAAEC,OAAO,EAAE;EAC9DF,EAAE,GAAGA,EAAE,IAAI,CAAC,CAAC;EAEb,IAAIG,KAAK,GAAIF,OAAO,KAAK,KAAK,IAAMD,EAAE,CAACI,IAAI,KAAK,QAAS;EACzD,IAAIC,OAAO,GAAIJ,OAAO,KAAK,QAAQ,IAAMD,EAAE,CAACI,IAAI,KAAK,KAAM;EAE3D,IAAG,EAAED,KAAK,IAAIE,OAAO,CAAC,EAAE;EAExB,IAAIC,MAAM,GAAGP,EAAE,CAACQ,WAAW,CAACD,MAAM;EAClC,IAAIE,QAAQ,GAAGR,EAAE,CAACS,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC;EAC/B,IAAIC,KAAK;EACT,IAAIC,UAAU;EAEd,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACnCF,KAAK,GAAGL,MAAM,CAACO,CAAC,CAAC;IACjBD,UAAU,GAAG,SAAS,GAAGC,CAAC,GAAG,IAAI;IAEjC,IAAGF,KAAK,CAACH,QAAQ,GAAG,KAAK,CAAC,KAAKR,EAAE,CAACS,GAAG,EAAE;MACnC,IAAIM,UAAU,GAAGJ,KAAK,CAACH,QAAQ,CAAC;MAChC,IAAIQ,WAAW,GAAGL,KAAK,CAAC,MAAM,GAAGH,QAAQ,CAAC;MAC1C,IAAIS,MAAM,GAAG,IAAI;MACjB,IAAIC,OAAO,GAAG,IAAI;MAElB,IAAGf,KAAK,EAAE;QACNc,MAAM,GAAGtB,UAAU,CAACoB,UAAU,EAAEf,EAAE,CAACmB,KAAK,CAAC;;QAEzC;QACA;QACA;QACA,IAAIC,EAAE,GAAGJ,WAAW,GAAGK,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEL,MAAM,CAAC,GAAG,CAAC;QAC/CC,OAAO,GAAG,CAAC,GAAGG,IAAI,CAACE,GAAG,CAACH,EAAE,GAAGC,IAAI,CAACG,IAAI,CAAC,CAAC,GAAGJ,EAAE,GAAGA,EAAE,CAAC,CAAC,GAAGC,IAAI,CAACI,IAAI;MACnE,CAAC,MACI;QACDR,MAAM,GAAGI,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEP,UAAU,CAAC;QACjCG,OAAO,GAAGD,MAAM,IAAII,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEN,WAAW,GAAG,CAAC,CAAC,GAAGK,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE,CAACN,WAAW,GAAG,CAAC,CAAC,CAAC;MACvF;;MAEA;MACA,IAAG,CAACvB,SAAS,CAACwB,MAAM,CAAC,EAAE;QACnBA,MAAM,GAAG,IAAI;QACbC,OAAO,GAAG,IAAI;MAClB,CAAC,MACI,IAAG,CAACzB,SAAS,CAACyB,OAAO,CAAC,EAAEA,OAAO,GAAG,IAAI;MAE3ChB,OAAO,CAACU,UAAU,GAAGJ,QAAQ,EAAES,MAAM,CAAC;MACtCf,OAAO,CAACU,UAAU,GAAG,MAAM,GAAGJ,QAAQ,EAAEU,OAAO,CAAC;IACpD;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
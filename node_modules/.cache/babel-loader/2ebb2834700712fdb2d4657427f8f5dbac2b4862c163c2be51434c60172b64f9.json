{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar constants = require('./constants');\nvar search = require('../../lib/search').findBin;\nvar computeControlPoints = require('./compute_control_points');\nvar createSplineEvaluator = require('./create_spline_evaluator');\nvar createIDerivativeEvaluator = require('./create_i_derivative_evaluator');\nvar createJDerivativeEvaluator = require('./create_j_derivative_evaluator');\n\n/*\n * Create conversion functions to go from one basis to another. In particular the letter\n * abbreviations are:\n *\n *   i: i/j coordinates along the grid. Integer values correspond to data points\n *   a: real-valued coordinates along the a/b axes\n *   c: cartesian x-y coordinates\n *   p: screen-space pixel coordinates\n */\nmodule.exports = function setConvert(trace) {\n  var a = trace._a;\n  var b = trace._b;\n  var na = a.length;\n  var nb = b.length;\n  var aax = trace.aaxis;\n  var bax = trace.baxis;\n\n  // Grab the limits once rather than recomputing the bounds for every point\n  // independently:\n  var amin = a[0];\n  var amax = a[na - 1];\n  var bmin = b[0];\n  var bmax = b[nb - 1];\n  var arange = a[a.length - 1] - a[0];\n  var brange = b[b.length - 1] - b[0];\n\n  // Compute the tolerance so that points are visible slightly outside the\n  // defined carpet axis:\n  var atol = arange * constants.RELATIVE_CULL_TOLERANCE;\n  var btol = brange * constants.RELATIVE_CULL_TOLERANCE;\n\n  // Expand the limits to include the relative tolerance:\n  amin -= atol;\n  amax += atol;\n  bmin -= btol;\n  bmax += btol;\n  trace.isVisible = function (a, b) {\n    return a > amin && a < amax && b > bmin && b < bmax;\n  };\n  trace.isOccluded = function (a, b) {\n    return a < amin || a > amax || b < bmin || b > bmax;\n  };\n  trace.setScale = function () {\n    var x = trace._x;\n    var y = trace._y;\n\n    // This is potentially a very expensive step! It does the bulk of the work of constructing\n    // an expanded basis of control points. Note in particular that it overwrites the existing\n    // basis without creating a new array since that would potentially thrash the garbage\n    // collector.\n    var result = computeControlPoints(trace._xctrl, trace._yctrl, x, y, aax.smoothing, bax.smoothing);\n    trace._xctrl = result[0];\n    trace._yctrl = result[1];\n\n    // This step is the second step in the process, but it's somewhat simpler. It just unrolls\n    // some logic since it would be unnecessarily expensive to compute both interpolations\n    // nearly identically but separately and to include a bunch of linear vs. bicubic logic in\n    // every single call.\n    trace.evalxy = createSplineEvaluator([trace._xctrl, trace._yctrl], na, nb, aax.smoothing, bax.smoothing);\n    trace.dxydi = createIDerivativeEvaluator([trace._xctrl, trace._yctrl], aax.smoothing, bax.smoothing);\n    trace.dxydj = createJDerivativeEvaluator([trace._xctrl, trace._yctrl], aax.smoothing, bax.smoothing);\n  };\n\n  /*\n   * Convert from i/j data grid coordinates to a/b values. Note in particular that this\n   * is *linear* interpolation, even if the data is interpolated bicubically.\n   */\n  trace.i2a = function (i) {\n    var i0 = Math.max(0, Math.floor(i[0]), na - 2);\n    var ti = i[0] - i0;\n    return (1 - ti) * a[i0] + ti * a[i0 + 1];\n  };\n  trace.j2b = function (j) {\n    var j0 = Math.max(0, Math.floor(j[1]), na - 2);\n    var tj = j[1] - j0;\n    return (1 - tj) * b[j0] + tj * b[j0 + 1];\n  };\n  trace.ij2ab = function (ij) {\n    return [trace.i2a(ij[0]), trace.j2b(ij[1])];\n  };\n\n  /*\n   * Convert from a/b coordinates to i/j grid-numbered coordinates. This requires searching\n   * through the a/b data arrays and assumes they are monotonic, which is presumed to have\n   * been enforced already.\n   */\n  trace.a2i = function (aval) {\n    var i0 = Math.max(0, Math.min(search(aval, a), na - 2));\n    var a0 = a[i0];\n    var a1 = a[i0 + 1];\n    return Math.max(0, Math.min(na - 1, i0 + (aval - a0) / (a1 - a0)));\n  };\n  trace.b2j = function (bval) {\n    var j0 = Math.max(0, Math.min(search(bval, b), nb - 2));\n    var b0 = b[j0];\n    var b1 = b[j0 + 1];\n    return Math.max(0, Math.min(nb - 1, j0 + (bval - b0) / (b1 - b0)));\n  };\n  trace.ab2ij = function (ab) {\n    return [trace.a2i(ab[0]), trace.b2j(ab[1])];\n  };\n\n  /*\n   * Convert from i/j coordinates to x/y caretesian coordinates. This means either bilinear\n   * or bicubic spline evaluation, but the hard part is already done at this point.\n   */\n  trace.i2c = function (i, j) {\n    return trace.evalxy([], i, j);\n  };\n  trace.ab2xy = function (aval, bval, extrapolate) {\n    if (!extrapolate && (aval < a[0] || aval > a[na - 1] | bval < b[0] || bval > b[nb - 1])) {\n      return [false, false];\n    }\n    var i = trace.a2i(aval);\n    var j = trace.b2j(bval);\n    var pt = trace.evalxy([], i, j);\n    if (extrapolate) {\n      // This section uses the boundary derivatives to extrapolate linearly outside\n      // the defined range. Consider a scatter line with one point inside the carpet\n      // axis and one point outside. If we don't extrapolate, we can't draw the line\n      // at all.\n      var iex = 0;\n      var jex = 0;\n      var der = [];\n      var i0, ti, j0, tj;\n      if (aval < a[0]) {\n        i0 = 0;\n        ti = 0;\n        iex = (aval - a[0]) / (a[1] - a[0]);\n      } else if (aval > a[na - 1]) {\n        i0 = na - 2;\n        ti = 1;\n        iex = (aval - a[na - 1]) / (a[na - 1] - a[na - 2]);\n      } else {\n        i0 = Math.max(0, Math.min(na - 2, Math.floor(i)));\n        ti = i - i0;\n      }\n      if (bval < b[0]) {\n        j0 = 0;\n        tj = 0;\n        jex = (bval - b[0]) / (b[1] - b[0]);\n      } else if (bval > b[nb - 1]) {\n        j0 = nb - 2;\n        tj = 1;\n        jex = (bval - b[nb - 1]) / (b[nb - 1] - b[nb - 2]);\n      } else {\n        j0 = Math.max(0, Math.min(nb - 2, Math.floor(j)));\n        tj = j - j0;\n      }\n      if (iex) {\n        trace.dxydi(der, i0, j0, ti, tj);\n        pt[0] += der[0] * iex;\n        pt[1] += der[1] * iex;\n      }\n      if (jex) {\n        trace.dxydj(der, i0, j0, ti, tj);\n        pt[0] += der[0] * jex;\n        pt[1] += der[1] * jex;\n      }\n    }\n    return pt;\n  };\n  trace.c2p = function (xy, xa, ya) {\n    return [xa.c2p(xy[0]), ya.c2p(xy[1])];\n  };\n  trace.p2x = function (p, xa, ya) {\n    return [xa.p2c(p[0]), ya.p2c(p[1])];\n  };\n  trace.dadi = function (i /* , u*/) {\n    // Right now only a piecewise linear a or b basis is permitted since smoother interpolation\n    // would cause monotonicity problems. As a retult, u is entirely disregarded in this\n    // computation, though we'll specify it as a parameter for the sake of completeness and\n    // future-proofing. It would be possible to use monotonic cubic interpolation, for example.\n    //\n    // See: https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n\n    // u = u || 0;\n\n    var i0 = Math.max(0, Math.min(a.length - 2, i));\n\n    // The step (demoninator) is implicitly 1 since that's the grid spacing.\n    return a[i0 + 1] - a[i0];\n  };\n  trace.dbdj = function (j /* , v*/) {\n    // See above caveats for dadi which also apply here\n    var j0 = Math.max(0, Math.min(b.length - 2, j));\n\n    // The step (demoninator) is implicitly 1 since that's the grid spacing.\n    return b[j0 + 1] - b[j0];\n  };\n\n  // Takes: grid cell coordinate (i, j) and fractional grid cell coordinates (u, v)\n  // Returns: (dx/da, dy/db)\n  //\n  // NB: separate grid cell + fractional grid cell coordinate format is due to the discontinuous\n  // derivative, as described better in create_i_derivative_evaluator.js\n  trace.dxyda = function (i0, j0, u, v) {\n    var dxydi = trace.dxydi(null, i0, j0, u, v);\n    var dadi = trace.dadi(i0, u);\n    return [dxydi[0] / dadi, dxydi[1] / dadi];\n  };\n  trace.dxydb = function (i0, j0, u, v) {\n    var dxydj = trace.dxydj(null, i0, j0, u, v);\n    var dbdj = trace.dbdj(j0, v);\n    return [dxydj[0] / dbdj, dxydj[1] / dbdj];\n  };\n\n  // Sometimes we don't care about precision and all we really want is decent rough\n  // directions (as is the case with labels). In that case, we can do a very rough finite\n  // difference and spare having to worry about precise grid coordinates:\n  trace.dxyda_rough = function (a, b, reldiff) {\n    var h = arange * (reldiff || 0.1);\n    var plus = trace.ab2xy(a + h, b, true);\n    var minus = trace.ab2xy(a - h, b, true);\n    return [(plus[0] - minus[0]) * 0.5 / h, (plus[1] - minus[1]) * 0.5 / h];\n  };\n  trace.dxydb_rough = function (a, b, reldiff) {\n    var h = brange * (reldiff || 0.1);\n    var plus = trace.ab2xy(a, b + h, true);\n    var minus = trace.ab2xy(a, b - h, true);\n    return [(plus[0] - minus[0]) * 0.5 / h, (plus[1] - minus[1]) * 0.5 / h];\n  };\n  trace.dpdx = function (xa) {\n    return xa._m;\n  };\n  trace.dpdy = function (ya) {\n    return ya._m;\n  };\n};","map":{"version":3,"names":["constants","require","search","findBin","computeControlPoints","createSplineEvaluator","createIDerivativeEvaluator","createJDerivativeEvaluator","module","exports","setConvert","trace","a","_a","b","_b","na","length","nb","aax","aaxis","bax","baxis","amin","amax","bmin","bmax","arange","brange","atol","RELATIVE_CULL_TOLERANCE","btol","isVisible","isOccluded","setScale","x","_x","y","_y","result","_xctrl","_yctrl","smoothing","evalxy","dxydi","dxydj","i2a","i","i0","Math","max","floor","ti","j2b","j","j0","tj","ij2ab","ij","a2i","aval","min","a0","a1","b2j","bval","b0","b1","ab2ij","ab","i2c","ab2xy","extrapolate","pt","iex","jex","der","c2p","xy","xa","ya","p2x","p","p2c","dadi","dbdj","dxyda","u","v","dxydb","dxyda_rough","reldiff","h","plus","minus","dxydb_rough","dpdx","_m","dpdy"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/carpet/set_convert.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar constants = require('./constants');\nvar search = require('../../lib/search').findBin;\nvar computeControlPoints = require('./compute_control_points');\nvar createSplineEvaluator = require('./create_spline_evaluator');\nvar createIDerivativeEvaluator = require('./create_i_derivative_evaluator');\nvar createJDerivativeEvaluator = require('./create_j_derivative_evaluator');\n\n/*\n * Create conversion functions to go from one basis to another. In particular the letter\n * abbreviations are:\n *\n *   i: i/j coordinates along the grid. Integer values correspond to data points\n *   a: real-valued coordinates along the a/b axes\n *   c: cartesian x-y coordinates\n *   p: screen-space pixel coordinates\n */\nmodule.exports = function setConvert(trace) {\n    var a = trace._a;\n    var b = trace._b;\n    var na = a.length;\n    var nb = b.length;\n    var aax = trace.aaxis;\n    var bax = trace.baxis;\n\n    // Grab the limits once rather than recomputing the bounds for every point\n    // independently:\n    var amin = a[0];\n    var amax = a[na - 1];\n    var bmin = b[0];\n    var bmax = b[nb - 1];\n    var arange = a[a.length - 1] - a[0];\n    var brange = b[b.length - 1] - b[0];\n\n    // Compute the tolerance so that points are visible slightly outside the\n    // defined carpet axis:\n    var atol = arange * constants.RELATIVE_CULL_TOLERANCE;\n    var btol = brange * constants.RELATIVE_CULL_TOLERANCE;\n\n    // Expand the limits to include the relative tolerance:\n    amin -= atol;\n    amax += atol;\n    bmin -= btol;\n    bmax += btol;\n\n    trace.isVisible = function(a, b) {\n        return a > amin && a < amax && b > bmin && b < bmax;\n    };\n\n    trace.isOccluded = function(a, b) {\n        return a < amin || a > amax || b < bmin || b > bmax;\n    };\n\n    trace.setScale = function() {\n        var x = trace._x;\n        var y = trace._y;\n\n        // This is potentially a very expensive step! It does the bulk of the work of constructing\n        // an expanded basis of control points. Note in particular that it overwrites the existing\n        // basis without creating a new array since that would potentially thrash the garbage\n        // collector.\n        var result = computeControlPoints(trace._xctrl, trace._yctrl, x, y, aax.smoothing, bax.smoothing);\n        trace._xctrl = result[0];\n        trace._yctrl = result[1];\n\n        // This step is the second step in the process, but it's somewhat simpler. It just unrolls\n        // some logic since it would be unnecessarily expensive to compute both interpolations\n        // nearly identically but separately and to include a bunch of linear vs. bicubic logic in\n        // every single call.\n        trace.evalxy = createSplineEvaluator([trace._xctrl, trace._yctrl], na, nb, aax.smoothing, bax.smoothing);\n\n        trace.dxydi = createIDerivativeEvaluator([trace._xctrl, trace._yctrl], aax.smoothing, bax.smoothing);\n        trace.dxydj = createJDerivativeEvaluator([trace._xctrl, trace._yctrl], aax.smoothing, bax.smoothing);\n    };\n\n    /*\n     * Convert from i/j data grid coordinates to a/b values. Note in particular that this\n     * is *linear* interpolation, even if the data is interpolated bicubically.\n     */\n    trace.i2a = function(i) {\n        var i0 = Math.max(0, Math.floor(i[0]), na - 2);\n        var ti = i[0] - i0;\n        return (1 - ti) * a[i0] + ti * a[i0 + 1];\n    };\n\n    trace.j2b = function(j) {\n        var j0 = Math.max(0, Math.floor(j[1]), na - 2);\n        var tj = j[1] - j0;\n        return (1 - tj) * b[j0] + tj * b[j0 + 1];\n    };\n\n    trace.ij2ab = function(ij) {\n        return [trace.i2a(ij[0]), trace.j2b(ij[1])];\n    };\n\n    /*\n     * Convert from a/b coordinates to i/j grid-numbered coordinates. This requires searching\n     * through the a/b data arrays and assumes they are monotonic, which is presumed to have\n     * been enforced already.\n     */\n    trace.a2i = function(aval) {\n        var i0 = Math.max(0, Math.min(search(aval, a), na - 2));\n        var a0 = a[i0];\n        var a1 = a[i0 + 1];\n        return Math.max(0, Math.min(na - 1, i0 + (aval - a0) / (a1 - a0)));\n    };\n\n    trace.b2j = function(bval) {\n        var j0 = Math.max(0, Math.min(search(bval, b), nb - 2));\n        var b0 = b[j0];\n        var b1 = b[j0 + 1];\n        return Math.max(0, Math.min(nb - 1, j0 + (bval - b0) / (b1 - b0)));\n    };\n\n    trace.ab2ij = function(ab) {\n        return [trace.a2i(ab[0]), trace.b2j(ab[1])];\n    };\n\n    /*\n     * Convert from i/j coordinates to x/y caretesian coordinates. This means either bilinear\n     * or bicubic spline evaluation, but the hard part is already done at this point.\n     */\n    trace.i2c = function(i, j) {\n        return trace.evalxy([], i, j);\n    };\n\n    trace.ab2xy = function(aval, bval, extrapolate) {\n        if(!extrapolate && (aval < a[0] || aval > a[na - 1] | bval < b[0] || bval > b[nb - 1])) {\n            return [false, false];\n        }\n        var i = trace.a2i(aval);\n        var j = trace.b2j(bval);\n\n        var pt = trace.evalxy([], i, j);\n\n        if(extrapolate) {\n            // This section uses the boundary derivatives to extrapolate linearly outside\n            // the defined range. Consider a scatter line with one point inside the carpet\n            // axis and one point outside. If we don't extrapolate, we can't draw the line\n            // at all.\n            var iex = 0;\n            var jex = 0;\n            var der = [];\n\n            var i0, ti, j0, tj;\n            if(aval < a[0]) {\n                i0 = 0;\n                ti = 0;\n                iex = (aval - a[0]) / (a[1] - a[0]);\n            } else if(aval > a[na - 1]) {\n                i0 = na - 2;\n                ti = 1;\n                iex = (aval - a[na - 1]) / (a[na - 1] - a[na - 2]);\n            } else {\n                i0 = Math.max(0, Math.min(na - 2, Math.floor(i)));\n                ti = i - i0;\n            }\n\n            if(bval < b[0]) {\n                j0 = 0;\n                tj = 0;\n                jex = (bval - b[0]) / (b[1] - b[0]);\n            } else if(bval > b[nb - 1]) {\n                j0 = nb - 2;\n                tj = 1;\n                jex = (bval - b[nb - 1]) / (b[nb - 1] - b[nb - 2]);\n            } else {\n                j0 = Math.max(0, Math.min(nb - 2, Math.floor(j)));\n                tj = j - j0;\n            }\n\n            if(iex) {\n                trace.dxydi(der, i0, j0, ti, tj);\n                pt[0] += der[0] * iex;\n                pt[1] += der[1] * iex;\n            }\n\n            if(jex) {\n                trace.dxydj(der, i0, j0, ti, tj);\n                pt[0] += der[0] * jex;\n                pt[1] += der[1] * jex;\n            }\n        }\n\n        return pt;\n    };\n\n\n    trace.c2p = function(xy, xa, ya) {\n        return [xa.c2p(xy[0]), ya.c2p(xy[1])];\n    };\n\n    trace.p2x = function(p, xa, ya) {\n        return [xa.p2c(p[0]), ya.p2c(p[1])];\n    };\n\n    trace.dadi = function(i /* , u*/) {\n        // Right now only a piecewise linear a or b basis is permitted since smoother interpolation\n        // would cause monotonicity problems. As a retult, u is entirely disregarded in this\n        // computation, though we'll specify it as a parameter for the sake of completeness and\n        // future-proofing. It would be possible to use monotonic cubic interpolation, for example.\n        //\n        // See: https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n\n        // u = u || 0;\n\n        var i0 = Math.max(0, Math.min(a.length - 2, i));\n\n        // The step (demoninator) is implicitly 1 since that's the grid spacing.\n        return a[i0 + 1] - a[i0];\n    };\n\n    trace.dbdj = function(j /* , v*/) {\n        // See above caveats for dadi which also apply here\n        var j0 = Math.max(0, Math.min(b.length - 2, j));\n\n        // The step (demoninator) is implicitly 1 since that's the grid spacing.\n        return b[j0 + 1] - b[j0];\n    };\n\n    // Takes: grid cell coordinate (i, j) and fractional grid cell coordinates (u, v)\n    // Returns: (dx/da, dy/db)\n    //\n    // NB: separate grid cell + fractional grid cell coordinate format is due to the discontinuous\n    // derivative, as described better in create_i_derivative_evaluator.js\n    trace.dxyda = function(i0, j0, u, v) {\n        var dxydi = trace.dxydi(null, i0, j0, u, v);\n        var dadi = trace.dadi(i0, u);\n\n        return [dxydi[0] / dadi, dxydi[1] / dadi];\n    };\n\n    trace.dxydb = function(i0, j0, u, v) {\n        var dxydj = trace.dxydj(null, i0, j0, u, v);\n        var dbdj = trace.dbdj(j0, v);\n\n        return [dxydj[0] / dbdj, dxydj[1] / dbdj];\n    };\n\n    // Sometimes we don't care about precision and all we really want is decent rough\n    // directions (as is the case with labels). In that case, we can do a very rough finite\n    // difference and spare having to worry about precise grid coordinates:\n    trace.dxyda_rough = function(a, b, reldiff) {\n        var h = arange * (reldiff || 0.1);\n        var plus = trace.ab2xy(a + h, b, true);\n        var minus = trace.ab2xy(a - h, b, true);\n\n        return [\n            (plus[0] - minus[0]) * 0.5 / h,\n            (plus[1] - minus[1]) * 0.5 / h\n        ];\n    };\n\n    trace.dxydb_rough = function(a, b, reldiff) {\n        var h = brange * (reldiff || 0.1);\n        var plus = trace.ab2xy(a, b + h, true);\n        var minus = trace.ab2xy(a, b - h, true);\n\n        return [\n            (plus[0] - minus[0]) * 0.5 / h,\n            (plus[1] - minus[1]) * 0.5 / h\n        ];\n    };\n\n    trace.dpdx = function(xa) {\n        return xa._m;\n    };\n\n    trace.dpdy = function(ya) {\n        return ya._m;\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorAttributes = require('../color/attributes');\nmodule.exports = {\n  bgcolor: {\n    valType: 'color',\n    dflt: colorAttributes.background,\n    role: 'style',\n    editType: 'plot',\n    description: 'Sets the background color of the range slider.'\n  },\n  bordercolor: {\n    valType: 'color',\n    dflt: colorAttributes.defaultLine,\n    role: 'style',\n    editType: 'plot',\n    description: 'Sets the border color of the range slider.'\n  },\n  borderwidth: {\n    valType: 'integer',\n    dflt: 0,\n    min: 0,\n    role: 'style',\n    editType: 'plot',\n    description: 'Sets the border width of the range slider.'\n  },\n  autorange: {\n    valType: 'boolean',\n    dflt: true,\n    role: 'style',\n    editType: 'calc',\n    impliedEdits: {\n      'range[0]': undefined,\n      'range[1]': undefined\n    },\n    description: ['Determines whether or not the range slider range is', 'computed in relation to the input data.', 'If `range` is provided, then `autorange` is set to *false*.'].join(' ')\n  },\n  range: {\n    valType: 'info_array',\n    role: 'info',\n    items: [{\n      valType: 'any',\n      editType: 'calc',\n      impliedEdits: {\n        '^autorange': false\n      }\n    }, {\n      valType: 'any',\n      editType: 'calc',\n      impliedEdits: {\n        '^autorange': false\n      }\n    }],\n    editType: 'calc',\n    impliedEdits: {\n      'autorange': false\n    },\n    description: ['Sets the range of the range slider.', 'If not set, defaults to the full xaxis range.', 'If the axis `type` is *log*, then you must take the', 'log of your desired range.', 'If the axis `type` is *date*, it should be date strings,', 'like date data, though Date objects and unix milliseconds', 'will be accepted and converted to strings.', 'If the axis `type` is *category*, it should be numbers,', 'using the scale where each category is assigned a serial', 'number from zero in the order it appears.'].join(' ')\n  },\n  thickness: {\n    valType: 'number',\n    dflt: 0.15,\n    min: 0,\n    max: 1,\n    role: 'style',\n    editType: 'plot',\n    description: ['The height of the range slider as a fraction of the', 'total plot area height.'].join(' ')\n  },\n  visible: {\n    valType: 'boolean',\n    dflt: true,\n    role: 'info',\n    editType: 'calc',\n    description: ['Determines whether or not the range slider will be visible.', 'If visible, perpendicular axes will be set to `fixedrange`'].join(' ')\n  },\n  editType: 'calc'\n};","map":{"version":3,"names":["colorAttributes","require","module","exports","bgcolor","valType","dflt","background","role","editType","description","bordercolor","defaultLine","borderwidth","min","autorange","impliedEdits","undefined","join","range","items","thickness","max","visible"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/components/rangeslider/attributes.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorAttributes = require('../color/attributes');\n\nmodule.exports = {\n    bgcolor: {\n        valType: 'color',\n        dflt: colorAttributes.background,\n        role: 'style',\n        editType: 'plot',\n        description: 'Sets the background color of the range slider.'\n    },\n    bordercolor: {\n        valType: 'color',\n        dflt: colorAttributes.defaultLine,\n        role: 'style',\n        editType: 'plot',\n        description: 'Sets the border color of the range slider.'\n    },\n    borderwidth: {\n        valType: 'integer',\n        dflt: 0,\n        min: 0,\n        role: 'style',\n        editType: 'plot',\n        description: 'Sets the border width of the range slider.'\n    },\n    autorange: {\n        valType: 'boolean',\n        dflt: true,\n        role: 'style',\n        editType: 'calc',\n        impliedEdits: {'range[0]': undefined, 'range[1]': undefined},\n        description: [\n            'Determines whether or not the range slider range is',\n            'computed in relation to the input data.',\n            'If `range` is provided, then `autorange` is set to *false*.'\n        ].join(' ')\n    },\n    range: {\n        valType: 'info_array',\n        role: 'info',\n        items: [\n            {valType: 'any', editType: 'calc', impliedEdits: {'^autorange': false}},\n            {valType: 'any', editType: 'calc', impliedEdits: {'^autorange': false}}\n        ],\n        editType: 'calc',\n        impliedEdits: {'autorange': false},\n        description: [\n            'Sets the range of the range slider.',\n            'If not set, defaults to the full xaxis range.',\n            'If the axis `type` is *log*, then you must take the',\n            'log of your desired range.',\n            'If the axis `type` is *date*, it should be date strings,',\n            'like date data, though Date objects and unix milliseconds',\n            'will be accepted and converted to strings.',\n            'If the axis `type` is *category*, it should be numbers,',\n            'using the scale where each category is assigned a serial',\n            'number from zero in the order it appears.'\n        ].join(' ')\n    },\n    thickness: {\n        valType: 'number',\n        dflt: 0.15,\n        min: 0,\n        max: 1,\n        role: 'style',\n        editType: 'plot',\n        description: [\n            'The height of the range slider as a fraction of the',\n            'total plot area height.'\n        ].join(' ')\n    },\n    visible: {\n        valType: 'boolean',\n        dflt: true,\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Determines whether or not the range slider will be visible.',\n            'If visible, perpendicular axes will be set to `fixedrange`'\n        ].join(' ')\n    },\n    editType: 'calc'\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,eAAe,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAEpDC,MAAM,CAACC,OAAO,GAAG;EACbC,OAAO,EAAE;IACLC,OAAO,EAAE,OAAO;IAChBC,IAAI,EAAEN,eAAe,CAACO,UAAU;IAChCC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,MAAM;IAChBC,WAAW,EAAE;EACjB,CAAC;EACDC,WAAW,EAAE;IACTN,OAAO,EAAE,OAAO;IAChBC,IAAI,EAAEN,eAAe,CAACY,WAAW;IACjCJ,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,MAAM;IAChBC,WAAW,EAAE;EACjB,CAAC;EACDG,WAAW,EAAE;IACTR,OAAO,EAAE,SAAS;IAClBC,IAAI,EAAE,CAAC;IACPQ,GAAG,EAAE,CAAC;IACNN,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,MAAM;IAChBC,WAAW,EAAE;EACjB,CAAC;EACDK,SAAS,EAAE;IACPV,OAAO,EAAE,SAAS;IAClBC,IAAI,EAAE,IAAI;IACVE,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,MAAM;IAChBO,YAAY,EAAE;MAAC,UAAU,EAAEC,SAAS;MAAE,UAAU,EAAEA;IAAS,CAAC;IAC5DP,WAAW,EAAE,CACT,qDAAqD,EACrD,yCAAyC,EACzC,6DAA6D,CAChE,CAACQ,IAAI,CAAC,GAAG;EACd,CAAC;EACDC,KAAK,EAAE;IACHd,OAAO,EAAE,YAAY;IACrBG,IAAI,EAAE,MAAM;IACZY,KAAK,EAAE,CACH;MAACf,OAAO,EAAE,KAAK;MAAEI,QAAQ,EAAE,MAAM;MAAEO,YAAY,EAAE;QAAC,YAAY,EAAE;MAAK;IAAC,CAAC,EACvE;MAACX,OAAO,EAAE,KAAK;MAAEI,QAAQ,EAAE,MAAM;MAAEO,YAAY,EAAE;QAAC,YAAY,EAAE;MAAK;IAAC,CAAC,CAC1E;IACDP,QAAQ,EAAE,MAAM;IAChBO,YAAY,EAAE;MAAC,WAAW,EAAE;IAAK,CAAC;IAClCN,WAAW,EAAE,CACT,qCAAqC,EACrC,+CAA+C,EAC/C,qDAAqD,EACrD,4BAA4B,EAC5B,0DAA0D,EAC1D,2DAA2D,EAC3D,4CAA4C,EAC5C,yDAAyD,EACzD,0DAA0D,EAC1D,2CAA2C,CAC9C,CAACQ,IAAI,CAAC,GAAG;EACd,CAAC;EACDG,SAAS,EAAE;IACPhB,OAAO,EAAE,QAAQ;IACjBC,IAAI,EAAE,IAAI;IACVQ,GAAG,EAAE,CAAC;IACNQ,GAAG,EAAE,CAAC;IACNd,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,MAAM;IAChBC,WAAW,EAAE,CACT,qDAAqD,EACrD,yBAAyB,CAC5B,CAACQ,IAAI,CAAC,GAAG;EACd,CAAC;EACDK,OAAO,EAAE;IACLlB,OAAO,EAAE,SAAS;IAClBC,IAAI,EAAE,IAAI;IACVE,IAAI,EAAE,MAAM;IACZC,QAAQ,EAAE,MAAM;IAChBC,WAAW,EAAE,CACT,6DAA6D,EAC7D,4DAA4D,CAC/D,CAACQ,IAAI,CAAC,GAAG;EACd,CAAC;EACDT,QAAQ,EAAE;AACd,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
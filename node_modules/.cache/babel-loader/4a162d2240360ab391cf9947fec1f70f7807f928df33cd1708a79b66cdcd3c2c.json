{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar subTypes = require('../scatter/subtypes');\nvar handleRThetaDefaults = require('../scatterpolar/defaults').handleRThetaDefaults;\nvar handleMarkerDefaults = require('../scatter/marker_defaults');\nvar handleLineDefaults = require('../scatter/line_defaults');\nvar handleTextDefaults = require('../scatter/text_defaults');\nvar handleFillColorDefaults = require('../scatter/fillcolor_defaults');\nvar PTS_LINESONLY = require('../scatter/constants').PTS_LINESONLY;\nvar attributes = require('./attributes');\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n  var len = handleRThetaDefaults(traceIn, traceOut, layout, coerce);\n  if (!len) {\n    traceOut.visible = false;\n    return;\n  }\n  coerce('thetaunit');\n  coerce('mode', len < PTS_LINESONLY ? 'lines+markers' : 'lines');\n  coerce('text');\n  coerce('hovertext');\n  if (traceOut.hoveron !== 'fills') coerce('hovertemplate');\n  if (subTypes.hasLines(traceOut)) {\n    handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce);\n    coerce('connectgaps');\n  }\n  if (subTypes.hasMarkers(traceOut)) {\n    handleMarkerDefaults(traceIn, traceOut, defaultColor, layout, coerce);\n  }\n  if (subTypes.hasText(traceOut)) {\n    handleTextDefaults(traceIn, traceOut, layout, coerce);\n  }\n  coerce('fill');\n  if (traceOut.fill !== 'none') {\n    handleFillColorDefaults(traceIn, traceOut, defaultColor, coerce);\n  }\n  Lib.coerceSelectionMarkerOpacity(traceOut, coerce);\n};","map":{"version":3,"names":["Lib","require","subTypes","handleRThetaDefaults","handleMarkerDefaults","handleLineDefaults","handleTextDefaults","handleFillColorDefaults","PTS_LINESONLY","attributes","module","exports","supplyDefaults","traceIn","traceOut","defaultColor","layout","coerce","attr","dflt","len","visible","hoveron","hasLines","hasMarkers","hasText","fill","coerceSelectionMarkerOpacity"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/scatterpolargl/defaults.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar subTypes = require('../scatter/subtypes');\nvar handleRThetaDefaults = require('../scatterpolar/defaults').handleRThetaDefaults;\nvar handleMarkerDefaults = require('../scatter/marker_defaults');\nvar handleLineDefaults = require('../scatter/line_defaults');\nvar handleTextDefaults = require('../scatter/text_defaults');\nvar handleFillColorDefaults = require('../scatter/fillcolor_defaults');\nvar PTS_LINESONLY = require('../scatter/constants').PTS_LINESONLY;\n\nvar attributes = require('./attributes');\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n    }\n\n    var len = handleRThetaDefaults(traceIn, traceOut, layout, coerce);\n    if(!len) {\n        traceOut.visible = false;\n        return;\n    }\n\n    coerce('thetaunit');\n    coerce('mode', len < PTS_LINESONLY ? 'lines+markers' : 'lines');\n    coerce('text');\n    coerce('hovertext');\n    if(traceOut.hoveron !== 'fills') coerce('hovertemplate');\n\n    if(subTypes.hasLines(traceOut)) {\n        handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce);\n        coerce('connectgaps');\n    }\n\n    if(subTypes.hasMarkers(traceOut)) {\n        handleMarkerDefaults(traceIn, traceOut, defaultColor, layout, coerce);\n    }\n\n    if(subTypes.hasText(traceOut)) {\n        handleTextDefaults(traceIn, traceOut, layout, coerce);\n    }\n\n    coerce('fill');\n    if(traceOut.fill !== 'none') {\n        handleFillColorDefaults(traceIn, traceOut, defaultColor, coerce);\n    }\n\n    Lib.coerceSelectionMarkerOpacity(traceOut, coerce);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAW,CAAC;AAE9B,IAAIC,QAAQ,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC7C,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,0BAA0B,CAAC,CAACE,oBAAoB;AACnF,IAAIC,oBAAoB,GAAGH,OAAO,CAAC,4BAA4B,CAAC;AAChE,IAAII,kBAAkB,GAAGJ,OAAO,CAAC,0BAA0B,CAAC;AAC5D,IAAIK,kBAAkB,GAAGL,OAAO,CAAC,0BAA0B,CAAC;AAC5D,IAAIM,uBAAuB,GAAGN,OAAO,CAAC,+BAA+B,CAAC;AACtE,IAAIO,aAAa,GAAGP,OAAO,CAAC,sBAAsB,CAAC,CAACO,aAAa;AAEjE,IAAIC,UAAU,GAAGR,OAAO,CAAC,cAAc,CAAC;AAExCS,MAAM,CAACC,OAAO,GAAG,SAASC,cAAc,CAACC,OAAO,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,MAAM,EAAE;EAC9E,SAASC,MAAM,CAACC,IAAI,EAAEC,IAAI,EAAE;IACxB,OAAOnB,GAAG,CAACiB,MAAM,CAACJ,OAAO,EAAEC,QAAQ,EAAEL,UAAU,EAAES,IAAI,EAAEC,IAAI,CAAC;EAChE;EAEA,IAAIC,GAAG,GAAGjB,oBAAoB,CAACU,OAAO,EAAEC,QAAQ,EAAEE,MAAM,EAAEC,MAAM,CAAC;EACjE,IAAG,CAACG,GAAG,EAAE;IACLN,QAAQ,CAACO,OAAO,GAAG,KAAK;IACxB;EACJ;EAEAJ,MAAM,CAAC,WAAW,CAAC;EACnBA,MAAM,CAAC,MAAM,EAAEG,GAAG,GAAGZ,aAAa,GAAG,eAAe,GAAG,OAAO,CAAC;EAC/DS,MAAM,CAAC,MAAM,CAAC;EACdA,MAAM,CAAC,WAAW,CAAC;EACnB,IAAGH,QAAQ,CAACQ,OAAO,KAAK,OAAO,EAAEL,MAAM,CAAC,eAAe,CAAC;EAExD,IAAGf,QAAQ,CAACqB,QAAQ,CAACT,QAAQ,CAAC,EAAE;IAC5BT,kBAAkB,CAACQ,OAAO,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,MAAM,EAAEC,MAAM,CAAC;IACnEA,MAAM,CAAC,aAAa,CAAC;EACzB;EAEA,IAAGf,QAAQ,CAACsB,UAAU,CAACV,QAAQ,CAAC,EAAE;IAC9BV,oBAAoB,CAACS,OAAO,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,MAAM,EAAEC,MAAM,CAAC;EACzE;EAEA,IAAGf,QAAQ,CAACuB,OAAO,CAACX,QAAQ,CAAC,EAAE;IAC3BR,kBAAkB,CAACO,OAAO,EAAEC,QAAQ,EAAEE,MAAM,EAAEC,MAAM,CAAC;EACzD;EAEAA,MAAM,CAAC,MAAM,CAAC;EACd,IAAGH,QAAQ,CAACY,IAAI,KAAK,MAAM,EAAE;IACzBnB,uBAAuB,CAACM,OAAO,EAAEC,QAAQ,EAAEC,YAAY,EAAEE,MAAM,CAAC;EACpE;EAEAjB,GAAG,CAAC2B,4BAA4B,CAACb,QAAQ,EAAEG,MAAM,CAAC;AACtD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\nvar attributes = require('./attributes');\nvar helpers = require('./helpers');\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut) {\n  handleArrayContainerDefaults(layoutIn, layoutOut, {\n    name: 'shapes',\n    handleItemDefaults: handleShapeDefaults\n  });\n};\nfunction handleShapeDefaults(shapeIn, shapeOut, fullLayout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(shapeIn, shapeOut, attributes, attr, dflt);\n  }\n  var visible = coerce('visible');\n  if (!visible) return;\n  coerce('layer');\n  coerce('opacity');\n  coerce('fillcolor');\n  coerce('line.color');\n  coerce('line.width');\n  coerce('line.dash');\n  var dfltType = shapeIn.path ? 'path' : 'rect';\n  var shapeType = coerce('type', dfltType);\n  var xSizeMode = coerce('xsizemode');\n  var ySizeMode = coerce('ysizemode');\n\n  // positioning\n  var axLetters = ['x', 'y'];\n  for (var i = 0; i < 2; i++) {\n    var axLetter = axLetters[i];\n    var attrAnchor = axLetter + 'anchor';\n    var sizeMode = axLetter === 'x' ? xSizeMode : ySizeMode;\n    var gdMock = {\n      _fullLayout: fullLayout\n    };\n    var ax;\n    var pos2r;\n    var r2pos;\n\n    // xref, yref\n    var axRef = Axes.coerceRef(shapeIn, shapeOut, gdMock, axLetter, '', 'paper');\n    if (axRef !== 'paper') {\n      ax = Axes.getFromId(gdMock, axRef);\n      ax._shapeIndices.push(shapeOut._index);\n      r2pos = helpers.rangeToShapePosition(ax);\n      pos2r = helpers.shapePositionToRange(ax);\n    } else {\n      pos2r = r2pos = Lib.identity;\n    }\n\n    // Coerce x0, x1, y0, y1\n    if (shapeType !== 'path') {\n      var dflt0 = 0.25;\n      var dflt1 = 0.75;\n\n      // hack until V2.0 when log has regular range behavior - make it look like other\n      // ranges to send to coerce, then put it back after\n      // this is all to give reasonable default position behavior on log axes, which is\n      // a pretty unimportant edge case so we could just ignore this.\n      var attr0 = axLetter + '0';\n      var attr1 = axLetter + '1';\n      var in0 = shapeIn[attr0];\n      var in1 = shapeIn[attr1];\n      shapeIn[attr0] = pos2r(shapeIn[attr0], true);\n      shapeIn[attr1] = pos2r(shapeIn[attr1], true);\n      if (sizeMode === 'pixel') {\n        coerce(attr0, 0);\n        coerce(attr1, 10);\n      } else {\n        Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attr0, dflt0);\n        Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attr1, dflt1);\n      }\n\n      // hack part 2\n      shapeOut[attr0] = r2pos(shapeOut[attr0]);\n      shapeOut[attr1] = r2pos(shapeOut[attr1]);\n      shapeIn[attr0] = in0;\n      shapeIn[attr1] = in1;\n    }\n\n    // Coerce xanchor and yanchor\n    if (sizeMode === 'pixel') {\n      // Hack for log axis described above\n      var inAnchor = shapeIn[attrAnchor];\n      shapeIn[attrAnchor] = pos2r(shapeIn[attrAnchor], true);\n      Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attrAnchor, 0.25);\n\n      // Hack part 2\n      shapeOut[attrAnchor] = r2pos(shapeOut[attrAnchor]);\n      shapeIn[attrAnchor] = inAnchor;\n    }\n  }\n  if (shapeType === 'path') {\n    coerce('path');\n  } else {\n    Lib.noneOrAll(shapeIn, shapeOut, ['x0', 'x1', 'y0', 'y1']);\n  }\n}","map":{"version":3,"names":["Lib","require","Axes","handleArrayContainerDefaults","attributes","helpers","module","exports","supplyLayoutDefaults","layoutIn","layoutOut","name","handleItemDefaults","handleShapeDefaults","shapeIn","shapeOut","fullLayout","coerce","attr","dflt","visible","dfltType","path","shapeType","xSizeMode","ySizeMode","axLetters","i","axLetter","attrAnchor","sizeMode","gdMock","_fullLayout","ax","pos2r","r2pos","axRef","coerceRef","getFromId","_shapeIndices","push","_index","rangeToShapePosition","shapePositionToRange","identity","dflt0","dflt1","attr0","attr1","in0","in1","coercePosition","inAnchor","noneOrAll"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/components/shapes/defaults.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\n\nvar attributes = require('./attributes');\nvar helpers = require('./helpers');\n\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut) {\n    handleArrayContainerDefaults(layoutIn, layoutOut, {\n        name: 'shapes',\n        handleItemDefaults: handleShapeDefaults\n    });\n};\n\nfunction handleShapeDefaults(shapeIn, shapeOut, fullLayout) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(shapeIn, shapeOut, attributes, attr, dflt);\n    }\n\n    var visible = coerce('visible');\n\n    if(!visible) return;\n\n    coerce('layer');\n    coerce('opacity');\n    coerce('fillcolor');\n    coerce('line.color');\n    coerce('line.width');\n    coerce('line.dash');\n\n    var dfltType = shapeIn.path ? 'path' : 'rect';\n    var shapeType = coerce('type', dfltType);\n    var xSizeMode = coerce('xsizemode');\n    var ySizeMode = coerce('ysizemode');\n\n    // positioning\n    var axLetters = ['x', 'y'];\n    for(var i = 0; i < 2; i++) {\n        var axLetter = axLetters[i];\n        var attrAnchor = axLetter + 'anchor';\n        var sizeMode = axLetter === 'x' ? xSizeMode : ySizeMode;\n        var gdMock = {_fullLayout: fullLayout};\n        var ax;\n        var pos2r;\n        var r2pos;\n\n        // xref, yref\n        var axRef = Axes.coerceRef(shapeIn, shapeOut, gdMock, axLetter, '', 'paper');\n\n        if(axRef !== 'paper') {\n            ax = Axes.getFromId(gdMock, axRef);\n            ax._shapeIndices.push(shapeOut._index);\n            r2pos = helpers.rangeToShapePosition(ax);\n            pos2r = helpers.shapePositionToRange(ax);\n        }\n        else {\n            pos2r = r2pos = Lib.identity;\n        }\n\n        // Coerce x0, x1, y0, y1\n        if(shapeType !== 'path') {\n            var dflt0 = 0.25;\n            var dflt1 = 0.75;\n\n            // hack until V2.0 when log has regular range behavior - make it look like other\n            // ranges to send to coerce, then put it back after\n            // this is all to give reasonable default position behavior on log axes, which is\n            // a pretty unimportant edge case so we could just ignore this.\n            var attr0 = axLetter + '0';\n            var attr1 = axLetter + '1';\n            var in0 = shapeIn[attr0];\n            var in1 = shapeIn[attr1];\n            shapeIn[attr0] = pos2r(shapeIn[attr0], true);\n            shapeIn[attr1] = pos2r(shapeIn[attr1], true);\n\n            if(sizeMode === 'pixel') {\n                coerce(attr0, 0);\n                coerce(attr1, 10);\n            } else {\n                Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attr0, dflt0);\n                Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attr1, dflt1);\n            }\n\n            // hack part 2\n            shapeOut[attr0] = r2pos(shapeOut[attr0]);\n            shapeOut[attr1] = r2pos(shapeOut[attr1]);\n            shapeIn[attr0] = in0;\n            shapeIn[attr1] = in1;\n        }\n\n        // Coerce xanchor and yanchor\n        if(sizeMode === 'pixel') {\n            // Hack for log axis described above\n            var inAnchor = shapeIn[attrAnchor];\n            shapeIn[attrAnchor] = pos2r(shapeIn[attrAnchor], true);\n\n            Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attrAnchor, 0.25);\n\n            // Hack part 2\n            shapeOut[attrAnchor] = r2pos(shapeOut[attrAnchor]);\n            shapeIn[attrAnchor] = inAnchor;\n        }\n    }\n\n    if(shapeType === 'path') {\n        coerce('path');\n    }\n    else {\n        Lib.noneOrAll(shapeIn, shapeOut, ['x0', 'x1', 'y0', 'y1']);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
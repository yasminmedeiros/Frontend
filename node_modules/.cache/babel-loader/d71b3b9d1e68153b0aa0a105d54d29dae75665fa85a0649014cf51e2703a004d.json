{"ast":null,"code":"/*jshint unused:true*/\n/*\nInput:  matrix      ; a 4x4 matrix\nOutput: translation ; a 3 component vector\n        scale       ; a 3 component vector\n        skew        ; skew factors XY,XZ,YZ represented as a 3 component vector\n        perspective ; a 4 component vector\n        quaternion  ; a 4 component vector\nReturns false if the matrix cannot be decomposed, true if it can\n\n\nReferences:\nhttps://github.com/kamicane/matrix3d/blob/master/lib/Matrix3d.js\nhttps://github.com/ChromiumWebApps/chromium/blob/master/ui/gfx/transform_util.cc\nhttp://www.w3.org/TR/css3-transforms/#decomposing-a-3d-matrix\n*/\n\nvar normalize = require('./normalize');\nvar create = require('gl-mat4/create');\nvar clone = require('gl-mat4/clone');\nvar determinant = require('gl-mat4/determinant');\nvar invert = require('gl-mat4/invert');\nvar transpose = require('gl-mat4/transpose');\nvar vec3 = {\n  length: require('gl-vec3/length'),\n  normalize: require('gl-vec3/normalize'),\n  dot: require('gl-vec3/dot'),\n  cross: require('gl-vec3/cross')\n};\nvar tmp = create();\nvar perspectiveMatrix = create();\nvar tmpVec4 = [0, 0, 0, 0];\nvar row = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\nvar pdum3 = [0, 0, 0];\nmodule.exports = function decomposeMat4(matrix, translation, scale, skew, perspective, quaternion) {\n  if (!translation) translation = [0, 0, 0];\n  if (!scale) scale = [0, 0, 0];\n  if (!skew) skew = [0, 0, 0];\n  if (!perspective) perspective = [0, 0, 0, 1];\n  if (!quaternion) quaternion = [0, 0, 0, 1];\n\n  //normalize, if not possible then bail out early\n  if (!normalize(tmp, matrix)) return false;\n\n  // perspectiveMatrix is used to solve for perspective, but it also provides\n  // an easy way to test for singularity of the upper 3x3 component.\n  clone(perspectiveMatrix, tmp);\n  perspectiveMatrix[3] = 0;\n  perspectiveMatrix[7] = 0;\n  perspectiveMatrix[11] = 0;\n  perspectiveMatrix[15] = 1;\n\n  // If the perspectiveMatrix is not invertible, we are also unable to\n  // decompose, so we'll bail early. Constant taken from SkMatrix44::invert.\n  if (Math.abs(determinant(perspectiveMatrix) < 1e-8)) return false;\n  var a03 = tmp[3],\n    a13 = tmp[7],\n    a23 = tmp[11],\n    a30 = tmp[12],\n    a31 = tmp[13],\n    a32 = tmp[14],\n    a33 = tmp[15];\n\n  // First, isolate perspective.\n  if (a03 !== 0 || a13 !== 0 || a23 !== 0) {\n    tmpVec4[0] = a03;\n    tmpVec4[1] = a13;\n    tmpVec4[2] = a23;\n    tmpVec4[3] = a33;\n\n    // Solve the equation by inverting perspectiveMatrix and multiplying\n    // rightHandSide by the inverse.\n    // resuing the perspectiveMatrix here since it's no longer needed\n    var ret = invert(perspectiveMatrix, perspectiveMatrix);\n    if (!ret) return false;\n    transpose(perspectiveMatrix, perspectiveMatrix);\n\n    //multiply by transposed inverse perspective matrix, into perspective vec4\n    vec4multMat4(perspective, tmpVec4, perspectiveMatrix);\n  } else {\n    //no perspective\n    perspective[0] = perspective[1] = perspective[2] = 0;\n    perspective[3] = 1;\n  }\n\n  // Next take care of translation\n  translation[0] = a30;\n  translation[1] = a31;\n  translation[2] = a32;\n\n  // Now get scale and shear. 'row' is a 3 element array of 3 component vectors\n  mat3from4(row, tmp);\n\n  // Compute X scale factor and normalize first row.\n  scale[0] = vec3.length(row[0]);\n  vec3.normalize(row[0], row[0]);\n\n  // Compute XY shear factor and make 2nd row orthogonal to 1st.\n  skew[0] = vec3.dot(row[0], row[1]);\n  combine(row[1], row[1], row[0], 1.0, -skew[0]);\n\n  // Now, compute Y scale and normalize 2nd row.\n  scale[1] = vec3.length(row[1]);\n  vec3.normalize(row[1], row[1]);\n  skew[0] /= scale[1];\n\n  // Compute XZ and YZ shears, orthogonalize 3rd row\n  skew[1] = vec3.dot(row[0], row[2]);\n  combine(row[2], row[2], row[0], 1.0, -skew[1]);\n  skew[2] = vec3.dot(row[1], row[2]);\n  combine(row[2], row[2], row[1], 1.0, -skew[2]);\n\n  // Next, get Z scale and normalize 3rd row.\n  scale[2] = vec3.length(row[2]);\n  vec3.normalize(row[2], row[2]);\n  skew[1] /= scale[2];\n  skew[2] /= scale[2];\n\n  // At this point, the matrix (in rows) is orthonormal.\n  // Check for a coordinate system flip.  If the determinant\n  // is -1, then negate the matrix and the scaling factors.\n  vec3.cross(pdum3, row[1], row[2]);\n  if (vec3.dot(row[0], pdum3) < 0) {\n    for (var i = 0; i < 3; i++) {\n      scale[i] *= -1;\n      row[i][0] *= -1;\n      row[i][1] *= -1;\n      row[i][2] *= -1;\n    }\n  }\n\n  // Now, get the rotations out\n  quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));\n  quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));\n  quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));\n  quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));\n  if (row[2][1] > row[1][2]) quaternion[0] = -quaternion[0];\n  if (row[0][2] > row[2][0]) quaternion[1] = -quaternion[1];\n  if (row[1][0] > row[0][1]) quaternion[2] = -quaternion[2];\n  return true;\n};\n\n//will be replaced by gl-vec4 eventually\nfunction vec4multMat4(out, a, m) {\n  var x = a[0],\n    y = a[1],\n    z = a[2],\n    w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n//gets upper-left of a 4x4 matrix into a 3x3 of vectors\nfunction mat3from4(out, mat4x4) {\n  out[0][0] = mat4x4[0];\n  out[0][1] = mat4x4[1];\n  out[0][2] = mat4x4[2];\n  out[1][0] = mat4x4[4];\n  out[1][1] = mat4x4[5];\n  out[1][2] = mat4x4[6];\n  out[2][0] = mat4x4[8];\n  out[2][1] = mat4x4[9];\n  out[2][2] = mat4x4[10];\n}\nfunction combine(out, a, b, scale1, scale2) {\n  out[0] = a[0] * scale1 + b[0] * scale2;\n  out[1] = a[1] * scale1 + b[1] * scale2;\n  out[2] = a[2] * scale1 + b[2] * scale2;\n}","map":{"version":3,"names":["normalize","require","create","clone","determinant","invert","transpose","vec3","length","dot","cross","tmp","perspectiveMatrix","tmpVec4","row","pdum3","module","exports","decomposeMat4","matrix","translation","scale","skew","perspective","quaternion","Math","abs","a03","a13","a23","a30","a31","a32","a33","ret","vec4multMat4","mat3from4","combine","i","sqrt","max","out","a","m","x","y","z","w","mat4x4","b","scale1","scale2"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/mat4-decompose/index.js"],"sourcesContent":["/*jshint unused:true*/\n/*\nInput:  matrix      ; a 4x4 matrix\nOutput: translation ; a 3 component vector\n        scale       ; a 3 component vector\n        skew        ; skew factors XY,XZ,YZ represented as a 3 component vector\n        perspective ; a 4 component vector\n        quaternion  ; a 4 component vector\nReturns false if the matrix cannot be decomposed, true if it can\n\n\nReferences:\nhttps://github.com/kamicane/matrix3d/blob/master/lib/Matrix3d.js\nhttps://github.com/ChromiumWebApps/chromium/blob/master/ui/gfx/transform_util.cc\nhttp://www.w3.org/TR/css3-transforms/#decomposing-a-3d-matrix\n*/\n\nvar normalize = require('./normalize')\n\nvar create = require('gl-mat4/create')\nvar clone = require('gl-mat4/clone')\nvar determinant = require('gl-mat4/determinant')\nvar invert = require('gl-mat4/invert')\nvar transpose = require('gl-mat4/transpose')\nvar vec3 = {\n    length: require('gl-vec3/length'),\n    normalize: require('gl-vec3/normalize'),\n    dot: require('gl-vec3/dot'),\n    cross: require('gl-vec3/cross')\n}\n\nvar tmp = create()\nvar perspectiveMatrix = create()\nvar tmpVec4 = [0, 0, 0, 0]\nvar row = [ [0,0,0], [0,0,0], [0,0,0] ]\nvar pdum3 = [0,0,0]\n\nmodule.exports = function decomposeMat4(matrix, translation, scale, skew, perspective, quaternion) {\n    if (!translation) translation = [0,0,0]\n    if (!scale) scale = [0,0,0]\n    if (!skew) skew = [0,0,0]\n    if (!perspective) perspective = [0,0,0,1]\n    if (!quaternion) quaternion = [0,0,0,1]\n\n    //normalize, if not possible then bail out early\n    if (!normalize(tmp, matrix))\n        return false\n\n    // perspectiveMatrix is used to solve for perspective, but it also provides\n    // an easy way to test for singularity of the upper 3x3 component.\n    clone(perspectiveMatrix, tmp)\n\n    perspectiveMatrix[3] = 0\n    perspectiveMatrix[7] = 0\n    perspectiveMatrix[11] = 0\n    perspectiveMatrix[15] = 1\n\n    // If the perspectiveMatrix is not invertible, we are also unable to\n    // decompose, so we'll bail early. Constant taken from SkMatrix44::invert.\n    if (Math.abs(determinant(perspectiveMatrix) < 1e-8))\n        return false\n\n    var a03 = tmp[3], a13 = tmp[7], a23 = tmp[11],\n            a30 = tmp[12], a31 = tmp[13], a32 = tmp[14], a33 = tmp[15]\n\n    // First, isolate perspective.\n    if (a03 !== 0 || a13 !== 0 || a23 !== 0) {\n        tmpVec4[0] = a03\n        tmpVec4[1] = a13\n        tmpVec4[2] = a23\n        tmpVec4[3] = a33\n\n        // Solve the equation by inverting perspectiveMatrix and multiplying\n        // rightHandSide by the inverse.\n        // resuing the perspectiveMatrix here since it's no longer needed\n        var ret = invert(perspectiveMatrix, perspectiveMatrix)\n        if (!ret) return false\n        transpose(perspectiveMatrix, perspectiveMatrix)\n\n        //multiply by transposed inverse perspective matrix, into perspective vec4\n        vec4multMat4(perspective, tmpVec4, perspectiveMatrix)\n    } else { \n        //no perspective\n        perspective[0] = perspective[1] = perspective[2] = 0\n        perspective[3] = 1\n    }\n\n    // Next take care of translation\n    translation[0] = a30\n    translation[1] = a31\n    translation[2] = a32\n\n    // Now get scale and shear. 'row' is a 3 element array of 3 component vectors\n    mat3from4(row, tmp)\n\n    // Compute X scale factor and normalize first row.\n    scale[0] = vec3.length(row[0])\n    vec3.normalize(row[0], row[0])\n\n    // Compute XY shear factor and make 2nd row orthogonal to 1st.\n    skew[0] = vec3.dot(row[0], row[1])\n    combine(row[1], row[1], row[0], 1.0, -skew[0])\n\n    // Now, compute Y scale and normalize 2nd row.\n    scale[1] = vec3.length(row[1])\n    vec3.normalize(row[1], row[1])\n    skew[0] /= scale[1]\n\n    // Compute XZ and YZ shears, orthogonalize 3rd row\n    skew[1] = vec3.dot(row[0], row[2])\n    combine(row[2], row[2], row[0], 1.0, -skew[1])\n    skew[2] = vec3.dot(row[1], row[2])\n    combine(row[2], row[2], row[1], 1.0, -skew[2])\n\n    // Next, get Z scale and normalize 3rd row.\n    scale[2] = vec3.length(row[2])\n    vec3.normalize(row[2], row[2])\n    skew[1] /= scale[2]\n    skew[2] /= scale[2]\n\n\n    // At this point, the matrix (in rows) is orthonormal.\n    // Check for a coordinate system flip.  If the determinant\n    // is -1, then negate the matrix and the scaling factors.\n    vec3.cross(pdum3, row[1], row[2])\n    if (vec3.dot(row[0], pdum3) < 0) {\n        for (var i = 0; i < 3; i++) {\n            scale[i] *= -1;\n            row[i][0] *= -1\n            row[i][1] *= -1\n            row[i][2] *= -1\n        }\n    }\n\n    // Now, get the rotations out\n    quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0))\n    quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0))\n    quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0))\n    quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0))\n\n    if (row[2][1] > row[1][2])\n        quaternion[0] = -quaternion[0]\n    if (row[0][2] > row[2][0])\n        quaternion[1] = -quaternion[1]\n    if (row[1][0] > row[0][1])\n        quaternion[2] = -quaternion[2]\n    return true\n}\n\n//will be replaced by gl-vec4 eventually\nfunction vec4multMat4(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n}\n\n//gets upper-left of a 4x4 matrix into a 3x3 of vectors\nfunction mat3from4(out, mat4x4) {\n    out[0][0] = mat4x4[0]\n    out[0][1] = mat4x4[1]\n    out[0][2] = mat4x4[2]\n    \n    out[1][0] = mat4x4[4]\n    out[1][1] = mat4x4[5]\n    out[1][2] = mat4x4[6]\n\n    out[2][0] = mat4x4[8]\n    out[2][1] = mat4x4[9]\n    out[2][2] = mat4x4[10]\n}\n\nfunction combine(out, a, b, scale1, scale2) {\n    out[0] = a[0] * scale1 + b[0] * scale2\n    out[1] = a[1] * scale1 + b[1] * scale2\n    out[2] = a[2] * scale1 + b[2] * scale2\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
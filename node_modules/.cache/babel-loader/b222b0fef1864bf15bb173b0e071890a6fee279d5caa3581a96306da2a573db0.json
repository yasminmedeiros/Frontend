{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar hasColorscale = require('../../components/colorscale/helpers').hasColorscale;\nvar colorscaleCalc = require('../../components/colorscale/calc');\nvar arraysToCalcdata = require('./arrays_to_calcdata');\nvar calcSelection = require('../scatter/calc_selection');\nmodule.exports = function calc(gd, trace) {\n  var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n  var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n  var size, pos;\n  if (trace.orientation === 'h') {\n    size = xa.makeCalcdata(trace, 'x');\n    pos = ya.makeCalcdata(trace, 'y');\n  } else {\n    size = ya.makeCalcdata(trace, 'y');\n    pos = xa.makeCalcdata(trace, 'x');\n  }\n\n  // create the \"calculated data\" to plot\n  var serieslen = Math.min(pos.length, size.length);\n  var cd = new Array(serieslen);\n\n  // set position and size\n  for (var i = 0; i < serieslen; i++) {\n    cd[i] = {\n      p: pos[i],\n      s: size[i]\n    };\n    if (trace.ids) {\n      cd[i].id = String(trace.ids[i]);\n    }\n  }\n\n  // auto-z and autocolorscale if applicable\n  if (hasColorscale(trace, 'marker')) {\n    colorscaleCalc(gd, trace, {\n      vals: trace.marker.color,\n      containerStr: 'marker',\n      cLetter: 'c'\n    });\n  }\n  if (hasColorscale(trace, 'marker.line')) {\n    colorscaleCalc(gd, trace, {\n      vals: trace.marker.line.color,\n      containerStr: 'marker.line',\n      cLetter: 'c'\n    });\n  }\n  arraysToCalcdata(cd, trace);\n  calcSelection(cd, trace);\n  return cd;\n};","map":{"version":3,"names":["Axes","require","hasColorscale","colorscaleCalc","arraysToCalcdata","calcSelection","module","exports","calc","gd","trace","xa","getFromId","xaxis","ya","yaxis","size","pos","orientation","makeCalcdata","serieslen","Math","min","length","cd","Array","i","p","s","ids","id","String","vals","marker","color","containerStr","cLetter","line"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/bar/calc.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar hasColorscale = require('../../components/colorscale/helpers').hasColorscale;\nvar colorscaleCalc = require('../../components/colorscale/calc');\nvar arraysToCalcdata = require('./arrays_to_calcdata');\nvar calcSelection = require('../scatter/calc_selection');\n\nmodule.exports = function calc(gd, trace) {\n    var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n    var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n    var size, pos;\n\n    if(trace.orientation === 'h') {\n        size = xa.makeCalcdata(trace, 'x');\n        pos = ya.makeCalcdata(trace, 'y');\n    } else {\n        size = ya.makeCalcdata(trace, 'y');\n        pos = xa.makeCalcdata(trace, 'x');\n    }\n\n    // create the \"calculated data\" to plot\n    var serieslen = Math.min(pos.length, size.length);\n    var cd = new Array(serieslen);\n\n    // set position and size\n    for(var i = 0; i < serieslen; i++) {\n        cd[i] = { p: pos[i], s: size[i] };\n\n        if(trace.ids) {\n            cd[i].id = String(trace.ids[i]);\n        }\n    }\n\n    // auto-z and autocolorscale if applicable\n    if(hasColorscale(trace, 'marker')) {\n        colorscaleCalc(gd, trace, {\n            vals: trace.marker.color,\n            containerStr: 'marker',\n            cLetter: 'c'\n        });\n    }\n    if(hasColorscale(trace, 'marker.line')) {\n        colorscaleCalc(gd, trace, {\n            vals: trace.marker.line.color,\n            containerStr: 'marker.line',\n            cLetter: 'c'\n        });\n    }\n\n    arraysToCalcdata(cd, trace);\n    calcSelection(cd, trace);\n\n    return cd;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AAChD,IAAIC,aAAa,GAAGD,OAAO,CAAC,qCAAqC,CAAC,CAACC,aAAa;AAChF,IAAIC,cAAc,GAAGF,OAAO,CAAC,kCAAkC,CAAC;AAChE,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,sBAAsB,CAAC;AACtD,IAAII,aAAa,GAAGJ,OAAO,CAAC,2BAA2B,CAAC;AAExDK,MAAM,CAACC,OAAO,GAAG,SAASC,IAAI,CAACC,EAAE,EAAEC,KAAK,EAAE;EACtC,IAAIC,EAAE,GAAGX,IAAI,CAACY,SAAS,CAACH,EAAE,EAAEC,KAAK,CAACG,KAAK,IAAI,GAAG,CAAC;EAC/C,IAAIC,EAAE,GAAGd,IAAI,CAACY,SAAS,CAACH,EAAE,EAAEC,KAAK,CAACK,KAAK,IAAI,GAAG,CAAC;EAC/C,IAAIC,IAAI,EAAEC,GAAG;EAEb,IAAGP,KAAK,CAACQ,WAAW,KAAK,GAAG,EAAE;IAC1BF,IAAI,GAAGL,EAAE,CAACQ,YAAY,CAACT,KAAK,EAAE,GAAG,CAAC;IAClCO,GAAG,GAAGH,EAAE,CAACK,YAAY,CAACT,KAAK,EAAE,GAAG,CAAC;EACrC,CAAC,MAAM;IACHM,IAAI,GAAGF,EAAE,CAACK,YAAY,CAACT,KAAK,EAAE,GAAG,CAAC;IAClCO,GAAG,GAAGN,EAAE,CAACQ,YAAY,CAACT,KAAK,EAAE,GAAG,CAAC;EACrC;;EAEA;EACA,IAAIU,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACL,GAAG,CAACM,MAAM,EAAEP,IAAI,CAACO,MAAM,CAAC;EACjD,IAAIC,EAAE,GAAG,IAAIC,KAAK,CAACL,SAAS,CAAC;;EAE7B;EACA,KAAI,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,SAAS,EAAEM,CAAC,EAAE,EAAE;IAC/BF,EAAE,CAACE,CAAC,CAAC,GAAG;MAAEC,CAAC,EAAEV,GAAG,CAACS,CAAC,CAAC;MAAEE,CAAC,EAAEZ,IAAI,CAACU,CAAC;IAAE,CAAC;IAEjC,IAAGhB,KAAK,CAACmB,GAAG,EAAE;MACVL,EAAE,CAACE,CAAC,CAAC,CAACI,EAAE,GAAGC,MAAM,CAACrB,KAAK,CAACmB,GAAG,CAACH,CAAC,CAAC,CAAC;IACnC;EACJ;;EAEA;EACA,IAAGxB,aAAa,CAACQ,KAAK,EAAE,QAAQ,CAAC,EAAE;IAC/BP,cAAc,CAACM,EAAE,EAAEC,KAAK,EAAE;MACtBsB,IAAI,EAAEtB,KAAK,CAACuB,MAAM,CAACC,KAAK;MACxBC,YAAY,EAAE,QAAQ;MACtBC,OAAO,EAAE;IACb,CAAC,CAAC;EACN;EACA,IAAGlC,aAAa,CAACQ,KAAK,EAAE,aAAa,CAAC,EAAE;IACpCP,cAAc,CAACM,EAAE,EAAEC,KAAK,EAAE;MACtBsB,IAAI,EAAEtB,KAAK,CAACuB,MAAM,CAACI,IAAI,CAACH,KAAK;MAC7BC,YAAY,EAAE,aAAa;MAC3BC,OAAO,EAAE;IACb,CAAC,CAAC;EACN;EAEAhC,gBAAgB,CAACoB,EAAE,EAAEd,KAAK,CAAC;EAC3BL,aAAa,CAACmB,EAAE,EAAEd,KAAK,CAAC;EAExB,OAAOc,EAAE;AACb,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
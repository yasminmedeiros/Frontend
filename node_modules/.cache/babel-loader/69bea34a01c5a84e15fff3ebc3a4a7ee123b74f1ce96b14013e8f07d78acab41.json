{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Registry = require('../../registry');\nvar arrayEditor = require('../../plot_api/plot_template').arrayEditor;\nmodule.exports = {\n  hasClickToShow: hasClickToShow,\n  onClick: onClick\n};\n\n/*\n * hasClickToShow: does the given hoverData have ANY annotations which will\n * turn ON if we click here? (used by hover events to set cursor)\n *\n * gd: graphDiv\n * hoverData: a hoverData array, as included with the *plotly_hover* or\n *     *plotly_click* events in the `points` attribute\n *\n * returns: boolean\n */\nfunction hasClickToShow(gd, hoverData) {\n  var sets = getToggleSets(gd, hoverData);\n  return sets.on.length > 0 || sets.explicitOff.length > 0;\n}\n\n/*\n * onClick: perform the toggling (via Plotly.update) implied by clicking\n * at this hoverData\n *\n * gd: graphDiv\n * hoverData: a hoverData array, as included with the *plotly_hover* or\n *     *plotly_click* events in the `points` attribute\n *\n * returns: Promise that the update is complete\n */\nfunction onClick(gd, hoverData) {\n  var toggleSets = getToggleSets(gd, hoverData);\n  var onSet = toggleSets.on;\n  var offSet = toggleSets.off.concat(toggleSets.explicitOff);\n  var update = {};\n  var annotationsOut = gd._fullLayout.annotations;\n  var i, editHelpers;\n  if (!(onSet.length || offSet.length)) return;\n  for (i = 0; i < onSet.length; i++) {\n    editHelpers = arrayEditor(gd.layout, 'annotations', annotationsOut[onSet[i]]);\n    editHelpers.modifyItem('visible', true);\n    Lib.extendFlat(update, editHelpers.getUpdateObj());\n  }\n  for (i = 0; i < offSet.length; i++) {\n    editHelpers = arrayEditor(gd.layout, 'annotations', annotationsOut[offSet[i]]);\n    editHelpers.modifyItem('visible', false);\n    Lib.extendFlat(update, editHelpers.getUpdateObj());\n  }\n  return Registry.call('update', gd, {}, update);\n}\n\n/*\n * getToggleSets: find the annotations which will turn on or off at this\n * hoverData\n *\n * gd: graphDiv\n * hoverData: a hoverData array, as included with the *plotly_hover* or\n *     *plotly_click* events in the `points` attribute\n *\n * returns: {\n *   on: Array (indices of annotations to turn on),\n *   off: Array (indices to turn off because you're not hovering on them),\n *   explicitOff: Array (indices to turn off because you *are* hovering on them)\n * }\n */\nfunction getToggleSets(gd, hoverData) {\n  var annotations = gd._fullLayout.annotations;\n  var onSet = [];\n  var offSet = [];\n  var explicitOffSet = [];\n  var hoverLen = (hoverData || []).length;\n  var i, j, anni, showMode, pointj, xa, ya, toggleType;\n  for (i = 0; i < annotations.length; i++) {\n    anni = annotations[i];\n    showMode = anni.clicktoshow;\n    if (showMode) {\n      for (j = 0; j < hoverLen; j++) {\n        pointj = hoverData[j];\n        xa = pointj.xaxis;\n        ya = pointj.yaxis;\n        if (xa._id === anni.xref && ya._id === anni.yref && xa.d2r(pointj.x) === clickData2r(anni._xclick, xa) && ya.d2r(pointj.y) === clickData2r(anni._yclick, ya)) {\n          // match! toggle this annotation\n          // regardless of its clicktoshow mode\n          // but if it's onout mode, off is implicit\n          if (anni.visible) {\n            if (showMode === 'onout') toggleType = offSet;else toggleType = explicitOffSet;\n          } else {\n            toggleType = onSet;\n          }\n          toggleType.push(i);\n          break;\n        }\n      }\n      if (j === hoverLen) {\n        // no match - only turn this annotation OFF, and only if\n        // showmode is 'onout'\n        if (anni.visible && showMode === 'onout') offSet.push(i);\n      }\n    }\n  }\n  return {\n    on: onSet,\n    off: offSet,\n    explicitOff: explicitOffSet\n  };\n}\n\n// to handle log axes until v2\nfunction clickData2r(d, ax) {\n  return ax.type === 'log' ? ax.l2r(d) : ax.d2r(d);\n}","map":{"version":3,"names":["Lib","require","Registry","arrayEditor","module","exports","hasClickToShow","onClick","gd","hoverData","sets","getToggleSets","on","length","explicitOff","toggleSets","onSet","offSet","off","concat","update","annotationsOut","_fullLayout","annotations","i","editHelpers","layout","modifyItem","extendFlat","getUpdateObj","call","explicitOffSet","hoverLen","j","anni","showMode","pointj","xa","ya","toggleType","clicktoshow","xaxis","yaxis","_id","xref","yref","d2r","x","clickData2r","_xclick","y","_yclick","visible","push","d","ax","type","l2r"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/components/annotations/click.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Registry = require('../../registry');\nvar arrayEditor = require('../../plot_api/plot_template').arrayEditor;\n\nmodule.exports = {\n    hasClickToShow: hasClickToShow,\n    onClick: onClick\n};\n\n/*\n * hasClickToShow: does the given hoverData have ANY annotations which will\n * turn ON if we click here? (used by hover events to set cursor)\n *\n * gd: graphDiv\n * hoverData: a hoverData array, as included with the *plotly_hover* or\n *     *plotly_click* events in the `points` attribute\n *\n * returns: boolean\n */\nfunction hasClickToShow(gd, hoverData) {\n    var sets = getToggleSets(gd, hoverData);\n    return sets.on.length > 0 || sets.explicitOff.length > 0;\n}\n\n/*\n * onClick: perform the toggling (via Plotly.update) implied by clicking\n * at this hoverData\n *\n * gd: graphDiv\n * hoverData: a hoverData array, as included with the *plotly_hover* or\n *     *plotly_click* events in the `points` attribute\n *\n * returns: Promise that the update is complete\n */\nfunction onClick(gd, hoverData) {\n    var toggleSets = getToggleSets(gd, hoverData);\n    var onSet = toggleSets.on;\n    var offSet = toggleSets.off.concat(toggleSets.explicitOff);\n    var update = {};\n    var annotationsOut = gd._fullLayout.annotations;\n    var i, editHelpers;\n\n    if(!(onSet.length || offSet.length)) return;\n\n    for(i = 0; i < onSet.length; i++) {\n        editHelpers = arrayEditor(gd.layout, 'annotations', annotationsOut[onSet[i]]);\n        editHelpers.modifyItem('visible', true);\n        Lib.extendFlat(update, editHelpers.getUpdateObj());\n    }\n\n    for(i = 0; i < offSet.length; i++) {\n        editHelpers = arrayEditor(gd.layout, 'annotations', annotationsOut[offSet[i]]);\n        editHelpers.modifyItem('visible', false);\n        Lib.extendFlat(update, editHelpers.getUpdateObj());\n    }\n\n    return Registry.call('update', gd, {}, update);\n}\n\n/*\n * getToggleSets: find the annotations which will turn on or off at this\n * hoverData\n *\n * gd: graphDiv\n * hoverData: a hoverData array, as included with the *plotly_hover* or\n *     *plotly_click* events in the `points` attribute\n *\n * returns: {\n *   on: Array (indices of annotations to turn on),\n *   off: Array (indices to turn off because you're not hovering on them),\n *   explicitOff: Array (indices to turn off because you *are* hovering on them)\n * }\n */\nfunction getToggleSets(gd, hoverData) {\n    var annotations = gd._fullLayout.annotations;\n    var onSet = [];\n    var offSet = [];\n    var explicitOffSet = [];\n    var hoverLen = (hoverData || []).length;\n\n    var i, j, anni, showMode, pointj, xa, ya, toggleType;\n\n    for(i = 0; i < annotations.length; i++) {\n        anni = annotations[i];\n        showMode = anni.clicktoshow;\n\n        if(showMode) {\n            for(j = 0; j < hoverLen; j++) {\n                pointj = hoverData[j];\n                xa = pointj.xaxis;\n                ya = pointj.yaxis;\n\n                if(xa._id === anni.xref &&\n                    ya._id === anni.yref &&\n                    xa.d2r(pointj.x) === clickData2r(anni._xclick, xa) &&\n                    ya.d2r(pointj.y) === clickData2r(anni._yclick, ya)\n                ) {\n                    // match! toggle this annotation\n                    // regardless of its clicktoshow mode\n                    // but if it's onout mode, off is implicit\n                    if(anni.visible) {\n                        if(showMode === 'onout') toggleType = offSet;\n                        else toggleType = explicitOffSet;\n                    }\n                    else {\n                        toggleType = onSet;\n                    }\n                    toggleType.push(i);\n                    break;\n                }\n            }\n\n            if(j === hoverLen) {\n                // no match - only turn this annotation OFF, and only if\n                // showmode is 'onout'\n                if(anni.visible && showMode === 'onout') offSet.push(i);\n            }\n        }\n    }\n\n    return {on: onSet, off: offSet, explicitOff: explicitOffSet};\n}\n\n// to handle log axes until v2\nfunction clickData2r(d, ax) {\n    return ax.type === 'log' ? ax.l2r(d) : ax.d2r(d);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
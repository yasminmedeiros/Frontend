{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar Registry = require('../registry');\nvar Plots = require('../plots/plots');\nvar Lib = require('../lib');\nvar clearGlCanvases = require('../lib/clear_gl_canvases');\nvar Color = require('../components/color');\nvar Drawing = require('../components/drawing');\nvar Titles = require('../components/titles');\nvar ModeBar = require('../components/modebar');\nvar Axes = require('../plots/cartesian/axes');\nvar alignmentConstants = require('../constants/alignment');\nvar axisConstraints = require('../plots/cartesian/constraints');\nvar enforceAxisConstraints = axisConstraints.enforce;\nvar cleanAxisConstraints = axisConstraints.clean;\nvar doAutoRange = require('../plots/cartesian/autorange').doAutoRange;\nvar SVG_TEXT_ANCHOR_START = 'start';\nvar SVG_TEXT_ANCHOR_MIDDLE = 'middle';\nvar SVG_TEXT_ANCHOR_END = 'end';\nexports.layoutStyles = function (gd) {\n  return Lib.syncOrAsync([Plots.doAutoMargin, lsInner], gd);\n};\nfunction overlappingDomain(xDomain, yDomain, domains) {\n  for (var i = 0; i < domains.length; i++) {\n    var existingX = domains[i][0];\n    var existingY = domains[i][1];\n    if (existingX[0] >= xDomain[1] || existingX[1] <= xDomain[0]) {\n      continue;\n    }\n    if (existingY[0] < yDomain[1] && existingY[1] > yDomain[0]) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction lsInner(gd) {\n  var fullLayout = gd._fullLayout;\n  var gs = fullLayout._size;\n  var pad = gs.p;\n  var axList = Axes.list(gd, '', true);\n  var i, subplot, plotinfo, ax, xa, ya;\n  fullLayout._paperdiv.style({\n    width: gd._context.responsive && fullLayout.autosize && !gd._context._hasZeroWidth && !gd.layout.width ? '100%' : fullLayout.width + 'px',\n    height: gd._context.responsive && fullLayout.autosize && !gd._context._hasZeroHeight && !gd.layout.height ? '100%' : fullLayout.height + 'px'\n  }).selectAll('.main-svg').call(Drawing.setSize, fullLayout.width, fullLayout.height);\n  gd._context.setBackground(gd, fullLayout.paper_bgcolor);\n  exports.drawMainTitle(gd);\n  ModeBar.manage(gd);\n\n  // _has('cartesian') means SVG specifically, not GL2D - but GL2D\n  // can still get here because it makes some of the SVG structure\n  // for shared features like selections.\n  if (!fullLayout._has('cartesian')) {\n    return gd._promises.length && Promise.all(gd._promises);\n  }\n  function getLinePosition(ax, counterAx, side) {\n    var lwHalf = ax._lw / 2;\n    if (ax._id.charAt(0) === 'x') {\n      if (!counterAx) return gs.t + gs.h * (1 - (ax.position || 0)) + lwHalf % 1;else if (side === 'top') return counterAx._offset - pad - lwHalf;\n      return counterAx._offset + counterAx._length + pad + lwHalf;\n    }\n    if (!counterAx) return gs.l + gs.w * (ax.position || 0) + lwHalf % 1;else if (side === 'right') return counterAx._offset + counterAx._length + pad + lwHalf;\n    return counterAx._offset - pad - lwHalf;\n  }\n\n  // some preparation of axis position info\n  for (i = 0; i < axList.length; i++) {\n    ax = axList[i];\n    var counterAx = ax._anchorAxis;\n\n    // clear axis line positions, to be set in the subplot loop below\n    ax._linepositions = {};\n\n    // stash crispRounded linewidth so we don't need to pass gd all over the place\n    ax._lw = Drawing.crispRound(gd, ax.linewidth, 1);\n\n    // figure out the main axis line and main mirror line position.\n    // it's easier to follow the logic if we handle these separately from\n    // ax._linepositions, which are only used by mirror=allticks\n    // for non-main-subplot ticks, and mirror=all(ticks)? for zero line\n    // hiding logic\n    ax._mainLinePosition = getLinePosition(ax, counterAx, ax.side);\n    ax._mainMirrorPosition = ax.mirror && counterAx ? getLinePosition(ax, counterAx, alignmentConstants.OPPOSITE_SIDE[ax.side]) : null;\n  }\n\n  // figure out which backgrounds we need to draw,\n  // and in which layers to put them\n  var lowerBackgroundIDs = [];\n  var backgroundIds = [];\n  var lowerDomains = [];\n  // no need to draw background when paper and plot color are the same color,\n  // activate mode just for large splom (which benefit the most from this\n  // optimization), but this could apply to all cartesian subplots.\n  var noNeedForBg = Color.opacity(fullLayout.paper_bgcolor) === 1 && Color.opacity(fullLayout.plot_bgcolor) === 1 && fullLayout.paper_bgcolor === fullLayout.plot_bgcolor;\n  for (subplot in fullLayout._plots) {\n    plotinfo = fullLayout._plots[subplot];\n    if (plotinfo.mainplot) {\n      // mainplot is a reference to the main plot this one is overlaid on\n      // so if it exists, this is an overlaid plot and we don't need to\n      // give it its own background\n      if (plotinfo.bg) {\n        plotinfo.bg.remove();\n      }\n      plotinfo.bg = undefined;\n    } else {\n      var xDomain = plotinfo.xaxis.domain;\n      var yDomain = plotinfo.yaxis.domain;\n      var plotgroup = plotinfo.plotgroup;\n      if (overlappingDomain(xDomain, yDomain, lowerDomains)) {\n        var pgNode = plotgroup.node();\n        var plotgroupBg = plotinfo.bg = Lib.ensureSingle(plotgroup, 'rect', 'bg');\n        pgNode.insertBefore(plotgroupBg.node(), pgNode.childNodes[0]);\n        backgroundIds.push(subplot);\n      } else {\n        plotgroup.select('rect.bg').remove();\n        lowerDomains.push([xDomain, yDomain]);\n        if (!noNeedForBg) {\n          lowerBackgroundIDs.push(subplot);\n          backgroundIds.push(subplot);\n        }\n      }\n    }\n  }\n\n  // now create all the lower-layer backgrounds at once now that\n  // we have the list of subplots that need them\n  var lowerBackgrounds = fullLayout._bgLayer.selectAll('.bg').data(lowerBackgroundIDs);\n  lowerBackgrounds.enter().append('rect').classed('bg', true);\n  lowerBackgrounds.exit().remove();\n  lowerBackgrounds.each(function (subplot) {\n    fullLayout._plots[subplot].bg = d3.select(this);\n  });\n\n  // style all backgrounds\n  for (i = 0; i < backgroundIds.length; i++) {\n    plotinfo = fullLayout._plots[backgroundIds[i]];\n    xa = plotinfo.xaxis;\n    ya = plotinfo.yaxis;\n    if (plotinfo.bg) {\n      plotinfo.bg.call(Drawing.setRect, xa._offset - pad, ya._offset - pad, xa._length + 2 * pad, ya._length + 2 * pad).call(Color.fill, fullLayout.plot_bgcolor).style('stroke-width', 0);\n    }\n  }\n  if (!fullLayout._hasOnlyLargeSploms) {\n    for (subplot in fullLayout._plots) {\n      plotinfo = fullLayout._plots[subplot];\n      xa = plotinfo.xaxis;\n      ya = plotinfo.yaxis;\n\n      // Clip so that data only shows up on the plot area.\n      var clipId = plotinfo.clipId = 'clip' + fullLayout._uid + subplot + 'plot';\n      var plotClip = Lib.ensureSingleById(fullLayout._clips, 'clipPath', clipId, function (s) {\n        s.classed('plotclip', true).append('rect');\n      });\n      plotinfo.clipRect = plotClip.select('rect').attr({\n        width: xa._length,\n        height: ya._length\n      });\n      Drawing.setTranslate(plotinfo.plot, xa._offset, ya._offset);\n      var plotClipId;\n      var layerClipId;\n      if (plotinfo._hasClipOnAxisFalse) {\n        plotClipId = null;\n        layerClipId = clipId;\n      } else {\n        plotClipId = clipId;\n        layerClipId = null;\n      }\n      Drawing.setClipUrl(plotinfo.plot, plotClipId, gd);\n\n      // stash layer clipId value (null or same as clipId)\n      // to DRY up Drawing.setClipUrl calls on trace-module and trace layers\n      // downstream\n      plotinfo.layerClipId = layerClipId;\n    }\n  }\n  var xLinesXLeft, xLinesXRight, xLinesYBottom, xLinesYTop, leftYLineWidth, rightYLineWidth;\n  var yLinesYBottom, yLinesYTop, yLinesXLeft, yLinesXRight, connectYBottom, connectYTop;\n  var extraSubplot;\n  function xLinePath(y) {\n    return 'M' + xLinesXLeft + ',' + y + 'H' + xLinesXRight;\n  }\n  function xLinePathFree(y) {\n    return 'M' + xa._offset + ',' + y + 'h' + xa._length;\n  }\n  function yLinePath(x) {\n    return 'M' + x + ',' + yLinesYTop + 'V' + yLinesYBottom;\n  }\n  function yLinePathFree(x) {\n    return 'M' + x + ',' + ya._offset + 'v' + ya._length;\n  }\n  function mainPath(ax, pathFn, pathFnFree) {\n    if (!ax.showline || subplot !== ax._mainSubplot) return '';\n    if (!ax._anchorAxis) return pathFnFree(ax._mainLinePosition);\n    var out = pathFn(ax._mainLinePosition);\n    if (ax.mirror) out += pathFn(ax._mainMirrorPosition);\n    return out;\n  }\n  for (subplot in fullLayout._plots) {\n    plotinfo = fullLayout._plots[subplot];\n    xa = plotinfo.xaxis;\n    ya = plotinfo.yaxis;\n\n    /*\n     * x lines get longer where they meet y lines, to make a crisp corner.\n     * The x lines get the padding (margin.pad) plus the y line width to\n     * fill up the corner nicely. Free x lines are excluded - they always\n     * span exactly the data area of the plot\n     *\n     *  | XXXXX\n     *  | XXXXX\n     *  |\n     *  +------\n     *     x1\n     *    -----\n     *     x2\n     */\n    var xPath = 'M0,0';\n    if (shouldShowLinesOrTicks(xa, subplot)) {\n      leftYLineWidth = findCounterAxisLineWidth(xa, 'left', ya, axList);\n      xLinesXLeft = xa._offset - (leftYLineWidth ? pad + leftYLineWidth : 0);\n      rightYLineWidth = findCounterAxisLineWidth(xa, 'right', ya, axList);\n      xLinesXRight = xa._offset + xa._length + (rightYLineWidth ? pad + rightYLineWidth : 0);\n      xLinesYBottom = getLinePosition(xa, ya, 'bottom');\n      xLinesYTop = getLinePosition(xa, ya, 'top');\n\n      // save axis line positions for extra ticks to reference\n      // each subplot that gets ticks from \"allticks\" gets an entry:\n      //    [left or bottom, right or top]\n      extraSubplot = !xa._anchorAxis || subplot !== xa._mainSubplot;\n      if (extraSubplot && (xa.mirror === 'allticks' || xa.mirror === 'all')) {\n        xa._linepositions[subplot] = [xLinesYBottom, xLinesYTop];\n      }\n      xPath = mainPath(xa, xLinePath, xLinePathFree);\n      if (extraSubplot && xa.showline && (xa.mirror === 'all' || xa.mirror === 'allticks')) {\n        xPath += xLinePath(xLinesYBottom) + xLinePath(xLinesYTop);\n      }\n      plotinfo.xlines.style('stroke-width', xa._lw + 'px').call(Color.stroke, xa.showline ? xa.linecolor : 'rgba(0,0,0,0)');\n    }\n    plotinfo.xlines.attr('d', xPath);\n\n    /*\n     * y lines that meet x axes get longer only by margin.pad, because\n     * the x axes fill in the corner space. Free y axes, like free x axes,\n     * always span exactly the data area of the plot\n     *\n     *   |   | XXXX\n     * y2| y1| XXXX\n     *   |   | XXXX\n     *       |\n     *       +-----\n     */\n    var yPath = 'M0,0';\n    if (shouldShowLinesOrTicks(ya, subplot)) {\n      connectYBottom = findCounterAxisLineWidth(ya, 'bottom', xa, axList);\n      yLinesYBottom = ya._offset + ya._length + (connectYBottom ? pad : 0);\n      connectYTop = findCounterAxisLineWidth(ya, 'top', xa, axList);\n      yLinesYTop = ya._offset - (connectYTop ? pad : 0);\n      yLinesXLeft = getLinePosition(ya, xa, 'left');\n      yLinesXRight = getLinePosition(ya, xa, 'right');\n      extraSubplot = !ya._anchorAxis || subplot !== ya._mainSubplot;\n      if (extraSubplot && (ya.mirror === 'allticks' || ya.mirror === 'all')) {\n        ya._linepositions[subplot] = [yLinesXLeft, yLinesXRight];\n      }\n      yPath = mainPath(ya, yLinePath, yLinePathFree);\n      if (extraSubplot && ya.showline && (ya.mirror === 'all' || ya.mirror === 'allticks')) {\n        yPath += yLinePath(yLinesXLeft) + yLinePath(yLinesXRight);\n      }\n      plotinfo.ylines.style('stroke-width', ya._lw + 'px').call(Color.stroke, ya.showline ? ya.linecolor : 'rgba(0,0,0,0)');\n    }\n    plotinfo.ylines.attr('d', yPath);\n  }\n  Axes.makeClipPaths(gd);\n  return gd._promises.length && Promise.all(gd._promises);\n}\nfunction shouldShowLinesOrTicks(ax, subplot) {\n  return (ax.ticks || ax.showline) && (subplot === ax._mainSubplot || ax.mirror === 'all' || ax.mirror === 'allticks');\n}\n\n/*\n * should we draw a line on counterAx at this side of ax?\n * It's assumed that counterAx is known to overlay the subplot we're working on\n * but it may not be its main axis.\n */\nfunction shouldShowLineThisSide(ax, side, counterAx) {\n  // does counterAx get a line at all?\n  if (!counterAx.showline || !counterAx._lw) return false;\n\n  // are we drawing *all* lines for counterAx?\n  if (counterAx.mirror === 'all' || counterAx.mirror === 'allticks') return true;\n  var anchorAx = counterAx._anchorAxis;\n\n  // is this a free axis? free axes can only have a subplot side-line with all(ticks)? mirroring\n  if (!anchorAx) return false;\n\n  // in order to handle cases where the user forgot to anchor this axis correctly\n  // (because its default anchor has the same domain on the relevant end)\n  // check whether the relevant position is the same.\n  var sideIndex = alignmentConstants.FROM_BL[side];\n  if (counterAx.side === side) {\n    return anchorAx.domain[sideIndex] === ax.domain[sideIndex];\n  }\n  return counterAx.mirror && anchorAx.domain[1 - sideIndex] === ax.domain[1 - sideIndex];\n}\n\n/*\n * Is there another axis intersecting `side` end of `ax`?\n * First look at `counterAx` (the axis for this subplot),\n * then at all other potential counteraxes on or overlaying this subplot.\n * Take the line width from the first one that has a line.\n */\nfunction findCounterAxisLineWidth(ax, side, counterAx, axList) {\n  if (shouldShowLineThisSide(ax, side, counterAx)) {\n    return counterAx._lw;\n  }\n  for (var i = 0; i < axList.length; i++) {\n    var axi = axList[i];\n    if (axi._mainAxis === counterAx._mainAxis && shouldShowLineThisSide(ax, side, axi)) {\n      return axi._lw;\n    }\n  }\n  return 0;\n}\nexports.drawMainTitle = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var textAnchor = getMainTitleTextAnchor(fullLayout);\n  var dy = getMainTitleDy(fullLayout);\n  Titles.draw(gd, 'gtitle', {\n    propContainer: fullLayout,\n    propName: 'title.text',\n    placeholder: fullLayout._dfltTitle.plot,\n    attributes: {\n      x: getMainTitleX(fullLayout, textAnchor),\n      y: getMainTitleY(fullLayout, dy),\n      'text-anchor': textAnchor,\n      dy: dy\n    }\n  });\n};\nfunction getMainTitleX(fullLayout, textAnchor) {\n  var title = fullLayout.title;\n  var gs = fullLayout._size;\n  var hPadShift = 0;\n  if (textAnchor === SVG_TEXT_ANCHOR_START) {\n    hPadShift = title.pad.l;\n  } else if (textAnchor === SVG_TEXT_ANCHOR_END) {\n    hPadShift = -title.pad.r;\n  }\n  switch (title.xref) {\n    case 'paper':\n      return gs.l + gs.w * title.x + hPadShift;\n    case 'container':\n    default:\n      return fullLayout.width * title.x + hPadShift;\n  }\n}\nfunction getMainTitleY(fullLayout, dy) {\n  var title = fullLayout.title;\n  var gs = fullLayout._size;\n  var vPadShift = 0;\n  if (dy === '0em' || !dy) {\n    vPadShift = -title.pad.b;\n  } else if (dy === alignmentConstants.CAP_SHIFT + 'em') {\n    vPadShift = title.pad.t;\n  }\n  if (title.y === 'auto') {\n    return gs.t / 2;\n  } else {\n    switch (title.yref) {\n      case 'paper':\n        return gs.t + gs.h - gs.h * title.y + vPadShift;\n      case 'container':\n      default:\n        return fullLayout.height - fullLayout.height * title.y + vPadShift;\n    }\n  }\n}\nfunction getMainTitleTextAnchor(fullLayout) {\n  var title = fullLayout.title;\n  var textAnchor = SVG_TEXT_ANCHOR_MIDDLE;\n  if (Lib.isRightAnchor(title)) {\n    textAnchor = SVG_TEXT_ANCHOR_END;\n  } else if (Lib.isLeftAnchor(title)) {\n    textAnchor = SVG_TEXT_ANCHOR_START;\n  }\n  return textAnchor;\n}\nfunction getMainTitleDy(fullLayout) {\n  var title = fullLayout.title;\n  var dy = '0em';\n  if (Lib.isTopAnchor(title)) {\n    dy = alignmentConstants.CAP_SHIFT + 'em';\n  } else if (Lib.isMiddleAnchor(title)) {\n    dy = alignmentConstants.MID_SHIFT + 'em';\n  }\n  return dy;\n}\nexports.doTraceStyle = function (gd) {\n  var calcdata = gd.calcdata;\n  var editStyleCalls = [];\n  var i;\n  for (i = 0; i < calcdata.length; i++) {\n    var cd = calcdata[i];\n    var cd0 = cd[0] || {};\n    var trace = cd0.trace || {};\n    var _module = trace._module || {};\n\n    // See if we need to do arraysToCalcdata\n    // call it regardless of what change we made, in case\n    // supplyDefaults brought in an array that was already\n    // in gd.data but not in gd._fullData previously\n    var arraysToCalcdata = _module.arraysToCalcdata;\n    if (arraysToCalcdata) arraysToCalcdata(cd, trace);\n    var editStyle = _module.editStyle;\n    if (editStyle) editStyleCalls.push({\n      fn: editStyle,\n      cd0: cd0\n    });\n  }\n  if (editStyleCalls.length) {\n    for (i = 0; i < editStyleCalls.length; i++) {\n      var edit = editStyleCalls[i];\n      edit.fn(gd, edit.cd0);\n    }\n    clearGlCanvases(gd);\n    exports.redrawReglTraces(gd);\n  }\n  Plots.style(gd);\n  Registry.getComponentMethod('legend', 'draw')(gd);\n  return Plots.previousPromises(gd);\n};\nexports.doColorBars = function (gd) {\n  for (var i = 0; i < gd.calcdata.length; i++) {\n    var cdi0 = gd.calcdata[i][0];\n    if ((cdi0.t || {}).cb) {\n      var trace = cdi0.trace;\n      var cb = cdi0.t.cb;\n      if (Registry.traceIs(trace, 'contour')) {\n        cb.line({\n          width: trace.contours.showlines !== false ? trace.line.width : 0,\n          dash: trace.line.dash,\n          color: trace.contours.coloring === 'line' ? cb._opts.line.color : trace.line.color\n        });\n      }\n      var moduleOpts = trace._module.colorbar;\n      var containerName = moduleOpts.container;\n      var opts = (containerName ? trace[containerName] : trace).colorbar;\n      cb.options(opts)();\n    }\n  }\n  return Plots.previousPromises(gd);\n};\n\n// force plot() to redo the layout and replot with the modified layout\nexports.layoutReplot = function (gd) {\n  var layout = gd.layout;\n  gd.layout = undefined;\n  return Registry.call('plot', gd, '', layout);\n};\nexports.doLegend = function (gd) {\n  Registry.getComponentMethod('legend', 'draw')(gd);\n  return Plots.previousPromises(gd);\n};\nexports.doTicksRelayout = function (gd) {\n  Axes.draw(gd, 'redraw');\n  if (gd._fullLayout._hasOnlyLargeSploms) {\n    Registry.subplotsRegistry.splom.updateGrid(gd);\n    clearGlCanvases(gd);\n    exports.redrawReglTraces(gd);\n  }\n  exports.drawMainTitle(gd);\n  return Plots.previousPromises(gd);\n};\nexports.doModeBar = function (gd) {\n  var fullLayout = gd._fullLayout;\n  ModeBar.manage(gd);\n  for (var i = 0; i < fullLayout._basePlotModules.length; i++) {\n    var updateFx = fullLayout._basePlotModules[i].updateFx;\n    if (updateFx) updateFx(gd);\n  }\n  return Plots.previousPromises(gd);\n};\nexports.doCamera = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var sceneIds = fullLayout._subplots.gl3d;\n  for (var i = 0; i < sceneIds.length; i++) {\n    var sceneLayout = fullLayout[sceneIds[i]];\n    var scene = sceneLayout._scene;\n    scene.setCamera(sceneLayout.camera);\n  }\n};\nexports.drawData = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var calcdata = gd.calcdata;\n  var i;\n\n  // remove old colorbars explicitly\n  for (i = 0; i < calcdata.length; i++) {\n    var trace = calcdata[i][0].trace;\n    if (trace.visible !== true || !trace._module.colorbar) {\n      fullLayout._infolayer.select('.cb' + trace.uid).remove();\n    }\n  }\n  clearGlCanvases(gd);\n\n  // loop over the base plot modules present on graph\n  var basePlotModules = fullLayout._basePlotModules;\n  for (i = 0; i < basePlotModules.length; i++) {\n    basePlotModules[i].plot(gd);\n  }\n  exports.redrawReglTraces(gd);\n\n  // styling separate from drawing\n  Plots.style(gd);\n\n  // show annotations and shapes\n  Registry.getComponentMethod('shapes', 'draw')(gd);\n  Registry.getComponentMethod('annotations', 'draw')(gd);\n\n  // Mark the first render as complete\n  fullLayout._replotting = false;\n  return Plots.previousPromises(gd);\n};\n\n// Draw (or redraw) all regl-based traces in one go,\n// useful during drag and selection where buffers of targeted traces are updated,\n// but all traces need to be redrawn following clearGlCanvases.\n//\n// Note that _module.plot for regl trace does NOT draw things\n// on the canvas, they only update the buffers.\n// Drawing is perform here.\n//\n// TODO try adding per-subplot option using gl.SCISSOR_TEST for\n// non-overlaying, disjoint subplots.\n//\n// TODO try to include parcoords in here.\n// https://github.com/plotly/plotly.js/issues/3069\nexports.redrawReglTraces = function (gd) {\n  var fullLayout = gd._fullLayout;\n  if (fullLayout._has('regl')) {\n    var fullData = gd._fullData;\n    var cartesianIds = [];\n    var polarIds = [];\n    var i, sp;\n    if (fullLayout._hasOnlyLargeSploms) {\n      fullLayout._splomGrid.draw();\n    }\n\n    // N.B.\n    // - Loop over fullData (not _splomScenes) to preserve splom trace-to-trace ordering\n    // - Fill list if subplot ids (instead of fullLayout._subplots) to handle cases where all traces\n    //   of a given module are `visible !== true`\n    for (i = 0; i < fullData.length; i++) {\n      var trace = fullData[i];\n      if (trace.visible === true) {\n        if (trace.type === 'splom') {\n          fullLayout._splomScenes[trace.uid].draw();\n        } else if (trace.type === 'scattergl') {\n          Lib.pushUnique(cartesianIds, trace.xaxis + trace.yaxis);\n        } else if (trace.type === 'scatterpolargl') {\n          Lib.pushUnique(polarIds, trace.subplot);\n        }\n      }\n    }\n    for (i = 0; i < cartesianIds.length; i++) {\n      sp = fullLayout._plots[cartesianIds[i]];\n      if (sp._scene) sp._scene.draw();\n    }\n    for (i = 0; i < polarIds.length; i++) {\n      sp = fullLayout[polarIds[i]]._subplot;\n      if (sp._scene) sp._scene.draw();\n    }\n  }\n};\nexports.doAutoRangeAndConstraints = function (gd) {\n  var axList = Axes.list(gd, '', true);\n  for (var i = 0; i < axList.length; i++) {\n    var ax = axList[i];\n    cleanAxisConstraints(gd, ax);\n    // in case margins changed, update scale\n    ax.setScale();\n    doAutoRange(gd, ax);\n  }\n  enforceAxisConstraints(gd);\n};\n\n// An initial paint must be completed before these components can be\n// correctly sized and the whole plot re-margined. fullLayout._replotting must\n// be set to false before these will work properly.\nexports.finalDraw = function (gd) {\n  Registry.getComponentMethod('shapes', 'draw')(gd);\n  Registry.getComponentMethod('images', 'draw')(gd);\n  Registry.getComponentMethod('annotations', 'draw')(gd);\n  // TODO: rangesliders really belong in marginPushers but they need to be\n  // drawn after data - can we at least get the margin pushing part separated\n  // out and done earlier?\n  Registry.getComponentMethod('rangeslider', 'draw')(gd);\n  // TODO: rangeselector only needs to be here (in addition to drawMarginPushers)\n  // because the margins need to be fully determined before we can call\n  // autorange and update axis ranges (which rangeselector needs to know which\n  // button is active). Can we break out its automargin step from its draw step?\n  Registry.getComponentMethod('rangeselector', 'draw')(gd);\n};\nexports.drawMarginPushers = function (gd) {\n  Registry.getComponentMethod('legend', 'draw')(gd);\n  Registry.getComponentMethod('rangeselector', 'draw')(gd);\n  Registry.getComponentMethod('sliders', 'draw')(gd);\n  Registry.getComponentMethod('updatemenus', 'draw')(gd);\n};","map":{"version":3,"names":["d3","require","Registry","Plots","Lib","clearGlCanvases","Color","Drawing","Titles","ModeBar","Axes","alignmentConstants","axisConstraints","enforceAxisConstraints","enforce","cleanAxisConstraints","clean","doAutoRange","SVG_TEXT_ANCHOR_START","SVG_TEXT_ANCHOR_MIDDLE","SVG_TEXT_ANCHOR_END","exports","layoutStyles","gd","syncOrAsync","doAutoMargin","lsInner","overlappingDomain","xDomain","yDomain","domains","i","length","existingX","existingY","fullLayout","_fullLayout","gs","_size","pad","p","axList","list","subplot","plotinfo","ax","xa","ya","_paperdiv","style","width","_context","responsive","autosize","_hasZeroWidth","layout","height","_hasZeroHeight","selectAll","call","setSize","setBackground","paper_bgcolor","drawMainTitle","manage","_has","_promises","Promise","all","getLinePosition","counterAx","side","lwHalf","_lw","_id","charAt","t","h","position","_offset","_length","l","w","_anchorAxis","_linepositions","crispRound","linewidth","_mainLinePosition","_mainMirrorPosition","mirror","OPPOSITE_SIDE","lowerBackgroundIDs","backgroundIds","lowerDomains","noNeedForBg","opacity","plot_bgcolor","_plots","mainplot","bg","remove","undefined","xaxis","domain","yaxis","plotgroup","pgNode","node","plotgroupBg","ensureSingle","insertBefore","childNodes","push","select","lowerBackgrounds","_bgLayer","data","enter","append","classed","exit","each","setRect","fill","_hasOnlyLargeSploms","clipId","_uid","plotClip","ensureSingleById","_clips","s","clipRect","attr","setTranslate","plot","plotClipId","layerClipId","_hasClipOnAxisFalse","setClipUrl","xLinesXLeft","xLinesXRight","xLinesYBottom","xLinesYTop","leftYLineWidth","rightYLineWidth","yLinesYBottom","yLinesYTop","yLinesXLeft","yLinesXRight","connectYBottom","connectYTop","extraSubplot","xLinePath","y","xLinePathFree","yLinePath","x","yLinePathFree","mainPath","pathFn","pathFnFree","showline","_mainSubplot","out","xPath","shouldShowLinesOrTicks","findCounterAxisLineWidth","xlines","stroke","linecolor","yPath","ylines","makeClipPaths","ticks","shouldShowLineThisSide","anchorAx","sideIndex","FROM_BL","axi","_mainAxis","textAnchor","getMainTitleTextAnchor","dy","getMainTitleDy","draw","propContainer","propName","placeholder","_dfltTitle","attributes","getMainTitleX","getMainTitleY","title","hPadShift","r","xref","vPadShift","b","CAP_SHIFT","yref","isRightAnchor","isLeftAnchor","isTopAnchor","isMiddleAnchor","MID_SHIFT","doTraceStyle","calcdata","editStyleCalls","cd","cd0","trace","_module","arraysToCalcdata","editStyle","fn","edit","redrawReglTraces","getComponentMethod","previousPromises","doColorBars","cdi0","cb","traceIs","line","contours","showlines","dash","color","coloring","_opts","moduleOpts","colorbar","containerName","container","opts","options","layoutReplot","doLegend","doTicksRelayout","subplotsRegistry","splom","updateGrid","doModeBar","_basePlotModules","updateFx","doCamera","sceneIds","_subplots","gl3d","sceneLayout","scene","_scene","setCamera","camera","drawData","visible","_infolayer","uid","basePlotModules","_replotting","fullData","_fullData","cartesianIds","polarIds","sp","_splomGrid","type","_splomScenes","pushUnique","_subplot","doAutoRangeAndConstraints","setScale","finalDraw","drawMarginPushers"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/plot_api/subroutines.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar Registry = require('../registry');\nvar Plots = require('../plots/plots');\n\nvar Lib = require('../lib');\nvar clearGlCanvases = require('../lib/clear_gl_canvases');\n\nvar Color = require('../components/color');\nvar Drawing = require('../components/drawing');\nvar Titles = require('../components/titles');\nvar ModeBar = require('../components/modebar');\n\nvar Axes = require('../plots/cartesian/axes');\nvar alignmentConstants = require('../constants/alignment');\nvar axisConstraints = require('../plots/cartesian/constraints');\nvar enforceAxisConstraints = axisConstraints.enforce;\nvar cleanAxisConstraints = axisConstraints.clean;\nvar doAutoRange = require('../plots/cartesian/autorange').doAutoRange;\n\nvar SVG_TEXT_ANCHOR_START = 'start';\nvar SVG_TEXT_ANCHOR_MIDDLE = 'middle';\nvar SVG_TEXT_ANCHOR_END = 'end';\n\nexports.layoutStyles = function(gd) {\n    return Lib.syncOrAsync([Plots.doAutoMargin, lsInner], gd);\n};\n\nfunction overlappingDomain(xDomain, yDomain, domains) {\n    for(var i = 0; i < domains.length; i++) {\n        var existingX = domains[i][0];\n        var existingY = domains[i][1];\n\n        if(existingX[0] >= xDomain[1] || existingX[1] <= xDomain[0]) {\n            continue;\n        }\n        if(existingY[0] < yDomain[1] && existingY[1] > yDomain[0]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction lsInner(gd) {\n    var fullLayout = gd._fullLayout;\n    var gs = fullLayout._size;\n    var pad = gs.p;\n    var axList = Axes.list(gd, '', true);\n    var i, subplot, plotinfo, ax, xa, ya;\n\n    fullLayout._paperdiv.style({\n        width: (gd._context.responsive && fullLayout.autosize && !gd._context._hasZeroWidth && !gd.layout.width) ? '100%' : fullLayout.width + 'px',\n        height: (gd._context.responsive && fullLayout.autosize && !gd._context._hasZeroHeight && !gd.layout.height) ? '100%' : fullLayout.height + 'px'\n    })\n    .selectAll('.main-svg')\n    .call(Drawing.setSize, fullLayout.width, fullLayout.height);\n    gd._context.setBackground(gd, fullLayout.paper_bgcolor);\n\n    exports.drawMainTitle(gd);\n    ModeBar.manage(gd);\n\n    // _has('cartesian') means SVG specifically, not GL2D - but GL2D\n    // can still get here because it makes some of the SVG structure\n    // for shared features like selections.\n    if(!fullLayout._has('cartesian')) {\n        return gd._promises.length && Promise.all(gd._promises);\n    }\n\n    function getLinePosition(ax, counterAx, side) {\n        var lwHalf = ax._lw / 2;\n\n        if(ax._id.charAt(0) === 'x') {\n            if(!counterAx) return gs.t + gs.h * (1 - (ax.position || 0)) + (lwHalf % 1);\n            else if(side === 'top') return counterAx._offset - pad - lwHalf;\n            return counterAx._offset + counterAx._length + pad + lwHalf;\n        }\n\n        if(!counterAx) return gs.l + gs.w * (ax.position || 0) + (lwHalf % 1);\n        else if(side === 'right') return counterAx._offset + counterAx._length + pad + lwHalf;\n        return counterAx._offset - pad - lwHalf;\n    }\n\n    // some preparation of axis position info\n    for(i = 0; i < axList.length; i++) {\n        ax = axList[i];\n\n        var counterAx = ax._anchorAxis;\n\n        // clear axis line positions, to be set in the subplot loop below\n        ax._linepositions = {};\n\n        // stash crispRounded linewidth so we don't need to pass gd all over the place\n        ax._lw = Drawing.crispRound(gd, ax.linewidth, 1);\n\n        // figure out the main axis line and main mirror line position.\n        // it's easier to follow the logic if we handle these separately from\n        // ax._linepositions, which are only used by mirror=allticks\n        // for non-main-subplot ticks, and mirror=all(ticks)? for zero line\n        // hiding logic\n        ax._mainLinePosition = getLinePosition(ax, counterAx, ax.side);\n        ax._mainMirrorPosition = (ax.mirror && counterAx) ?\n            getLinePosition(ax, counterAx,\n                alignmentConstants.OPPOSITE_SIDE[ax.side]) : null;\n    }\n\n    // figure out which backgrounds we need to draw,\n    // and in which layers to put them\n    var lowerBackgroundIDs = [];\n    var backgroundIds = [];\n    var lowerDomains = [];\n    // no need to draw background when paper and plot color are the same color,\n    // activate mode just for large splom (which benefit the most from this\n    // optimization), but this could apply to all cartesian subplots.\n    var noNeedForBg = (\n        Color.opacity(fullLayout.paper_bgcolor) === 1 &&\n        Color.opacity(fullLayout.plot_bgcolor) === 1 &&\n        fullLayout.paper_bgcolor === fullLayout.plot_bgcolor\n    );\n\n    for(subplot in fullLayout._plots) {\n        plotinfo = fullLayout._plots[subplot];\n\n        if(plotinfo.mainplot) {\n            // mainplot is a reference to the main plot this one is overlaid on\n            // so if it exists, this is an overlaid plot and we don't need to\n            // give it its own background\n            if(plotinfo.bg) {\n                plotinfo.bg.remove();\n            }\n            plotinfo.bg = undefined;\n        } else {\n            var xDomain = plotinfo.xaxis.domain;\n            var yDomain = plotinfo.yaxis.domain;\n            var plotgroup = plotinfo.plotgroup;\n\n            if(overlappingDomain(xDomain, yDomain, lowerDomains)) {\n                var pgNode = plotgroup.node();\n                var plotgroupBg = plotinfo.bg = Lib.ensureSingle(plotgroup, 'rect', 'bg');\n                pgNode.insertBefore(plotgroupBg.node(), pgNode.childNodes[0]);\n                backgroundIds.push(subplot);\n            } else {\n                plotgroup.select('rect.bg').remove();\n                lowerDomains.push([xDomain, yDomain]);\n                if(!noNeedForBg) {\n                    lowerBackgroundIDs.push(subplot);\n                    backgroundIds.push(subplot);\n                }\n            }\n        }\n    }\n\n    // now create all the lower-layer backgrounds at once now that\n    // we have the list of subplots that need them\n    var lowerBackgrounds = fullLayout._bgLayer.selectAll('.bg')\n        .data(lowerBackgroundIDs);\n\n    lowerBackgrounds.enter().append('rect')\n        .classed('bg', true);\n\n    lowerBackgrounds.exit().remove();\n\n    lowerBackgrounds.each(function(subplot) {\n        fullLayout._plots[subplot].bg = d3.select(this);\n    });\n\n    // style all backgrounds\n    for(i = 0; i < backgroundIds.length; i++) {\n        plotinfo = fullLayout._plots[backgroundIds[i]];\n        xa = plotinfo.xaxis;\n        ya = plotinfo.yaxis;\n\n        if(plotinfo.bg) {\n            plotinfo.bg\n                .call(Drawing.setRect,\n                    xa._offset - pad, ya._offset - pad,\n                    xa._length + 2 * pad, ya._length + 2 * pad)\n                .call(Color.fill, fullLayout.plot_bgcolor)\n                .style('stroke-width', 0);\n        }\n    }\n\n    if(!fullLayout._hasOnlyLargeSploms) {\n        for(subplot in fullLayout._plots) {\n            plotinfo = fullLayout._plots[subplot];\n            xa = plotinfo.xaxis;\n            ya = plotinfo.yaxis;\n\n            // Clip so that data only shows up on the plot area.\n            var clipId = plotinfo.clipId = 'clip' + fullLayout._uid + subplot + 'plot';\n\n            var plotClip = Lib.ensureSingleById(fullLayout._clips, 'clipPath', clipId, function(s) {\n                s.classed('plotclip', true)\n                    .append('rect');\n            });\n\n            plotinfo.clipRect = plotClip.select('rect').attr({\n                width: xa._length,\n                height: ya._length\n            });\n\n            Drawing.setTranslate(plotinfo.plot, xa._offset, ya._offset);\n\n            var plotClipId;\n            var layerClipId;\n\n            if(plotinfo._hasClipOnAxisFalse) {\n                plotClipId = null;\n                layerClipId = clipId;\n            } else {\n                plotClipId = clipId;\n                layerClipId = null;\n            }\n\n            Drawing.setClipUrl(plotinfo.plot, plotClipId, gd);\n\n            // stash layer clipId value (null or same as clipId)\n            // to DRY up Drawing.setClipUrl calls on trace-module and trace layers\n            // downstream\n            plotinfo.layerClipId = layerClipId;\n        }\n    }\n\n    var xLinesXLeft, xLinesXRight, xLinesYBottom, xLinesYTop,\n        leftYLineWidth, rightYLineWidth;\n    var yLinesYBottom, yLinesYTop, yLinesXLeft, yLinesXRight,\n        connectYBottom, connectYTop;\n    var extraSubplot;\n\n    function xLinePath(y) {\n        return 'M' + xLinesXLeft + ',' + y + 'H' + xLinesXRight;\n    }\n\n    function xLinePathFree(y) {\n        return 'M' + xa._offset + ',' + y + 'h' + xa._length;\n    }\n\n    function yLinePath(x) {\n        return 'M' + x + ',' + yLinesYTop + 'V' + yLinesYBottom;\n    }\n\n    function yLinePathFree(x) {\n        return 'M' + x + ',' + ya._offset + 'v' + ya._length;\n    }\n\n    function mainPath(ax, pathFn, pathFnFree) {\n        if(!ax.showline || subplot !== ax._mainSubplot) return '';\n        if(!ax._anchorAxis) return pathFnFree(ax._mainLinePosition);\n        var out = pathFn(ax._mainLinePosition);\n        if(ax.mirror) out += pathFn(ax._mainMirrorPosition);\n        return out;\n    }\n\n    for(subplot in fullLayout._plots) {\n        plotinfo = fullLayout._plots[subplot];\n        xa = plotinfo.xaxis;\n        ya = plotinfo.yaxis;\n\n        /*\n         * x lines get longer where they meet y lines, to make a crisp corner.\n         * The x lines get the padding (margin.pad) plus the y line width to\n         * fill up the corner nicely. Free x lines are excluded - they always\n         * span exactly the data area of the plot\n         *\n         *  | XXXXX\n         *  | XXXXX\n         *  |\n         *  +------\n         *     x1\n         *    -----\n         *     x2\n         */\n        var xPath = 'M0,0';\n        if(shouldShowLinesOrTicks(xa, subplot)) {\n            leftYLineWidth = findCounterAxisLineWidth(xa, 'left', ya, axList);\n            xLinesXLeft = xa._offset - (leftYLineWidth ? (pad + leftYLineWidth) : 0);\n            rightYLineWidth = findCounterAxisLineWidth(xa, 'right', ya, axList);\n            xLinesXRight = xa._offset + xa._length + (rightYLineWidth ? (pad + rightYLineWidth) : 0);\n            xLinesYBottom = getLinePosition(xa, ya, 'bottom');\n            xLinesYTop = getLinePosition(xa, ya, 'top');\n\n            // save axis line positions for extra ticks to reference\n            // each subplot that gets ticks from \"allticks\" gets an entry:\n            //    [left or bottom, right or top]\n            extraSubplot = (!xa._anchorAxis || subplot !== xa._mainSubplot);\n            if(extraSubplot && (xa.mirror === 'allticks' || xa.mirror === 'all')) {\n                xa._linepositions[subplot] = [xLinesYBottom, xLinesYTop];\n            }\n\n            xPath = mainPath(xa, xLinePath, xLinePathFree);\n            if(extraSubplot && xa.showline && (xa.mirror === 'all' || xa.mirror === 'allticks')) {\n                xPath += xLinePath(xLinesYBottom) + xLinePath(xLinesYTop);\n            }\n\n            plotinfo.xlines\n                .style('stroke-width', xa._lw + 'px')\n                .call(Color.stroke, xa.showline ?\n                    xa.linecolor : 'rgba(0,0,0,0)');\n        }\n        plotinfo.xlines.attr('d', xPath);\n\n        /*\n         * y lines that meet x axes get longer only by margin.pad, because\n         * the x axes fill in the corner space. Free y axes, like free x axes,\n         * always span exactly the data area of the plot\n         *\n         *   |   | XXXX\n         * y2| y1| XXXX\n         *   |   | XXXX\n         *       |\n         *       +-----\n         */\n        var yPath = 'M0,0';\n        if(shouldShowLinesOrTicks(ya, subplot)) {\n            connectYBottom = findCounterAxisLineWidth(ya, 'bottom', xa, axList);\n            yLinesYBottom = ya._offset + ya._length + (connectYBottom ? pad : 0);\n            connectYTop = findCounterAxisLineWidth(ya, 'top', xa, axList);\n            yLinesYTop = ya._offset - (connectYTop ? pad : 0);\n            yLinesXLeft = getLinePosition(ya, xa, 'left');\n            yLinesXRight = getLinePosition(ya, xa, 'right');\n\n            extraSubplot = (!ya._anchorAxis || subplot !== ya._mainSubplot);\n            if(extraSubplot && (ya.mirror === 'allticks' || ya.mirror === 'all')) {\n                ya._linepositions[subplot] = [yLinesXLeft, yLinesXRight];\n            }\n\n            yPath = mainPath(ya, yLinePath, yLinePathFree);\n            if(extraSubplot && ya.showline && (ya.mirror === 'all' || ya.mirror === 'allticks')) {\n                yPath += yLinePath(yLinesXLeft) + yLinePath(yLinesXRight);\n            }\n\n            plotinfo.ylines\n                .style('stroke-width', ya._lw + 'px')\n                .call(Color.stroke, ya.showline ?\n                    ya.linecolor : 'rgba(0,0,0,0)');\n        }\n        plotinfo.ylines.attr('d', yPath);\n    }\n\n    Axes.makeClipPaths(gd);\n\n    return gd._promises.length && Promise.all(gd._promises);\n}\n\nfunction shouldShowLinesOrTicks(ax, subplot) {\n    return (ax.ticks || ax.showline) &&\n        (subplot === ax._mainSubplot || ax.mirror === 'all' || ax.mirror === 'allticks');\n}\n\n/*\n * should we draw a line on counterAx at this side of ax?\n * It's assumed that counterAx is known to overlay the subplot we're working on\n * but it may not be its main axis.\n */\nfunction shouldShowLineThisSide(ax, side, counterAx) {\n    // does counterAx get a line at all?\n    if(!counterAx.showline || !counterAx._lw) return false;\n\n    // are we drawing *all* lines for counterAx?\n    if(counterAx.mirror === 'all' || counterAx.mirror === 'allticks') return true;\n\n    var anchorAx = counterAx._anchorAxis;\n\n    // is this a free axis? free axes can only have a subplot side-line with all(ticks)? mirroring\n    if(!anchorAx) return false;\n\n    // in order to handle cases where the user forgot to anchor this axis correctly\n    // (because its default anchor has the same domain on the relevant end)\n    // check whether the relevant position is the same.\n    var sideIndex = alignmentConstants.FROM_BL[side];\n    if(counterAx.side === side) {\n        return anchorAx.domain[sideIndex] === ax.domain[sideIndex];\n    }\n    return counterAx.mirror && anchorAx.domain[1 - sideIndex] === ax.domain[1 - sideIndex];\n}\n\n/*\n * Is there another axis intersecting `side` end of `ax`?\n * First look at `counterAx` (the axis for this subplot),\n * then at all other potential counteraxes on or overlaying this subplot.\n * Take the line width from the first one that has a line.\n */\nfunction findCounterAxisLineWidth(ax, side, counterAx, axList) {\n    if(shouldShowLineThisSide(ax, side, counterAx)) {\n        return counterAx._lw;\n    }\n    for(var i = 0; i < axList.length; i++) {\n        var axi = axList[i];\n        if(axi._mainAxis === counterAx._mainAxis && shouldShowLineThisSide(ax, side, axi)) {\n            return axi._lw;\n        }\n    }\n    return 0;\n}\n\nexports.drawMainTitle = function(gd) {\n    var fullLayout = gd._fullLayout;\n\n    var textAnchor = getMainTitleTextAnchor(fullLayout);\n    var dy = getMainTitleDy(fullLayout);\n\n    Titles.draw(gd, 'gtitle', {\n        propContainer: fullLayout,\n        propName: 'title.text',\n        placeholder: fullLayout._dfltTitle.plot,\n        attributes: {\n            x: getMainTitleX(fullLayout, textAnchor),\n            y: getMainTitleY(fullLayout, dy),\n            'text-anchor': textAnchor,\n            dy: dy\n        }\n    });\n};\n\nfunction getMainTitleX(fullLayout, textAnchor) {\n    var title = fullLayout.title;\n    var gs = fullLayout._size;\n    var hPadShift = 0;\n\n    if(textAnchor === SVG_TEXT_ANCHOR_START) {\n        hPadShift = title.pad.l;\n    } else if(textAnchor === SVG_TEXT_ANCHOR_END) {\n        hPadShift = -title.pad.r;\n    }\n\n    switch(title.xref) {\n        case 'paper':\n            return gs.l + gs.w * title.x + hPadShift;\n        case 'container':\n        default:\n            return fullLayout.width * title.x + hPadShift;\n    }\n}\n\nfunction getMainTitleY(fullLayout, dy) {\n    var title = fullLayout.title;\n    var gs = fullLayout._size;\n    var vPadShift = 0;\n\n    if(dy === '0em' || !dy) {\n        vPadShift = -title.pad.b;\n    } else if(dy === alignmentConstants.CAP_SHIFT + 'em') {\n        vPadShift = title.pad.t;\n    }\n\n    if(title.y === 'auto') {\n        return gs.t / 2;\n    } else {\n        switch(title.yref) {\n            case 'paper':\n                return gs.t + gs.h - gs.h * title.y + vPadShift;\n            case 'container':\n            default:\n                return fullLayout.height - fullLayout.height * title.y + vPadShift;\n        }\n    }\n}\n\nfunction getMainTitleTextAnchor(fullLayout) {\n    var title = fullLayout.title;\n\n    var textAnchor = SVG_TEXT_ANCHOR_MIDDLE;\n    if(Lib.isRightAnchor(title)) {\n        textAnchor = SVG_TEXT_ANCHOR_END;\n    } else if(Lib.isLeftAnchor(title)) {\n        textAnchor = SVG_TEXT_ANCHOR_START;\n    }\n\n    return textAnchor;\n}\n\nfunction getMainTitleDy(fullLayout) {\n    var title = fullLayout.title;\n\n    var dy = '0em';\n    if(Lib.isTopAnchor(title)) {\n        dy = alignmentConstants.CAP_SHIFT + 'em';\n    } else if(Lib.isMiddleAnchor(title)) {\n        dy = alignmentConstants.MID_SHIFT + 'em';\n    }\n\n    return dy;\n}\n\nexports.doTraceStyle = function(gd) {\n    var calcdata = gd.calcdata;\n    var editStyleCalls = [];\n    var i;\n\n    for(i = 0; i < calcdata.length; i++) {\n        var cd = calcdata[i];\n        var cd0 = cd[0] || {};\n        var trace = cd0.trace || {};\n        var _module = trace._module || {};\n\n        // See if we need to do arraysToCalcdata\n        // call it regardless of what change we made, in case\n        // supplyDefaults brought in an array that was already\n        // in gd.data but not in gd._fullData previously\n        var arraysToCalcdata = _module.arraysToCalcdata;\n        if(arraysToCalcdata) arraysToCalcdata(cd, trace);\n\n        var editStyle = _module.editStyle;\n        if(editStyle) editStyleCalls.push({fn: editStyle, cd0: cd0});\n    }\n\n    if(editStyleCalls.length) {\n        for(i = 0; i < editStyleCalls.length; i++) {\n            var edit = editStyleCalls[i];\n            edit.fn(gd, edit.cd0);\n        }\n        clearGlCanvases(gd);\n        exports.redrawReglTraces(gd);\n    }\n\n    Plots.style(gd);\n    Registry.getComponentMethod('legend', 'draw')(gd);\n\n    return Plots.previousPromises(gd);\n};\n\nexports.doColorBars = function(gd) {\n    for(var i = 0; i < gd.calcdata.length; i++) {\n        var cdi0 = gd.calcdata[i][0];\n\n        if((cdi0.t || {}).cb) {\n            var trace = cdi0.trace;\n            var cb = cdi0.t.cb;\n\n            if(Registry.traceIs(trace, 'contour')) {\n                cb.line({\n                    width: trace.contours.showlines !== false ?\n                        trace.line.width : 0,\n                    dash: trace.line.dash,\n                    color: trace.contours.coloring === 'line' ?\n                        cb._opts.line.color : trace.line.color\n                });\n            }\n            var moduleOpts = trace._module.colorbar;\n            var containerName = moduleOpts.container;\n            var opts = (containerName ? trace[containerName] : trace).colorbar;\n            cb.options(opts)();\n        }\n    }\n\n    return Plots.previousPromises(gd);\n};\n\n// force plot() to redo the layout and replot with the modified layout\nexports.layoutReplot = function(gd) {\n    var layout = gd.layout;\n    gd.layout = undefined;\n    return Registry.call('plot', gd, '', layout);\n};\n\nexports.doLegend = function(gd) {\n    Registry.getComponentMethod('legend', 'draw')(gd);\n    return Plots.previousPromises(gd);\n};\n\nexports.doTicksRelayout = function(gd) {\n    Axes.draw(gd, 'redraw');\n\n    if(gd._fullLayout._hasOnlyLargeSploms) {\n        Registry.subplotsRegistry.splom.updateGrid(gd);\n        clearGlCanvases(gd);\n        exports.redrawReglTraces(gd);\n    }\n\n    exports.drawMainTitle(gd);\n    return Plots.previousPromises(gd);\n};\n\nexports.doModeBar = function(gd) {\n    var fullLayout = gd._fullLayout;\n\n    ModeBar.manage(gd);\n\n    for(var i = 0; i < fullLayout._basePlotModules.length; i++) {\n        var updateFx = fullLayout._basePlotModules[i].updateFx;\n        if(updateFx) updateFx(gd);\n    }\n\n    return Plots.previousPromises(gd);\n};\n\nexports.doCamera = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var sceneIds = fullLayout._subplots.gl3d;\n\n    for(var i = 0; i < sceneIds.length; i++) {\n        var sceneLayout = fullLayout[sceneIds[i]];\n        var scene = sceneLayout._scene;\n\n        scene.setCamera(sceneLayout.camera);\n    }\n};\n\nexports.drawData = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var calcdata = gd.calcdata;\n    var i;\n\n    // remove old colorbars explicitly\n    for(i = 0; i < calcdata.length; i++) {\n        var trace = calcdata[i][0].trace;\n        if(trace.visible !== true || !trace._module.colorbar) {\n            fullLayout._infolayer.select('.cb' + trace.uid).remove();\n        }\n    }\n\n    clearGlCanvases(gd);\n\n    // loop over the base plot modules present on graph\n    var basePlotModules = fullLayout._basePlotModules;\n    for(i = 0; i < basePlotModules.length; i++) {\n        basePlotModules[i].plot(gd);\n    }\n\n    exports.redrawReglTraces(gd);\n\n    // styling separate from drawing\n    Plots.style(gd);\n\n    // show annotations and shapes\n    Registry.getComponentMethod('shapes', 'draw')(gd);\n    Registry.getComponentMethod('annotations', 'draw')(gd);\n\n    // Mark the first render as complete\n    fullLayout._replotting = false;\n\n    return Plots.previousPromises(gd);\n};\n\n// Draw (or redraw) all regl-based traces in one go,\n// useful during drag and selection where buffers of targeted traces are updated,\n// but all traces need to be redrawn following clearGlCanvases.\n//\n// Note that _module.plot for regl trace does NOT draw things\n// on the canvas, they only update the buffers.\n// Drawing is perform here.\n//\n// TODO try adding per-subplot option using gl.SCISSOR_TEST for\n// non-overlaying, disjoint subplots.\n//\n// TODO try to include parcoords in here.\n// https://github.com/plotly/plotly.js/issues/3069\nexports.redrawReglTraces = function(gd) {\n    var fullLayout = gd._fullLayout;\n\n    if(fullLayout._has('regl')) {\n        var fullData = gd._fullData;\n        var cartesianIds = [];\n        var polarIds = [];\n        var i, sp;\n\n        if(fullLayout._hasOnlyLargeSploms) {\n            fullLayout._splomGrid.draw();\n        }\n\n        // N.B.\n        // - Loop over fullData (not _splomScenes) to preserve splom trace-to-trace ordering\n        // - Fill list if subplot ids (instead of fullLayout._subplots) to handle cases where all traces\n        //   of a given module are `visible !== true`\n        for(i = 0; i < fullData.length; i++) {\n            var trace = fullData[i];\n\n            if(trace.visible === true) {\n                if(trace.type === 'splom') {\n                    fullLayout._splomScenes[trace.uid].draw();\n                } else if(trace.type === 'scattergl') {\n                    Lib.pushUnique(cartesianIds, trace.xaxis + trace.yaxis);\n                } else if(trace.type === 'scatterpolargl') {\n                    Lib.pushUnique(polarIds, trace.subplot);\n                }\n            }\n        }\n\n        for(i = 0; i < cartesianIds.length; i++) {\n            sp = fullLayout._plots[cartesianIds[i]];\n            if(sp._scene) sp._scene.draw();\n        }\n\n        for(i = 0; i < polarIds.length; i++) {\n            sp = fullLayout[polarIds[i]]._subplot;\n            if(sp._scene) sp._scene.draw();\n        }\n    }\n};\n\nexports.doAutoRangeAndConstraints = function(gd) {\n    var axList = Axes.list(gd, '', true);\n\n    for(var i = 0; i < axList.length; i++) {\n        var ax = axList[i];\n        cleanAxisConstraints(gd, ax);\n        // in case margins changed, update scale\n        ax.setScale();\n        doAutoRange(gd, ax);\n    }\n\n    enforceAxisConstraints(gd);\n};\n\n// An initial paint must be completed before these components can be\n// correctly sized and the whole plot re-margined. fullLayout._replotting must\n// be set to false before these will work properly.\nexports.finalDraw = function(gd) {\n    Registry.getComponentMethod('shapes', 'draw')(gd);\n    Registry.getComponentMethod('images', 'draw')(gd);\n    Registry.getComponentMethod('annotations', 'draw')(gd);\n    // TODO: rangesliders really belong in marginPushers but they need to be\n    // drawn after data - can we at least get the margin pushing part separated\n    // out and done earlier?\n    Registry.getComponentMethod('rangeslider', 'draw')(gd);\n    // TODO: rangeselector only needs to be here (in addition to drawMarginPushers)\n    // because the margins need to be fully determined before we can call\n    // autorange and update axis ranges (which rangeselector needs to know which\n    // button is active). Can we break out its automargin step from its draw step?\n    Registry.getComponentMethod('rangeselector', 'draw')(gd);\n};\n\nexports.drawMarginPushers = function(gd) {\n    Registry.getComponentMethod('legend', 'draw')(gd);\n    Registry.getComponentMethod('rangeselector', 'draw')(gd);\n    Registry.getComponentMethod('sliders', 'draw')(gd);\n    Registry.getComponentMethod('updatemenus', 'draw')(gd);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
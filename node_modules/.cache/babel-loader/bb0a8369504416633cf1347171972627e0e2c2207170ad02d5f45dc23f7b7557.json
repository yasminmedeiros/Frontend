{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar BADNUM = require('../../constants/numerical').BADNUM;\nvar axisIds = require('../../plots/cartesian/axis_ids');\nvar Lib = require('../../lib');\nvar attributes = require('./attributes');\nvar BINDIRECTIONS = ['x', 'y'];\n\n// Handle bin attrs and relink auto-determined values so fullData is complete\n// does not have cross-trace coupling, but moved out here so we have axis types\n// and relinked trace._autoBin\nmodule.exports = function crossTraceDefaults(fullData, fullLayout) {\n  var i, j, traceOut, binDirection;\n  function coerce(attr) {\n    return Lib.coerce(traceOut._input, traceOut, attributes, attr);\n  }\n  for (i = 0; i < fullData.length; i++) {\n    traceOut = fullData[i];\n    var type = traceOut.type;\n    if (type !== 'histogram2d' && type !== 'histogram2dcontour') continue;\n    for (j = 0; j < BINDIRECTIONS.length; j++) {\n      binDirection = BINDIRECTIONS[j];\n      var binAttr = binDirection + 'bins';\n      var autoBins = (traceOut._autoBin || {})[binDirection] || {};\n      coerce(binAttr + '.start', autoBins.start);\n      coerce(binAttr + '.end', autoBins.end);\n      coerce(binAttr + '.size', autoBins.size);\n      cleanBins(traceOut, binDirection, fullLayout, autoBins);\n      if (!(traceOut[binAttr] || {}).size) coerce('nbins' + binDirection);\n    }\n  }\n};\nfunction cleanBins(trace, binDirection, fullLayout, autoBins) {\n  var ax = fullLayout[axisIds.id2name(trace[binDirection + 'axis'])];\n  var axType = ax.type;\n  var binAttr = binDirection + 'bins';\n  var bins = trace[binAttr];\n  var calendar = trace[binDirection + 'calendar'];\n  if (!bins) bins = trace[binAttr] = {};\n  var cleanBound = axType === 'date' ? function (v, dflt) {\n    return v || v === 0 ? Lib.cleanDate(v, BADNUM, calendar) : dflt;\n  } : function (v, dflt) {\n    return isNumeric(v) ? Number(v) : dflt;\n  };\n  bins.start = cleanBound(bins.start, autoBins.start);\n  bins.end = cleanBound(bins.end, autoBins.end);\n\n  // logic for bin size is very similar to dtick (cartesian/tick_value_defaults)\n  // but without the extra string options for log axes\n  // ie the only strings we accept are M<n> for months\n  var sizeDflt = autoBins.size;\n  var binSize = bins.size;\n  if (isNumeric(binSize)) {\n    bins.size = binSize > 0 ? Number(binSize) : sizeDflt;\n  } else if (typeof binSize !== 'string') {\n    bins.size = sizeDflt;\n  } else {\n    // date special case: \"M<n>\" gives bins every (integer) n months\n    var prefix = binSize.charAt(0);\n    var sizeNum = binSize.substr(1);\n    sizeNum = isNumeric(sizeNum) ? Number(sizeNum) : 0;\n    if (sizeNum <= 0 || !(axType === 'date' && prefix === 'M' && sizeNum === Math.round(sizeNum))) {\n      bins.size = sizeDflt;\n    }\n  }\n}","map":{"version":3,"names":["isNumeric","require","BADNUM","axisIds","Lib","attributes","BINDIRECTIONS","module","exports","crossTraceDefaults","fullData","fullLayout","i","j","traceOut","binDirection","coerce","attr","_input","length","type","binAttr","autoBins","_autoBin","start","end","size","cleanBins","trace","ax","id2name","axType","bins","calendar","cleanBound","v","dflt","cleanDate","Number","sizeDflt","binSize","prefix","charAt","sizeNum","substr","Math","round"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/histogram2d/cross_trace_defaults.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\n\nvar isNumeric = require('fast-isnumeric');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\nvar axisIds = require('../../plots/cartesian/axis_ids');\nvar Lib = require('../../lib');\n\nvar attributes = require('./attributes');\n\nvar BINDIRECTIONS = ['x', 'y'];\n\n// Handle bin attrs and relink auto-determined values so fullData is complete\n// does not have cross-trace coupling, but moved out here so we have axis types\n// and relinked trace._autoBin\nmodule.exports = function crossTraceDefaults(fullData, fullLayout) {\n    var i, j, traceOut, binDirection;\n\n    function coerce(attr) {\n        return Lib.coerce(traceOut._input, traceOut, attributes, attr);\n    }\n\n    for(i = 0; i < fullData.length; i++) {\n        traceOut = fullData[i];\n        var type = traceOut.type;\n        if(type !== 'histogram2d' && type !== 'histogram2dcontour') continue;\n\n        for(j = 0; j < BINDIRECTIONS.length; j++) {\n            binDirection = BINDIRECTIONS[j];\n            var binAttr = binDirection + 'bins';\n            var autoBins = (traceOut._autoBin || {})[binDirection] || {};\n            coerce(binAttr + '.start', autoBins.start);\n            coerce(binAttr + '.end', autoBins.end);\n            coerce(binAttr + '.size', autoBins.size);\n\n            cleanBins(traceOut, binDirection, fullLayout, autoBins);\n\n            if(!(traceOut[binAttr] || {}).size) coerce('nbins' + binDirection);\n        }\n    }\n};\n\nfunction cleanBins(trace, binDirection, fullLayout, autoBins) {\n    var ax = fullLayout[axisIds.id2name(trace[binDirection + 'axis'])];\n    var axType = ax.type;\n    var binAttr = binDirection + 'bins';\n    var bins = trace[binAttr];\n    var calendar = trace[binDirection + 'calendar'];\n\n    if(!bins) bins = trace[binAttr] = {};\n\n    var cleanBound = (axType === 'date') ?\n        function(v, dflt) { return (v || v === 0) ? Lib.cleanDate(v, BADNUM, calendar) : dflt; } :\n        function(v, dflt) { return isNumeric(v) ? Number(v) : dflt; };\n\n    bins.start = cleanBound(bins.start, autoBins.start);\n    bins.end = cleanBound(bins.end, autoBins.end);\n\n    // logic for bin size is very similar to dtick (cartesian/tick_value_defaults)\n    // but without the extra string options for log axes\n    // ie the only strings we accept are M<n> for months\n    var sizeDflt = autoBins.size;\n    var binSize = bins.size;\n\n    if(isNumeric(binSize)) {\n        bins.size = (binSize > 0) ? Number(binSize) : sizeDflt;\n    }\n    else if(typeof binSize !== 'string') {\n        bins.size = sizeDflt;\n    }\n    else {\n        // date special case: \"M<n>\" gives bins every (integer) n months\n        var prefix = binSize.charAt(0);\n        var sizeNum = binSize.substr(1);\n\n        sizeNum = isNumeric(sizeNum) ? Number(sizeNum) : 0;\n        if((sizeNum <= 0) || !(\n                axType === 'date' && prefix === 'M' && sizeNum === Math.round(sizeNum)\n            )) {\n            bins.size = sizeDflt;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
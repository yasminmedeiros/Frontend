{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar plotAttrs = require('../../plots/attributes');\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorAttributes = require('../../components/colorscale/attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\nvar scatterAttrs = require('../scatter/attributes');\nvar scatterLineAttrs = scatterAttrs.line;\nvar colorbarAttrs = require('../../components/colorbar/attributes');\nvar line = extendFlat({\n  editType: 'calc'\n}, colorAttributes('line', {\n  editType: 'calc'\n}), {\n  showscale: scatterLineAttrs.showscale,\n  colorbar: colorbarAttrs,\n  shape: {\n    valType: 'enumerated',\n    values: ['linear', 'hspline'],\n    dflt: 'linear',\n    role: 'info',\n    editType: 'plot',\n    description: ['Sets the shape of the paths.', 'If `linear`, paths are composed of straight lines.', 'If `hspline`, paths are composed of horizontal curved splines'].join(' ')\n  }\n});\nmodule.exports = {\n  domain: domainAttrs({\n    name: 'parcats',\n    trace: true,\n    editType: 'calc'\n  }),\n  hoverinfo: extendFlat({}, plotAttrs.hoverinfo, {\n    flags: ['count', 'probability'],\n    editType: 'plot',\n    arrayOk: false\n    // plotAttrs.hoverinfo description is appropriate\n  }),\n\n  hoveron: {\n    valType: 'enumerated',\n    values: ['category', 'color', 'dimension'],\n    dflt: 'category',\n    role: 'info',\n    editType: 'plot',\n    description: ['Sets the hover interaction mode for the parcats diagram.', 'If `category`, hover interaction take place per category.', 'If `color`, hover interactions take place per color per category.', 'If `dimension`, hover interactions take place across all categories per dimension.'].join(' ')\n  },\n  arrangement: {\n    valType: 'enumerated',\n    values: ['perpendicular', 'freeform', 'fixed'],\n    dflt: 'perpendicular',\n    role: 'style',\n    editType: 'plot',\n    description: ['Sets the drag interaction mode for categories and dimensions.', 'If `perpendicular`, the categories can only move along a line perpendicular to the paths.', 'If `freeform`, the categories can freely move on the plane.', 'If `fixed`, the categories and dimensions are stationary.'].join(' ')\n  },\n  bundlecolors: {\n    valType: 'boolean',\n    dflt: true,\n    role: 'info',\n    editType: 'plot',\n    description: 'Sort paths so that like colors are bundled together within each category.'\n  },\n  sortpaths: {\n    valType: 'enumerated',\n    values: ['forward', 'backward'],\n    dflt: 'forward',\n    role: 'info',\n    editType: 'plot',\n    description: ['Sets the path sorting algorithm.', 'If `forward`, sort paths based on dimension categories from left to right.', 'If `backward`, sort paths based on dimensions categories from right to left.'].join(' ')\n  },\n  labelfont: fontAttrs({\n    editType: 'calc',\n    description: 'Sets the font for the `dimension` labels.'\n  }),\n  tickfont: fontAttrs({\n    editType: 'calc',\n    description: 'Sets the font for the `category` labels.'\n  }),\n  dimensions: {\n    _isLinkedToArray: 'dimension',\n    label: {\n      valType: 'string',\n      role: 'info',\n      editType: 'calc',\n      description: 'The shown name of the dimension.'\n    },\n    categoryorder: {\n      valType: 'enumerated',\n      values: ['trace', 'category ascending', 'category descending', 'array'],\n      dflt: 'trace',\n      role: 'info',\n      editType: 'calc',\n      description: ['Specifies the ordering logic for the categories in the dimension.', 'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.', 'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by', 'the alphanumerical order of the category names.', 'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category', 'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to', 'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.'].join(' ')\n    },\n    categoryarray: {\n      valType: 'data_array',\n      role: 'info',\n      editType: 'calc',\n      description: ['Sets the order in which categories in this dimension appear.', 'Only has an effect if `categoryorder` is set to *array*.', 'Used with `categoryorder`.'].join(' ')\n    },\n    ticktext: {\n      valType: 'data_array',\n      role: 'info',\n      editType: 'calc',\n      description: ['Sets alternative tick labels for the categories in this dimension.', 'Only has an effect if `categoryorder` is set to *array*.', 'Should be an array the same length as `categoryarray`', 'Used with `categoryorder`.'].join(' ')\n    },\n    values: {\n      valType: 'data_array',\n      role: 'info',\n      dflt: [],\n      editType: 'calc',\n      description: ['Dimension values. `values[n]` represents the category value of the `n`th point in the dataset,', 'therefore the `values` vector for all dimensions must be the same (longer vectors', 'will be truncated).'].join(' ')\n    },\n    displayindex: {\n      valType: 'integer',\n      role: 'info',\n      editType: 'calc',\n      description: ['The display index of dimension, from left to right, zero indexed, defaults to dimension', 'index.'].join(' ')\n    },\n    editType: 'calc',\n    description: 'The dimensions (variables) of the parallel categories diagram.',\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      role: 'info',\n      editType: 'calc',\n      description: 'Shows the dimension when set to `true` (the default). Hides the dimension for `false`.'\n    }\n  },\n  line: line,\n  counts: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    arrayOk: true,\n    role: 'info',\n    editType: 'calc',\n    description: ['The number of observations represented by each state. Defaults to 1 so that each state represents', 'one observation'].join(' ')\n  },\n  // Hide unsupported top-level properties from plot-schema\n  customdata: undefined,\n  hoverlabel: undefined,\n  ids: undefined,\n  legendgroup: undefined,\n  opacity: undefined,\n  selectedpoints: undefined,\n  showlegend: undefined\n};","map":{"version":3,"names":["extendFlat","require","plotAttrs","fontAttrs","colorAttributes","domainAttrs","attributes","scatterAttrs","scatterLineAttrs","line","colorbarAttrs","editType","showscale","colorbar","shape","valType","values","dflt","role","description","join","module","exports","domain","name","trace","hoverinfo","flags","arrayOk","hoveron","arrangement","bundlecolors","sortpaths","labelfont","tickfont","dimensions","_isLinkedToArray","label","categoryorder","categoryarray","ticktext","displayindex","visible","counts","min","customdata","undefined","hoverlabel","ids","legendgroup","opacity","selectedpoints","showlegend"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/parcats/attributes.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar plotAttrs = require('../../plots/attributes');\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorAttributes = require('../../components/colorscale/attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\nvar scatterAttrs = require('../scatter/attributes');\nvar scatterLineAttrs = scatterAttrs.line;\nvar colorbarAttrs = require('../../components/colorbar/attributes');\n\nvar line = extendFlat({\n    editType: 'calc'\n}, colorAttributes('line', {editType: 'calc'}),\n    {\n        showscale: scatterLineAttrs.showscale,\n        colorbar: colorbarAttrs,\n        shape: {\n            valType: 'enumerated',\n            values: ['linear', 'hspline'],\n            dflt: 'linear',\n            role: 'info',\n            editType: 'plot',\n            description: [\n                'Sets the shape of the paths.',\n                'If `linear`, paths are composed of straight lines.',\n                'If `hspline`, paths are composed of horizontal curved splines'\n            ].join(' ')\n        }\n    });\n\nmodule.exports = {\n    domain: domainAttrs({name: 'parcats', trace: true, editType: 'calc'}),\n    hoverinfo: extendFlat({}, plotAttrs.hoverinfo, {\n        flags: ['count', 'probability'],\n        editType: 'plot',\n        arrayOk: false\n        // plotAttrs.hoverinfo description is appropriate\n    }),\n    hoveron: {\n        valType: 'enumerated',\n        values: ['category', 'color', 'dimension'],\n        dflt: 'category',\n        role: 'info',\n        editType: 'plot',\n        description: [\n            'Sets the hover interaction mode for the parcats diagram.',\n            'If `category`, hover interaction take place per category.',\n            'If `color`, hover interactions take place per color per category.',\n            'If `dimension`, hover interactions take place across all categories per dimension.'\n        ].join(' ')\n    },\n    arrangement: {\n        valType: 'enumerated',\n        values: ['perpendicular', 'freeform', 'fixed'],\n        dflt: 'perpendicular',\n        role: 'style',\n        editType: 'plot',\n        description: [\n            'Sets the drag interaction mode for categories and dimensions.',\n            'If `perpendicular`, the categories can only move along a line perpendicular to the paths.',\n            'If `freeform`, the categories can freely move on the plane.',\n            'If `fixed`, the categories and dimensions are stationary.'\n        ].join(' ')\n    },\n    bundlecolors: {\n        valType: 'boolean',\n        dflt: true,\n        role: 'info',\n        editType: 'plot',\n        description: 'Sort paths so that like colors are bundled together within each category.'\n    },\n    sortpaths: {\n        valType: 'enumerated',\n        values: ['forward', 'backward'],\n        dflt: 'forward',\n        role: 'info',\n        editType: 'plot',\n        description: [\n            'Sets the path sorting algorithm.',\n            'If `forward`, sort paths based on dimension categories from left to right.',\n            'If `backward`, sort paths based on dimensions categories from right to left.'\n        ].join(' ')\n    },\n    labelfont: fontAttrs({\n        editType: 'calc',\n        description: 'Sets the font for the `dimension` labels.'\n    }),\n\n    tickfont: fontAttrs({\n        editType: 'calc',\n        description: 'Sets the font for the `category` labels.'\n    }),\n\n    dimensions: {\n        _isLinkedToArray: 'dimension',\n        label: {\n            valType: 'string',\n            role: 'info',\n            editType: 'calc',\n            description: 'The shown name of the dimension.'\n        },\n        categoryorder: {\n            valType: 'enumerated',\n            values: [\n                'trace', 'category ascending', 'category descending', 'array'\n            ],\n            dflt: 'trace',\n            role: 'info',\n            editType: 'calc',\n            description: [\n                'Specifies the ordering logic for the categories in the dimension.',\n                'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.',\n                'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by',\n                'the alphanumerical order of the category names.',\n                'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category',\n                'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to',\n                'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.'\n            ].join(' ')\n        },\n        categoryarray: {\n            valType: 'data_array',\n            role: 'info',\n            editType: 'calc',\n            description: [\n                'Sets the order in which categories in this dimension appear.',\n                'Only has an effect if `categoryorder` is set to *array*.',\n                'Used with `categoryorder`.'\n            ].join(' ')\n        },\n        ticktext: {\n            valType: 'data_array',\n            role: 'info',\n            editType: 'calc',\n            description: [\n                'Sets alternative tick labels for the categories in this dimension.',\n                'Only has an effect if `categoryorder` is set to *array*.',\n                'Should be an array the same length as `categoryarray`',\n                'Used with `categoryorder`.'\n            ].join(' ')\n        },\n        values: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            editType: 'calc',\n            description: [\n                'Dimension values. `values[n]` represents the category value of the `n`th point in the dataset,',\n                'therefore the `values` vector for all dimensions must be the same (longer vectors',\n                'will be truncated).'\n            ].join(' ')\n        },\n        displayindex: {\n            valType: 'integer',\n            role: 'info',\n            editType: 'calc',\n            description: [\n                'The display index of dimension, from left to right, zero indexed, defaults to dimension',\n                'index.'\n            ].join(' ')\n        },\n        editType: 'calc',\n        description: 'The dimensions (variables) of the parallel categories diagram.',\n        visible: {\n            valType: 'boolean',\n            dflt: true,\n            role: 'info',\n            editType: 'calc',\n            description: 'Shows the dimension when set to `true` (the default). Hides the dimension for `false`.'\n        }\n    },\n\n    line: line,\n    counts: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        arrayOk: true,\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'The number of observations represented by each state. Defaults to 1 so that each state represents',\n            'one observation'\n        ].join(' ')\n    },\n\n    // Hide unsupported top-level properties from plot-schema\n    customdata: undefined,\n    hoverlabel: undefined,\n    ids: undefined,\n    legendgroup: undefined,\n    opacity: undefined,\n    selectedpoints: undefined,\n    showlegend: undefined\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,UAAU,GAAGC,OAAO,CAAC,kBAAkB,CAAC,CAACD,UAAU;AACvD,IAAIE,SAAS,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AACjD,IAAIE,SAAS,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AACtD,IAAIG,eAAe,GAAGH,OAAO,CAAC,wCAAwC,CAAC;AACvE,IAAII,WAAW,GAAGJ,OAAO,CAAC,oBAAoB,CAAC,CAACK,UAAU;AAC1D,IAAIC,YAAY,GAAGN,OAAO,CAAC,uBAAuB,CAAC;AACnD,IAAIO,gBAAgB,GAAGD,YAAY,CAACE,IAAI;AACxC,IAAIC,aAAa,GAAGT,OAAO,CAAC,sCAAsC,CAAC;AAEnE,IAAIQ,IAAI,GAAGT,UAAU,CAAC;EAClBW,QAAQ,EAAE;AACd,CAAC,EAAEP,eAAe,CAAC,MAAM,EAAE;EAACO,QAAQ,EAAE;AAAM,CAAC,CAAC,EAC1C;EACIC,SAAS,EAAEJ,gBAAgB,CAACI,SAAS;EACrCC,QAAQ,EAAEH,aAAa;EACvBI,KAAK,EAAE;IACHC,OAAO,EAAE,YAAY;IACrBC,MAAM,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC;IAC7BC,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,MAAM;IACZP,QAAQ,EAAE,MAAM;IAChBQ,WAAW,EAAE,CACT,8BAA8B,EAC9B,oDAAoD,EACpD,+DAA+D,CAClE,CAACC,IAAI,CAAC,GAAG;EACd;AACJ,CAAC,CAAC;AAENC,MAAM,CAACC,OAAO,GAAG;EACbC,MAAM,EAAElB,WAAW,CAAC;IAACmB,IAAI,EAAE,SAAS;IAAEC,KAAK,EAAE,IAAI;IAAEd,QAAQ,EAAE;EAAM,CAAC,CAAC;EACrEe,SAAS,EAAE1B,UAAU,CAAC,CAAC,CAAC,EAAEE,SAAS,CAACwB,SAAS,EAAE;IAC3CC,KAAK,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC;IAC/BhB,QAAQ,EAAE,MAAM;IAChBiB,OAAO,EAAE;IACT;EACJ,CAAC,CAAC;;EACFC,OAAO,EAAE;IACLd,OAAO,EAAE,YAAY;IACrBC,MAAM,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,WAAW,CAAC;IAC1CC,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,MAAM;IACZP,QAAQ,EAAE,MAAM;IAChBQ,WAAW,EAAE,CACT,0DAA0D,EAC1D,2DAA2D,EAC3D,mEAAmE,EACnE,oFAAoF,CACvF,CAACC,IAAI,CAAC,GAAG;EACd,CAAC;EACDU,WAAW,EAAE;IACTf,OAAO,EAAE,YAAY;IACrBC,MAAM,EAAE,CAAC,eAAe,EAAE,UAAU,EAAE,OAAO,CAAC;IAC9CC,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE,OAAO;IACbP,QAAQ,EAAE,MAAM;IAChBQ,WAAW,EAAE,CACT,+DAA+D,EAC/D,2FAA2F,EAC3F,6DAA6D,EAC7D,2DAA2D,CAC9D,CAACC,IAAI,CAAC,GAAG;EACd,CAAC;EACDW,YAAY,EAAE;IACVhB,OAAO,EAAE,SAAS;IAClBE,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,MAAM;IACZP,QAAQ,EAAE,MAAM;IAChBQ,WAAW,EAAE;EACjB,CAAC;EACDa,SAAS,EAAE;IACPjB,OAAO,EAAE,YAAY;IACrBC,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC;IAC/BC,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,MAAM;IACZP,QAAQ,EAAE,MAAM;IAChBQ,WAAW,EAAE,CACT,kCAAkC,EAClC,4EAA4E,EAC5E,8EAA8E,CACjF,CAACC,IAAI,CAAC,GAAG;EACd,CAAC;EACDa,SAAS,EAAE9B,SAAS,CAAC;IACjBQ,QAAQ,EAAE,MAAM;IAChBQ,WAAW,EAAE;EACjB,CAAC,CAAC;EAEFe,QAAQ,EAAE/B,SAAS,CAAC;IAChBQ,QAAQ,EAAE,MAAM;IAChBQ,WAAW,EAAE;EACjB,CAAC,CAAC;EAEFgB,UAAU,EAAE;IACRC,gBAAgB,EAAE,WAAW;IAC7BC,KAAK,EAAE;MACHtB,OAAO,EAAE,QAAQ;MACjBG,IAAI,EAAE,MAAM;MACZP,QAAQ,EAAE,MAAM;MAChBQ,WAAW,EAAE;IACjB,CAAC;IACDmB,aAAa,EAAE;MACXvB,OAAO,EAAE,YAAY;MACrBC,MAAM,EAAE,CACJ,OAAO,EAAE,oBAAoB,EAAE,qBAAqB,EAAE,OAAO,CAChE;MACDC,IAAI,EAAE,OAAO;MACbC,IAAI,EAAE,MAAM;MACZP,QAAQ,EAAE,MAAM;MAChBQ,WAAW,EAAE,CACT,mEAAmE,EACnE,kGAAkG,EAClG,uGAAuG,EACvG,iDAAiD,EACjD,yGAAyG,EACzG,yGAAyG,EACzG,6FAA6F,CAChG,CAACC,IAAI,CAAC,GAAG;IACd,CAAC;IACDmB,aAAa,EAAE;MACXxB,OAAO,EAAE,YAAY;MACrBG,IAAI,EAAE,MAAM;MACZP,QAAQ,EAAE,MAAM;MAChBQ,WAAW,EAAE,CACT,8DAA8D,EAC9D,0DAA0D,EAC1D,4BAA4B,CAC/B,CAACC,IAAI,CAAC,GAAG;IACd,CAAC;IACDoB,QAAQ,EAAE;MACNzB,OAAO,EAAE,YAAY;MACrBG,IAAI,EAAE,MAAM;MACZP,QAAQ,EAAE,MAAM;MAChBQ,WAAW,EAAE,CACT,oEAAoE,EACpE,0DAA0D,EAC1D,uDAAuD,EACvD,4BAA4B,CAC/B,CAACC,IAAI,CAAC,GAAG;IACd,CAAC;IACDJ,MAAM,EAAE;MACJD,OAAO,EAAE,YAAY;MACrBG,IAAI,EAAE,MAAM;MACZD,IAAI,EAAE,EAAE;MACRN,QAAQ,EAAE,MAAM;MAChBQ,WAAW,EAAE,CACT,gGAAgG,EAChG,mFAAmF,EACnF,qBAAqB,CACxB,CAACC,IAAI,CAAC,GAAG;IACd,CAAC;IACDqB,YAAY,EAAE;MACV1B,OAAO,EAAE,SAAS;MAClBG,IAAI,EAAE,MAAM;MACZP,QAAQ,EAAE,MAAM;MAChBQ,WAAW,EAAE,CACT,yFAAyF,EACzF,QAAQ,CACX,CAACC,IAAI,CAAC,GAAG;IACd,CAAC;IACDT,QAAQ,EAAE,MAAM;IAChBQ,WAAW,EAAE,gEAAgE;IAC7EuB,OAAO,EAAE;MACL3B,OAAO,EAAE,SAAS;MAClBE,IAAI,EAAE,IAAI;MACVC,IAAI,EAAE,MAAM;MACZP,QAAQ,EAAE,MAAM;MAChBQ,WAAW,EAAE;IACjB;EACJ,CAAC;EAEDV,IAAI,EAAEA,IAAI;EACVkC,MAAM,EAAE;IACJ5B,OAAO,EAAE,QAAQ;IACjB6B,GAAG,EAAE,CAAC;IACN3B,IAAI,EAAE,CAAC;IACPW,OAAO,EAAE,IAAI;IACbV,IAAI,EAAE,MAAM;IACZP,QAAQ,EAAE,MAAM;IAChBQ,WAAW,EAAE,CACT,mGAAmG,EACnG,iBAAiB,CACpB,CAACC,IAAI,CAAC,GAAG;EACd,CAAC;EAED;EACAyB,UAAU,EAAEC,SAAS;EACrBC,UAAU,EAAED,SAAS;EACrBE,GAAG,EAAEF,SAAS;EACdG,WAAW,EAAEH,SAAS;EACtBI,OAAO,EAAEJ,SAAS;EAClBK,cAAc,EAAEL,SAAS;EACzBM,UAAU,EAAEN;AAChB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
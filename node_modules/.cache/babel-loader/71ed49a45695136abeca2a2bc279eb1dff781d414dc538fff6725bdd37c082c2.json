{"ast":null,"code":"\"use strict\";\n\nvar vectorizeText = require(\"vectorize-text\");\nmodule.exports = getGlyph;\nvar GLYPH_CACHE = {};\nfunction getGlyph(symbol, font, pixelRatio) {\n  var fontCache = GLYPH_CACHE[font];\n  if (!fontCache) {\n    fontCache = GLYPH_CACHE[font] = {};\n  }\n  if (symbol in fontCache) {\n    return fontCache[symbol];\n  }\n  var config = {\n    textAlign: \"center\",\n    textBaseline: \"middle\",\n    lineHeight: 1.0,\n    font: font,\n    lineSpacing: 1.25,\n    styletags: {\n      breaklines: true,\n      bolds: true,\n      italics: true,\n      subscripts: true,\n      superscripts: true\n    }\n  };\n\n  //Get line and triangle meshes for glyph\n  config.triangles = true;\n  var triSymbol = vectorizeText(symbol, config);\n  config.triangles = false;\n  var lineSymbol = vectorizeText(symbol, config);\n  var i, j;\n  if (pixelRatio && pixelRatio !== 1) {\n    for (i = 0; i < triSymbol.positions.length; ++i) {\n      for (j = 0; j < triSymbol.positions[i].length; ++j) {\n        triSymbol.positions[i][j] /= pixelRatio;\n      }\n    }\n    for (i = 0; i < lineSymbol.positions.length; ++i) {\n      for (j = 0; j < lineSymbol.positions[i].length; ++j) {\n        lineSymbol.positions[i][j] /= pixelRatio;\n      }\n    }\n  }\n\n  //Calculate bounding box\n  var bounds = [[Infinity, Infinity], [-Infinity, -Infinity]];\n  var n = lineSymbol.positions.length;\n  for (i = 0; i < n; ++i) {\n    var p = lineSymbol.positions[i];\n    for (j = 0; j < 2; ++j) {\n      bounds[0][j] = Math.min(bounds[0][j], p[j]);\n      bounds[1][j] = Math.max(bounds[1][j], p[j]);\n    }\n  }\n\n  //Save cached symbol\n  return fontCache[symbol] = [triSymbol, lineSymbol, bounds];\n}","map":{"version":3,"names":["vectorizeText","require","module","exports","getGlyph","GLYPH_CACHE","symbol","font","pixelRatio","fontCache","config","textAlign","textBaseline","lineHeight","lineSpacing","styletags","breaklines","bolds","italics","subscripts","superscripts","triangles","triSymbol","lineSymbol","i","j","positions","length","bounds","Infinity","n","p","Math","min","max"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/gl-scatter3d/lib/glyphs.js"],"sourcesContent":["\"use strict\"\n\nvar vectorizeText = require(\"vectorize-text\")\n\nmodule.exports = getGlyph\n\nvar GLYPH_CACHE = {}\n\nfunction getGlyph(symbol, font, pixelRatio) {\n  var fontCache = GLYPH_CACHE[font]\n  if(!fontCache) {\n    fontCache = GLYPH_CACHE[font] = {}\n  }\n  if(symbol in fontCache) {\n    return fontCache[symbol]\n  }\n\n  var config = {\n    textAlign: \"center\",\n    textBaseline: \"middle\",\n    lineHeight: 1.0,\n    font: font,\n    lineSpacing: 1.25,\n    styletags: {\n      breaklines:true,\n      bolds: true,\n      italics: true,\n      subscripts:true,\n      superscripts:true\n    }\n  }\n\n  //Get line and triangle meshes for glyph\n  config.triangles = true\n  var triSymbol = vectorizeText(symbol, config)\n  config.triangles = false\n  var lineSymbol = vectorizeText(symbol, config)\n\n  var i, j\n\n  if(pixelRatio && pixelRatio !== 1) {\n    for(i = 0; i < triSymbol.positions.length; ++i){\n      for(j = 0; j < triSymbol.positions[i].length; ++j){\n        triSymbol.positions[i][j] /= pixelRatio;\n      }\n    }\n\n    for(i = 0; i < lineSymbol.positions.length; ++i){\n      for(j = 0; j < lineSymbol.positions[i].length; ++j){\n        lineSymbol.positions[i][j] /= pixelRatio;\n      }\n    }\n  }\n\n  //Calculate bounding box\n  var bounds = [[Infinity,Infinity], [-Infinity,-Infinity]]\n  var n = lineSymbol.positions.length\n  for(i = 0; i < n; ++i) {\n    var p = lineSymbol.positions[i]\n    for(j=0; j<2; ++j) {\n      bounds[0][j] = Math.min(bounds[0][j], p[j])\n      bounds[1][j] = Math.max(bounds[1][j], p[j])\n    }\n  }\n\n  //Save cached symbol\n  return fontCache[symbol] = [triSymbol, lineSymbol, bounds]\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\"use restrict\";\n\nvar bits = require(\"bit-twiddle\"),\n  UnionFind = require(\"union-find\");\n\n//Returns the dimension of a cell complex\nfunction dimension(cells) {\n  var d = 0,\n    max = Math.max;\n  for (var i = 0, il = cells.length; i < il; ++i) {\n    d = max(d, cells[i].length);\n  }\n  return d - 1;\n}\nexports.dimension = dimension;\n\n//Counts the number of vertices in faces\nfunction countVertices(cells) {\n  var vc = -1,\n    max = Math.max;\n  for (var i = 0, il = cells.length; i < il; ++i) {\n    var c = cells[i];\n    for (var j = 0, jl = c.length; j < jl; ++j) {\n      vc = max(vc, c[j]);\n    }\n  }\n  return vc + 1;\n}\nexports.countVertices = countVertices;\n\n//Returns a deep copy of cells\nfunction cloneCells(cells) {\n  var ncells = new Array(cells.length);\n  for (var i = 0, il = cells.length; i < il; ++i) {\n    ncells[i] = cells[i].slice(0);\n  }\n  return ncells;\n}\nexports.cloneCells = cloneCells;\n\n//Ranks a pair of cells up to permutation\nfunction compareCells(a, b) {\n  var n = a.length,\n    t = a.length - b.length,\n    min = Math.min;\n  if (t) {\n    return t;\n  }\n  switch (n) {\n    case 0:\n      return 0;\n    case 1:\n      return a[0] - b[0];\n    case 2:\n      var d = a[0] + a[1] - b[0] - b[1];\n      if (d) {\n        return d;\n      }\n      return min(a[0], a[1]) - min(b[0], b[1]);\n    case 3:\n      var l1 = a[0] + a[1],\n        m1 = b[0] + b[1];\n      d = l1 + a[2] - (m1 + b[2]);\n      if (d) {\n        return d;\n      }\n      var l0 = min(a[0], a[1]),\n        m0 = min(b[0], b[1]),\n        d = min(l0, a[2]) - min(m0, b[2]);\n      if (d) {\n        return d;\n      }\n      return min(l0 + a[2], l1) - min(m0 + b[2], m1);\n\n    //TODO: Maybe optimize n=4 as well?\n\n    default:\n      var as = a.slice(0);\n      as.sort();\n      var bs = b.slice(0);\n      bs.sort();\n      for (var i = 0; i < n; ++i) {\n        t = as[i] - bs[i];\n        if (t) {\n          return t;\n        }\n      }\n      return 0;\n  }\n}\nexports.compareCells = compareCells;\nfunction compareZipped(a, b) {\n  return compareCells(a[0], b[0]);\n}\n\n//Puts a cell complex into normal order for the purposes of findCell queries\nfunction normalize(cells, attr) {\n  if (attr) {\n    var len = cells.length;\n    var zipped = new Array(len);\n    for (var i = 0; i < len; ++i) {\n      zipped[i] = [cells[i], attr[i]];\n    }\n    zipped.sort(compareZipped);\n    for (var i = 0; i < len; ++i) {\n      cells[i] = zipped[i][0];\n      attr[i] = zipped[i][1];\n    }\n    return cells;\n  } else {\n    cells.sort(compareCells);\n    return cells;\n  }\n}\nexports.normalize = normalize;\n\n//Removes all duplicate cells in the complex\nfunction unique(cells) {\n  if (cells.length === 0) {\n    return [];\n  }\n  var ptr = 1,\n    len = cells.length;\n  for (var i = 1; i < len; ++i) {\n    var a = cells[i];\n    if (compareCells(a, cells[i - 1])) {\n      if (i === ptr) {\n        ptr++;\n        continue;\n      }\n      cells[ptr++] = a;\n    }\n  }\n  cells.length = ptr;\n  return cells;\n}\nexports.unique = unique;\n\n//Finds a cell in a normalized cell complex\nfunction findCell(cells, c) {\n  var lo = 0,\n    hi = cells.length - 1,\n    r = -1;\n  while (lo <= hi) {\n    var mid = lo + hi >> 1,\n      s = compareCells(cells[mid], c);\n    if (s <= 0) {\n      if (s === 0) {\n        r = mid;\n      }\n      lo = mid + 1;\n    } else if (s > 0) {\n      hi = mid - 1;\n    }\n  }\n  return r;\n}\nexports.findCell = findCell;\n\n//Builds an index for an n-cell.  This is more general than dual, but less efficient\nfunction incidence(from_cells, to_cells) {\n  var index = new Array(from_cells.length);\n  for (var i = 0, il = index.length; i < il; ++i) {\n    index[i] = [];\n  }\n  var b = [];\n  for (var i = 0, n = to_cells.length; i < n; ++i) {\n    var c = to_cells[i];\n    var cl = c.length;\n    for (var k = 1, kn = 1 << cl; k < kn; ++k) {\n      b.length = bits.popCount(k);\n      var l = 0;\n      for (var j = 0; j < cl; ++j) {\n        if (k & 1 << j) {\n          b[l++] = c[j];\n        }\n      }\n      var idx = findCell(from_cells, b);\n      if (idx < 0) {\n        continue;\n      }\n      while (true) {\n        index[idx++].push(i);\n        if (idx >= from_cells.length || compareCells(from_cells[idx], b) !== 0) {\n          break;\n        }\n      }\n    }\n  }\n  return index;\n}\nexports.incidence = incidence;\n\n//Computes the dual of the mesh.  This is basically an optimized version of buildIndex for the situation where from_cells is just the list of vertices\nfunction dual(cells, vertex_count) {\n  if (!vertex_count) {\n    return incidence(unique(skeleton(cells, 0)), cells, 0);\n  }\n  var res = new Array(vertex_count);\n  for (var i = 0; i < vertex_count; ++i) {\n    res[i] = [];\n  }\n  for (var i = 0, len = cells.length; i < len; ++i) {\n    var c = cells[i];\n    for (var j = 0, cl = c.length; j < cl; ++j) {\n      res[c[j]].push(i);\n    }\n  }\n  return res;\n}\nexports.dual = dual;\n\n//Enumerates all cells in the complex\nfunction explode(cells) {\n  var result = [];\n  for (var i = 0, il = cells.length; i < il; ++i) {\n    var c = cells[i],\n      cl = c.length | 0;\n    for (var j = 1, jl = 1 << cl; j < jl; ++j) {\n      var b = [];\n      for (var k = 0; k < cl; ++k) {\n        if (j >>> k & 1) {\n          b.push(c[k]);\n        }\n      }\n      result.push(b);\n    }\n  }\n  return normalize(result);\n}\nexports.explode = explode;\n\n//Enumerates all of the n-cells of a cell complex\nfunction skeleton(cells, n) {\n  if (n < 0) {\n    return [];\n  }\n  var result = [],\n    k0 = (1 << n + 1) - 1;\n  for (var i = 0; i < cells.length; ++i) {\n    var c = cells[i];\n    for (var k = k0; k < 1 << c.length; k = bits.nextCombination(k)) {\n      var b = new Array(n + 1),\n        l = 0;\n      for (var j = 0; j < c.length; ++j) {\n        if (k & 1 << j) {\n          b[l++] = c[j];\n        }\n      }\n      result.push(b);\n    }\n  }\n  return normalize(result);\n}\nexports.skeleton = skeleton;\n\n//Computes the boundary of all cells, does not remove duplicates\nfunction boundary(cells) {\n  var res = [];\n  for (var i = 0, il = cells.length; i < il; ++i) {\n    var c = cells[i];\n    for (var j = 0, cl = c.length; j < cl; ++j) {\n      var b = new Array(c.length - 1);\n      for (var k = 0, l = 0; k < cl; ++k) {\n        if (k !== j) {\n          b[l++] = c[k];\n        }\n      }\n      res.push(b);\n    }\n  }\n  return normalize(res);\n}\nexports.boundary = boundary;\n\n//Computes connected components for a dense cell complex\nfunction connectedComponents_dense(cells, vertex_count) {\n  var labels = new UnionFind(vertex_count);\n  for (var i = 0; i < cells.length; ++i) {\n    var c = cells[i];\n    for (var j = 0; j < c.length; ++j) {\n      for (var k = j + 1; k < c.length; ++k) {\n        labels.link(c[j], c[k]);\n      }\n    }\n  }\n  var components = [],\n    component_labels = labels.ranks;\n  for (var i = 0; i < component_labels.length; ++i) {\n    component_labels[i] = -1;\n  }\n  for (var i = 0; i < cells.length; ++i) {\n    var l = labels.find(cells[i][0]);\n    if (component_labels[l] < 0) {\n      component_labels[l] = components.length;\n      components.push([cells[i].slice(0)]);\n    } else {\n      components[component_labels[l]].push(cells[i].slice(0));\n    }\n  }\n  return components;\n}\n\n//Computes connected components for a sparse graph\nfunction connectedComponents_sparse(cells) {\n  var vertices = unique(normalize(skeleton(cells, 0))),\n    labels = new UnionFind(vertices.length);\n  for (var i = 0; i < cells.length; ++i) {\n    var c = cells[i];\n    for (var j = 0; j < c.length; ++j) {\n      var vj = findCell(vertices, [c[j]]);\n      for (var k = j + 1; k < c.length; ++k) {\n        labels.link(vj, findCell(vertices, [c[k]]));\n      }\n    }\n  }\n  var components = [],\n    component_labels = labels.ranks;\n  for (var i = 0; i < component_labels.length; ++i) {\n    component_labels[i] = -1;\n  }\n  for (var i = 0; i < cells.length; ++i) {\n    var l = labels.find(findCell(vertices, [cells[i][0]]));\n    if (component_labels[l] < 0) {\n      component_labels[l] = components.length;\n      components.push([cells[i].slice(0)]);\n    } else {\n      components[component_labels[l]].push(cells[i].slice(0));\n    }\n  }\n  return components;\n}\n\n//Computes connected components for a cell complex\nfunction connectedComponents(cells, vertex_count) {\n  if (vertex_count) {\n    return connectedComponents_dense(cells, vertex_count);\n  }\n  return connectedComponents_sparse(cells);\n}\nexports.connectedComponents = connectedComponents;","map":{"version":3,"names":["bits","require","UnionFind","dimension","cells","d","max","Math","i","il","length","exports","countVertices","vc","c","j","jl","cloneCells","ncells","Array","slice","compareCells","a","b","n","t","min","l1","m1","l0","m0","as","sort","bs","compareZipped","normalize","attr","len","zipped","unique","ptr","findCell","lo","hi","r","mid","s","incidence","from_cells","to_cells","index","cl","k","kn","popCount","l","idx","push","dual","vertex_count","skeleton","res","explode","result","k0","nextCombination","boundary","connectedComponents_dense","labels","link","components","component_labels","ranks","find","connectedComponents_sparse","vertices","vj","connectedComponents"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/simplify-planar-graph/node_modules/simplicial-complex/topology.js"],"sourcesContent":["\"use strict\"; \"use restrict\";\n\nvar bits      = require(\"bit-twiddle\")\n  , UnionFind = require(\"union-find\")\n\n//Returns the dimension of a cell complex\nfunction dimension(cells) {\n  var d = 0\n    , max = Math.max\n  for(var i=0, il=cells.length; i<il; ++i) {\n    d = max(d, cells[i].length)\n  }\n  return d-1\n}\nexports.dimension = dimension\n\n//Counts the number of vertices in faces\nfunction countVertices(cells) {\n  var vc = -1\n    , max = Math.max\n  for(var i=0, il=cells.length; i<il; ++i) {\n    var c = cells[i]\n    for(var j=0, jl=c.length; j<jl; ++j) {\n      vc = max(vc, c[j])\n    }\n  }\n  return vc+1\n}\nexports.countVertices = countVertices\n\n//Returns a deep copy of cells\nfunction cloneCells(cells) {\n  var ncells = new Array(cells.length)\n  for(var i=0, il=cells.length; i<il; ++i) {\n    ncells[i] = cells[i].slice(0)\n  }\n  return ncells\n}\nexports.cloneCells = cloneCells\n\n//Ranks a pair of cells up to permutation\nfunction compareCells(a, b) {\n  var n = a.length\n    , t = a.length - b.length\n    , min = Math.min\n  if(t) {\n    return t\n  }\n  switch(n) {\n    case 0:\n      return 0;\n    case 1:\n      return a[0] - b[0];\n    case 2:\n      var d = a[0]+a[1]-b[0]-b[1]\n      if(d) {\n        return d\n      }\n      return min(a[0],a[1]) - min(b[0],b[1])\n    case 3:\n      var l1 = a[0]+a[1]\n        , m1 = b[0]+b[1]\n      d = l1+a[2] - (m1+b[2])\n      if(d) {\n        return d\n      }\n      var l0 = min(a[0], a[1])\n        , m0 = min(b[0], b[1])\n        , d  = min(l0, a[2]) - min(m0, b[2])\n      if(d) {\n        return d\n      }\n      return min(l0+a[2], l1) - min(m0+b[2], m1)\n    \n    //TODO: Maybe optimize n=4 as well?\n    \n    default:\n      var as = a.slice(0)\n      as.sort()\n      var bs = b.slice(0)\n      bs.sort()\n      for(var i=0; i<n; ++i) {\n        t = as[i] - bs[i]\n        if(t) {\n          return t\n        }\n      }\n      return 0\n  }\n}\nexports.compareCells = compareCells\n\nfunction compareZipped(a, b) {\n  return compareCells(a[0], b[0])\n}\n\n//Puts a cell complex into normal order for the purposes of findCell queries\nfunction normalize(cells, attr) {\n  if(attr) {\n    var len = cells.length\n    var zipped = new Array(len)\n    for(var i=0; i<len; ++i) {\n      zipped[i] = [cells[i], attr[i]]\n    }\n    zipped.sort(compareZipped)\n    for(var i=0; i<len; ++i) {\n      cells[i] = zipped[i][0]\n      attr[i] = zipped[i][1]\n    }\n    return cells\n  } else {\n    cells.sort(compareCells)\n    return cells\n  }\n}\nexports.normalize = normalize\n\n//Removes all duplicate cells in the complex\nfunction unique(cells) {\n  if(cells.length === 0) {\n    return []\n  }\n  var ptr = 1\n    , len = cells.length\n  for(var i=1; i<len; ++i) {\n    var a = cells[i]\n    if(compareCells(a, cells[i-1])) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      cells[ptr++] = a\n    }\n  }\n  cells.length = ptr\n  return cells\n}\nexports.unique = unique;\n\n//Finds a cell in a normalized cell complex\nfunction findCell(cells, c) {\n  var lo = 0\n    , hi = cells.length-1\n    , r  = -1\n  while (lo <= hi) {\n    var mid = (lo + hi) >> 1\n      , s   = compareCells(cells[mid], c)\n    if(s <= 0) {\n      if(s === 0) {\n        r = mid\n      }\n      lo = mid + 1\n    } else if(s > 0) {\n      hi = mid - 1\n    }\n  }\n  return r\n}\nexports.findCell = findCell;\n\n//Builds an index for an n-cell.  This is more general than dual, but less efficient\nfunction incidence(from_cells, to_cells) {\n  var index = new Array(from_cells.length)\n  for(var i=0, il=index.length; i<il; ++i) {\n    index[i] = []\n  }\n  var b = []\n  for(var i=0, n=to_cells.length; i<n; ++i) {\n    var c = to_cells[i]\n    var cl = c.length\n    for(var k=1, kn=(1<<cl); k<kn; ++k) {\n      b.length = bits.popCount(k)\n      var l = 0\n      for(var j=0; j<cl; ++j) {\n        if(k & (1<<j)) {\n          b[l++] = c[j]\n        }\n      }\n      var idx=findCell(from_cells, b)\n      if(idx < 0) {\n        continue\n      }\n      while(true) {\n        index[idx++].push(i)\n        if(idx >= from_cells.length || compareCells(from_cells[idx], b) !== 0) {\n          break\n        }\n      }\n    }\n  }\n  return index\n}\nexports.incidence = incidence\n\n//Computes the dual of the mesh.  This is basically an optimized version of buildIndex for the situation where from_cells is just the list of vertices\nfunction dual(cells, vertex_count) {\n  if(!vertex_count) {\n    return incidence(unique(skeleton(cells, 0)), cells, 0)\n  }\n  var res = new Array(vertex_count)\n  for(var i=0; i<vertex_count; ++i) {\n    res[i] = []\n  }\n  for(var i=0, len=cells.length; i<len; ++i) {\n    var c = cells[i]\n    for(var j=0, cl=c.length; j<cl; ++j) {\n      res[c[j]].push(i)\n    }\n  }\n  return res\n}\nexports.dual = dual\n\n//Enumerates all cells in the complex\nfunction explode(cells) {\n  var result = []\n  for(var i=0, il=cells.length; i<il; ++i) {\n    var c = cells[i]\n      , cl = c.length|0\n    for(var j=1, jl=(1<<cl); j<jl; ++j) {\n      var b = []\n      for(var k=0; k<cl; ++k) {\n        if((j >>> k) & 1) {\n          b.push(c[k])\n        }\n      }\n      result.push(b)\n    }\n  }\n  return normalize(result)\n}\nexports.explode = explode\n\n//Enumerates all of the n-cells of a cell complex\nfunction skeleton(cells, n) {\n  if(n < 0) {\n    return []\n  }\n  var result = []\n    , k0     = (1<<(n+1))-1\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var k=k0; k<(1<<c.length); k=bits.nextCombination(k)) {\n      var b = new Array(n+1)\n        , l = 0\n      for(var j=0; j<c.length; ++j) {\n        if(k & (1<<j)) {\n          b[l++] = c[j]\n        }\n      }\n      result.push(b)\n    }\n  }\n  return normalize(result)\n}\nexports.skeleton = skeleton;\n\n//Computes the boundary of all cells, does not remove duplicates\nfunction boundary(cells) {\n  var res = []\n  for(var i=0,il=cells.length; i<il; ++i) {\n    var c = cells[i]\n    for(var j=0,cl=c.length; j<cl; ++j) {\n      var b = new Array(c.length-1)\n      for(var k=0, l=0; k<cl; ++k) {\n        if(k !== j) {\n          b[l++] = c[k]\n        }\n      }\n      res.push(b)\n    }\n  }\n  return normalize(res)\n}\nexports.boundary = boundary;\n\n//Computes connected components for a dense cell complex\nfunction connectedComponents_dense(cells, vertex_count) {\n  var labels = new UnionFind(vertex_count)\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var j=0; j<c.length; ++j) {\n      for(var k=j+1; k<c.length; ++k) {\n        labels.link(c[j], c[k])\n      }\n    }\n  }\n  var components = []\n    , component_labels = labels.ranks\n  for(var i=0; i<component_labels.length; ++i) {\n    component_labels[i] = -1\n  }\n  for(var i=0; i<cells.length; ++i) {\n    var l = labels.find(cells[i][0])\n    if(component_labels[l] < 0) {\n      component_labels[l] = components.length\n      components.push([cells[i].slice(0)])\n    } else {\n      components[component_labels[l]].push(cells[i].slice(0))\n    }\n  }\n  return components\n}\n\n//Computes connected components for a sparse graph\nfunction connectedComponents_sparse(cells) {\n  var vertices  = unique(normalize(skeleton(cells, 0)))\n    , labels    = new UnionFind(vertices.length)\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var j=0; j<c.length; ++j) {\n      var vj = findCell(vertices, [c[j]])\n      for(var k=j+1; k<c.length; ++k) {\n        labels.link(vj, findCell(vertices, [c[k]]))\n      }\n    }\n  }\n  var components        = []\n    , component_labels  = labels.ranks\n  for(var i=0; i<component_labels.length; ++i) {\n    component_labels[i] = -1\n  }\n  for(var i=0; i<cells.length; ++i) {\n    var l = labels.find(findCell(vertices, [cells[i][0]]));\n    if(component_labels[l] < 0) {\n      component_labels[l] = components.length\n      components.push([cells[i].slice(0)])\n    } else {\n      components[component_labels[l]].push(cells[i].slice(0))\n    }\n  }\n  return components\n}\n\n//Computes connected components for a cell complex\nfunction connectedComponents(cells, vertex_count) {\n  if(vertex_count) {\n    return connectedComponents_dense(cells, vertex_count)\n  }\n  return connectedComponents_sparse(cells)\n}\nexports.connectedComponents = connectedComponents\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\nvar pathBounds = require('svg-path-bounds');\nvar parsePath = require('parse-svg-path');\nvar drawPath = require('draw-svg-path');\nvar isSvgPath = require('is-svg-path');\nvar bitmapSdf = require('bitmap-sdf');\nvar canvas = document.createElement('canvas');\nvar ctx = canvas.getContext('2d');\nmodule.exports = pathSdf;\nfunction pathSdf(path, options) {\n  if (!isSvgPath(path)) throw Error('Argument should be valid svg path string');\n  if (!options) options = {};\n  var w, h;\n  if (options.shape) {\n    w = options.shape[0];\n    h = options.shape[1];\n  } else {\n    w = canvas.width = options.w || options.width || 200;\n    h = canvas.height = options.h || options.height || 200;\n  }\n  var size = Math.min(w, h);\n  var stroke = options.stroke || 0;\n  var viewbox = options.viewbox || options.viewBox || pathBounds(path);\n  var scale = [w / (viewbox[2] - viewbox[0]), h / (viewbox[3] - viewbox[1])];\n  var maxScale = Math.min(scale[0] || 0, scale[1] || 0) / 2;\n\n  //clear ctx\n  ctx.fillStyle = 'black';\n  ctx.fillRect(0, 0, w, h);\n  ctx.fillStyle = 'white';\n  if (stroke) {\n    if (typeof stroke != 'number') stroke = 1;\n    if (stroke > 0) {\n      ctx.strokeStyle = 'white';\n    } else {\n      ctx.strokeStyle = 'black';\n    }\n    ctx.lineWidth = Math.abs(stroke);\n  }\n  ctx.translate(w * .5, h * .5);\n  ctx.scale(maxScale, maxScale);\n\n  //if canvas svg paths api is available\n  if (isPath2DSupported()) {\n    var path2d = new Path2D(path);\n    ctx.fill(path2d);\n    stroke && ctx.stroke(path2d);\n  }\n  //fallback to bezier-curves\n  else {\n    var segments = parsePath(path);\n    drawPath(ctx, segments);\n    ctx.fill();\n    stroke && ctx.stroke();\n  }\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  var data = bitmapSdf(ctx, {\n    cutoff: options.cutoff != null ? options.cutoff : .5,\n    radius: options.radius != null ? options.radius : size * .5\n  });\n  return data;\n}\nvar path2DSupported;\nfunction isPath2DSupported() {\n  if (path2DSupported != null) return path2DSupported;\n  var ctx = document.createElement('canvas').getContext('2d');\n  ctx.canvas.width = ctx.canvas.height = 1;\n  if (!window.Path2D) return path2DSupported = false;\n  var path = new Path2D('M0,0h1v1h-1v-1Z');\n  ctx.fillStyle = 'black';\n  ctx.fill(path);\n  var idata = ctx.getImageData(0, 0, 1, 1);\n  return path2DSupported = idata && idata.data && idata.data[3] === 255;\n}","map":{"version":3,"names":["pathBounds","require","parsePath","drawPath","isSvgPath","bitmapSdf","canvas","document","createElement","ctx","getContext","module","exports","pathSdf","path","options","Error","w","h","shape","width","height","size","Math","min","stroke","viewbox","viewBox","scale","maxScale","fillStyle","fillRect","strokeStyle","lineWidth","abs","translate","isPath2DSupported","path2d","Path2D","fill","segments","setTransform","data","cutoff","radius","path2DSupported","window","idata","getImageData"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/svg-path-sdf/index.js"],"sourcesContent":["'use strict'\r\n\r\nvar pathBounds = require('svg-path-bounds')\r\nvar parsePath = require('parse-svg-path')\r\nvar drawPath = require('draw-svg-path')\r\nvar isSvgPath = require('is-svg-path')\r\nvar bitmapSdf = require('bitmap-sdf')\r\n\r\nvar canvas = document.createElement('canvas')\r\nvar ctx = canvas.getContext('2d')\r\n\r\n\r\nmodule.exports = pathSdf\r\n\r\n\r\nfunction pathSdf (path, options) {\r\n\tif (!isSvgPath(path)) throw Error('Argument should be valid svg path string')\r\n\r\n\tif (!options) options = {}\r\n\r\n\tvar w, h\r\n\tif (options.shape) {\r\n\t\tw = options.shape[0]\r\n\t\th = options.shape[1]\r\n\t}\r\n\telse {\r\n\t\tw = canvas.width = options.w || options.width || 200\r\n\t\th = canvas.height = options.h || options.height || 200\r\n\t}\r\n\tvar size = Math.min(w, h)\r\n\r\n\tvar stroke = options.stroke || 0\r\n\r\n\tvar viewbox = options.viewbox || options.viewBox || pathBounds(path)\r\n\tvar scale = [w / (viewbox[2] - viewbox[0]), h / (viewbox[3] - viewbox[1])]\r\n\tvar maxScale = Math.min(scale[0] || 0, scale[1] || 0) / 2\r\n\r\n\t//clear ctx\r\n\tctx.fillStyle = 'black'\r\n\tctx.fillRect(0, 0, w, h)\r\n\r\n\tctx.fillStyle = 'white'\r\n\r\n\tif (stroke)\t{\r\n\t\tif (typeof stroke != 'number') stroke = 1\r\n\t\tif (stroke > 0) {\r\n\t\t\tctx.strokeStyle = 'white'\r\n\t\t}\r\n\t\telse {\r\n\t\t\tctx.strokeStyle = 'black'\r\n\t\t}\r\n\r\n\t\tctx.lineWidth = Math.abs(stroke)\r\n\t}\r\n\r\n\tctx.translate(w * .5, h * .5)\r\n\tctx.scale(maxScale, maxScale)\r\n\r\n\t//if canvas svg paths api is available\r\n\tif (isPath2DSupported()) {\r\n\t\tvar path2d = new Path2D(path)\r\n\t\tctx.fill(path2d)\r\n\t\tstroke && ctx.stroke(path2d)\r\n\t}\r\n\t//fallback to bezier-curves\r\n\telse {\r\n\t\tvar segments = parsePath(path)\r\n\t\tdrawPath(ctx, segments)\r\n\t\tctx.fill()\r\n\t\tstroke && ctx.stroke()\r\n\t}\r\n\r\n\tctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\r\n\tvar data = bitmapSdf(ctx, {\r\n\t\tcutoff: options.cutoff != null ? options.cutoff : .5,\r\n\t\tradius: options.radius != null ? options.radius : size * .5\r\n\t})\r\n\r\n\treturn data\r\n}\r\n\r\nvar path2DSupported\r\n\r\nfunction isPath2DSupported () {\r\n\tif (path2DSupported != null) return path2DSupported\r\n\r\n\tvar ctx = document.createElement('canvas').getContext('2d')\r\n\tctx.canvas.width = ctx.canvas.height = 1\r\n\r\n\tif (!window.Path2D) return path2DSupported = false\r\n\r\n\tvar path = new Path2D('M0,0h1v1h-1v-1Z')\r\n\r\n\tctx.fillStyle = 'black'\r\n\tctx.fill(path)\r\n\r\n\tvar idata = ctx.getImageData(0,0,1,1)\r\n\r\n\treturn path2DSupported = idata && idata.data && idata.data[3] === 255\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
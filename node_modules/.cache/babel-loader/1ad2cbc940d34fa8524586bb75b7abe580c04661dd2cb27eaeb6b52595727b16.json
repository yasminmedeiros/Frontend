{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar constants = require('./constants');\n\n// convert between axis names (xaxis, xaxis2, etc, elements of gd.layout)\n// and axis id's (x, x2, etc). Would probably have ditched 'xaxis'\n// completely in favor of just 'x' if it weren't ingrained in the API etc.\nexports.id2name = function id2name(id) {\n  if (typeof id !== 'string' || !id.match(constants.AX_ID_PATTERN)) return;\n  var axNum = id.substr(1);\n  if (axNum === '1') axNum = '';\n  return id.charAt(0) + 'axis' + axNum;\n};\nexports.name2id = function name2id(name) {\n  if (!name.match(constants.AX_NAME_PATTERN)) return;\n  var axNum = name.substr(5);\n  if (axNum === '1') axNum = '';\n  return name.charAt(0) + axNum;\n};\nexports.cleanId = function cleanId(id, axLetter) {\n  if (!id.match(constants.AX_ID_PATTERN)) return;\n  if (axLetter && id.charAt(0) !== axLetter) return;\n  var axNum = id.substr(1).replace(/^0+/, '');\n  if (axNum === '1') axNum = '';\n  return id.charAt(0) + axNum;\n};\n\n// get all axis objects, as restricted in listNames\nexports.list = function (gd, axLetter, only2d) {\n  var fullLayout = gd._fullLayout;\n  if (!fullLayout) return [];\n  var idList = exports.listIds(gd, axLetter);\n  var out = new Array(idList.length);\n  var i;\n  for (i = 0; i < idList.length; i++) {\n    var idi = idList[i];\n    out[i] = fullLayout[idi.charAt(0) + 'axis' + idi.substr(1)];\n  }\n  if (!only2d) {\n    var sceneIds3D = fullLayout._subplots.gl3d || [];\n    for (i = 0; i < sceneIds3D.length; i++) {\n      var scene = fullLayout[sceneIds3D[i]];\n      if (axLetter) out.push(scene[axLetter + 'axis']);else out.push(scene.xaxis, scene.yaxis, scene.zaxis);\n    }\n  }\n  return out;\n};\n\n// get all axis ids, optionally restricted by letter\n// this only makes sense for 2d axes\nexports.listIds = function (gd, axLetter) {\n  var fullLayout = gd._fullLayout;\n  if (!fullLayout) return [];\n  var subplotLists = fullLayout._subplots;\n  if (axLetter) return subplotLists[axLetter + 'axis'];\n  return subplotLists.xaxis.concat(subplotLists.yaxis);\n};\n\n// get an axis object from its id 'x','x2' etc\n// optionally, id can be a subplot (ie 'x2y3') and type gets x or y from it\nexports.getFromId = function (gd, id, type) {\n  var fullLayout = gd._fullLayout;\n  if (type === 'x') id = id.replace(/y[0-9]*/, '');else if (type === 'y') id = id.replace(/x[0-9]*/, '');\n  return fullLayout[exports.id2name(id)];\n};\n\n// get an axis object of specified type from the containing trace\nexports.getFromTrace = function (gd, fullTrace, type) {\n  var fullLayout = gd._fullLayout;\n  var ax = null;\n  if (Registry.traceIs(fullTrace, 'gl3d')) {\n    var scene = fullTrace.scene;\n    if (scene.substr(0, 5) === 'scene') {\n      ax = fullLayout[scene][type + 'axis'];\n    }\n  } else {\n    ax = exports.getFromId(gd, fullTrace[type + 'axis'] || type);\n  }\n  return ax;\n};\n\n// sort x, x2, x10, y, y2, y10...\nexports.idSort = function (id1, id2) {\n  var letter1 = id1.charAt(0);\n  var letter2 = id2.charAt(0);\n  if (letter1 !== letter2) return letter1 > letter2 ? 1 : -1;\n  return +(id1.substr(1) || 1) - +(id2.substr(1) || 1);\n};","map":{"version":3,"names":["Registry","require","constants","exports","id2name","id","match","AX_ID_PATTERN","axNum","substr","charAt","name2id","name","AX_NAME_PATTERN","cleanId","axLetter","replace","list","gd","only2d","fullLayout","_fullLayout","idList","listIds","out","Array","length","i","idi","sceneIds3D","_subplots","gl3d","scene","push","xaxis","yaxis","zaxis","subplotLists","concat","getFromId","type","getFromTrace","fullTrace","ax","traceIs","idSort","id1","id2","letter1","letter2"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/plots/cartesian/axis_ids.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../../registry');\n\nvar constants = require('./constants');\n\n\n// convert between axis names (xaxis, xaxis2, etc, elements of gd.layout)\n// and axis id's (x, x2, etc). Would probably have ditched 'xaxis'\n// completely in favor of just 'x' if it weren't ingrained in the API etc.\nexports.id2name = function id2name(id) {\n    if(typeof id !== 'string' || !id.match(constants.AX_ID_PATTERN)) return;\n    var axNum = id.substr(1);\n    if(axNum === '1') axNum = '';\n    return id.charAt(0) + 'axis' + axNum;\n};\n\nexports.name2id = function name2id(name) {\n    if(!name.match(constants.AX_NAME_PATTERN)) return;\n    var axNum = name.substr(5);\n    if(axNum === '1') axNum = '';\n    return name.charAt(0) + axNum;\n};\n\nexports.cleanId = function cleanId(id, axLetter) {\n    if(!id.match(constants.AX_ID_PATTERN)) return;\n    if(axLetter && id.charAt(0) !== axLetter) return;\n\n    var axNum = id.substr(1).replace(/^0+/, '');\n    if(axNum === '1') axNum = '';\n    return id.charAt(0) + axNum;\n};\n\n// get all axis objects, as restricted in listNames\nexports.list = function(gd, axLetter, only2d) {\n    var fullLayout = gd._fullLayout;\n    if(!fullLayout) return [];\n\n    var idList = exports.listIds(gd, axLetter);\n    var out = new Array(idList.length);\n    var i;\n\n    for(i = 0; i < idList.length; i++) {\n        var idi = idList[i];\n        out[i] = fullLayout[idi.charAt(0) + 'axis' + idi.substr(1)];\n    }\n\n    if(!only2d) {\n        var sceneIds3D = fullLayout._subplots.gl3d || [];\n\n        for(i = 0; i < sceneIds3D.length; i++) {\n            var scene = fullLayout[sceneIds3D[i]];\n\n            if(axLetter) out.push(scene[axLetter + 'axis']);\n            else out.push(scene.xaxis, scene.yaxis, scene.zaxis);\n        }\n    }\n\n    return out;\n};\n\n// get all axis ids, optionally restricted by letter\n// this only makes sense for 2d axes\nexports.listIds = function(gd, axLetter) {\n    var fullLayout = gd._fullLayout;\n    if(!fullLayout) return [];\n\n    var subplotLists = fullLayout._subplots;\n    if(axLetter) return subplotLists[axLetter + 'axis'];\n    return subplotLists.xaxis.concat(subplotLists.yaxis);\n};\n\n// get an axis object from its id 'x','x2' etc\n// optionally, id can be a subplot (ie 'x2y3') and type gets x or y from it\nexports.getFromId = function(gd, id, type) {\n    var fullLayout = gd._fullLayout;\n\n    if(type === 'x') id = id.replace(/y[0-9]*/, '');\n    else if(type === 'y') id = id.replace(/x[0-9]*/, '');\n\n    return fullLayout[exports.id2name(id)];\n};\n\n// get an axis object of specified type from the containing trace\nexports.getFromTrace = function(gd, fullTrace, type) {\n    var fullLayout = gd._fullLayout;\n    var ax = null;\n\n    if(Registry.traceIs(fullTrace, 'gl3d')) {\n        var scene = fullTrace.scene;\n        if(scene.substr(0, 5) === 'scene') {\n            ax = fullLayout[scene][type + 'axis'];\n        }\n    }\n    else {\n        ax = exports.getFromId(gd, fullTrace[type + 'axis'] || type);\n    }\n\n    return ax;\n};\n\n// sort x, x2, x10, y, y2, y10...\nexports.idSort = function(id1, id2) {\n    var letter1 = id1.charAt(0);\n    var letter2 = id2.charAt(0);\n    if(letter1 !== letter2) return letter1 > letter2 ? 1 : -1;\n    return +(id1.substr(1) || 1) - +(id2.substr(1) || 1);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar BADNUM = require('../../constants/numerical').BADNUM;\nmodule.exports = function convertColumnData(trace, ax1, ax2, var1Name, var2Name, arrayVarNames) {\n  var colLen = trace._length;\n  var col1 = ax1.makeCalcdata(trace, var1Name);\n  var col2 = ax2.makeCalcdata(trace, var2Name);\n  var textCol = trace.text;\n  var hasColumnText = textCol !== undefined && Lib.isArray1D(textCol);\n  var i, j;\n  var col1dv = Lib.distinctVals(col1);\n  var col1vals = col1dv.vals;\n  var col2dv = Lib.distinctVals(col2);\n  var col2vals = col2dv.vals;\n  var newArrays = [];\n  var text;\n  for (i = 0; i < arrayVarNames.length; i++) {\n    newArrays[i] = Lib.init2dArray(col2vals.length, col1vals.length);\n  }\n  if (hasColumnText) {\n    text = Lib.init2dArray(col2vals.length, col1vals.length);\n  }\n  for (i = 0; i < colLen; i++) {\n    if (col1[i] !== BADNUM && col2[i] !== BADNUM) {\n      var i1 = Lib.findBin(col1[i] + col1dv.minDiff / 2, col1vals);\n      var i2 = Lib.findBin(col2[i] + col2dv.minDiff / 2, col2vals);\n      for (j = 0; j < arrayVarNames.length; j++) {\n        var arrayVarName = arrayVarNames[j];\n        var arrayVar = trace[arrayVarName];\n        var newArray = newArrays[j];\n        newArray[i2][i1] = arrayVar[i];\n      }\n      if (hasColumnText) text[i2][i1] = textCol[i];\n    }\n  }\n  trace['_' + var1Name] = col1vals;\n  trace['_' + var2Name] = col2vals;\n  for (j = 0; j < arrayVarNames.length; j++) {\n    trace['_' + arrayVarNames[j]] = newArrays[j];\n  }\n  if (hasColumnText) trace._text = text;\n};","map":{"version":3,"names":["Lib","require","BADNUM","module","exports","convertColumnData","trace","ax1","ax2","var1Name","var2Name","arrayVarNames","colLen","_length","col1","makeCalcdata","col2","textCol","text","hasColumnText","undefined","isArray1D","i","j","col1dv","distinctVals","col1vals","vals","col2dv","col2vals","newArrays","length","init2dArray","i1","findBin","minDiff","i2","arrayVarName","arrayVar","newArray","_text"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/heatmap/convert_column_xyz.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function convertColumnData(trace, ax1, ax2, var1Name, var2Name, arrayVarNames) {\n    var colLen = trace._length;\n    var col1 = ax1.makeCalcdata(trace, var1Name);\n    var col2 = ax2.makeCalcdata(trace, var2Name);\n    var textCol = trace.text;\n    var hasColumnText = (textCol !== undefined && Lib.isArray1D(textCol));\n    var i, j;\n\n    var col1dv = Lib.distinctVals(col1);\n    var col1vals = col1dv.vals;\n    var col2dv = Lib.distinctVals(col2);\n    var col2vals = col2dv.vals;\n    var newArrays = [];\n    var text;\n\n    for(i = 0; i < arrayVarNames.length; i++) {\n        newArrays[i] = Lib.init2dArray(col2vals.length, col1vals.length);\n    }\n\n    if(hasColumnText) {\n        text = Lib.init2dArray(col2vals.length, col1vals.length);\n    }\n\n    for(i = 0; i < colLen; i++) {\n        if(col1[i] !== BADNUM && col2[i] !== BADNUM) {\n            var i1 = Lib.findBin(col1[i] + col1dv.minDiff / 2, col1vals);\n            var i2 = Lib.findBin(col2[i] + col2dv.minDiff / 2, col2vals);\n\n            for(j = 0; j < arrayVarNames.length; j++) {\n                var arrayVarName = arrayVarNames[j];\n                var arrayVar = trace[arrayVarName];\n                var newArray = newArrays[j];\n                newArray[i2][i1] = arrayVar[i];\n            }\n\n            if(hasColumnText) text[i2][i1] = textCol[i];\n        }\n    }\n\n    trace['_' + var1Name] = col1vals;\n    trace['_' + var2Name] = col2vals;\n    for(j = 0; j < arrayVarNames.length; j++) {\n        trace['_' + arrayVarNames[j]] = newArrays[j];\n    }\n    if(hasColumnText) trace._text = text;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
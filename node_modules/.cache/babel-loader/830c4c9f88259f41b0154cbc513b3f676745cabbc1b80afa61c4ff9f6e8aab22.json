{"ast":null,"code":"\"use strict\";\n\nvar pool = require(\"typedarray-pool\");\nvar inverse = require(\"invert-permutation\");\nfunction rank(permutation) {\n  var n = permutation.length;\n  switch (n) {\n    case 0:\n    case 1:\n      return 0;\n    case 2:\n      return permutation[1];\n    default:\n      break;\n  }\n  var p = pool.mallocUint32(n);\n  var pinv = pool.mallocUint32(n);\n  var r = 0,\n    s,\n    t,\n    i;\n  inverse(permutation, pinv);\n  for (i = 0; i < n; ++i) {\n    p[i] = permutation[i];\n  }\n  for (i = n - 1; i > 0; --i) {\n    t = pinv[i];\n    s = p[i];\n    p[i] = p[t];\n    p[t] = s;\n    pinv[i] = pinv[s];\n    pinv[s] = t;\n    r = (r + s) * i;\n  }\n  pool.freeUint32(pinv);\n  pool.freeUint32(p);\n  return r;\n}\nfunction unrank(n, r, p) {\n  switch (n) {\n    case 0:\n      if (p) {\n        return p;\n      }\n      return [];\n    case 1:\n      if (p) {\n        p[0] = 0;\n        return p;\n      } else {\n        return [0];\n      }\n    case 2:\n      if (p) {\n        if (r) {\n          p[0] = 0;\n          p[1] = 1;\n        } else {\n          p[0] = 1;\n          p[1] = 0;\n        }\n        return p;\n      } else {\n        return r ? [0, 1] : [1, 0];\n      }\n    default:\n      break;\n  }\n  p = p || new Array(n);\n  var s,\n    t,\n    i,\n    nf = 1;\n  p[0] = 0;\n  for (i = 1; i < n; ++i) {\n    p[i] = i;\n    nf = nf * i | 0;\n  }\n  for (i = n - 1; i > 0; --i) {\n    s = r / nf | 0;\n    r = r - s * nf | 0;\n    nf = nf / i | 0;\n    t = p[i] | 0;\n    p[i] = p[s] | 0;\n    p[s] = t | 0;\n  }\n  return p;\n}\nexports.rank = rank;\nexports.unrank = unrank;","map":{"version":3,"names":["pool","require","inverse","rank","permutation","n","length","p","mallocUint32","pinv","r","s","t","i","freeUint32","unrank","Array","nf","exports"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/permutation-rank/index.js"],"sourcesContent":["\"use strict\"\n\nvar pool = require(\"typedarray-pool\")\nvar inverse = require(\"invert-permutation\")\n\nfunction rank(permutation) {\n  var n = permutation.length\n  switch(n) {\n    case 0:\n    case 1:\n      return 0\n    case 2:\n      return permutation[1]\n    default:\n      break\n  }\n  var p = pool.mallocUint32(n)\n  var pinv = pool.mallocUint32(n)\n  var r = 0, s, t, i\n  inverse(permutation, pinv)\n  for(i=0; i<n; ++i) {\n    p[i] = permutation[i]\n  }\n  for(i=n-1; i>0; --i) {\n    t = pinv[i]\n    s = p[i]\n    p[i] = p[t]\n    p[t] = s\n    pinv[i] = pinv[s]\n    pinv[s] = t\n    r = (r + s) * i\n  }\n  pool.freeUint32(pinv)\n  pool.freeUint32(p)\n  return r\n}\n\nfunction unrank(n, r, p) {\n  switch(n) {\n    case 0:\n      if(p) { return p }\n      return []\n    case 1:\n      if(p) {\n        p[0] = 0\n        return p\n      } else {\n        return [0]\n      }\n    case 2:\n      if(p) {\n        if(r) {\n          p[0] = 0\n          p[1] = 1\n        } else {\n          p[0] = 1\n          p[1] = 0\n        }\n        return p\n      } else {\n        return r ? [0,1] : [1,0]\n      }\n    default:\n      break\n  }\n  p = p || new Array(n)\n  var s, t, i, nf=1\n  p[0] = 0\n  for(i=1; i<n; ++i) {\n    p[i] = i\n    nf = (nf*i)|0\n  }\n  for(i=n-1; i>0; --i) {\n    s = (r / nf)|0\n    r = (r - s * nf)|0\n    nf = (nf / i)|0\n    t = p[i]|0\n    p[i] = p[s]|0\n    p[s] = t|0\n  }\n  return p\n}\n\nexports.rank = rank\nexports.unrank = unrank\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
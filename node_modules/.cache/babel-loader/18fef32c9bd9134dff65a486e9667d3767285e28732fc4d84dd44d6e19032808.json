{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar map1dArray = require('../carpet/map_1d_array');\nvar makepath = require('../carpet/makepath');\nvar Drawing = require('../../components/drawing');\nvar Lib = require('../../lib');\nvar makeCrossings = require('../contour/make_crossings');\nvar findAllPaths = require('../contour/find_all_paths');\nvar contourPlot = require('../contour/plot');\nvar constants = require('../contour/constants');\nvar convertToConstraints = require('../contour/convert_to_constraints');\nvar joinAllPaths = require('./join_all_paths');\nvar emptyPathinfo = require('../contour/empty_pathinfo');\nvar mapPathinfo = require('./map_pathinfo');\nvar lookupCarpet = require('../carpet/lookup_carpetid');\nvar closeBoundaries = require('../contour/close_boundaries');\nmodule.exports = function plot(gd, plotinfo, cdcontours, contourcarpetLayer) {\n  var xa = plotinfo.xaxis;\n  var ya = plotinfo.yaxis;\n  Lib.makeTraceGroups(contourcarpetLayer, cdcontours, 'contour').each(function (cd) {\n    var plotGroup = d3.select(this);\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n    var carpetcd = gd.calcdata[carpet.index][0];\n    if (!carpet.visible || carpet.visible === 'legendonly') return;\n    var a = cd0.a;\n    var b = cd0.b;\n    var contours = trace.contours;\n    var pathinfo = emptyPathinfo(contours, plotinfo, cd0);\n    var isConstraint = contours.type === 'constraint';\n    var operation = contours._operation;\n    var coloring = isConstraint ? operation === '=' ? 'lines' : 'fill' : contours.coloring;\n\n    // Map [a, b] (data) --> [i, j] (pixels)\n    function ab2p(ab) {\n      var pt = carpet.ab2xy(ab[0], ab[1], true);\n      return [xa.c2p(pt[0]), ya.c2p(pt[1])];\n    }\n\n    // Define the perimeter in a/b coordinates:\n    var perimeter = [[a[0], b[b.length - 1]], [a[a.length - 1], b[b.length - 1]], [a[a.length - 1], b[0]], [a[0], b[0]]];\n\n    // Extract the contour levels:\n    makeCrossings(pathinfo);\n    var atol = (a[a.length - 1] - a[0]) * 1e-8;\n    var btol = (b[b.length - 1] - b[0]) * 1e-8;\n    findAllPaths(pathinfo, atol, btol);\n\n    // Constraints might need to be draw inverted, which is not something contours\n    // handle by default since they're assumed fully opaque so that they can be\n    // drawn overlapping. This function flips the paths as necessary so that they're\n    // drawn correctly.\n    //\n    // TODO: Perhaps this should be generalized and *all* paths should be drawn as\n    // closed regions so that translucent contour levels would be valid.\n    // See: https://github.com/plotly/plotly.js/issues/1356\n    var fillPathinfo = pathinfo;\n    if (contours.type === 'constraint') {\n      fillPathinfo = convertToConstraints(pathinfo, operation);\n      closeBoundaries(fillPathinfo, operation, perimeter, trace);\n    }\n\n    // Map the paths in a/b coordinates to pixel coordinates:\n    mapPathinfo(pathinfo, ab2p);\n\n    // draw everything\n\n    // Compute the boundary path\n    var seg, xp, yp, i;\n    var segs = [];\n    for (i = carpetcd.clipsegments.length - 1; i >= 0; i--) {\n      seg = carpetcd.clipsegments[i];\n      xp = map1dArray([], seg.x, xa.c2p);\n      yp = map1dArray([], seg.y, ya.c2p);\n      xp.reverse();\n      yp.reverse();\n      segs.push(makepath(xp, yp, seg.bicubic));\n    }\n    var boundaryPath = 'M' + segs.join('L') + 'Z';\n\n    // Draw the baseline background fill that fills in the space behind any other\n    // contour levels:\n    makeBackground(plotGroup, carpetcd.clipsegments, xa, ya, isConstraint, coloring);\n\n    // Draw the specific contour fills. As a simplification, they're assumed to be\n    // fully opaque so that it's easy to draw them simply overlapping. The alternative\n    // would be to flip adjacent paths and draw closed paths for each level instead.\n    makeFills(trace, plotGroup, xa, ya, fillPathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath);\n\n    // Draw contour lines:\n    makeLinesAndLabels(plotGroup, pathinfo, gd, cd0, contours, plotinfo, carpet);\n\n    // Clip the boundary of the plot\n    Drawing.setClipUrl(plotGroup, carpet._clipPathId, gd);\n  });\n};\nfunction makeLinesAndLabels(plotgroup, pathinfo, gd, cd0, contours, plotinfo, carpet) {\n  var lineContainer = Lib.ensureSingle(plotgroup, 'g', 'contourlines');\n  var showLines = contours.showlines !== false;\n  var showLabels = contours.showlabels;\n  var clipLinesForLabels = showLines && showLabels;\n\n  // Even if we're not going to show lines, we need to create them\n  // if we're showing labels, because the fill paths include the perimeter\n  // so can't be used to position the labels correctly.\n  // In this case we'll remove the lines after making the labels.\n  var linegroup = contourPlot.createLines(lineContainer, showLines || showLabels, pathinfo);\n  var lineClip = contourPlot.createLineClip(lineContainer, clipLinesForLabels, gd, cd0.trace.uid);\n  var labelGroup = plotgroup.selectAll('g.contourlabels').data(showLabels ? [0] : []);\n  labelGroup.exit().remove();\n  labelGroup.enter().append('g').classed('contourlabels', true);\n  if (showLabels) {\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis;\n    var xLen = xa._length;\n    var yLen = ya._length;\n    // for simplicity use the xy box for label clipping outline.\n    var labelClipPathData = [[[0, 0], [xLen, 0], [xLen, yLen], [0, yLen]]];\n    var labelData = [];\n\n    // invalidate the getTextLocation cache in case paths changed\n    Lib.clearLocationCache();\n    var contourFormat = contourPlot.labelFormatter(contours, cd0.t.cb, gd._fullLayout);\n    var dummyText = Drawing.tester.append('text').attr('data-notex', 1).call(Drawing.font, contours.labelfont);\n\n    // use `bounds` only to keep labels away from the x/y boundaries\n    // `constrainToCarpet` below ensures labels don't go off the\n    // carpet edges\n    var bounds = {\n      left: 0,\n      right: xLen,\n      center: xLen / 2,\n      top: 0,\n      bottom: yLen,\n      middle: yLen / 2\n    };\n    var plotDiagonal = Math.sqrt(xLen * xLen + yLen * yLen);\n\n    // the path length to use to scale the number of labels to draw:\n    var normLength = constants.LABELDISTANCE * plotDiagonal / Math.max(1, pathinfo.length / constants.LABELINCREASE);\n    linegroup.each(function (d) {\n      var textOpts = contourPlot.calcTextOpts(d.level, contourFormat, dummyText, gd);\n      d3.select(this).selectAll('path').each(function (pathData) {\n        var path = this;\n        var pathBounds = Lib.getVisibleSegment(path, bounds, textOpts.height / 2);\n        if (!pathBounds) return;\n        constrainToCarpet(path, pathData, d, pathBounds, carpet, textOpts.height);\n        if (pathBounds.len < (textOpts.width + textOpts.height) * constants.LABELMIN) return;\n        var maxLabels = Math.min(Math.ceil(pathBounds.len / normLength), constants.LABELMAX);\n        for (var i = 0; i < maxLabels; i++) {\n          var loc = contourPlot.findBestTextLocation(path, pathBounds, textOpts, labelData, bounds);\n          if (!loc) break;\n          contourPlot.addLabelData(loc, textOpts, labelData, labelClipPathData);\n        }\n      });\n    });\n    dummyText.remove();\n    contourPlot.drawLabels(labelGroup, labelData, gd, lineClip, clipLinesForLabels ? labelClipPathData : null);\n  }\n  if (showLabels && !showLines) linegroup.remove();\n}\n\n// figure out if this path goes off the edge of the carpet\n// and shorten the part we call visible to keep labels away from the edge\nfunction constrainToCarpet(path, pathData, levelData, pathBounds, carpet, textHeight) {\n  var pathABData;\n  for (var i = 0; i < levelData.pedgepaths.length; i++) {\n    if (pathData === levelData.pedgepaths[i]) {\n      pathABData = levelData.edgepaths[i];\n    }\n  }\n  if (!pathABData) return;\n  var aMin = carpet.a[0];\n  var aMax = carpet.a[carpet.a.length - 1];\n  var bMin = carpet.b[0];\n  var bMax = carpet.b[carpet.b.length - 1];\n  function getOffset(abPt, pathVector) {\n    var offset = 0;\n    var edgeVector;\n    var dAB = 0.1;\n    if (Math.abs(abPt[0] - aMin) < dAB || Math.abs(abPt[0] - aMax) < dAB) {\n      edgeVector = normalizeVector(carpet.dxydb_rough(abPt[0], abPt[1], dAB));\n      offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n    }\n    if (Math.abs(abPt[1] - bMin) < dAB || Math.abs(abPt[1] - bMax) < dAB) {\n      edgeVector = normalizeVector(carpet.dxyda_rough(abPt[0], abPt[1], dAB));\n      offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n    }\n    return offset;\n  }\n  var startVector = getUnitVector(path, 0, 1);\n  var endVector = getUnitVector(path, pathBounds.total, pathBounds.total - 1);\n  var minStart = getOffset(pathABData[0], startVector);\n  var maxEnd = pathBounds.total - getOffset(pathABData[pathABData.length - 1], endVector);\n  if (pathBounds.min < minStart) pathBounds.min = minStart;\n  if (pathBounds.max > maxEnd) pathBounds.max = maxEnd;\n  pathBounds.len = pathBounds.max - pathBounds.min;\n}\nfunction getUnitVector(path, p0, p1) {\n  var pt0 = path.getPointAtLength(p0);\n  var pt1 = path.getPointAtLength(p1);\n  var dx = pt1.x - pt0.x;\n  var dy = pt1.y - pt0.y;\n  var len = Math.sqrt(dx * dx + dy * dy);\n  return [dx / len, dy / len];\n}\nfunction normalizeVector(v) {\n  var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n  return [v[0] / len, v[1] / len];\n}\nfunction vectorTan(v0, v1) {\n  var cos = Math.abs(v0[0] * v1[0] + v0[1] * v1[1]);\n  var sin = Math.sqrt(1 - cos * cos);\n  return sin / cos;\n}\nfunction makeBackground(plotgroup, clipsegments, xaxis, yaxis, isConstraint, coloring) {\n  var seg, xp, yp, i;\n  var bggroup = Lib.ensureSingle(plotgroup, 'g', 'contourbg');\n  var bgfill = bggroup.selectAll('path').data(coloring === 'fill' && !isConstraint ? [0] : []);\n  bgfill.enter().append('path');\n  bgfill.exit().remove();\n  var segs = [];\n  for (i = 0; i < clipsegments.length; i++) {\n    seg = clipsegments[i];\n    xp = map1dArray([], seg.x, xaxis.c2p);\n    yp = map1dArray([], seg.y, yaxis.c2p);\n    segs.push(makepath(xp, yp, seg.bicubic));\n  }\n  bgfill.attr('d', 'M' + segs.join('L') + 'Z').style('stroke', 'none');\n}\nfunction makeFills(trace, plotgroup, xa, ya, pathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath) {\n  var fillgroup = Lib.ensureSingle(plotgroup, 'g', 'contourfill');\n  var fillitems = fillgroup.selectAll('path').data(coloring === 'fill' ? pathinfo : []);\n  fillitems.enter().append('path');\n  fillitems.exit().remove();\n  fillitems.each(function (pi) {\n    // join all paths for this level together into a single path\n    // first follow clockwise around the perimeter to close any open paths\n    // if the whole perimeter is above this level, start with a path\n    // enclosing the whole thing. With all that, the parity should mean\n    // that we always fill everything above the contour, nothing below\n    var fullpath = joinAllPaths(trace, pi, perimeter, ab2p, carpet, carpetcd, xa, ya);\n    if (pi.prefixBoundary) {\n      fullpath = boundaryPath + fullpath;\n    }\n    if (!fullpath) {\n      d3.select(this).remove();\n    } else {\n      d3.select(this).attr('d', fullpath).style('stroke', 'none');\n    }\n  });\n}","map":{"version":3,"names":["d3","require","map1dArray","makepath","Drawing","Lib","makeCrossings","findAllPaths","contourPlot","constants","convertToConstraints","joinAllPaths","emptyPathinfo","mapPathinfo","lookupCarpet","closeBoundaries","module","exports","plot","gd","plotinfo","cdcontours","contourcarpetLayer","xa","xaxis","ya","yaxis","makeTraceGroups","each","cd","plotGroup","select","cd0","trace","carpet","_carpetTrace","carpetcd","calcdata","index","visible","a","b","contours","pathinfo","isConstraint","type","operation","_operation","coloring","ab2p","ab","pt","ab2xy","c2p","perimeter","length","atol","btol","fillPathinfo","seg","xp","yp","i","segs","clipsegments","x","y","reverse","push","bicubic","boundaryPath","join","makeBackground","makeFills","makeLinesAndLabels","setClipUrl","_clipPathId","plotgroup","lineContainer","ensureSingle","showLines","showlines","showLabels","showlabels","clipLinesForLabels","linegroup","createLines","lineClip","createLineClip","uid","labelGroup","selectAll","data","exit","remove","enter","append","classed","xLen","_length","yLen","labelClipPathData","labelData","clearLocationCache","contourFormat","labelFormatter","t","cb","_fullLayout","dummyText","tester","attr","call","font","labelfont","bounds","left","right","center","top","bottom","middle","plotDiagonal","Math","sqrt","normLength","LABELDISTANCE","max","LABELINCREASE","d","textOpts","calcTextOpts","level","pathData","path","pathBounds","getVisibleSegment","height","constrainToCarpet","len","width","LABELMIN","maxLabels","min","ceil","LABELMAX","loc","findBestTextLocation","addLabelData","drawLabels","levelData","textHeight","pathABData","pedgepaths","edgepaths","aMin","aMax","bMin","bMax","getOffset","abPt","pathVector","offset","edgeVector","dAB","abs","normalizeVector","dxydb_rough","vectorTan","dxyda_rough","startVector","getUnitVector","endVector","total","minStart","maxEnd","p0","p1","pt0","getPointAtLength","pt1","dx","dy","v","v0","v1","cos","sin","bggroup","bgfill","style","fillgroup","fillitems","pi","fullpath","prefixBoundary"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/contourcarpet/plot.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar map1dArray = require('../carpet/map_1d_array');\nvar makepath = require('../carpet/makepath');\nvar Drawing = require('../../components/drawing');\nvar Lib = require('../../lib');\n\nvar makeCrossings = require('../contour/make_crossings');\nvar findAllPaths = require('../contour/find_all_paths');\nvar contourPlot = require('../contour/plot');\nvar constants = require('../contour/constants');\nvar convertToConstraints = require('../contour/convert_to_constraints');\nvar joinAllPaths = require('./join_all_paths');\nvar emptyPathinfo = require('../contour/empty_pathinfo');\nvar mapPathinfo = require('./map_pathinfo');\nvar lookupCarpet = require('../carpet/lookup_carpetid');\nvar closeBoundaries = require('../contour/close_boundaries');\n\nmodule.exports = function plot(gd, plotinfo, cdcontours, contourcarpetLayer) {\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis;\n\n    Lib.makeTraceGroups(contourcarpetLayer, cdcontours, 'contour').each(function(cd) {\n        var plotGroup = d3.select(this);\n        var cd0 = cd[0];\n        var trace = cd0.trace;\n\n        var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n        var carpetcd = gd.calcdata[carpet.index][0];\n\n        if(!carpet.visible || carpet.visible === 'legendonly') return;\n\n        var a = cd0.a;\n        var b = cd0.b;\n        var contours = trace.contours;\n        var pathinfo = emptyPathinfo(contours, plotinfo, cd0);\n        var isConstraint = contours.type === 'constraint';\n        var operation = contours._operation;\n        var coloring = isConstraint ? (operation === '=' ? 'lines' : 'fill') : contours.coloring;\n\n        // Map [a, b] (data) --> [i, j] (pixels)\n        function ab2p(ab) {\n            var pt = carpet.ab2xy(ab[0], ab[1], true);\n            return [xa.c2p(pt[0]), ya.c2p(pt[1])];\n        }\n\n        // Define the perimeter in a/b coordinates:\n        var perimeter = [\n            [a[0], b[b.length - 1]],\n            [a[a.length - 1], b[b.length - 1]],\n            [a[a.length - 1], b[0]],\n            [a[0], b[0]]\n        ];\n\n        // Extract the contour levels:\n        makeCrossings(pathinfo);\n        var atol = (a[a.length - 1] - a[0]) * 1e-8;\n        var btol = (b[b.length - 1] - b[0]) * 1e-8;\n        findAllPaths(pathinfo, atol, btol);\n\n        // Constraints might need to be draw inverted, which is not something contours\n        // handle by default since they're assumed fully opaque so that they can be\n        // drawn overlapping. This function flips the paths as necessary so that they're\n        // drawn correctly.\n        //\n        // TODO: Perhaps this should be generalized and *all* paths should be drawn as\n        // closed regions so that translucent contour levels would be valid.\n        // See: https://github.com/plotly/plotly.js/issues/1356\n        var fillPathinfo = pathinfo;\n        if(contours.type === 'constraint') {\n            fillPathinfo = convertToConstraints(pathinfo, operation);\n            closeBoundaries(fillPathinfo, operation, perimeter, trace);\n        }\n\n        // Map the paths in a/b coordinates to pixel coordinates:\n        mapPathinfo(pathinfo, ab2p);\n\n        // draw everything\n\n        // Compute the boundary path\n        var seg, xp, yp, i;\n        var segs = [];\n        for(i = carpetcd.clipsegments.length - 1; i >= 0; i--) {\n            seg = carpetcd.clipsegments[i];\n            xp = map1dArray([], seg.x, xa.c2p);\n            yp = map1dArray([], seg.y, ya.c2p);\n            xp.reverse();\n            yp.reverse();\n            segs.push(makepath(xp, yp, seg.bicubic));\n        }\n\n        var boundaryPath = 'M' + segs.join('L') + 'Z';\n\n        // Draw the baseline background fill that fills in the space behind any other\n        // contour levels:\n        makeBackground(plotGroup, carpetcd.clipsegments, xa, ya, isConstraint, coloring);\n\n        // Draw the specific contour fills. As a simplification, they're assumed to be\n        // fully opaque so that it's easy to draw them simply overlapping. The alternative\n        // would be to flip adjacent paths and draw closed paths for each level instead.\n        makeFills(trace, plotGroup, xa, ya, fillPathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath);\n\n        // Draw contour lines:\n        makeLinesAndLabels(plotGroup, pathinfo, gd, cd0, contours, plotinfo, carpet);\n\n        // Clip the boundary of the plot\n        Drawing.setClipUrl(plotGroup, carpet._clipPathId, gd);\n    });\n};\n\nfunction makeLinesAndLabels(plotgroup, pathinfo, gd, cd0, contours, plotinfo, carpet) {\n    var lineContainer = Lib.ensureSingle(plotgroup, 'g', 'contourlines');\n    var showLines = contours.showlines !== false;\n    var showLabels = contours.showlabels;\n    var clipLinesForLabels = showLines && showLabels;\n\n    // Even if we're not going to show lines, we need to create them\n    // if we're showing labels, because the fill paths include the perimeter\n    // so can't be used to position the labels correctly.\n    // In this case we'll remove the lines after making the labels.\n    var linegroup = contourPlot.createLines(lineContainer, showLines || showLabels, pathinfo);\n\n    var lineClip = contourPlot.createLineClip(lineContainer, clipLinesForLabels, gd, cd0.trace.uid);\n\n    var labelGroup = plotgroup.selectAll('g.contourlabels')\n        .data(showLabels ? [0] : []);\n\n    labelGroup.exit().remove();\n\n    labelGroup.enter().append('g')\n        .classed('contourlabels', true);\n\n    if(showLabels) {\n        var xa = plotinfo.xaxis;\n        var ya = plotinfo.yaxis;\n        var xLen = xa._length;\n        var yLen = ya._length;\n        // for simplicity use the xy box for label clipping outline.\n        var labelClipPathData = [[\n            [0, 0],\n            [xLen, 0],\n            [xLen, yLen],\n            [0, yLen]\n        ]];\n\n\n        var labelData = [];\n\n        // invalidate the getTextLocation cache in case paths changed\n        Lib.clearLocationCache();\n\n        var contourFormat = contourPlot.labelFormatter(contours, cd0.t.cb, gd._fullLayout);\n\n        var dummyText = Drawing.tester.append('text')\n            .attr('data-notex', 1)\n            .call(Drawing.font, contours.labelfont);\n\n        // use `bounds` only to keep labels away from the x/y boundaries\n        // `constrainToCarpet` below ensures labels don't go off the\n        // carpet edges\n        var bounds = {\n            left: 0,\n            right: xLen,\n            center: xLen / 2,\n            top: 0,\n            bottom: yLen,\n            middle: yLen / 2\n        };\n\n        var plotDiagonal = Math.sqrt(xLen * xLen + yLen * yLen);\n\n        // the path length to use to scale the number of labels to draw:\n        var normLength = constants.LABELDISTANCE * plotDiagonal /\n            Math.max(1, pathinfo.length / constants.LABELINCREASE);\n\n        linegroup.each(function(d) {\n            var textOpts = contourPlot.calcTextOpts(d.level, contourFormat, dummyText, gd);\n\n            d3.select(this).selectAll('path').each(function(pathData) {\n                var path = this;\n                var pathBounds = Lib.getVisibleSegment(path, bounds, textOpts.height / 2);\n                if(!pathBounds) return;\n\n                constrainToCarpet(path, pathData, d, pathBounds, carpet, textOpts.height);\n\n                if(pathBounds.len < (textOpts.width + textOpts.height) * constants.LABELMIN) return;\n\n                var maxLabels = Math.min(Math.ceil(pathBounds.len / normLength),\n                    constants.LABELMAX);\n\n                for(var i = 0; i < maxLabels; i++) {\n                    var loc = contourPlot.findBestTextLocation(path, pathBounds, textOpts,\n                        labelData, bounds);\n\n                    if(!loc) break;\n\n                    contourPlot.addLabelData(loc, textOpts, labelData, labelClipPathData);\n                }\n            });\n        });\n\n        dummyText.remove();\n\n        contourPlot.drawLabels(labelGroup, labelData, gd, lineClip,\n            clipLinesForLabels ? labelClipPathData : null);\n    }\n\n    if(showLabels && !showLines) linegroup.remove();\n}\n\n// figure out if this path goes off the edge of the carpet\n// and shorten the part we call visible to keep labels away from the edge\nfunction constrainToCarpet(path, pathData, levelData, pathBounds, carpet, textHeight) {\n    var pathABData;\n    for(var i = 0; i < levelData.pedgepaths.length; i++) {\n        if(pathData === levelData.pedgepaths[i]) {\n            pathABData = levelData.edgepaths[i];\n        }\n    }\n    if(!pathABData) return;\n\n    var aMin = carpet.a[0];\n    var aMax = carpet.a[carpet.a.length - 1];\n    var bMin = carpet.b[0];\n    var bMax = carpet.b[carpet.b.length - 1];\n\n    function getOffset(abPt, pathVector) {\n        var offset = 0;\n        var edgeVector;\n        var dAB = 0.1;\n        if(Math.abs(abPt[0] - aMin) < dAB || Math.abs(abPt[0] - aMax) < dAB) {\n            edgeVector = normalizeVector(carpet.dxydb_rough(abPt[0], abPt[1], dAB));\n            offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n        }\n\n        if(Math.abs(abPt[1] - bMin) < dAB || Math.abs(abPt[1] - bMax) < dAB) {\n            edgeVector = normalizeVector(carpet.dxyda_rough(abPt[0], abPt[1], dAB));\n            offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n        }\n        return offset;\n    }\n\n    var startVector = getUnitVector(path, 0, 1);\n    var endVector = getUnitVector(path, pathBounds.total, pathBounds.total - 1);\n    var minStart = getOffset(pathABData[0], startVector);\n    var maxEnd = pathBounds.total - getOffset(pathABData[pathABData.length - 1], endVector);\n\n    if(pathBounds.min < minStart) pathBounds.min = minStart;\n    if(pathBounds.max > maxEnd) pathBounds.max = maxEnd;\n\n    pathBounds.len = pathBounds.max - pathBounds.min;\n}\n\nfunction getUnitVector(path, p0, p1) {\n    var pt0 = path.getPointAtLength(p0);\n    var pt1 = path.getPointAtLength(p1);\n    var dx = pt1.x - pt0.x;\n    var dy = pt1.y - pt0.y;\n    var len = Math.sqrt(dx * dx + dy * dy);\n    return [dx / len, dy / len];\n}\n\nfunction normalizeVector(v) {\n    var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n    return [v[0] / len, v[1] / len];\n}\n\nfunction vectorTan(v0, v1) {\n    var cos = Math.abs(v0[0] * v1[0] + v0[1] * v1[1]);\n    var sin = Math.sqrt(1 - cos * cos);\n    return sin / cos;\n}\n\nfunction makeBackground(plotgroup, clipsegments, xaxis, yaxis, isConstraint, coloring) {\n    var seg, xp, yp, i;\n    var bggroup = Lib.ensureSingle(plotgroup, 'g', 'contourbg');\n\n    var bgfill = bggroup.selectAll('path')\n        .data((coloring === 'fill' && !isConstraint) ? [0] : []);\n    bgfill.enter().append('path');\n    bgfill.exit().remove();\n\n    var segs = [];\n    for(i = 0; i < clipsegments.length; i++) {\n        seg = clipsegments[i];\n        xp = map1dArray([], seg.x, xaxis.c2p);\n        yp = map1dArray([], seg.y, yaxis.c2p);\n        segs.push(makepath(xp, yp, seg.bicubic));\n    }\n\n    bgfill\n        .attr('d', 'M' + segs.join('L') + 'Z')\n        .style('stroke', 'none');\n}\n\nfunction makeFills(trace, plotgroup, xa, ya, pathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath) {\n    var fillgroup = Lib.ensureSingle(plotgroup, 'g', 'contourfill');\n\n    var fillitems = fillgroup.selectAll('path')\n        .data(coloring === 'fill' ? pathinfo : []);\n    fillitems.enter().append('path');\n    fillitems.exit().remove();\n    fillitems.each(function(pi) {\n        // join all paths for this level together into a single path\n        // first follow clockwise around the perimeter to close any open paths\n        // if the whole perimeter is above this level, start with a path\n        // enclosing the whole thing. With all that, the parity should mean\n        // that we always fill everything above the contour, nothing below\n        var fullpath = joinAllPaths(trace, pi, perimeter, ab2p, carpet, carpetcd, xa, ya);\n\n        if(pi.prefixBoundary) {\n            fullpath = boundaryPath + fullpath;\n        }\n\n        if(!fullpath) {\n            d3.select(this).remove();\n        } else {\n            d3.select(this)\n                .attr('d', fullpath)\n                .style('stroke', 'none');\n        }\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar Colorscale = require('../../components/colorscale');\nvar endPlus = require('./end_plus');\nmodule.exports = function makeColorMap(trace) {\n  var contours = trace.contours;\n  var start = contours.start;\n  var end = endPlus(contours);\n  var cs = contours.size || 1;\n  var nc = Math.floor((end - start) / cs) + 1;\n  var extra = contours.coloring === 'lines' ? 0 : 1;\n  if (!isFinite(cs)) {\n    cs = 1;\n    nc = 1;\n  }\n  var scl = trace.reversescale ? Colorscale.flipScale(trace.colorscale) : trace.colorscale;\n  var len = scl.length;\n  var domain = new Array(len);\n  var range = new Array(len);\n  var si, i;\n  if (contours.coloring === 'heatmap') {\n    if (trace.zauto && trace.autocontour === false) {\n      trace.zmin = start - cs / 2;\n      trace.zmax = trace.zmin + nc * cs;\n    }\n    for (i = 0; i < len; i++) {\n      si = scl[i];\n      domain[i] = si[0] * (trace.zmax - trace.zmin) + trace.zmin;\n      range[i] = si[1];\n    }\n\n    // do the contours extend beyond the colorscale?\n    // if so, extend the colorscale with constants\n    var zRange = d3.extent([trace.zmin, trace.zmax, contours.start, contours.start + cs * (nc - 1)]);\n    var zmin = zRange[trace.zmin < trace.zmax ? 0 : 1];\n    var zmax = zRange[trace.zmin < trace.zmax ? 1 : 0];\n    if (zmin !== trace.zmin) {\n      domain.splice(0, 0, zmin);\n      range.splice(0, 0, Range[0]);\n    }\n    if (zmax !== trace.zmax) {\n      domain.push(zmax);\n      range.push(range[range.length - 1]);\n    }\n  } else {\n    for (i = 0; i < len; i++) {\n      si = scl[i];\n      domain[i] = (si[0] * (nc + extra - 1) - extra / 2) * cs + start;\n      range[i] = si[1];\n    }\n  }\n  return Colorscale.makeColorScaleFunc({\n    domain: domain,\n    range: range\n  }, {\n    noNumericCheck: true\n  });\n};","map":{"version":3,"names":["d3","require","Colorscale","endPlus","module","exports","makeColorMap","trace","contours","start","end","cs","size","nc","Math","floor","extra","coloring","isFinite","scl","reversescale","flipScale","colorscale","len","length","domain","Array","range","si","i","zauto","autocontour","zmin","zmax","zRange","extent","splice","Range","push","makeColorScaleFunc","noNumericCheck"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/contour/make_color_map.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar d3 = require('d3');\nvar Colorscale = require('../../components/colorscale');\nvar endPlus = require('./end_plus');\n\nmodule.exports = function makeColorMap(trace) {\n    var contours = trace.contours;\n    var start = contours.start;\n    var end = endPlus(contours);\n    var cs = contours.size || 1;\n    var nc = Math.floor((end - start) / cs) + 1;\n    var extra = contours.coloring === 'lines' ? 0 : 1;\n\n    if(!isFinite(cs)) {\n        cs = 1;\n        nc = 1;\n    }\n\n    var scl = trace.reversescale ?\n        Colorscale.flipScale(trace.colorscale) :\n        trace.colorscale;\n\n    var len = scl.length;\n    var domain = new Array(len);\n    var range = new Array(len);\n\n    var si, i;\n\n    if(contours.coloring === 'heatmap') {\n        if(trace.zauto && trace.autocontour === false) {\n            trace.zmin = start - cs / 2;\n            trace.zmax = trace.zmin + nc * cs;\n        }\n\n        for(i = 0; i < len; i++) {\n            si = scl[i];\n\n            domain[i] = si[0] * (trace.zmax - trace.zmin) + trace.zmin;\n            range[i] = si[1];\n        }\n\n        // do the contours extend beyond the colorscale?\n        // if so, extend the colorscale with constants\n        var zRange = d3.extent([\n            trace.zmin,\n            trace.zmax,\n            contours.start,\n            contours.start + cs * (nc - 1)\n        ]);\n        var zmin = zRange[trace.zmin < trace.zmax ? 0 : 1];\n        var zmax = zRange[trace.zmin < trace.zmax ? 1 : 0];\n\n        if(zmin !== trace.zmin) {\n            domain.splice(0, 0, zmin);\n            range.splice(0, 0, Range[0]);\n        }\n\n        if(zmax !== trace.zmax) {\n            domain.push(zmax);\n            range.push(range[range.length - 1]);\n        }\n    }\n    else {\n        for(i = 0; i < len; i++) {\n            si = scl[i];\n\n            domain[i] = (si[0] * (nc + extra - 1) - (extra / 2)) * cs + start;\n            range[i] = si[1];\n        }\n    }\n\n    return Colorscale.makeColorScaleFunc({\n        domain: domain,\n        range: range,\n    }, {\n        noNumericCheck: true\n    });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
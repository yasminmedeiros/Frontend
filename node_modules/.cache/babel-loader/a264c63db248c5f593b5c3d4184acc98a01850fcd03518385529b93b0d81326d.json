{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar showNoWebGlMsg = require('./show_no_webgl_msg');\n\n// Note that this module should be ONLY required into\n// files corresponding to regl trace modules\n// so that bundles with non-regl only don't include\n// regl and all its bytes.\nvar createRegl = require('regl');\n\n/**\n * Idempotent version of createRegl. Create regl instances\n * in the correct canvases with the correct attributes and\n * options\n *\n * @param {DOM node or object} gd : graph div object\n * @param {array} extensions : list of extension to pass to createRegl\n *\n * @return {boolean} true if all createRegl calls succeeded, false otherwise\n */\nmodule.exports = function prepareRegl(gd, extensions) {\n  var fullLayout = gd._fullLayout;\n  var success = true;\n  fullLayout._glcanvas.each(function (d) {\n    if (d.regl) return;\n    // only parcoords needs pick layer\n    if (d.pick && !fullLayout._has('parcoords')) return;\n    try {\n      d.regl = createRegl({\n        canvas: this,\n        attributes: {\n          antialias: !d.pick,\n          preserveDrawingBuffer: true\n        },\n        pixelRatio: gd._context.plotGlPixelRatio || global.devicePixelRatio,\n        extensions: extensions || []\n      });\n    } catch (e) {\n      success = false;\n    }\n    if (success) {\n      this.addEventListener('webglcontextlost', function (event) {\n        if (gd && gd.emit) {\n          gd.emit('plotly_webglcontextlost', {\n            event: event,\n            layer: d.key\n          });\n        }\n      }, false);\n    }\n  });\n  if (!success) {\n    showNoWebGlMsg({\n      container: fullLayout._glcontainer.node()\n    });\n  }\n  return success;\n};","map":{"version":3,"names":["showNoWebGlMsg","require","createRegl","module","exports","prepareRegl","gd","extensions","fullLayout","_fullLayout","success","_glcanvas","each","d","regl","pick","_has","canvas","attributes","antialias","preserveDrawingBuffer","pixelRatio","_context","plotGlPixelRatio","global","devicePixelRatio","e","addEventListener","event","emit","layer","key","container","_glcontainer","node"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/lib/prepare_regl.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar showNoWebGlMsg = require('./show_no_webgl_msg');\n\n// Note that this module should be ONLY required into\n// files corresponding to regl trace modules\n// so that bundles with non-regl only don't include\n// regl and all its bytes.\nvar createRegl = require('regl');\n\n/**\n * Idempotent version of createRegl. Create regl instances\n * in the correct canvases with the correct attributes and\n * options\n *\n * @param {DOM node or object} gd : graph div object\n * @param {array} extensions : list of extension to pass to createRegl\n *\n * @return {boolean} true if all createRegl calls succeeded, false otherwise\n */\nmodule.exports = function prepareRegl(gd, extensions) {\n    var fullLayout = gd._fullLayout;\n    var success = true;\n\n    fullLayout._glcanvas.each(function(d) {\n        if(d.regl) return;\n        // only parcoords needs pick layer\n        if(d.pick && !fullLayout._has('parcoords')) return;\n\n        try {\n            d.regl = createRegl({\n                canvas: this,\n                attributes: {\n                    antialias: !d.pick,\n                    preserveDrawingBuffer: true\n                },\n                pixelRatio: gd._context.plotGlPixelRatio || global.devicePixelRatio,\n                extensions: extensions || []\n            });\n        } catch(e) {\n            success = false;\n        }\n\n        if(success) {\n            this.addEventListener('webglcontextlost', function(event) {\n                if(gd && gd.emit) {\n                    gd.emit('plotly_webglcontextlost', {\n                        event: event,\n                        layer: d.key\n                    });\n                }\n            }, false);\n        }\n    });\n\n    if(!success) {\n        showNoWebGlMsg({container: fullLayout._glcontainer.node()});\n    }\n    return success;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,cAAc,GAAGC,OAAO,CAAC,qBAAqB,CAAC;;AAEnD;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,MAAM,CAAC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,SAASC,WAAW,CAACC,EAAE,EAAEC,UAAU,EAAE;EAClD,IAAIC,UAAU,GAAGF,EAAE,CAACG,WAAW;EAC/B,IAAIC,OAAO,GAAG,IAAI;EAElBF,UAAU,CAACG,SAAS,CAACC,IAAI,CAAC,UAASC,CAAC,EAAE;IAClC,IAAGA,CAAC,CAACC,IAAI,EAAE;IACX;IACA,IAAGD,CAAC,CAACE,IAAI,IAAI,CAACP,UAAU,CAACQ,IAAI,CAAC,WAAW,CAAC,EAAE;IAE5C,IAAI;MACAH,CAAC,CAACC,IAAI,GAAGZ,UAAU,CAAC;QAChBe,MAAM,EAAE,IAAI;QACZC,UAAU,EAAE;UACRC,SAAS,EAAE,CAACN,CAAC,CAACE,IAAI;UAClBK,qBAAqB,EAAE;QAC3B,CAAC;QACDC,UAAU,EAAEf,EAAE,CAACgB,QAAQ,CAACC,gBAAgB,IAAIC,MAAM,CAACC,gBAAgB;QACnElB,UAAU,EAAEA,UAAU,IAAI;MAC9B,CAAC,CAAC;IACN,CAAC,CAAC,OAAMmB,CAAC,EAAE;MACPhB,OAAO,GAAG,KAAK;IACnB;IAEA,IAAGA,OAAO,EAAE;MACR,IAAI,CAACiB,gBAAgB,CAAC,kBAAkB,EAAE,UAASC,KAAK,EAAE;QACtD,IAAGtB,EAAE,IAAIA,EAAE,CAACuB,IAAI,EAAE;UACdvB,EAAE,CAACuB,IAAI,CAAC,yBAAyB,EAAE;YAC/BD,KAAK,EAAEA,KAAK;YACZE,KAAK,EAAEjB,CAAC,CAACkB;UACb,CAAC,CAAC;QACN;MACJ,CAAC,EAAE,KAAK,CAAC;IACb;EACJ,CAAC,CAAC;EAEF,IAAG,CAACrB,OAAO,EAAE;IACTV,cAAc,CAAC;MAACgC,SAAS,EAAExB,UAAU,CAACyB,YAAY,CAACC,IAAI;IAAE,CAAC,CAAC;EAC/D;EACA,OAAOxB,OAAO;AAClB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
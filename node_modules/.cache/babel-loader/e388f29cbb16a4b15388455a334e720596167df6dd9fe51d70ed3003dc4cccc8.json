{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar loggers = require('./loggers');\nvar identity = require('./identity');\n\n// don't trust floating point equality - fraction of bin size to call\n// \"on the line\" and ensure that they go the right way specified by\n// linelow\nvar roundingError = 1e-9;\n\n/**\n * findBin - find the bin for val - note that it can return outside the\n * bin range any pos. or neg. integer for linear bins, or -1 or\n * bins.length-1 for explicit.\n * bins is either an object {start,size,end} or an array length #bins+1\n * bins can be either increasing or decreasing but must be monotonic\n * for linear bins, we can just calculate. For listed bins, run a binary\n * search linelow (truthy) says the bin boundary should be attributed to\n * the lower bin rather than the default upper bin\n */\nexports.findBin = function (val, bins, linelow) {\n  if (isNumeric(bins.start)) {\n    return linelow ? Math.ceil((val - bins.start) / bins.size - roundingError) - 1 : Math.floor((val - bins.start) / bins.size + roundingError);\n  } else {\n    var n1 = 0;\n    var n2 = bins.length;\n    var c = 0;\n    var binSize = n2 > 1 ? (bins[n2 - 1] - bins[0]) / (n2 - 1) : 1;\n    var n, test;\n    if (binSize >= 0) {\n      test = linelow ? lessThan : lessOrEqual;\n    } else {\n      test = linelow ? greaterOrEqual : greaterThan;\n    }\n    val += binSize * roundingError * (linelow ? -1 : 1) * (binSize >= 0 ? 1 : -1);\n    // c is just to avoid infinite loops if there's an error\n    while (n1 < n2 && c++ < 100) {\n      n = Math.floor((n1 + n2) / 2);\n      if (test(bins[n], val)) n1 = n + 1;else n2 = n;\n    }\n    if (c > 90) loggers.log('Long binary search...');\n    return n1 - 1;\n  }\n};\nfunction lessThan(a, b) {\n  return a < b;\n}\nfunction lessOrEqual(a, b) {\n  return a <= b;\n}\nfunction greaterThan(a, b) {\n  return a > b;\n}\nfunction greaterOrEqual(a, b) {\n  return a >= b;\n}\nexports.sorterAsc = function (a, b) {\n  return a - b;\n};\nexports.sorterDes = function (a, b) {\n  return b - a;\n};\n\n/**\n * find distinct values in an array, lumping together ones that appear to\n * just be off by a rounding error\n * return the distinct values and the minimum difference between any two\n */\nexports.distinctVals = function (valsIn) {\n  var vals = valsIn.slice(); // otherwise we sort the original array...\n  vals.sort(exports.sorterAsc);\n  var l = vals.length - 1;\n  var minDiff = vals[l] - vals[0] || 1;\n  var errDiff = minDiff / (l || 1) / 10000;\n  var v2 = [vals[0]];\n  for (var i = 0; i < l; i++) {\n    // make sure values aren't just off by a rounding error\n    if (vals[i + 1] > vals[i] + errDiff) {\n      minDiff = Math.min(minDiff, vals[i + 1] - vals[i]);\n      v2.push(vals[i + 1]);\n    }\n  }\n  return {\n    vals: v2,\n    minDiff: minDiff\n  };\n};\n\n/**\n * return the smallest element from (sorted) array arrayIn that's bigger than val,\n * or (reverse) the largest element smaller than val\n * used to find the best tick given the minimum (non-rounded) tick\n * particularly useful for date/time where things are not powers of 10\n * binary search is probably overkill here...\n */\nexports.roundUp = function (val, arrayIn, reverse) {\n  var low = 0;\n  var high = arrayIn.length - 1;\n  var mid;\n  var c = 0;\n  var dlow = reverse ? 0 : 1;\n  var dhigh = reverse ? 1 : 0;\n  var rounded = reverse ? Math.ceil : Math.floor;\n  // c is just to avoid infinite loops if there's an error\n  while (low < high && c++ < 100) {\n    mid = rounded((low + high) / 2);\n    if (arrayIn[mid] <= val) low = mid + dlow;else high = mid - dhigh;\n  }\n  return arrayIn[low];\n};\n\n/**\n * Tweak to Array.sort(sortFn) that improves performance for pre-sorted arrays\n *\n * Note that newer browsers (such as Chrome v70+) are starting to pick up\n * on pre-sorted arrays which may render the following optimization unnecessary\n * in the future.\n *\n * Motivation: sometimes we need to sort arrays but the input is likely to\n * already be sorted. Browsers don't seem to pick up on pre-sorted arrays,\n * and in fact Chrome is actually *slower* sorting pre-sorted arrays than purely\n * random arrays. FF is at least faster if the array is pre-sorted, but still\n * not as fast as it could be.\n * Here's how this plays out sorting a length-1e6 array:\n *\n * Calls to Sort FN  |  Chrome bare  |  FF bare  |  Chrome tweak  |  FF tweak\n *                   |  v68.0 Mac    |  v61.0 Mac|                |\n * ------------------+---------------+-----------+----------------+------------\n * ordered           |  30.4e6       |  10.1e6   |  1e6           |  1e6\n * reversed          |  29.4e6       |  9.9e6    |  1e6 + reverse |  1e6 + reverse\n * random            |  ~21e6        |  ~18.7e6  |  ~21e6         |  ~18.7e6\n *\n * So this is a substantial win for pre-sorted (ordered or exactly reversed)\n * arrays. Including this wrapper on an unsorted array adds a penalty that will\n * in general be only a few calls to the sort function. The only case this\n * penalty will be significant is if the array is mostly sorted but there are\n * a few unsorted items near the end, but the penalty is still at most N calls\n * out of (for N=1e6) ~20N total calls\n *\n * @param {Array} array: the array, to be sorted in place\n * @param {function} sortFn: As in Array.sort, function(a, b) that puts\n *     item a before item b if the return is negative, a after b if positive,\n *     and no change if zero.\n * @return {Array}: the original array, sorted in place.\n */\nexports.sort = function (array, sortFn) {\n  var notOrdered = 0;\n  var notReversed = 0;\n  for (var i = 1; i < array.length; i++) {\n    var pairOrder = sortFn(array[i], array[i - 1]);\n    if (pairOrder < 0) notOrdered = 1;else if (pairOrder > 0) notReversed = 1;\n    if (notOrdered && notReversed) return array.sort(sortFn);\n  }\n  return notReversed ? array : array.reverse();\n};\n\n/**\n * find index in array 'arr' that minimizes 'fn'\n *\n * @param {array} arr : array where to search\n * @param {fn (optional)} fn : function to minimize,\n *   if not given, fn is the identity function\n * @return {integer}\n */\nexports.findIndexOfMin = function (arr, fn) {\n  fn = fn || identity;\n  var min = Infinity;\n  var ind;\n  for (var i = 0; i < arr.length; i++) {\n    var v = fn(arr[i]);\n    if (v < min) {\n      min = v;\n      ind = i;\n    }\n  }\n  return ind;\n};","map":{"version":3,"names":["isNumeric","require","loggers","identity","roundingError","exports","findBin","val","bins","linelow","start","Math","ceil","size","floor","n1","n2","length","c","binSize","n","test","lessThan","lessOrEqual","greaterOrEqual","greaterThan","log","a","b","sorterAsc","sorterDes","distinctVals","valsIn","vals","slice","sort","l","minDiff","errDiff","v2","i","min","push","roundUp","arrayIn","reverse","low","high","mid","dlow","dhigh","rounded","array","sortFn","notOrdered","notReversed","pairOrder","findIndexOfMin","arr","fn","Infinity","ind","v"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/lib/search.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar loggers = require('./loggers');\nvar identity = require('./identity');\n\n// don't trust floating point equality - fraction of bin size to call\n// \"on the line\" and ensure that they go the right way specified by\n// linelow\nvar roundingError = 1e-9;\n\n\n/**\n * findBin - find the bin for val - note that it can return outside the\n * bin range any pos. or neg. integer for linear bins, or -1 or\n * bins.length-1 for explicit.\n * bins is either an object {start,size,end} or an array length #bins+1\n * bins can be either increasing or decreasing but must be monotonic\n * for linear bins, we can just calculate. For listed bins, run a binary\n * search linelow (truthy) says the bin boundary should be attributed to\n * the lower bin rather than the default upper bin\n */\nexports.findBin = function(val, bins, linelow) {\n    if(isNumeric(bins.start)) {\n        return linelow ?\n            Math.ceil((val - bins.start) / bins.size - roundingError) - 1 :\n            Math.floor((val - bins.start) / bins.size + roundingError);\n    }\n    else {\n        var n1 = 0;\n        var n2 = bins.length;\n        var c = 0;\n        var binSize = (n2 > 1) ? (bins[n2 - 1] - bins[0]) / (n2 - 1) : 1;\n        var n, test;\n        if(binSize >= 0) {\n            test = linelow ? lessThan : lessOrEqual;\n        } else {\n            test = linelow ? greaterOrEqual : greaterThan;\n        }\n        val += binSize * roundingError * (linelow ? -1 : 1) * (binSize >= 0 ? 1 : -1);\n        // c is just to avoid infinite loops if there's an error\n        while(n1 < n2 && c++ < 100) {\n            n = Math.floor((n1 + n2) / 2);\n            if(test(bins[n], val)) n1 = n + 1;\n            else n2 = n;\n        }\n        if(c > 90) loggers.log('Long binary search...');\n        return n1 - 1;\n    }\n};\n\nfunction lessThan(a, b) { return a < b; }\nfunction lessOrEqual(a, b) { return a <= b; }\nfunction greaterThan(a, b) { return a > b; }\nfunction greaterOrEqual(a, b) { return a >= b; }\n\nexports.sorterAsc = function(a, b) { return a - b; };\nexports.sorterDes = function(a, b) { return b - a; };\n\n/**\n * find distinct values in an array, lumping together ones that appear to\n * just be off by a rounding error\n * return the distinct values and the minimum difference between any two\n */\nexports.distinctVals = function(valsIn) {\n    var vals = valsIn.slice();  // otherwise we sort the original array...\n    vals.sort(exports.sorterAsc);\n\n    var l = vals.length - 1;\n    var minDiff = (vals[l] - vals[0]) || 1;\n    var errDiff = minDiff / (l || 1) / 10000;\n    var v2 = [vals[0]];\n\n    for(var i = 0; i < l; i++) {\n        // make sure values aren't just off by a rounding error\n        if(vals[i + 1] > vals[i] + errDiff) {\n            minDiff = Math.min(minDiff, vals[i + 1] - vals[i]);\n            v2.push(vals[i + 1]);\n        }\n    }\n\n    return {vals: v2, minDiff: minDiff};\n};\n\n/**\n * return the smallest element from (sorted) array arrayIn that's bigger than val,\n * or (reverse) the largest element smaller than val\n * used to find the best tick given the minimum (non-rounded) tick\n * particularly useful for date/time where things are not powers of 10\n * binary search is probably overkill here...\n */\nexports.roundUp = function(val, arrayIn, reverse) {\n    var low = 0;\n    var high = arrayIn.length - 1;\n    var mid;\n    var c = 0;\n    var dlow = reverse ? 0 : 1;\n    var dhigh = reverse ? 1 : 0;\n    var rounded = reverse ? Math.ceil : Math.floor;\n    // c is just to avoid infinite loops if there's an error\n    while(low < high && c++ < 100) {\n        mid = rounded((low + high) / 2);\n        if(arrayIn[mid] <= val) low = mid + dlow;\n        else high = mid - dhigh;\n    }\n    return arrayIn[low];\n};\n\n/**\n * Tweak to Array.sort(sortFn) that improves performance for pre-sorted arrays\n *\n * Note that newer browsers (such as Chrome v70+) are starting to pick up\n * on pre-sorted arrays which may render the following optimization unnecessary\n * in the future.\n *\n * Motivation: sometimes we need to sort arrays but the input is likely to\n * already be sorted. Browsers don't seem to pick up on pre-sorted arrays,\n * and in fact Chrome is actually *slower* sorting pre-sorted arrays than purely\n * random arrays. FF is at least faster if the array is pre-sorted, but still\n * not as fast as it could be.\n * Here's how this plays out sorting a length-1e6 array:\n *\n * Calls to Sort FN  |  Chrome bare  |  FF bare  |  Chrome tweak  |  FF tweak\n *                   |  v68.0 Mac    |  v61.0 Mac|                |\n * ------------------+---------------+-----------+----------------+------------\n * ordered           |  30.4e6       |  10.1e6   |  1e6           |  1e6\n * reversed          |  29.4e6       |  9.9e6    |  1e6 + reverse |  1e6 + reverse\n * random            |  ~21e6        |  ~18.7e6  |  ~21e6         |  ~18.7e6\n *\n * So this is a substantial win for pre-sorted (ordered or exactly reversed)\n * arrays. Including this wrapper on an unsorted array adds a penalty that will\n * in general be only a few calls to the sort function. The only case this\n * penalty will be significant is if the array is mostly sorted but there are\n * a few unsorted items near the end, but the penalty is still at most N calls\n * out of (for N=1e6) ~20N total calls\n *\n * @param {Array} array: the array, to be sorted in place\n * @param {function} sortFn: As in Array.sort, function(a, b) that puts\n *     item a before item b if the return is negative, a after b if positive,\n *     and no change if zero.\n * @return {Array}: the original array, sorted in place.\n */\nexports.sort = function(array, sortFn) {\n    var notOrdered = 0;\n    var notReversed = 0;\n    for(var i = 1; i < array.length; i++) {\n        var pairOrder = sortFn(array[i], array[i - 1]);\n        if(pairOrder < 0) notOrdered = 1;\n        else if(pairOrder > 0) notReversed = 1;\n        if(notOrdered && notReversed) return array.sort(sortFn);\n    }\n    return notReversed ? array : array.reverse();\n};\n\n/**\n * find index in array 'arr' that minimizes 'fn'\n *\n * @param {array} arr : array where to search\n * @param {fn (optional)} fn : function to minimize,\n *   if not given, fn is the identity function\n * @return {integer}\n */\nexports.findIndexOfMin = function(arr, fn) {\n    fn = fn || identity;\n\n    var min = Infinity;\n    var ind;\n\n    for(var i = 0; i < arr.length; i++) {\n        var v = fn(arr[i]);\n        if(v < min) {\n            min = v;\n            ind = i;\n        }\n    }\n    return ind;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACzC,IAAIC,OAAO,GAAGD,OAAO,CAAC,WAAW,CAAC;AAClC,IAAIE,QAAQ,GAAGF,OAAO,CAAC,YAAY,CAAC;;AAEpC;AACA;AACA;AACA,IAAIG,aAAa,GAAG,IAAI;;AAGxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,OAAO,CAACC,OAAO,GAAG,UAASC,GAAG,EAAEC,IAAI,EAAEC,OAAO,EAAE;EAC3C,IAAGT,SAAS,CAACQ,IAAI,CAACE,KAAK,CAAC,EAAE;IACtB,OAAOD,OAAO,GACVE,IAAI,CAACC,IAAI,CAAC,CAACL,GAAG,GAAGC,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACK,IAAI,GAAGT,aAAa,CAAC,GAAG,CAAC,GAC7DO,IAAI,CAACG,KAAK,CAAC,CAACP,GAAG,GAAGC,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACK,IAAI,GAAGT,aAAa,CAAC;EAClE,CAAC,MACI;IACD,IAAIW,EAAE,GAAG,CAAC;IACV,IAAIC,EAAE,GAAGR,IAAI,CAACS,MAAM;IACpB,IAAIC,CAAC,GAAG,CAAC;IACT,IAAIC,OAAO,GAAIH,EAAE,GAAG,CAAC,GAAI,CAACR,IAAI,CAACQ,EAAE,GAAG,CAAC,CAAC,GAAGR,IAAI,CAAC,CAAC,CAAC,KAAKQ,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;IAChE,IAAII,CAAC,EAAEC,IAAI;IACX,IAAGF,OAAO,IAAI,CAAC,EAAE;MACbE,IAAI,GAAGZ,OAAO,GAAGa,QAAQ,GAAGC,WAAW;IAC3C,CAAC,MAAM;MACHF,IAAI,GAAGZ,OAAO,GAAGe,cAAc,GAAGC,WAAW;IACjD;IACAlB,GAAG,IAAIY,OAAO,GAAGf,aAAa,IAAIK,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAIU,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7E;IACA,OAAMJ,EAAE,GAAGC,EAAE,IAAIE,CAAC,EAAE,GAAG,GAAG,EAAE;MACxBE,CAAC,GAAGT,IAAI,CAACG,KAAK,CAAC,CAACC,EAAE,GAAGC,EAAE,IAAI,CAAC,CAAC;MAC7B,IAAGK,IAAI,CAACb,IAAI,CAACY,CAAC,CAAC,EAAEb,GAAG,CAAC,EAAEQ,EAAE,GAAGK,CAAC,GAAG,CAAC,CAAC,KAC7BJ,EAAE,GAAGI,CAAC;IACf;IACA,IAAGF,CAAC,GAAG,EAAE,EAAEhB,OAAO,CAACwB,GAAG,CAAC,uBAAuB,CAAC;IAC/C,OAAOX,EAAE,GAAG,CAAC;EACjB;AACJ,CAAC;AAED,SAASO,QAAQ,CAACK,CAAC,EAAEC,CAAC,EAAE;EAAE,OAAOD,CAAC,GAAGC,CAAC;AAAE;AACxC,SAASL,WAAW,CAACI,CAAC,EAAEC,CAAC,EAAE;EAAE,OAAOD,CAAC,IAAIC,CAAC;AAAE;AAC5C,SAASH,WAAW,CAACE,CAAC,EAAEC,CAAC,EAAE;EAAE,OAAOD,CAAC,GAAGC,CAAC;AAAE;AAC3C,SAASJ,cAAc,CAACG,CAAC,EAAEC,CAAC,EAAE;EAAE,OAAOD,CAAC,IAAIC,CAAC;AAAE;AAE/CvB,OAAO,CAACwB,SAAS,GAAG,UAASF,CAAC,EAAEC,CAAC,EAAE;EAAE,OAAOD,CAAC,GAAGC,CAAC;AAAE,CAAC;AACpDvB,OAAO,CAACyB,SAAS,GAAG,UAASH,CAAC,EAAEC,CAAC,EAAE;EAAE,OAAOA,CAAC,GAAGD,CAAC;AAAE,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACAtB,OAAO,CAAC0B,YAAY,GAAG,UAASC,MAAM,EAAE;EACpC,IAAIC,IAAI,GAAGD,MAAM,CAACE,KAAK,EAAE,CAAC,CAAE;EAC5BD,IAAI,CAACE,IAAI,CAAC9B,OAAO,CAACwB,SAAS,CAAC;EAE5B,IAAIO,CAAC,GAAGH,IAAI,CAAChB,MAAM,GAAG,CAAC;EACvB,IAAIoB,OAAO,GAAIJ,IAAI,CAACG,CAAC,CAAC,GAAGH,IAAI,CAAC,CAAC,CAAC,IAAK,CAAC;EACtC,IAAIK,OAAO,GAAGD,OAAO,IAAID,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK;EACxC,IAAIG,EAAE,GAAG,CAACN,IAAI,CAAC,CAAC,CAAC,CAAC;EAElB,KAAI,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,EAAEI,CAAC,EAAE,EAAE;IACvB;IACA,IAAGP,IAAI,CAACO,CAAC,GAAG,CAAC,CAAC,GAAGP,IAAI,CAACO,CAAC,CAAC,GAAGF,OAAO,EAAE;MAChCD,OAAO,GAAG1B,IAAI,CAAC8B,GAAG,CAACJ,OAAO,EAAEJ,IAAI,CAACO,CAAC,GAAG,CAAC,CAAC,GAAGP,IAAI,CAACO,CAAC,CAAC,CAAC;MAClDD,EAAE,CAACG,IAAI,CAACT,IAAI,CAACO,CAAC,GAAG,CAAC,CAAC,CAAC;IACxB;EACJ;EAEA,OAAO;IAACP,IAAI,EAAEM,EAAE;IAAEF,OAAO,EAAEA;EAAO,CAAC;AACvC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAhC,OAAO,CAACsC,OAAO,GAAG,UAASpC,GAAG,EAAEqC,OAAO,EAAEC,OAAO,EAAE;EAC9C,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,IAAI,GAAGH,OAAO,CAAC3B,MAAM,GAAG,CAAC;EAC7B,IAAI+B,GAAG;EACP,IAAI9B,CAAC,GAAG,CAAC;EACT,IAAI+B,IAAI,GAAGJ,OAAO,GAAG,CAAC,GAAG,CAAC;EAC1B,IAAIK,KAAK,GAAGL,OAAO,GAAG,CAAC,GAAG,CAAC;EAC3B,IAAIM,OAAO,GAAGN,OAAO,GAAGlC,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACG,KAAK;EAC9C;EACA,OAAMgC,GAAG,GAAGC,IAAI,IAAI7B,CAAC,EAAE,GAAG,GAAG,EAAE;IAC3B8B,GAAG,GAAGG,OAAO,CAAC,CAACL,GAAG,GAAGC,IAAI,IAAI,CAAC,CAAC;IAC/B,IAAGH,OAAO,CAACI,GAAG,CAAC,IAAIzC,GAAG,EAAEuC,GAAG,GAAGE,GAAG,GAAGC,IAAI,CAAC,KACpCF,IAAI,GAAGC,GAAG,GAAGE,KAAK;EAC3B;EACA,OAAON,OAAO,CAACE,GAAG,CAAC;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzC,OAAO,CAAC8B,IAAI,GAAG,UAASiB,KAAK,EAAEC,MAAM,EAAE;EACnC,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,WAAW,GAAG,CAAC;EACnB,KAAI,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,KAAK,CAACnC,MAAM,EAAEuB,CAAC,EAAE,EAAE;IAClC,IAAIgB,SAAS,GAAGH,MAAM,CAACD,KAAK,CAACZ,CAAC,CAAC,EAAEY,KAAK,CAACZ,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9C,IAAGgB,SAAS,GAAG,CAAC,EAAEF,UAAU,GAAG,CAAC,CAAC,KAC5B,IAAGE,SAAS,GAAG,CAAC,EAAED,WAAW,GAAG,CAAC;IACtC,IAAGD,UAAU,IAAIC,WAAW,EAAE,OAAOH,KAAK,CAACjB,IAAI,CAACkB,MAAM,CAAC;EAC3D;EACA,OAAOE,WAAW,GAAGH,KAAK,GAAGA,KAAK,CAACP,OAAO,EAAE;AAChD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxC,OAAO,CAACoD,cAAc,GAAG,UAASC,GAAG,EAAEC,EAAE,EAAE;EACvCA,EAAE,GAAGA,EAAE,IAAIxD,QAAQ;EAEnB,IAAIsC,GAAG,GAAGmB,QAAQ;EAClB,IAAIC,GAAG;EAEP,KAAI,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkB,GAAG,CAACzC,MAAM,EAAEuB,CAAC,EAAE,EAAE;IAChC,IAAIsB,CAAC,GAAGH,EAAE,CAACD,GAAG,CAAClB,CAAC,CAAC,CAAC;IAClB,IAAGsB,CAAC,GAAGrB,GAAG,EAAE;MACRA,GAAG,GAAGqB,CAAC;MACPD,GAAG,GAAGrB,CAAC;IACX;EACJ;EACA,OAAOqB,GAAG;AACd,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
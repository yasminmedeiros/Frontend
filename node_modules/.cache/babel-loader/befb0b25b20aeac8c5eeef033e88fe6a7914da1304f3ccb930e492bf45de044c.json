{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorscaleAttrs = require('../../components/colorscale/attributes');\nvar colorbarAttrs = require('../../components/colorbar/attributes');\nvar mesh3dAttrs = require('../mesh3d/attributes');\nvar baseAttrs = require('../../plots/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar attrs = {\n  x: {\n    valType: 'data_array',\n    role: 'info',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the x coordinates of the vector field', 'and of the displayed cones.'].join(' ')\n  },\n  y: {\n    valType: 'data_array',\n    role: 'info',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the y coordinates of the vector field', 'and of the displayed cones.'].join(' ')\n  },\n  z: {\n    valType: 'data_array',\n    role: 'info',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the z coordinates of the vector field', 'and of the displayed cones.'].join(' ')\n  },\n  u: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the x components of the vector field.'\n  },\n  v: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the y components of the vector field.'\n  },\n  w: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the z components of the vector field.'\n  },\n  // TODO add way to specify cone positions independently of the vector field\n  // provided, similar to MATLAB's coneplot Cx/Cy/Cz meshgrids,\n  // see https://www.mathworks.com/help/matlab/ref/coneplot.html\n  //\n  // Alternatively, if our goal is only to 'fill in gaps' in the vector data,\n  // we could try to extend the heatmap 'connectgaps' algorithm to 3D.\n  // From AJ: this particular algorithm which amounts to a Poisson equation,\n  // both for interpolation and extrapolation - is the right one to use for\n  // cones too.  It makes a field with zero divergence, which is a good\n  // baseline assumption for vector fields.\n  //\n  // cones: {\n  //     // potential attributes to add:\n  //     //\n  //     // - meshmode: 'cartesian-product', 'pts', 'grid'\n  //     //\n  //     // under `meshmode: 'grid'`\n  //     // - (x|y|z)grid.start\n  //     // - (x|y|z)grid.end\n  //     // - (x|y|z)grid.size\n  //\n  //     x: {\n  //         valType: 'data_array',\n  //         editType: 'calc',\n  //         description: 'Sets the x coordinates of the cones to be displayed.'\n  //     },\n  //     y: {\n  //         valType: 'data_array',\n  //         editType: 'calc',\n  //         description: 'Sets the y coordinates of the cones to be displayed.'\n  //     },\n  //     z: {\n  //         valType: 'data_array',\n  //         editType: 'calc',\n  //         description: 'Sets the z coordinates of the cones to be displayed.'\n  //     },\n  //\n  //     editType: 'calc',\n  //     description: [\n  //         'By setting `cones.x`, `cones.y` and `cones.z` to 1D arrays,',\n  //         'plotly creates a mesh using the cartesian product of those 3 arrays.'\n  //     ].join(' ')\n  // },\n\n  sizemode: {\n    valType: 'enumerated',\n    values: ['scaled', 'absolute'],\n    role: 'info',\n    editType: 'calc',\n    dflt: 'scaled',\n    description: ['Determines whether `sizeref` is set as a *scaled* (i.e unitless) scalar', '(normalized by the max u/v/w norm in the vector field) or as', '*absolute* value (in the same units as the vector field).'].join(' ')\n  },\n  sizeref: {\n    valType: 'number',\n    role: 'info',\n    editType: 'calc',\n    min: 0,\n    description: ['Adjusts the cone size scaling.', 'The size of the cones is determined by their u/v/w norm multiplied a factor and `sizeref`.', 'This factor (computed internally) corresponds to the minimum \"time\" to travel across', 'two successive x/y/z positions at the average velocity of those two successive positions.', 'All cones in a given trace use the same factor.', 'With `sizemode` set to *scaled*, `sizeref` is unitless, its default value is *0.5*', 'With `sizemode` set to *absolute*, `sizeref` has the same units as the u/v/w vector field,', 'its the default value is half the sample\\'s maximum vector norm.'].join(' ')\n  },\n  anchor: {\n    valType: 'enumerated',\n    role: 'info',\n    editType: 'calc',\n    values: ['tip', 'tail', 'cm', 'center'],\n    dflt: 'cm',\n    description: ['Sets the cones\\' anchor with respect to their x/y/z positions.', 'Note that *cm* denote the cone\\'s center of mass which corresponds to', '1/4 from the tail to tip.'].join(' ')\n  },\n  text: {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    arrayOk: true,\n    editType: 'calc',\n    description: ['Sets the text elements associated with the cones.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  }\n};\nextendFlat(attrs, colorscaleAttrs('', {\n  colorAttr: 'u/v/w norm',\n  showScaleDflt: true,\n  editTypeOverride: 'calc'\n}), {\n  colorbar: colorbarAttrs\n});\nvar fromMesh3d = ['opacity', 'lightposition', 'lighting'];\nfromMesh3d.forEach(function (k) {\n  attrs[k] = mesh3dAttrs[k];\n});\nattrs.hoverinfo = extendFlat({}, baseAttrs.hoverinfo, {\n  editType: 'calc',\n  flags: ['x', 'y', 'z', 'u', 'v', 'w', 'norm', 'text', 'name'],\n  dflt: 'x+y+z+norm+text+name'\n});\nattrs.transforms = undefined;\nmodule.exports = attrs;","map":{"version":3,"names":["colorscaleAttrs","require","colorbarAttrs","mesh3dAttrs","baseAttrs","extendFlat","attrs","x","valType","role","editType","description","join","y","z","u","v","w","sizemode","values","dflt","sizeref","min","anchor","text","arrayOk","colorAttr","showScaleDflt","editTypeOverride","colorbar","fromMesh3d","forEach","k","hoverinfo","flags","transforms","undefined","module","exports"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/cone/attributes.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorscaleAttrs = require('../../components/colorscale/attributes');\nvar colorbarAttrs = require('../../components/colorbar/attributes');\nvar mesh3dAttrs = require('../mesh3d/attributes');\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar attrs = {\n    x: {\n        valType: 'data_array',\n        role: 'info',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the x coordinates of the vector field',\n            'and of the displayed cones.'\n        ].join(' ')\n    },\n    y: {\n        valType: 'data_array',\n        role: 'info',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the y coordinates of the vector field',\n            'and of the displayed cones.'\n        ].join(' ')\n    },\n    z: {\n        valType: 'data_array',\n        role: 'info',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the z coordinates of the vector field',\n            'and of the displayed cones.'\n        ].join(' ')\n    },\n\n    u: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the x components of the vector field.'\n    },\n    v: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the y components of the vector field.'\n    },\n    w: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the z components of the vector field.'\n    },\n\n    // TODO add way to specify cone positions independently of the vector field\n    // provided, similar to MATLAB's coneplot Cx/Cy/Cz meshgrids,\n    // see https://www.mathworks.com/help/matlab/ref/coneplot.html\n    //\n    // Alternatively, if our goal is only to 'fill in gaps' in the vector data,\n    // we could try to extend the heatmap 'connectgaps' algorithm to 3D.\n    // From AJ: this particular algorithm which amounts to a Poisson equation,\n    // both for interpolation and extrapolation - is the right one to use for\n    // cones too.  It makes a field with zero divergence, which is a good\n    // baseline assumption for vector fields.\n    //\n    // cones: {\n    //     // potential attributes to add:\n    //     //\n    //     // - meshmode: 'cartesian-product', 'pts', 'grid'\n    //     //\n    //     // under `meshmode: 'grid'`\n    //     // - (x|y|z)grid.start\n    //     // - (x|y|z)grid.end\n    //     // - (x|y|z)grid.size\n    //\n    //     x: {\n    //         valType: 'data_array',\n    //         editType: 'calc',\n    //         description: 'Sets the x coordinates of the cones to be displayed.'\n    //     },\n    //     y: {\n    //         valType: 'data_array',\n    //         editType: 'calc',\n    //         description: 'Sets the y coordinates of the cones to be displayed.'\n    //     },\n    //     z: {\n    //         valType: 'data_array',\n    //         editType: 'calc',\n    //         description: 'Sets the z coordinates of the cones to be displayed.'\n    //     },\n    //\n    //     editType: 'calc',\n    //     description: [\n    //         'By setting `cones.x`, `cones.y` and `cones.z` to 1D arrays,',\n    //         'plotly creates a mesh using the cartesian product of those 3 arrays.'\n    //     ].join(' ')\n    // },\n\n    sizemode: {\n        valType: 'enumerated',\n        values: ['scaled', 'absolute'],\n        role: 'info',\n        editType: 'calc',\n        dflt: 'scaled',\n        description: [\n            'Determines whether `sizeref` is set as a *scaled* (i.e unitless) scalar',\n            '(normalized by the max u/v/w norm in the vector field) or as',\n            '*absolute* value (in the same units as the vector field).'\n        ].join(' ')\n    },\n    sizeref: {\n        valType: 'number',\n        role: 'info',\n        editType: 'calc',\n        min: 0,\n        description: [\n            'Adjusts the cone size scaling.',\n            'The size of the cones is determined by their u/v/w norm multiplied a factor and `sizeref`.',\n            'This factor (computed internally) corresponds to the minimum \"time\" to travel across',\n            'two successive x/y/z positions at the average velocity of those two successive positions.',\n            'All cones in a given trace use the same factor.',\n            'With `sizemode` set to *scaled*, `sizeref` is unitless, its default value is *0.5*',\n            'With `sizemode` set to *absolute*, `sizeref` has the same units as the u/v/w vector field,',\n            'its the default value is half the sample\\'s maximum vector norm.'\n        ].join(' ')\n    },\n\n    anchor: {\n        valType: 'enumerated',\n        role: 'info',\n        editType: 'calc',\n        values: ['tip', 'tail', 'cm', 'center'],\n        dflt: 'cm',\n        description: [\n            'Sets the cones\\' anchor with respect to their x/y/z positions.',\n            'Note that *cm* denote the cone\\'s center of mass which corresponds to',\n            '1/4 from the tail to tip.'\n        ].join(' ')\n    },\n\n    text: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        arrayOk: true,\n        editType: 'calc',\n        description: [\n            'Sets the text elements associated with the cones.',\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\n            'these elements will be seen in the hover labels.'\n        ].join(' ')\n    }\n};\n\nextendFlat(attrs, colorscaleAttrs('', {\n    colorAttr: 'u/v/w norm',\n    showScaleDflt: true,\n    editTypeOverride: 'calc'\n}), {\n    colorbar: colorbarAttrs\n});\n\nvar fromMesh3d = ['opacity', 'lightposition', 'lighting'];\n\nfromMesh3d.forEach(function(k) {\n    attrs[k] = mesh3dAttrs[k];\n});\n\nattrs.hoverinfo = extendFlat({}, baseAttrs.hoverinfo, {\n    editType: 'calc',\n    flags: ['x', 'y', 'z', 'u', 'v', 'w', 'norm', 'text', 'name'],\n    dflt: 'x+y+z+norm+text+name'\n});\n\nattrs.transforms = undefined;\n\nmodule.exports = attrs;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"//Optimized version for triangle closest point\n// Based on Eberly's WildMagick codes\n// http://www.geometrictools.com/LibMathematics/Distance/Distance.html\n\"use strict\";\n\nvar diff = new Float64Array(4);\nvar edge0 = new Float64Array(4);\nvar edge1 = new Float64Array(4);\nfunction closestPoint2d(V0, V1, V2, point, result) {\n  //Reallocate buffers if necessary\n  if (diff.length < point.length) {\n    diff = new Float64Array(point.length);\n    edge0 = new Float64Array(point.length);\n    edge1 = new Float64Array(point.length);\n  }\n  //Compute edges\n  for (var i = 0; i < point.length; ++i) {\n    diff[i] = V0[i] - point[i];\n    edge0[i] = V1[i] - V0[i];\n    edge1[i] = V2[i] - V0[i];\n  }\n  //Compute coefficients for quadratic func\n  var a00 = 0.0,\n    a01 = 0.0,\n    a11 = 0.0,\n    b0 = 0.0,\n    b1 = 0.0,\n    c = 0.0;\n  for (var i = 0; i < point.length; ++i) {\n    var e0 = edge0[i],\n      e1 = edge1[i],\n      d = diff[i];\n    a00 += e0 * e0;\n    a01 += e0 * e1;\n    a11 += e1 * e1;\n    b0 += d * e0;\n    b1 += d * e1;\n    c += d * d;\n  }\n  //Compute determinant/coeffs\n  var det = Math.abs(a00 * a11 - a01 * a01);\n  var s = a01 * b1 - a11 * b0;\n  var t = a01 * b0 - a00 * b1;\n  var sqrDistance;\n  //Hardcoded Voronoi diagram classification\n  if (s + t <= det) {\n    if (s < 0) {\n      if (t < 0) {\n        // region 4\n        if (b0 < 0) {\n          t = 0;\n          if (-b0 >= a00) {\n            s = 1.0;\n            sqrDistance = a00 + 2.0 * b0 + c;\n          } else {\n            s = -b0 / a00;\n            sqrDistance = b0 * s + c;\n          }\n        } else {\n          s = 0;\n          if (b1 >= 0) {\n            t = 0;\n            sqrDistance = c;\n          } else if (-b1 >= a11) {\n            t = 1;\n            sqrDistance = a11 + 2.0 * b1 + c;\n          } else {\n            t = -b1 / a11;\n            sqrDistance = b1 * t + c;\n          }\n        }\n      } else {\n        // region 3\n        s = 0;\n        if (b1 >= 0) {\n          t = 0;\n          sqrDistance = c;\n        } else if (-b1 >= a11) {\n          t = 1;\n          sqrDistance = a11 + 2.0 * b1 + c;\n        } else {\n          t = -b1 / a11;\n          sqrDistance = b1 * t + c;\n        }\n      }\n    } else if (t < 0) {\n      // region 5\n      t = 0;\n      if (b0 >= 0) {\n        s = 0;\n        sqrDistance = c;\n      } else if (-b0 >= a00) {\n        s = 1;\n        sqrDistance = a00 + 2.0 * b0 + c;\n      } else {\n        s = -b0 / a00;\n        sqrDistance = b0 * s + c;\n      }\n    } else {\n      // region 0\n      // minimum at interior point\n      var invDet = 1.0 / det;\n      s *= invDet;\n      t *= invDet;\n      sqrDistance = s * (a00 * s + a01 * t + 2.0 * b0) + t * (a01 * s + a11 * t + 2.0 * b1) + c;\n    }\n  } else {\n    var tmp0, tmp1, numer, denom;\n    if (s < 0) {\n      // region 2\n      tmp0 = a01 + b0;\n      tmp1 = a11 + b1;\n      if (tmp1 > tmp0) {\n        numer = tmp1 - tmp0;\n        denom = a00 - 2.0 * a01 + a11;\n        if (numer >= denom) {\n          s = 1;\n          t = 0;\n          sqrDistance = a00 + 2.0 * b0 + c;\n        } else {\n          s = numer / denom;\n          t = 1 - s;\n          sqrDistance = s * (a00 * s + a01 * t + 2.0 * b0) + t * (a01 * s + a11 * t + 2.0 * b1) + c;\n        }\n      } else {\n        s = 0;\n        if (tmp1 <= 0) {\n          t = 1;\n          sqrDistance = a11 + 2.0 * b1 + c;\n        } else if (b1 >= 0) {\n          t = 0;\n          sqrDistance = c;\n        } else {\n          t = -b1 / a11;\n          sqrDistance = b1 * t + c;\n        }\n      }\n    } else if (t < 0) {\n      // region 6\n      tmp0 = a01 + b1;\n      tmp1 = a00 + b0;\n      if (tmp1 > tmp0) {\n        numer = tmp1 - tmp0;\n        denom = a00 - 2.0 * a01 + a11;\n        if (numer >= denom) {\n          t = 1;\n          s = 0;\n          sqrDistance = a11 + 2.0 * b1 + c;\n        } else {\n          t = numer / denom;\n          s = 1 - t;\n          sqrDistance = s * (a00 * s + a01 * t + 2.0 * b0) + t * (a01 * s + a11 * t + 2.0 * b1) + c;\n        }\n      } else {\n        t = 0;\n        if (tmp1 <= 0) {\n          s = 1;\n          sqrDistance = a00 + 2.0 * b0 + c;\n        } else if (b0 >= 0) {\n          s = 0;\n          sqrDistance = c;\n        } else {\n          s = -b0 / a00;\n          sqrDistance = b0 * s + c;\n        }\n      }\n    } else {\n      // region 1\n      numer = a11 + b1 - a01 - b0;\n      if (numer <= 0) {\n        s = 0;\n        t = 1;\n        sqrDistance = a11 + 2.0 * b1 + c;\n      } else {\n        denom = a00 - 2.0 * a01 + a11;\n        if (numer >= denom) {\n          s = 1;\n          t = 0;\n          sqrDistance = a00 + 2.0 * b0 + c;\n        } else {\n          s = numer / denom;\n          t = 1 - s;\n          sqrDistance = s * (a00 * s + a01 * t + 2.0 * b0) + t * (a01 * s + a11 * t + 2.0 * b1) + c;\n        }\n      }\n    }\n  }\n  var u = 1.0 - s - t;\n  for (var i = 0; i < point.length; ++i) {\n    result[i] = u * V0[i] + s * V1[i] + t * V2[i];\n  }\n  if (sqrDistance < 0) {\n    return 0;\n  }\n  return sqrDistance;\n}\nmodule.exports = closestPoint2d;","map":{"version":3,"names":["diff","Float64Array","edge0","edge1","closestPoint2d","V0","V1","V2","point","result","length","i","a00","a01","a11","b0","b1","c","e0","e1","d","det","Math","abs","s","t","sqrDistance","invDet","tmp0","tmp1","numer","denom","u","module","exports"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/polytope-closest-point/lib/closest_point_2d.js"],"sourcesContent":["//Optimized version for triangle closest point\n// Based on Eberly's WildMagick codes\n// http://www.geometrictools.com/LibMathematics/Distance/Distance.html\n\"use strict\";\n\nvar diff = new Float64Array(4);\nvar edge0 = new Float64Array(4);\nvar edge1 = new Float64Array(4);\n\nfunction closestPoint2d(V0, V1, V2, point, result) {\n  //Reallocate buffers if necessary\n  if(diff.length < point.length) {\n    diff = new Float64Array(point.length);\n    edge0 = new Float64Array(point.length);\n    edge1 = new Float64Array(point.length);\n  }\n  //Compute edges\n  for(var i=0; i<point.length; ++i) {\n    diff[i]  = V0[i] - point[i];\n    edge0[i] = V1[i] - V0[i];\n    edge1[i] = V2[i] - V0[i];\n  }\n  //Compute coefficients for quadratic func\n  var a00 = 0.0\n    , a01 = 0.0\n    , a11 = 0.0\n    , b0  = 0.0\n    , b1  = 0.0\n    , c   = 0.0;\n  for(var i=0; i<point.length; ++i) {\n    var e0 = edge0[i]\n      , e1 = edge1[i]\n      , d  = diff[i];\n    a00 += e0 * e0;\n    a01 += e0 * e1;\n    a11 += e1 * e1;\n    b0  += d * e0;\n    b1  += d * e1;\n    c   += d * d;\n  }\n  //Compute determinant/coeffs\n  var det = Math.abs(a00*a11 - a01*a01);\n  var s   = a01*b1 - a11*b0;\n  var t   = a01*b0 - a00*b1;\n  var sqrDistance;\n  //Hardcoded Voronoi diagram classification\n  if (s + t <= det) {\n    if (s < 0) {\n      if (t < 0) { // region 4\n        if (b0 < 0) {\n          t = 0;\n          if (-b0 >= a00) {\n            s = 1.0;\n            sqrDistance = a00 + 2.0*b0 + c;\n          } else {\n            s = -b0/a00;\n            sqrDistance = b0*s + c;\n          }\n        } else {\n          s = 0;\n          if (b1 >= 0) {\n            t = 0;\n            sqrDistance = c;\n          } else if (-b1 >= a11) {\n            t = 1;\n            sqrDistance = a11 + 2.0*b1 + c;\n          } else {\n            t = -b1/a11;\n            sqrDistance = b1*t + c;\n          }\n        }\n      } else {  // region 3\n        s = 0;\n        if (b1 >= 0) {\n          t = 0;\n          sqrDistance = c;\n        } else if (-b1 >= a11) {\n          t = 1;\n          sqrDistance = a11 + 2.0*b1 + c;\n        } else {\n          t = -b1/a11;\n          sqrDistance = b1*t + c;\n        }\n      }\n    } else if (t < 0) { // region 5\n      t = 0;\n      if (b0 >= 0) {\n        s = 0;\n        sqrDistance = c;\n      } else if (-b0 >= a00) {\n        s = 1;\n        sqrDistance = a00 + 2.0*b0 + c;\n      } else {\n        s = -b0/a00;\n        sqrDistance = b0*s + c;\n      }\n    } else {  // region 0\n      // minimum at interior point\n      var invDet = 1.0 / det;\n      s *= invDet;\n      t *= invDet;\n      sqrDistance = s*(a00*s + a01*t + 2.0*b0) + t*(a01*s + a11*t + 2.0*b1) + c;\n    }\n  } else {\n    var tmp0, tmp1, numer, denom;\n    \n    if (s < 0) {  // region 2\n      tmp0 = a01 + b0;\n      tmp1 = a11 + b1;\n      if (tmp1 > tmp0) {\n        numer = tmp1 - tmp0;\n        denom = a00 - 2.0*a01 + a11;\n        if (numer >= denom) {\n          s = 1;\n          t = 0;\n          sqrDistance = a00 + 2.0*b0 + c;\n        } else {\n          s = numer/denom;\n          t = 1 - s;\n          sqrDistance = s*(a00*s + a01*t + 2.0*b0) +\n          t*(a01*s + a11*t + 2.0*b1) + c;\n        }\n      } else {\n        s = 0;\n        if (tmp1 <= 0) {\n          t = 1;\n          sqrDistance = a11 + 2.0*b1 + c;\n        } else if (b1 >= 0) {\n          t = 0;\n          sqrDistance = c;\n        } else {\n          t = -b1/a11;\n          sqrDistance = b1*t + c;\n        }\n      }\n    } else if (t < 0) {  // region 6\n      tmp0 = a01 + b1;\n      tmp1 = a00 + b0;\n      if (tmp1 > tmp0) {\n        numer = tmp1 - tmp0;\n        denom = a00 - 2.0*a01 + a11;\n        if (numer >= denom) {\n          t = 1;\n          s = 0;\n          sqrDistance = a11 + 2.0*b1 + c;\n        } else {\n          t = numer/denom;\n          s = 1 - t;\n          sqrDistance = s*(a00*s + a01*t + 2.0*b0) +\n          t*(a01*s + a11*t + 2.0*b1) + c;\n        }\n      } else {\n        t = 0;\n        if (tmp1 <= 0) {\n          s = 1;\n          sqrDistance = a00 + 2.0*b0 + c;\n        } else if (b0 >= 0) {\n          s = 0;\n          sqrDistance = c;\n        } else {\n          s = -b0/a00;\n          sqrDistance = b0*s + c;\n        }\n      }\n    } else {  // region 1\n      numer = a11 + b1 - a01 - b0;\n      if (numer <= 0) {\n        s = 0;\n        t = 1;\n        sqrDistance = a11 + 2.0*b1 + c;\n      } else {\n        denom = a00 - 2.0*a01 + a11;\n        if (numer >= denom) {\n          s = 1;\n          t = 0;\n          sqrDistance = a00 + 2.0*b0 + c;\n        } else {\n          s = numer/denom;\n          t = 1 - s;\n          sqrDistance = s*(a00*s + a01*t + 2.0*b0) +\n          t*(a01*s + a11*t + 2.0*b1) + c;\n        }\n      }\n    }\n  }\n  var u = 1.0 - s - t;\n  for(var i=0; i<point.length; ++i) {\n    result[i] = u * V0[i] + s * V1[i] + t * V2[i];\n  }\n  if(sqrDistance < 0) {\n    return 0;\n  }\n  return sqrDistance;\n}\n\nmodule.exports = closestPoint2d;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorscaleAttrs = require('../../components/colorscale/attributes');\nvar colorbarAttrs = require('../../components/colorbar/attributes');\nvar mesh3dAttrs = require('../mesh3d/attributes');\nvar baseAttrs = require('../../plots/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar attrs = {\n  x: {\n    valType: 'data_array',\n    role: 'info',\n    editType: 'calc+clearAxisTypes',\n    description: 'Sets the x coordinates of the vector field.'\n  },\n  y: {\n    valType: 'data_array',\n    role: 'info',\n    editType: 'calc+clearAxisTypes',\n    description: 'Sets the y coordinates of the vector field.'\n  },\n  z: {\n    valType: 'data_array',\n    role: 'info',\n    editType: 'calc+clearAxisTypes',\n    description: 'Sets the z coordinates of the vector field.'\n  },\n  u: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the x components of the vector field.'\n  },\n  v: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the y components of the vector field.'\n  },\n  w: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the z components of the vector field.'\n  },\n  starts: {\n    x: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the x components of the starting position of the streamtubes'].join(' ')\n    },\n    y: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the y components of the starting position of the streamtubes'].join(' ')\n    },\n    z: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the z components of the starting position of the streamtubes'].join(' ')\n    },\n    editType: 'calc'\n  },\n  maxdisplayed: {\n    valType: 'integer',\n    min: 0,\n    dflt: 1000,\n    role: 'info',\n    editType: 'calc',\n    description: ['The maximum number of displayed segments in a streamtube.'].join(' ')\n  },\n  // TODO\n  //\n  // Should add 'absolute' (like cone traces have), but currently gl-streamtube3d's\n  // `absoluteTubeSize` doesn't behave well enough for our needs.\n  //\n  // 'fixed' would be a nice addition to plot stream 'lines', see\n  // https://github.com/plotly/plotly.js/commit/812be20750e21e0a1831975001c248d365850f73#r29129877\n  //\n  // sizemode: {\n  //     valType: 'enumerated',\n  //     values: ['scaled', 'absolute', 'fixed'],\n  //     dflt: 'scaled',\n  //     role: 'info',\n  //     editType: 'calc',\n  //     description: [\n  //         'Sets the mode by which the streamtubes are sized.'\n  //     ].join(' ')\n  // },\n\n  sizeref: {\n    valType: 'number',\n    role: 'info',\n    editType: 'calc',\n    min: 0,\n    dflt: 1,\n    description: ['The scaling factor for the streamtubes.', 'The default is 1, which avoids two max divergence tubes from touching', 'at adjacent starting positions.'].join(' ')\n  },\n  text: {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    editType: 'calc',\n    description: ['Sets a text element associated with this trace.', 'If trace `hoverinfo` contains a *text* flag,', 'this text element will be seen in all hover labels.', 'Note that streamtube traces do not support array `text` values.'].join(' ')\n  }\n};\nextendFlat(attrs, colorscaleAttrs('', {\n  colorAttr: 'u/v/w norm',\n  showScaleDflt: true,\n  editTypeOverride: 'calc'\n}), {\n  colorbar: colorbarAttrs\n});\nvar fromMesh3d = ['opacity', 'lightposition', 'lighting'];\nfromMesh3d.forEach(function (k) {\n  attrs[k] = mesh3dAttrs[k];\n});\nattrs.hoverinfo = extendFlat({}, baseAttrs.hoverinfo, {\n  editType: 'calc',\n  flags: ['x', 'y', 'z', 'u', 'v', 'w', 'norm', 'divergence', 'text', 'name'],\n  dflt: 'x+y+z+norm+text+name'\n});\nattrs.transforms = undefined;\nmodule.exports = attrs;","map":{"version":3,"names":["colorscaleAttrs","require","colorbarAttrs","mesh3dAttrs","baseAttrs","extendFlat","attrs","x","valType","role","editType","description","y","z","u","v","w","starts","join","maxdisplayed","min","dflt","sizeref","text","colorAttr","showScaleDflt","editTypeOverride","colorbar","fromMesh3d","forEach","k","hoverinfo","flags","transforms","undefined","module","exports"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/streamtube/attributes.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorscaleAttrs = require('../../components/colorscale/attributes');\nvar colorbarAttrs = require('../../components/colorbar/attributes');\nvar mesh3dAttrs = require('../mesh3d/attributes');\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar attrs = {\n    x: {\n        valType: 'data_array',\n        role: 'info',\n        editType: 'calc+clearAxisTypes',\n        description: 'Sets the x coordinates of the vector field.'\n    },\n    y: {\n        valType: 'data_array',\n        role: 'info',\n        editType: 'calc+clearAxisTypes',\n        description: 'Sets the y coordinates of the vector field.'\n    },\n    z: {\n        valType: 'data_array',\n        role: 'info',\n        editType: 'calc+clearAxisTypes',\n        description: 'Sets the z coordinates of the vector field.'\n    },\n\n    u: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the x components of the vector field.'\n    },\n    v: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the y components of the vector field.'\n    },\n    w: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the z components of the vector field.'\n    },\n\n    starts: {\n        x: {\n            valType: 'data_array',\n            editType: 'calc',\n            description: [\n                'Sets the x components of the starting position of the streamtubes',\n            ].join(' ')\n        },\n        y: {\n            valType: 'data_array',\n            editType: 'calc',\n            description: [\n                'Sets the y components of the starting position of the streamtubes',\n            ].join(' ')\n        },\n        z: {\n            valType: 'data_array',\n            editType: 'calc',\n            description: [\n                'Sets the z components of the starting position of the streamtubes',\n            ].join(' ')\n        },\n        editType: 'calc'\n    },\n\n    maxdisplayed: {\n        valType: 'integer',\n        min: 0,\n        dflt: 1000,\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'The maximum number of displayed segments in a streamtube.'\n        ].join(' ')\n    },\n\n    // TODO\n    //\n    // Should add 'absolute' (like cone traces have), but currently gl-streamtube3d's\n    // `absoluteTubeSize` doesn't behave well enough for our needs.\n    //\n    // 'fixed' would be a nice addition to plot stream 'lines', see\n    // https://github.com/plotly/plotly.js/commit/812be20750e21e0a1831975001c248d365850f73#r29129877\n    //\n    // sizemode: {\n    //     valType: 'enumerated',\n    //     values: ['scaled', 'absolute', 'fixed'],\n    //     dflt: 'scaled',\n    //     role: 'info',\n    //     editType: 'calc',\n    //     description: [\n    //         'Sets the mode by which the streamtubes are sized.'\n    //     ].join(' ')\n    // },\n\n    sizeref: {\n        valType: 'number',\n        role: 'info',\n        editType: 'calc',\n        min: 0,\n        dflt: 1,\n        description: [\n            'The scaling factor for the streamtubes.',\n            'The default is 1, which avoids two max divergence tubes from touching',\n            'at adjacent starting positions.'\n        ].join(' ')\n    },\n\n    text: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        editType: 'calc',\n        description: [\n            'Sets a text element associated with this trace.',\n            'If trace `hoverinfo` contains a *text* flag,',\n            'this text element will be seen in all hover labels.',\n            'Note that streamtube traces do not support array `text` values.'\n        ].join(' ')\n    }\n};\n\nextendFlat(attrs, colorscaleAttrs('', {\n    colorAttr: 'u/v/w norm',\n    showScaleDflt: true,\n    editTypeOverride: 'calc'\n}), {\n    colorbar: colorbarAttrs\n});\n\nvar fromMesh3d = ['opacity', 'lightposition', 'lighting'];\nfromMesh3d.forEach(function(k) {\n    attrs[k] = mesh3dAttrs[k];\n});\n\nattrs.hoverinfo = extendFlat({}, baseAttrs.hoverinfo, {\n    editType: 'calc',\n    flags: ['x', 'y', 'z', 'u', 'v', 'w', 'norm', 'divergence', 'text', 'name'],\n    dflt: 'x+y+z+norm+text+name'\n});\n\nattrs.transforms = undefined;\n\nmodule.exports = attrs;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
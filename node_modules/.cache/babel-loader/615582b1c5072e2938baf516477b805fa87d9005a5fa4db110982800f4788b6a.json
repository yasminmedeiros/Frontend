{"ast":null,"code":"/**\n * Bit twiddling hacks for JavaScript.\n *\n * Author: Mikola Lysenko\n *\n * Ported from Stanford bit twiddling hack library:\n *    http://graphics.stanford.edu/~seander/bithacks.html\n */\n\n\"use strict\";\n\"use restrict\";\n\n//Number of bits in an integer\nvar INT_BITS = 32;\n\n//Constants\nexports.INT_BITS = INT_BITS;\nexports.INT_MAX = 0x7fffffff;\nexports.INT_MIN = -1 << INT_BITS - 1;\n\n//Returns -1, 0, +1 depending on sign of x\nexports.sign = function (v) {\n  return (v > 0) - (v < 0);\n};\n\n//Computes absolute value of integer\nexports.abs = function (v) {\n  var mask = v >> INT_BITS - 1;\n  return (v ^ mask) - mask;\n};\n\n//Computes minimum of integers x and y\nexports.min = function (x, y) {\n  return y ^ (x ^ y) & -(x < y);\n};\n\n//Computes maximum of integers x and y\nexports.max = function (x, y) {\n  return x ^ (x ^ y) & -(x < y);\n};\n\n//Checks if a number is a power of two\nexports.isPow2 = function (v) {\n  return !(v & v - 1) && !!v;\n};\n\n//Computes log base 2 of v\nexports.log2 = function (v) {\n  var r, shift;\n  r = (v > 0xFFFF) << 4;\n  v >>>= r;\n  shift = (v > 0xFF) << 3;\n  v >>>= shift;\n  r |= shift;\n  shift = (v > 0xF) << 2;\n  v >>>= shift;\n  r |= shift;\n  shift = (v > 0x3) << 1;\n  v >>>= shift;\n  r |= shift;\n  return r | v >> 1;\n};\n\n//Computes log base 10 of v\nexports.log10 = function (v) {\n  return v >= 1000000000 ? 9 : v >= 100000000 ? 8 : v >= 10000000 ? 7 : v >= 1000000 ? 6 : v >= 100000 ? 5 : v >= 10000 ? 4 : v >= 1000 ? 3 : v >= 100 ? 2 : v >= 10 ? 1 : 0;\n};\n\n//Counts number of bits\nexports.popCount = function (v) {\n  v = v - (v >>> 1 & 0x55555555);\n  v = (v & 0x33333333) + (v >>> 2 & 0x33333333);\n  return (v + (v >>> 4) & 0xF0F0F0F) * 0x1010101 >>> 24;\n};\n\n//Counts number of trailing zeros\nfunction countTrailingZeros(v) {\n  var c = 32;\n  v &= -v;\n  if (v) c--;\n  if (v & 0x0000FFFF) c -= 16;\n  if (v & 0x00FF00FF) c -= 8;\n  if (v & 0x0F0F0F0F) c -= 4;\n  if (v & 0x33333333) c -= 2;\n  if (v & 0x55555555) c -= 1;\n  return c;\n}\nexports.countTrailingZeros = countTrailingZeros;\n\n//Rounds to next power of 2\nexports.nextPow2 = function (v) {\n  v += v === 0;\n  --v;\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v + 1;\n};\n\n//Rounds down to previous power of 2\nexports.prevPow2 = function (v) {\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v - (v >>> 1);\n};\n\n//Computes parity of word\nexports.parity = function (v) {\n  v ^= v >>> 16;\n  v ^= v >>> 8;\n  v ^= v >>> 4;\n  v &= 0xf;\n  return 0x6996 >>> v & 1;\n};\nvar REVERSE_TABLE = new Array(256);\n(function (tab) {\n  for (var i = 0; i < 256; ++i) {\n    var v = i,\n      r = i,\n      s = 7;\n    for (v >>>= 1; v; v >>>= 1) {\n      r <<= 1;\n      r |= v & 1;\n      --s;\n    }\n    tab[i] = r << s & 0xff;\n  }\n})(REVERSE_TABLE);\n\n//Reverse bits in a 32 bit word\nexports.reverse = function (v) {\n  return REVERSE_TABLE[v & 0xff] << 24 | REVERSE_TABLE[v >>> 8 & 0xff] << 16 | REVERSE_TABLE[v >>> 16 & 0xff] << 8 | REVERSE_TABLE[v >>> 24 & 0xff];\n};\n\n//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes\nexports.interleave2 = function (x, y) {\n  x &= 0xFFFF;\n  x = (x | x << 8) & 0x00FF00FF;\n  x = (x | x << 4) & 0x0F0F0F0F;\n  x = (x | x << 2) & 0x33333333;\n  x = (x | x << 1) & 0x55555555;\n  y &= 0xFFFF;\n  y = (y | y << 8) & 0x00FF00FF;\n  y = (y | y << 4) & 0x0F0F0F0F;\n  y = (y | y << 2) & 0x33333333;\n  y = (y | y << 1) & 0x55555555;\n  return x | y << 1;\n};\n\n//Extracts the nth interleaved component\nexports.deinterleave2 = function (v, n) {\n  v = v >>> n & 0x55555555;\n  v = (v | v >>> 1) & 0x33333333;\n  v = (v | v >>> 2) & 0x0F0F0F0F;\n  v = (v | v >>> 4) & 0x00FF00FF;\n  v = (v | v >>> 16) & 0x000FFFF;\n  return v << 16 >> 16;\n};\n\n//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes\nexports.interleave3 = function (x, y, z) {\n  x &= 0x3FF;\n  x = (x | x << 16) & 4278190335;\n  x = (x | x << 8) & 251719695;\n  x = (x | x << 4) & 3272356035;\n  x = (x | x << 2) & 1227133513;\n  y &= 0x3FF;\n  y = (y | y << 16) & 4278190335;\n  y = (y | y << 8) & 251719695;\n  y = (y | y << 4) & 3272356035;\n  y = (y | y << 2) & 1227133513;\n  x |= y << 1;\n  z &= 0x3FF;\n  z = (z | z << 16) & 4278190335;\n  z = (z | z << 8) & 251719695;\n  z = (z | z << 4) & 3272356035;\n  z = (z | z << 2) & 1227133513;\n  return x | z << 2;\n};\n\n//Extracts nth interleaved component of a 3-tuple\nexports.deinterleave3 = function (v, n) {\n  v = v >>> n & 1227133513;\n  v = (v | v >>> 2) & 3272356035;\n  v = (v | v >>> 4) & 251719695;\n  v = (v | v >>> 8) & 4278190335;\n  v = (v | v >>> 16) & 0x3FF;\n  return v << 22 >> 22;\n};\n\n//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)\nexports.nextCombination = function (v) {\n  var t = v | v - 1;\n  return t + 1 | (~t & -~t) - 1 >>> countTrailingZeros(v) + 1;\n};","map":{"version":3,"names":["INT_BITS","exports","INT_MAX","INT_MIN","sign","v","abs","mask","min","x","y","max","isPow2","log2","r","shift","log10","popCount","countTrailingZeros","c","nextPow2","prevPow2","parity","REVERSE_TABLE","Array","tab","i","s","reverse","interleave2","deinterleave2","n","interleave3","z","deinterleave3","nextCombination","t"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/simplify-planar-graph/node_modules/bit-twiddle/twiddle.js"],"sourcesContent":["/**\n * Bit twiddling hacks for JavaScript.\n *\n * Author: Mikola Lysenko\n *\n * Ported from Stanford bit twiddling hack library:\n *    http://graphics.stanford.edu/~seander/bithacks.html\n */\n\n\"use strict\"; \"use restrict\";\n\n//Number of bits in an integer\nvar INT_BITS = 32;\n\n//Constants\nexports.INT_BITS  = INT_BITS;\nexports.INT_MAX   =  0x7fffffff;\nexports.INT_MIN   = -1<<(INT_BITS-1);\n\n//Returns -1, 0, +1 depending on sign of x\nexports.sign = function(v) {\n  return (v > 0) - (v < 0);\n}\n\n//Computes absolute value of integer\nexports.abs = function(v) {\n  var mask = v >> (INT_BITS-1);\n  return (v ^ mask) - mask;\n}\n\n//Computes minimum of integers x and y\nexports.min = function(x, y) {\n  return y ^ ((x ^ y) & -(x < y));\n}\n\n//Computes maximum of integers x and y\nexports.max = function(x, y) {\n  return x ^ ((x ^ y) & -(x < y));\n}\n\n//Checks if a number is a power of two\nexports.isPow2 = function(v) {\n  return !(v & (v-1)) && (!!v);\n}\n\n//Computes log base 2 of v\nexports.log2 = function(v) {\n  var r, shift;\n  r =     (v > 0xFFFF) << 4; v >>>= r;\n  shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;\n  shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;\n  shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;\n  return r | (v >> 1);\n}\n\n//Computes log base 10 of v\nexports.log10 = function(v) {\n  return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :\n          (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :\n          (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;\n}\n\n//Counts number of bits\nexports.popCount = function(v) {\n  v = v - ((v >>> 1) & 0x55555555);\n  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);\n  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;\n}\n\n//Counts number of trailing zeros\nfunction countTrailingZeros(v) {\n  var c = 32;\n  v &= -v;\n  if (v) c--;\n  if (v & 0x0000FFFF) c -= 16;\n  if (v & 0x00FF00FF) c -= 8;\n  if (v & 0x0F0F0F0F) c -= 4;\n  if (v & 0x33333333) c -= 2;\n  if (v & 0x55555555) c -= 1;\n  return c;\n}\nexports.countTrailingZeros = countTrailingZeros;\n\n//Rounds to next power of 2\nexports.nextPow2 = function(v) {\n  v += v === 0;\n  --v;\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v + 1;\n}\n\n//Rounds down to previous power of 2\nexports.prevPow2 = function(v) {\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v - (v>>>1);\n}\n\n//Computes parity of word\nexports.parity = function(v) {\n  v ^= v >>> 16;\n  v ^= v >>> 8;\n  v ^= v >>> 4;\n  v &= 0xf;\n  return (0x6996 >>> v) & 1;\n}\n\nvar REVERSE_TABLE = new Array(256);\n\n(function(tab) {\n  for(var i=0; i<256; ++i) {\n    var v = i, r = i, s = 7;\n    for (v >>>= 1; v; v >>>= 1) {\n      r <<= 1;\n      r |= v & 1;\n      --s;\n    }\n    tab[i] = (r << s) & 0xff;\n  }\n})(REVERSE_TABLE);\n\n//Reverse bits in a 32 bit word\nexports.reverse = function(v) {\n  return  (REVERSE_TABLE[ v         & 0xff] << 24) |\n          (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |\n          (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |\n           REVERSE_TABLE[(v >>> 24) & 0xff];\n}\n\n//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes\nexports.interleave2 = function(x, y) {\n  x &= 0xFFFF;\n  x = (x | (x << 8)) & 0x00FF00FF;\n  x = (x | (x << 4)) & 0x0F0F0F0F;\n  x = (x | (x << 2)) & 0x33333333;\n  x = (x | (x << 1)) & 0x55555555;\n\n  y &= 0xFFFF;\n  y = (y | (y << 8)) & 0x00FF00FF;\n  y = (y | (y << 4)) & 0x0F0F0F0F;\n  y = (y | (y << 2)) & 0x33333333;\n  y = (y | (y << 1)) & 0x55555555;\n\n  return x | (y << 1);\n}\n\n//Extracts the nth interleaved component\nexports.deinterleave2 = function(v, n) {\n  v = (v >>> n) & 0x55555555;\n  v = (v | (v >>> 1))  & 0x33333333;\n  v = (v | (v >>> 2))  & 0x0F0F0F0F;\n  v = (v | (v >>> 4))  & 0x00FF00FF;\n  v = (v | (v >>> 16)) & 0x000FFFF;\n  return (v << 16) >> 16;\n}\n\n\n//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes\nexports.interleave3 = function(x, y, z) {\n  x &= 0x3FF;\n  x  = (x | (x<<16)) & 4278190335;\n  x  = (x | (x<<8))  & 251719695;\n  x  = (x | (x<<4))  & 3272356035;\n  x  = (x | (x<<2))  & 1227133513;\n\n  y &= 0x3FF;\n  y  = (y | (y<<16)) & 4278190335;\n  y  = (y | (y<<8))  & 251719695;\n  y  = (y | (y<<4))  & 3272356035;\n  y  = (y | (y<<2))  & 1227133513;\n  x |= (y << 1);\n  \n  z &= 0x3FF;\n  z  = (z | (z<<16)) & 4278190335;\n  z  = (z | (z<<8))  & 251719695;\n  z  = (z | (z<<4))  & 3272356035;\n  z  = (z | (z<<2))  & 1227133513;\n  \n  return x | (z << 2);\n}\n\n//Extracts nth interleaved component of a 3-tuple\nexports.deinterleave3 = function(v, n) {\n  v = (v >>> n)       & 1227133513;\n  v = (v | (v>>>2))   & 3272356035;\n  v = (v | (v>>>4))   & 251719695;\n  v = (v | (v>>>8))   & 4278190335;\n  v = (v | (v>>>16))  & 0x3FF;\n  return (v<<22)>>22;\n}\n\n//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)\nexports.nextCombination = function(v) {\n  var t = v | (v - 1);\n  return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
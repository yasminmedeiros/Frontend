{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar Axes = require('../../plots/cartesian/axes');\nvar Lib = require('../../lib');\nvar layoutAttributes = require('./layout_attributes');\nmodule.exports = function (layoutIn, layoutOut, fullData) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(layoutIn, layoutOut, layoutAttributes, attr, dflt);\n  }\n  var hasBars = false;\n  var shouldBeGapless = false;\n  var gappedAnyway = false;\n  var usedSubplots = {};\n  for (var i = 0; i < fullData.length; i++) {\n    var trace = fullData[i];\n    if (Registry.traceIs(trace, 'bar') && trace.visible) hasBars = true;else continue;\n\n    // if we have at least 2 grouped bar traces on the same subplot,\n    // we should default to a gap anyway, even if the data is histograms\n    if (layoutIn.barmode !== 'overlay' && layoutIn.barmode !== 'stack') {\n      var subploti = trace.xaxis + trace.yaxis;\n      if (usedSubplots[subploti]) gappedAnyway = true;\n      usedSubplots[subploti] = true;\n    }\n    if (trace.visible && trace.type === 'histogram') {\n      var pa = Axes.getFromId({\n        _fullLayout: layoutOut\n      }, trace[trace.orientation === 'v' ? 'xaxis' : 'yaxis']);\n      if (pa.type !== 'category') shouldBeGapless = true;\n    }\n  }\n  if (!hasBars) return;\n  var mode = coerce('barmode');\n  if (mode !== 'overlay') coerce('barnorm');\n  coerce('bargap', shouldBeGapless && !gappedAnyway ? 0 : 0.2);\n  coerce('bargroupgap');\n};","map":{"version":3,"names":["Registry","require","Axes","Lib","layoutAttributes","module","exports","layoutIn","layoutOut","fullData","coerce","attr","dflt","hasBars","shouldBeGapless","gappedAnyway","usedSubplots","i","length","trace","traceIs","visible","barmode","subploti","xaxis","yaxis","type","pa","getFromId","_fullLayout","orientation","mode"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/bar/layout_defaults.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar Axes = require('../../plots/cartesian/axes');\nvar Lib = require('../../lib');\n\nvar layoutAttributes = require('./layout_attributes');\n\n\nmodule.exports = function(layoutIn, layoutOut, fullData) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(layoutIn, layoutOut, layoutAttributes, attr, dflt);\n    }\n\n    var hasBars = false;\n    var shouldBeGapless = false;\n    var gappedAnyway = false;\n    var usedSubplots = {};\n\n    for(var i = 0; i < fullData.length; i++) {\n        var trace = fullData[i];\n        if(Registry.traceIs(trace, 'bar') && trace.visible) hasBars = true;\n        else continue;\n\n        // if we have at least 2 grouped bar traces on the same subplot,\n        // we should default to a gap anyway, even if the data is histograms\n        if(layoutIn.barmode !== 'overlay' && layoutIn.barmode !== 'stack') {\n            var subploti = trace.xaxis + trace.yaxis;\n            if(usedSubplots[subploti]) gappedAnyway = true;\n            usedSubplots[subploti] = true;\n        }\n\n        if(trace.visible && trace.type === 'histogram') {\n            var pa = Axes.getFromId({_fullLayout: layoutOut},\n                        trace[trace.orientation === 'v' ? 'xaxis' : 'yaxis']);\n            if(pa.type !== 'category') shouldBeGapless = true;\n        }\n    }\n\n    if(!hasBars) return;\n\n    var mode = coerce('barmode');\n    if(mode !== 'overlay') coerce('barnorm');\n\n    coerce('bargap', (shouldBeGapless && !gappedAnyway) ? 0 : 0.2);\n    coerce('bargroupgap');\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACxC,IAAIC,IAAI,GAAGD,OAAO,CAAC,4BAA4B,CAAC;AAChD,IAAIE,GAAG,GAAGF,OAAO,CAAC,WAAW,CAAC;AAE9B,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAGrDI,MAAM,CAACC,OAAO,GAAG,UAASC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,EAAE;EACrD,SAASC,MAAM,CAACC,IAAI,EAAEC,IAAI,EAAE;IACxB,OAAOT,GAAG,CAACO,MAAM,CAACH,QAAQ,EAAEC,SAAS,EAAEJ,gBAAgB,EAAEO,IAAI,EAAEC,IAAI,CAAC;EACxE;EAEA,IAAIC,OAAO,GAAG,KAAK;EACnB,IAAIC,eAAe,GAAG,KAAK;EAC3B,IAAIC,YAAY,GAAG,KAAK;EACxB,IAAIC,YAAY,GAAG,CAAC,CAAC;EAErB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,QAAQ,CAACS,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAIE,KAAK,GAAGV,QAAQ,CAACQ,CAAC,CAAC;IACvB,IAAGjB,QAAQ,CAACoB,OAAO,CAACD,KAAK,EAAE,KAAK,CAAC,IAAIA,KAAK,CAACE,OAAO,EAAER,OAAO,GAAG,IAAI,CAAC,KAC9D;;IAEL;IACA;IACA,IAAGN,QAAQ,CAACe,OAAO,KAAK,SAAS,IAAIf,QAAQ,CAACe,OAAO,KAAK,OAAO,EAAE;MAC/D,IAAIC,QAAQ,GAAGJ,KAAK,CAACK,KAAK,GAAGL,KAAK,CAACM,KAAK;MACxC,IAAGT,YAAY,CAACO,QAAQ,CAAC,EAAER,YAAY,GAAG,IAAI;MAC9CC,YAAY,CAACO,QAAQ,CAAC,GAAG,IAAI;IACjC;IAEA,IAAGJ,KAAK,CAACE,OAAO,IAAIF,KAAK,CAACO,IAAI,KAAK,WAAW,EAAE;MAC5C,IAAIC,EAAE,GAAGzB,IAAI,CAAC0B,SAAS,CAAC;QAACC,WAAW,EAAErB;MAAS,CAAC,EACpCW,KAAK,CAACA,KAAK,CAACW,WAAW,KAAK,GAAG,GAAG,OAAO,GAAG,OAAO,CAAC,CAAC;MACjE,IAAGH,EAAE,CAACD,IAAI,KAAK,UAAU,EAAEZ,eAAe,GAAG,IAAI;IACrD;EACJ;EAEA,IAAG,CAACD,OAAO,EAAE;EAEb,IAAIkB,IAAI,GAAGrB,MAAM,CAAC,SAAS,CAAC;EAC5B,IAAGqB,IAAI,KAAK,SAAS,EAAErB,MAAM,CAAC,SAAS,CAAC;EAExCA,MAAM,CAAC,QAAQ,EAAGI,eAAe,IAAI,CAACC,YAAY,GAAI,CAAC,GAAG,GAAG,CAAC;EAC9DL,MAAM,CAAC,aAAa,CAAC;AACzB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
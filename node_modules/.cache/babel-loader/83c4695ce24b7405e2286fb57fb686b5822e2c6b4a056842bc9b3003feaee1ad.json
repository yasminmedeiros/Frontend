{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar constants = require('./constants');\nmodule.exports = function findAllPaths(pathinfo, xtol, ytol) {\n  var cnt, startLoc, i, pi, j;\n\n  // Default just passes these values through as they were before:\n  xtol = xtol || 0.01;\n  ytol = ytol || 0.01;\n  for (i = 0; i < pathinfo.length; i++) {\n    pi = pathinfo[i];\n    for (j = 0; j < pi.starts.length; j++) {\n      startLoc = pi.starts[j];\n      makePath(pi, startLoc, 'edge', xtol, ytol);\n    }\n    cnt = 0;\n    while (Object.keys(pi.crossings).length && cnt < 10000) {\n      cnt++;\n      startLoc = Object.keys(pi.crossings)[0].split(',').map(Number);\n      makePath(pi, startLoc, undefined, xtol, ytol);\n    }\n    if (cnt === 10000) Lib.log('Infinite loop in contour?');\n  }\n};\nfunction equalPts(pt1, pt2, xtol, ytol) {\n  return Math.abs(pt1[0] - pt2[0]) < xtol && Math.abs(pt1[1] - pt2[1]) < ytol;\n}\n\n// distance in index units - uses the 3rd and 4th items in points\nfunction ptDist(pt1, pt2) {\n  var dx = pt1[2] - pt2[2];\n  var dy = pt1[3] - pt2[3];\n  return Math.sqrt(dx * dx + dy * dy);\n}\nfunction makePath(pi, loc, edgeflag, xtol, ytol) {\n  var startLocStr = loc.join(',');\n  var locStr = startLocStr;\n  var mi = pi.crossings[locStr];\n  var marchStep = startStep(mi, edgeflag, loc);\n  // start by going backward a half step and finding the crossing point\n  var pts = [getInterpPx(pi, loc, [-marchStep[0], -marchStep[1]])];\n  var startStepStr = marchStep.join(',');\n  var m = pi.z.length;\n  var n = pi.z[0].length;\n  var cnt;\n\n  // now follow the path\n  for (cnt = 0; cnt < 10000; cnt++) {\n    // just to avoid infinite loops\n    if (mi > 20) {\n      mi = constants.CHOOSESADDLE[mi][(marchStep[0] || marchStep[1]) < 0 ? 0 : 1];\n      pi.crossings[locStr] = constants.SADDLEREMAINDER[mi];\n    } else {\n      delete pi.crossings[locStr];\n    }\n    marchStep = constants.NEWDELTA[mi];\n    if (!marchStep) {\n      Lib.log('Found bad marching index:', mi, loc, pi.level);\n      break;\n    }\n\n    // find the crossing a half step forward, and then take the full step\n    pts.push(getInterpPx(pi, loc, marchStep));\n    loc[0] += marchStep[0];\n    loc[1] += marchStep[1];\n\n    // don't include the same point multiple times\n    if (equalPts(pts[pts.length - 1], pts[pts.length - 2], xtol, ytol)) pts.pop();\n    locStr = loc.join(',');\n    var atEdge = marchStep[0] && (loc[0] < 0 || loc[0] > n - 2) || marchStep[1] && (loc[1] < 0 || loc[1] > m - 2);\n    var closedLoop = locStr === startLocStr && marchStep.join(',') === startStepStr;\n\n    // have we completed a loop, or reached an edge?\n    if (closedLoop || edgeflag && atEdge) break;\n    mi = pi.crossings[locStr];\n  }\n  if (cnt === 10000) {\n    Lib.log('Infinite loop in contour?');\n  }\n  var closedpath = equalPts(pts[0], pts[pts.length - 1], xtol, ytol);\n  var totaldist = 0;\n  var distThresholdFactor = 0.2 * pi.smoothing;\n  var alldists = [];\n  var cropstart = 0;\n  var distgroup, cnt2, cnt3, newpt, ptcnt, ptavg, thisdist, i, j, edgepathi, edgepathj;\n\n  /*\n   * Check for points that are too close together (<1/5 the average dist\n   * *in grid index units* (important for log axes and nonuniform grids),\n   * less if less smoothed) and just take the center (or avg of center 2).\n   * This cuts down on funny behavior when a point is very close to a\n   * contour level.\n   */\n  for (cnt = 1; cnt < pts.length; cnt++) {\n    thisdist = ptDist(pts[cnt], pts[cnt - 1]);\n    totaldist += thisdist;\n    alldists.push(thisdist);\n  }\n  var distThreshold = totaldist / alldists.length * distThresholdFactor;\n  function getpt(i) {\n    return pts[i % pts.length];\n  }\n  for (cnt = pts.length - 2; cnt >= cropstart; cnt--) {\n    distgroup = alldists[cnt];\n    if (distgroup < distThreshold) {\n      cnt3 = 0;\n      for (cnt2 = cnt - 1; cnt2 >= cropstart; cnt2--) {\n        if (distgroup + alldists[cnt2] < distThreshold) {\n          distgroup += alldists[cnt2];\n        } else break;\n      }\n\n      // closed path with close points wrapping around the boundary?\n      if (closedpath && cnt === pts.length - 2) {\n        for (cnt3 = 0; cnt3 < cnt2; cnt3++) {\n          if (distgroup + alldists[cnt3] < distThreshold) {\n            distgroup += alldists[cnt3];\n          } else break;\n        }\n      }\n      ptcnt = cnt - cnt2 + cnt3 + 1;\n      ptavg = Math.floor((cnt + cnt2 + cnt3 + 2) / 2);\n\n      // either endpoint included: keep the endpoint\n      if (!closedpath && cnt === pts.length - 2) newpt = pts[pts.length - 1];else if (!closedpath && cnt2 === -1) newpt = pts[0];\n\n      // odd # of points - just take the central one\n      else if (ptcnt % 2) newpt = getpt(ptavg);\n\n      // even # of pts - average central two\n      else {\n        newpt = [(getpt(ptavg)[0] + getpt(ptavg + 1)[0]) / 2, (getpt(ptavg)[1] + getpt(ptavg + 1)[1]) / 2];\n      }\n      pts.splice(cnt2 + 1, cnt - cnt2 + 1, newpt);\n      cnt = cnt2 + 1;\n      if (cnt3) cropstart = cnt3;\n      if (closedpath) {\n        if (cnt === pts.length - 2) pts[cnt3] = pts[pts.length - 1];else if (cnt === 0) pts[pts.length - 1] = pts[0];\n      }\n    }\n  }\n  pts.splice(0, cropstart);\n\n  // done with the index parts - remove them so path generation works right\n  // because it depends on only having [xpx, ypx]\n  for (cnt = 0; cnt < pts.length; cnt++) {\n    pts[cnt].length = 2;\n  }\n\n  // don't return single-point paths (ie all points were the same\n  // so they got deleted?)\n  if (pts.length < 2) return;else if (closedpath) {\n    pts.pop();\n    pi.paths.push(pts);\n  } else {\n    if (!edgeflag) {\n      Lib.log('Unclosed interior contour?', pi.level, startLocStr, pts.join('L'));\n    }\n\n    // edge path - does it start where an existing edge path ends, or vice versa?\n    var merged = false;\n    for (i = 0; i < pi.edgepaths.length; i++) {\n      edgepathi = pi.edgepaths[i];\n      if (!merged && equalPts(edgepathi[0], pts[pts.length - 1], xtol, ytol)) {\n        pts.pop();\n        merged = true;\n\n        // now does it ALSO meet the end of another (or the same) path?\n        var doublemerged = false;\n        for (j = 0; j < pi.edgepaths.length; j++) {\n          edgepathj = pi.edgepaths[j];\n          if (equalPts(edgepathj[edgepathj.length - 1], pts[0], xtol, ytol)) {\n            doublemerged = true;\n            pts.shift();\n            pi.edgepaths.splice(i, 1);\n            if (j === i) {\n              // the path is now closed\n              pi.paths.push(pts.concat(edgepathj));\n            } else {\n              if (j > i) j--;\n              pi.edgepaths[j] = edgepathj.concat(pts, edgepathi);\n            }\n            break;\n          }\n        }\n        if (!doublemerged) {\n          pi.edgepaths[i] = pts.concat(edgepathi);\n        }\n      }\n    }\n    for (i = 0; i < pi.edgepaths.length; i++) {\n      if (merged) break;\n      edgepathi = pi.edgepaths[i];\n      if (equalPts(edgepathi[edgepathi.length - 1], pts[0], xtol, ytol)) {\n        pts.shift();\n        pi.edgepaths[i] = edgepathi.concat(pts);\n        merged = true;\n      }\n    }\n    if (!merged) pi.edgepaths.push(pts);\n  }\n}\n\n// special function to get the marching step of the\n// first point in the path (leading to loc)\nfunction startStep(mi, edgeflag, loc) {\n  var dx = 0;\n  var dy = 0;\n  if (mi > 20 && edgeflag) {\n    // these saddles start at +/- x\n    if (mi === 208 || mi === 1114) {\n      // if we're starting at the left side, we must be going right\n      dx = loc[0] === 0 ? 1 : -1;\n    } else {\n      // if we're starting at the bottom, we must be going up\n      dy = loc[1] === 0 ? 1 : -1;\n    }\n  } else if (constants.BOTTOMSTART.indexOf(mi) !== -1) dy = 1;else if (constants.LEFTSTART.indexOf(mi) !== -1) dx = 1;else if (constants.TOPSTART.indexOf(mi) !== -1) dy = -1;else dx = -1;\n  return [dx, dy];\n}\n\n/*\n * Find the pixel coordinates of a particular crossing\n *\n * @param {object} pi: the pathinfo object at this level\n * @param {array} loc: the grid index [x, y] of the crossing\n * @param {array} step: the direction [dx, dy] we're moving on the grid\n *\n * @return {array} [xpx, ypx, xi, yi]: the first two are the pixel location,\n *   the next two are the interpolated grid indices, which we use for\n *   distance calculations to delete points that are too close together.\n *   This is important when the grid is nonuniform (and most dramatically when\n *   we're on log axes and include invalid (0 or negative) values.\n *   It's crucial to delete these extra two before turning an array of these\n *   points into a path, because those routines require length-2 points.\n */\nfunction getInterpPx(pi, loc, step) {\n  var locx = loc[0] + Math.max(step[0], 0);\n  var locy = loc[1] + Math.max(step[1], 0);\n  var zxy = pi.z[locy][locx];\n  var xa = pi.xaxis;\n  var ya = pi.yaxis;\n  if (step[1]) {\n    var dx = (pi.level - zxy) / (pi.z[locy][locx + 1] - zxy);\n    return [xa.c2p((1 - dx) * pi.x[locx] + dx * pi.x[locx + 1], true), ya.c2p(pi.y[locy], true), locx + dx, locy];\n  } else {\n    var dy = (pi.level - zxy) / (pi.z[locy + 1][locx] - zxy);\n    return [xa.c2p(pi.x[locx], true), ya.c2p((1 - dy) * pi.y[locy] + dy * pi.y[locy + 1], true), locx, locy + dy];\n  }\n}","map":{"version":3,"names":["Lib","require","constants","module","exports","findAllPaths","pathinfo","xtol","ytol","cnt","startLoc","i","pi","j","length","starts","makePath","Object","keys","crossings","split","map","Number","undefined","log","equalPts","pt1","pt2","Math","abs","ptDist","dx","dy","sqrt","loc","edgeflag","startLocStr","join","locStr","mi","marchStep","startStep","pts","getInterpPx","startStepStr","m","z","n","CHOOSESADDLE","SADDLEREMAINDER","NEWDELTA","level","push","pop","atEdge","closedLoop","closedpath","totaldist","distThresholdFactor","smoothing","alldists","cropstart","distgroup","cnt2","cnt3","newpt","ptcnt","ptavg","thisdist","edgepathi","edgepathj","distThreshold","getpt","floor","splice","paths","merged","edgepaths","doublemerged","shift","concat","BOTTOMSTART","indexOf","LEFTSTART","TOPSTART","step","locx","max","locy","zxy","xa","xaxis","ya","yaxis","c2p","x","y"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/contour/find_all_paths.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar constants = require('./constants');\n\nmodule.exports = function findAllPaths(pathinfo, xtol, ytol) {\n    var cnt,\n        startLoc,\n        i,\n        pi,\n        j;\n\n    // Default just passes these values through as they were before:\n    xtol = xtol || 0.01;\n    ytol = ytol || 0.01;\n\n    for(i = 0; i < pathinfo.length; i++) {\n        pi = pathinfo[i];\n\n        for(j = 0; j < pi.starts.length; j++) {\n            startLoc = pi.starts[j];\n            makePath(pi, startLoc, 'edge', xtol, ytol);\n        }\n\n        cnt = 0;\n        while(Object.keys(pi.crossings).length && cnt < 10000) {\n            cnt++;\n            startLoc = Object.keys(pi.crossings)[0].split(',').map(Number);\n            makePath(pi, startLoc, undefined, xtol, ytol);\n        }\n        if(cnt === 10000) Lib.log('Infinite loop in contour?');\n    }\n};\n\nfunction equalPts(pt1, pt2, xtol, ytol) {\n    return Math.abs(pt1[0] - pt2[0]) < xtol &&\n           Math.abs(pt1[1] - pt2[1]) < ytol;\n}\n\n// distance in index units - uses the 3rd and 4th items in points\nfunction ptDist(pt1, pt2) {\n    var dx = pt1[2] - pt2[2];\n    var dy = pt1[3] - pt2[3];\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nfunction makePath(pi, loc, edgeflag, xtol, ytol) {\n    var startLocStr = loc.join(',');\n    var locStr = startLocStr;\n    var mi = pi.crossings[locStr];\n    var marchStep = startStep(mi, edgeflag, loc);\n    // start by going backward a half step and finding the crossing point\n    var pts = [getInterpPx(pi, loc, [-marchStep[0], -marchStep[1]])];\n    var startStepStr = marchStep.join(',');\n    var m = pi.z.length;\n    var n = pi.z[0].length;\n    var cnt;\n\n    // now follow the path\n    for(cnt = 0; cnt < 10000; cnt++) { // just to avoid infinite loops\n        if(mi > 20) {\n            mi = constants.CHOOSESADDLE[mi][(marchStep[0] || marchStep[1]) < 0 ? 0 : 1];\n            pi.crossings[locStr] = constants.SADDLEREMAINDER[mi];\n        }\n        else {\n            delete pi.crossings[locStr];\n        }\n\n        marchStep = constants.NEWDELTA[mi];\n        if(!marchStep) {\n            Lib.log('Found bad marching index:', mi, loc, pi.level);\n            break;\n        }\n\n        // find the crossing a half step forward, and then take the full step\n        pts.push(getInterpPx(pi, loc, marchStep));\n        loc[0] += marchStep[0];\n        loc[1] += marchStep[1];\n\n        // don't include the same point multiple times\n        if(equalPts(pts[pts.length - 1], pts[pts.length - 2], xtol, ytol)) pts.pop();\n        locStr = loc.join(',');\n\n        var atEdge = (marchStep[0] && (loc[0] < 0 || loc[0] > n - 2)) ||\n                (marchStep[1] && (loc[1] < 0 || loc[1] > m - 2));\n        var closedLoop = (locStr === startLocStr) && (marchStep.join(',') === startStepStr);\n\n        // have we completed a loop, or reached an edge?\n        if((closedLoop) || (edgeflag && atEdge)) break;\n\n        mi = pi.crossings[locStr];\n    }\n\n    if(cnt === 10000) {\n        Lib.log('Infinite loop in contour?');\n    }\n    var closedpath = equalPts(pts[0], pts[pts.length - 1], xtol, ytol);\n    var totaldist = 0;\n    var distThresholdFactor = 0.2 * pi.smoothing;\n    var alldists = [];\n    var cropstart = 0;\n    var distgroup, cnt2, cnt3, newpt, ptcnt, ptavg, thisdist,\n        i, j, edgepathi, edgepathj;\n\n    /*\n     * Check for points that are too close together (<1/5 the average dist\n     * *in grid index units* (important for log axes and nonuniform grids),\n     * less if less smoothed) and just take the center (or avg of center 2).\n     * This cuts down on funny behavior when a point is very close to a\n     * contour level.\n     */\n    for(cnt = 1; cnt < pts.length; cnt++) {\n        thisdist = ptDist(pts[cnt], pts[cnt - 1]);\n        totaldist += thisdist;\n        alldists.push(thisdist);\n    }\n\n    var distThreshold = totaldist / alldists.length * distThresholdFactor;\n\n    function getpt(i) { return pts[i % pts.length]; }\n\n    for(cnt = pts.length - 2; cnt >= cropstart; cnt--) {\n        distgroup = alldists[cnt];\n        if(distgroup < distThreshold) {\n            cnt3 = 0;\n            for(cnt2 = cnt - 1; cnt2 >= cropstart; cnt2--) {\n                if(distgroup + alldists[cnt2] < distThreshold) {\n                    distgroup += alldists[cnt2];\n                }\n                else break;\n            }\n\n            // closed path with close points wrapping around the boundary?\n            if(closedpath && cnt === pts.length - 2) {\n                for(cnt3 = 0; cnt3 < cnt2; cnt3++) {\n                    if(distgroup + alldists[cnt3] < distThreshold) {\n                        distgroup += alldists[cnt3];\n                    }\n                    else break;\n                }\n            }\n            ptcnt = cnt - cnt2 + cnt3 + 1;\n            ptavg = Math.floor((cnt + cnt2 + cnt3 + 2) / 2);\n\n            // either endpoint included: keep the endpoint\n            if(!closedpath && cnt === pts.length - 2) newpt = pts[pts.length - 1];\n            else if(!closedpath && cnt2 === -1) newpt = pts[0];\n\n            // odd # of points - just take the central one\n            else if(ptcnt % 2) newpt = getpt(ptavg);\n\n            // even # of pts - average central two\n            else {\n                newpt = [(getpt(ptavg)[0] + getpt(ptavg + 1)[0]) / 2,\n                    (getpt(ptavg)[1] + getpt(ptavg + 1)[1]) / 2];\n            }\n\n            pts.splice(cnt2 + 1, cnt - cnt2 + 1, newpt);\n            cnt = cnt2 + 1;\n            if(cnt3) cropstart = cnt3;\n            if(closedpath) {\n                if(cnt === pts.length - 2) pts[cnt3] = pts[pts.length - 1];\n                else if(cnt === 0) pts[pts.length - 1] = pts[0];\n            }\n        }\n    }\n    pts.splice(0, cropstart);\n\n    // done with the index parts - remove them so path generation works right\n    // because it depends on only having [xpx, ypx]\n    for(cnt = 0; cnt < pts.length; cnt++) pts[cnt].length = 2;\n\n    // don't return single-point paths (ie all points were the same\n    // so they got deleted?)\n    if(pts.length < 2) return;\n    else if(closedpath) {\n        pts.pop();\n        pi.paths.push(pts);\n    }\n    else {\n        if(!edgeflag) {\n            Lib.log('Unclosed interior contour?',\n                pi.level, startLocStr, pts.join('L'));\n        }\n\n        // edge path - does it start where an existing edge path ends, or vice versa?\n        var merged = false;\n        for(i = 0; i < pi.edgepaths.length; i++) {\n            edgepathi = pi.edgepaths[i];\n            if(!merged && equalPts(edgepathi[0], pts[pts.length - 1], xtol, ytol)) {\n                pts.pop();\n                merged = true;\n\n                // now does it ALSO meet the end of another (or the same) path?\n                var doublemerged = false;\n                for(j = 0; j < pi.edgepaths.length; j++) {\n                    edgepathj = pi.edgepaths[j];\n                    if(equalPts(edgepathj[edgepathj.length - 1], pts[0], xtol, ytol)) {\n                        doublemerged = true;\n                        pts.shift();\n                        pi.edgepaths.splice(i, 1);\n                        if(j === i) {\n                            // the path is now closed\n                            pi.paths.push(pts.concat(edgepathj));\n                        }\n                        else {\n                            if(j > i) j--;\n                            pi.edgepaths[j] = edgepathj.concat(pts, edgepathi);\n                        }\n                        break;\n                    }\n                }\n                if(!doublemerged) {\n                    pi.edgepaths[i] = pts.concat(edgepathi);\n                }\n            }\n        }\n        for(i = 0; i < pi.edgepaths.length; i++) {\n            if(merged) break;\n            edgepathi = pi.edgepaths[i];\n            if(equalPts(edgepathi[edgepathi.length - 1], pts[0], xtol, ytol)) {\n                pts.shift();\n                pi.edgepaths[i] = edgepathi.concat(pts);\n                merged = true;\n            }\n        }\n\n        if(!merged) pi.edgepaths.push(pts);\n    }\n}\n\n// special function to get the marching step of the\n// first point in the path (leading to loc)\nfunction startStep(mi, edgeflag, loc) {\n    var dx = 0;\n    var dy = 0;\n    if(mi > 20 && edgeflag) {\n        // these saddles start at +/- x\n        if(mi === 208 || mi === 1114) {\n            // if we're starting at the left side, we must be going right\n            dx = loc[0] === 0 ? 1 : -1;\n        }\n        else {\n            // if we're starting at the bottom, we must be going up\n            dy = loc[1] === 0 ? 1 : -1;\n        }\n    }\n    else if(constants.BOTTOMSTART.indexOf(mi) !== -1) dy = 1;\n    else if(constants.LEFTSTART.indexOf(mi) !== -1) dx = 1;\n    else if(constants.TOPSTART.indexOf(mi) !== -1) dy = -1;\n    else dx = -1;\n    return [dx, dy];\n}\n\n/*\n * Find the pixel coordinates of a particular crossing\n *\n * @param {object} pi: the pathinfo object at this level\n * @param {array} loc: the grid index [x, y] of the crossing\n * @param {array} step: the direction [dx, dy] we're moving on the grid\n *\n * @return {array} [xpx, ypx, xi, yi]: the first two are the pixel location,\n *   the next two are the interpolated grid indices, which we use for\n *   distance calculations to delete points that are too close together.\n *   This is important when the grid is nonuniform (and most dramatically when\n *   we're on log axes and include invalid (0 or negative) values.\n *   It's crucial to delete these extra two before turning an array of these\n *   points into a path, because those routines require length-2 points.\n */\nfunction getInterpPx(pi, loc, step) {\n    var locx = loc[0] + Math.max(step[0], 0);\n    var locy = loc[1] + Math.max(step[1], 0);\n    var zxy = pi.z[locy][locx];\n    var xa = pi.xaxis;\n    var ya = pi.yaxis;\n\n    if(step[1]) {\n        var dx = (pi.level - zxy) / (pi.z[locy][locx + 1] - zxy);\n\n        return [xa.c2p((1 - dx) * pi.x[locx] + dx * pi.x[locx + 1], true),\n            ya.c2p(pi.y[locy], true),\n            locx + dx, locy];\n    }\n    else {\n        var dy = (pi.level - zxy) / (pi.z[locy + 1][locx] - zxy);\n        return [xa.c2p(pi.x[locx], true),\n            ya.c2p((1 - dy) * pi.y[locy] + dy * pi.y[locy + 1], true),\n            locx, locy + dy];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
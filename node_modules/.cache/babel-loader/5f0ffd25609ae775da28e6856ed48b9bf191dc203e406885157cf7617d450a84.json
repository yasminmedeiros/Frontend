{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Julian calendar for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n/** Implementation of the Julian calendar.\n    Based on code from <a href=\"http://www.fourmilab.ch/documents/calendar/\">http://www.fourmilab.ch/documents/calendar/</a>.\n    See also <a href=\"http://en.wikipedia.org/wiki/Julian_calendar\">http://en.wikipedia.org/wiki/Julian_calendar</a>.\n    @class JulianCalendar\n    @augments BaseCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction JulianCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\nJulianCalendar.prototype = new main.baseCalendar();\nassign(JulianCalendar.prototype, {\n  /** The calendar name.\n      @memberof JulianCalendar */\n  name: 'Julian',\n  /** Julian date of start of Julian epoch: 1 January 0001 AD = 30 December 0001 BCE.\n      @memberof JulianCalendar */\n  jdEpoch: 1721423.5,\n  /** Days per month in a common year.\n      @memberof JulianCalendar */\n  daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof JulianCalendar */\n  hasYearZero: false,\n  /** The minimum month number.\n      @memberof JulianCalendar */\n  minMonth: 1,\n  /** The first month in the year.\n      @memberof JulianCalendar */\n  firstMonth: 1,\n  /** The minimum day number.\n      @memberof JulianCalendar */\n  minDay: 1,\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof JulianCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Julian',\n      epochs: ['BC', 'AD'],\n      monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n      monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n      dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n      dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n      digits: null,\n      dateFormat: 'mm/dd/yyyy',\n      firstDay: 0,\n      isRTL: false\n    }\n  },\n  /** Determine whether this date is in a leap year.\n      @memberof JulianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n    var year = date.year() < 0 ? date.year() + 1 : date.year(); // No year zero\n    return year % 4 === 0;\n  },\n  /** Determine the week of the year for a date - ISO 8601.\n      @memberof JulianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Thursday of this week starting on Monday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(4 - (checkDate.dayOfWeek() || 7), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n  /** Retrieve the number of days in a month.\n      @memberof JulianCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 2 && this.leapYear(date.year()) ? 1 : 0);\n  },\n  /** Determine whether this date is a week day.\n      @memberof JulianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} True if a week day, false if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return (this.dayOfWeek(year, month, day) || 7) < 6;\n  },\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof JulianCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n    year = date.year();\n    month = date.month();\n    day = date.day();\n    if (year < 0) {\n      year++;\n    } // No year zero\n    // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n    if (month <= 2) {\n      year--;\n      month += 12;\n    }\n    return Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day - 1524.5;\n  },\n  /** Create a new date from a Julian date.\n      @memberof JulianCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n    var a = Math.floor(jd + 0.5);\n    var b = a + 1524;\n    var c = Math.floor((b - 122.1) / 365.25);\n    var d = Math.floor(365.25 * c);\n    var e = Math.floor((b - d) / 30.6001);\n    var month = e - Math.floor(e < 14 ? 1 : 13);\n    var year = c - Math.floor(month > 2 ? 4716 : 4715);\n    var day = b - d - Math.floor(30.6001 * e);\n    if (year <= 0) {\n      year--;\n    } // No year zero\n    return this.newDate(year, month, day);\n  }\n});\n\n// Julian calendar implementation\nmain.calendars.julian = JulianCalendar;","map":{"version":3,"names":["main","require","assign","JulianCalendar","language","local","regionalOptions","prototype","baseCalendar","name","jdEpoch","daysPerMonth","hasYearZero","minMonth","firstMonth","minDay","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","dateFormat","firstDay","isRTL","leapYear","year","date","_validate","invalidYear","weekOfYear","month","day","checkDate","newDate","add","dayOfWeek","Math","floor","dayOfYear","daysInMonth","invalidMonth","weekDay","toJD","invalidDate","fromJD","jd","a","b","c","d","e","calendars","julian"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/world-calendars/dist/calendars/julian.js"],"sourcesContent":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n﻿/* http://keith-wood.name/calendars.html\n   Julian calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Julian calendar.\n    Based on code from <a href=\"http://www.fourmilab.ch/documents/calendar/\">http://www.fourmilab.ch/documents/calendar/</a>.\n    See also <a href=\"http://en.wikipedia.org/wiki/Julian_calendar\">http://en.wikipedia.org/wiki/Julian_calendar</a>.\n    @class JulianCalendar\n    @augments BaseCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction JulianCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nJulianCalendar.prototype = new main.baseCalendar;\n\nassign(JulianCalendar.prototype, {\n    /** The calendar name.\n        @memberof JulianCalendar */\n    name: 'Julian',\n    /** Julian date of start of Julian epoch: 1 January 0001 AD = 30 December 0001 BCE.\n        @memberof JulianCalendar */\n    jdEpoch: 1721423.5,\n    /** Days per month in a common year.\n        @memberof JulianCalendar */\n    daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof JulianCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof JulianCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof JulianCalendar */\n    firstMonth: 1,\n    /** The minimum day number.\n        @memberof JulianCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof JulianCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Julian',\n            epochs: ['BC', 'AD'],\n            monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\n            'July', 'August', 'September', 'October', 'November', 'December'],\n            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n            digits: null,\n            dateFormat: 'mm/dd/yyyy',\n            firstDay: 0,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof JulianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        var year = (date.year() < 0 ? date.year() + 1 : date.year()); // No year zero\n        return (year % 4) === 0;\n    },\n\n    /** Determine the week of the year for a date - ISO 8601.\n        @memberof JulianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Thursday of this week starting on Monday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(4 - (checkDate.dayOfWeek() || 7), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof JulianCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return this.daysPerMonth[date.month() - 1] +\n            (date.month() === 2 && this.leapYear(date.year()) ? 1 : 0);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof JulianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} True if a week day, false if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return (this.dayOfWeek(year, month, day) || 7) < 6;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof JulianCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        year = date.year();\n        month = date.month();\n        day = date.day();\n        if (year < 0) { year++; } // No year zero\n        // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n        if (month <= 2) {\n            year--;\n            month += 12;\n        }\n        return Math.floor(365.25 * (year + 4716)) +\n            Math.floor(30.6001 * (month + 1)) + day - 1524.5;\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof JulianCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n        var a = Math.floor(jd + 0.5);\n        var b = a + 1524;\n        var c = Math.floor((b - 122.1) / 365.25);\n        var d = Math.floor(365.25 * c);\n        var e = Math.floor((b - d) / 30.6001);\n        var month = e - Math.floor(e < 14 ? 1 : 13);\n        var year = c - Math.floor(month > 2 ? 4716 : 4715);\n        var day = b - d - Math.floor(30.6001 * e);\n        if (year <= 0) { year--; } // No year zero\n        return this.newDate(year, month, day);\n    }\n});\n\n// Julian calendar implementation\nmain.calendars.julian = JulianCalendar;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
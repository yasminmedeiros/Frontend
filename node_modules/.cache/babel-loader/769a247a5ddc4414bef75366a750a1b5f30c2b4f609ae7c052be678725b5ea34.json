{"ast":null,"code":"\"use strict\";\n\nmodule.exports = segmentsIntersect;\nvar orient = require(\"robust-orientation\")[3];\nfunction checkCollinear(a0, a1, b0, b1) {\n  for (var d = 0; d < 2; ++d) {\n    var x0 = a0[d];\n    var y0 = a1[d];\n    var l0 = Math.min(x0, y0);\n    var h0 = Math.max(x0, y0);\n    var x1 = b0[d];\n    var y1 = b1[d];\n    var l1 = Math.min(x1, y1);\n    var h1 = Math.max(x1, y1);\n    if (h1 < l0 || h0 < l1) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction segmentsIntersect(a0, a1, b0, b1) {\n  var x0 = orient(a0, b0, b1);\n  var y0 = orient(a1, b0, b1);\n  if (x0 > 0 && y0 > 0 || x0 < 0 && y0 < 0) {\n    return false;\n  }\n  var x1 = orient(b0, a0, a1);\n  var y1 = orient(b1, a0, a1);\n  if (x1 > 0 && y1 > 0 || x1 < 0 && y1 < 0) {\n    return false;\n  }\n\n  //Check for degenerate collinear case\n  if (x0 === 0 && y0 === 0 && x1 === 0 && y1 === 0) {\n    return checkCollinear(a0, a1, b0, b1);\n  }\n  return true;\n}","map":{"version":3,"names":["module","exports","segmentsIntersect","orient","require","checkCollinear","a0","a1","b0","b1","d","x0","y0","l0","Math","min","h0","max","x1","y1","l1","h1"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/robust-segment-intersect/segseg.js"],"sourcesContent":["\"use strict\"\n\nmodule.exports = segmentsIntersect\n\nvar orient = require(\"robust-orientation\")[3]\n\nfunction checkCollinear(a0, a1, b0, b1) {\n\n  for(var d=0; d<2; ++d) {\n    var x0 = a0[d]\n    var y0 = a1[d]\n    var l0 = Math.min(x0, y0)\n    var h0 = Math.max(x0, y0)    \n\n    var x1 = b0[d]\n    var y1 = b1[d]\n    var l1 = Math.min(x1, y1)\n    var h1 = Math.max(x1, y1)    \n\n    if(h1 < l0 || h0 < l1) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction segmentsIntersect(a0, a1, b0, b1) {\n  var x0 = orient(a0, b0, b1)\n  var y0 = orient(a1, b0, b1)\n  if((x0 > 0 && y0 > 0) || (x0 < 0 && y0 < 0)) {\n    return false\n  }\n\n  var x1 = orient(b0, a0, a1)\n  var y1 = orient(b1, a0, a1)\n  if((x1 > 0 && y1 > 0) || (x1 < 0 && y1 < 0)) {\n    return false\n  }\n\n  //Check for degenerate collinear case\n  if(x0 === 0 && y0 === 0 && x1 === 0 && y1 === 0) {\n    return checkCollinear(a0, a1, b0, b1)\n  }\n\n  return true\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,iBAAiB;AAElC,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;AAE7C,SAASC,cAAc,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;EAEtC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;IACrB,IAAIC,EAAE,GAAGL,EAAE,CAACI,CAAC,CAAC;IACd,IAAIE,EAAE,GAAGL,EAAE,CAACG,CAAC,CAAC;IACd,IAAIG,EAAE,GAAGC,IAAI,CAACC,GAAG,CAACJ,EAAE,EAAEC,EAAE,CAAC;IACzB,IAAII,EAAE,GAAGF,IAAI,CAACG,GAAG,CAACN,EAAE,EAAEC,EAAE,CAAC;IAEzB,IAAIM,EAAE,GAAGV,EAAE,CAACE,CAAC,CAAC;IACd,IAAIS,EAAE,GAAGV,EAAE,CAACC,CAAC,CAAC;IACd,IAAIU,EAAE,GAAGN,IAAI,CAACC,GAAG,CAACG,EAAE,EAAEC,EAAE,CAAC;IACzB,IAAIE,EAAE,GAAGP,IAAI,CAACG,GAAG,CAACC,EAAE,EAAEC,EAAE,CAAC;IAEzB,IAAGE,EAAE,GAAGR,EAAE,IAAIG,EAAE,GAAGI,EAAE,EAAE;MACrB,OAAO,KAAK;IACd;EACF;EAEA,OAAO,IAAI;AACb;AAEA,SAASlB,iBAAiB,CAACI,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;EACzC,IAAIE,EAAE,GAAGR,MAAM,CAACG,EAAE,EAAEE,EAAE,EAAEC,EAAE,CAAC;EAC3B,IAAIG,EAAE,GAAGT,MAAM,CAACI,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;EAC3B,IAAIE,EAAE,GAAG,CAAC,IAAIC,EAAE,GAAG,CAAC,IAAMD,EAAE,GAAG,CAAC,IAAIC,EAAE,GAAG,CAAE,EAAE;IAC3C,OAAO,KAAK;EACd;EAEA,IAAIM,EAAE,GAAGf,MAAM,CAACK,EAAE,EAAEF,EAAE,EAAEC,EAAE,CAAC;EAC3B,IAAIY,EAAE,GAAGhB,MAAM,CAACM,EAAE,EAAEH,EAAE,EAAEC,EAAE,CAAC;EAC3B,IAAIW,EAAE,GAAG,CAAC,IAAIC,EAAE,GAAG,CAAC,IAAMD,EAAE,GAAG,CAAC,IAAIC,EAAE,GAAG,CAAE,EAAE;IAC3C,OAAO,KAAK;EACd;;EAEA;EACA,IAAGR,EAAE,KAAK,CAAC,IAAIC,EAAE,KAAK,CAAC,IAAIM,EAAE,KAAK,CAAC,IAAIC,EAAE,KAAK,CAAC,EAAE;IAC/C,OAAOd,cAAc,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;EACvC;EAEA,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"script","externalDependencies":[]}
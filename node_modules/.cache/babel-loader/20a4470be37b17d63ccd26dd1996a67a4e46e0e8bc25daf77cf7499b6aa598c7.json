{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../../lib');\nvar Color = require('../../../components/color');\nvar Registry = require('../../../registry');\nvar handleSubplotDefaults = require('../../subplot_defaults');\nvar supplyGl3dAxisLayoutDefaults = require('./axis_defaults');\nvar layoutAttributes = require('./layout_attributes');\nvar getSubplotData = require('../../get_data').getSubplotData;\nvar GL3D = 'gl3d';\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n  var hasNon3D = layoutOut._basePlotModules.length > 1;\n\n  // some layout-wide attribute are used in all scenes\n  // if 3D is the only visible plot type\n  function getDfltFromLayout(attr) {\n    if (hasNon3D) return;\n    var isValid = Lib.validate(layoutIn[attr], layoutAttributes[attr]);\n    if (isValid) return layoutIn[attr];\n  }\n  handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n    type: GL3D,\n    attributes: layoutAttributes,\n    handleDefaults: handleGl3dDefaults,\n    fullLayout: layoutOut,\n    font: layoutOut.font,\n    fullData: fullData,\n    getDfltFromLayout: getDfltFromLayout,\n    paper_bgcolor: layoutOut.paper_bgcolor,\n    calendar: layoutOut.calendar\n  });\n};\nfunction handleGl3dDefaults(sceneLayoutIn, sceneLayoutOut, coerce, opts) {\n  /*\n   * Scene numbering proceeds as follows\n   * scene\n   * scene2\n   * scene3\n   *\n   * and d.scene will be undefined or some number or number string\n   *\n   * Also write back a blank scene object to user layout so that some\n   * attributes like aspectratio can be written back dynamically.\n   */\n\n  var bgcolor = coerce('bgcolor');\n  var bgColorCombined = Color.combine(bgcolor, opts.paper_bgcolor);\n  var cameraKeys = ['up', 'center', 'eye'];\n  for (var j = 0; j < cameraKeys.length; j++) {\n    coerce('camera.' + cameraKeys[j] + '.x');\n    coerce('camera.' + cameraKeys[j] + '.y');\n    coerce('camera.' + cameraKeys[j] + '.z');\n  }\n\n  /*\n   * coerce to positive number (min 0) but also do not accept 0 (>0 not >=0)\n   * note that 0's go false with the !! call\n   */\n  var hasAspect = !!coerce('aspectratio.x') && !!coerce('aspectratio.y') && !!coerce('aspectratio.z');\n  var defaultAspectMode = hasAspect ? 'manual' : 'auto';\n  var aspectMode = coerce('aspectmode', defaultAspectMode);\n\n  /*\n   * We need aspectratio object in all the Layouts as it is dynamically set\n   * in the calculation steps, ie, we cant set the correct data now, it happens later.\n   * We must also account for the case the user sends bad ratio data with 'manual' set\n   * for the mode. In this case we must force change it here as the default coerce\n   * misses it above.\n   */\n  if (!hasAspect) {\n    sceneLayoutIn.aspectratio = sceneLayoutOut.aspectratio = {\n      x: 1,\n      y: 1,\n      z: 1\n    };\n    if (aspectMode === 'manual') sceneLayoutOut.aspectmode = 'auto';\n\n    /*\n     * kind of like autorange - we need the calculated aspectmode back in\n     * the input layout or relayout can cause problems later\n     */\n    sceneLayoutIn.aspectmode = sceneLayoutOut.aspectmode;\n  }\n  var fullGl3dData = getSubplotData(opts.fullData, GL3D, opts.id);\n  supplyGl3dAxisLayoutDefaults(sceneLayoutIn, sceneLayoutOut, {\n    font: opts.font,\n    scene: opts.id,\n    data: fullGl3dData,\n    bgColor: bgColorCombined,\n    calendar: opts.calendar,\n    fullLayout: opts.fullLayout\n  });\n  Registry.getComponentMethod('annotations3d', 'handleDefaults')(sceneLayoutIn, sceneLayoutOut, opts);\n  var dragmode = opts.getDfltFromLayout('dragmode');\n  if (dragmode !== false) {\n    if (!dragmode) {\n      dragmode = 'orbit';\n      if (sceneLayoutIn.camera && sceneLayoutIn.camera.up) {\n        var x = sceneLayoutIn.camera.up.x;\n        var y = sceneLayoutIn.camera.up.y;\n        var z = sceneLayoutIn.camera.up.z;\n        if (z !== 0) {\n          if (!x || !y || !z) {\n            dragmode = 'turntable';\n          } else if (z / Math.sqrt(x * x + y * y + z * z) > 0.999) {\n            dragmode = 'turntable';\n          }\n        }\n      } else {\n        dragmode = 'turntable';\n      }\n    }\n  }\n  coerce('dragmode', dragmode);\n  coerce('hovermode', opts.getDfltFromLayout('hovermode'));\n}","map":{"version":3,"names":["Lib","require","Color","Registry","handleSubplotDefaults","supplyGl3dAxisLayoutDefaults","layoutAttributes","getSubplotData","GL3D","module","exports","supplyLayoutDefaults","layoutIn","layoutOut","fullData","hasNon3D","_basePlotModules","length","getDfltFromLayout","attr","isValid","validate","type","attributes","handleDefaults","handleGl3dDefaults","fullLayout","font","paper_bgcolor","calendar","sceneLayoutIn","sceneLayoutOut","coerce","opts","bgcolor","bgColorCombined","combine","cameraKeys","j","hasAspect","defaultAspectMode","aspectMode","aspectratio","x","y","z","aspectmode","fullGl3dData","id","scene","data","bgColor","getComponentMethod","dragmode","camera","up","Math","sqrt"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/plots/gl3d/layout/defaults.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Lib = require('../../../lib');\nvar Color = require('../../../components/color');\nvar Registry = require('../../../registry');\n\nvar handleSubplotDefaults = require('../../subplot_defaults');\nvar supplyGl3dAxisLayoutDefaults = require('./axis_defaults');\nvar layoutAttributes = require('./layout_attributes');\nvar getSubplotData = require('../../get_data').getSubplotData;\n\nvar GL3D = 'gl3d';\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n    var hasNon3D = layoutOut._basePlotModules.length > 1;\n\n    // some layout-wide attribute are used in all scenes\n    // if 3D is the only visible plot type\n    function getDfltFromLayout(attr) {\n        if(hasNon3D) return;\n\n        var isValid = Lib.validate(layoutIn[attr], layoutAttributes[attr]);\n        if(isValid) return layoutIn[attr];\n    }\n\n    handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n        type: GL3D,\n        attributes: layoutAttributes,\n        handleDefaults: handleGl3dDefaults,\n        fullLayout: layoutOut,\n        font: layoutOut.font,\n        fullData: fullData,\n        getDfltFromLayout: getDfltFromLayout,\n        paper_bgcolor: layoutOut.paper_bgcolor,\n        calendar: layoutOut.calendar\n    });\n};\n\nfunction handleGl3dDefaults(sceneLayoutIn, sceneLayoutOut, coerce, opts) {\n    /*\n     * Scene numbering proceeds as follows\n     * scene\n     * scene2\n     * scene3\n     *\n     * and d.scene will be undefined or some number or number string\n     *\n     * Also write back a blank scene object to user layout so that some\n     * attributes like aspectratio can be written back dynamically.\n     */\n\n    var bgcolor = coerce('bgcolor');\n    var bgColorCombined = Color.combine(bgcolor, opts.paper_bgcolor);\n\n    var cameraKeys = ['up', 'center', 'eye'];\n\n    for(var j = 0; j < cameraKeys.length; j++) {\n        coerce('camera.' + cameraKeys[j] + '.x');\n        coerce('camera.' + cameraKeys[j] + '.y');\n        coerce('camera.' + cameraKeys[j] + '.z');\n    }\n\n    /*\n     * coerce to positive number (min 0) but also do not accept 0 (>0 not >=0)\n     * note that 0's go false with the !! call\n     */\n    var hasAspect = !!coerce('aspectratio.x') &&\n                    !!coerce('aspectratio.y') &&\n                    !!coerce('aspectratio.z');\n\n    var defaultAspectMode = hasAspect ? 'manual' : 'auto';\n    var aspectMode = coerce('aspectmode', defaultAspectMode);\n\n    /*\n     * We need aspectratio object in all the Layouts as it is dynamically set\n     * in the calculation steps, ie, we cant set the correct data now, it happens later.\n     * We must also account for the case the user sends bad ratio data with 'manual' set\n     * for the mode. In this case we must force change it here as the default coerce\n     * misses it above.\n     */\n    if(!hasAspect) {\n        sceneLayoutIn.aspectratio = sceneLayoutOut.aspectratio = {x: 1, y: 1, z: 1};\n\n        if(aspectMode === 'manual') sceneLayoutOut.aspectmode = 'auto';\n\n        /*\n         * kind of like autorange - we need the calculated aspectmode back in\n         * the input layout or relayout can cause problems later\n         */\n        sceneLayoutIn.aspectmode = sceneLayoutOut.aspectmode;\n    }\n\n    var fullGl3dData = getSubplotData(opts.fullData, GL3D, opts.id);\n\n    supplyGl3dAxisLayoutDefaults(sceneLayoutIn, sceneLayoutOut, {\n        font: opts.font,\n        scene: opts.id,\n        data: fullGl3dData,\n        bgColor: bgColorCombined,\n        calendar: opts.calendar,\n        fullLayout: opts.fullLayout\n    });\n\n    Registry.getComponentMethod('annotations3d', 'handleDefaults')(\n        sceneLayoutIn, sceneLayoutOut, opts\n    );\n\n    var dragmode = opts.getDfltFromLayout('dragmode');\n\n    if(dragmode !== false) {\n        if(!dragmode) {\n\n            dragmode = 'orbit';\n\n            if(sceneLayoutIn.camera &&\n                sceneLayoutIn.camera.up) {\n\n                var x = sceneLayoutIn.camera.up.x;\n                var y = sceneLayoutIn.camera.up.y;\n                var z = sceneLayoutIn.camera.up.z;\n\n                if(z !== 0) {\n                    if(!x || !y || !z) {\n                        dragmode = 'turntable';\n                    } else if(z / Math.sqrt(x * x + y * y + z * z) > 0.999) {\n                        dragmode = 'turntable';\n                    }\n                }\n            } else {\n                dragmode = 'turntable';\n            }\n        }\n    }\n\n    coerce('dragmode', dragmode);\n    coerce('hovermode', opts.getDfltFromLayout('hovermode'));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
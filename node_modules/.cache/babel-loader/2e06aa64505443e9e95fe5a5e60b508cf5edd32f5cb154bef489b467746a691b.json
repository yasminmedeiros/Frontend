{"ast":null,"code":"\"use strict\";\n\nvar pool = require(\"typedarray-pool\");\nvar INSERTION_SORT_THRESHOLD = 32;\nfunction getMallocFree(dtype) {\n  switch (dtype) {\n    case \"uint8\":\n      return [pool.mallocUint8, pool.freeUint8];\n    case \"uint16\":\n      return [pool.mallocUint16, pool.freeUint16];\n    case \"uint32\":\n      return [pool.mallocUint32, pool.freeUint32];\n    case \"int8\":\n      return [pool.mallocInt8, pool.freeInt8];\n    case \"int16\":\n      return [pool.mallocInt16, pool.freeInt16];\n    case \"int32\":\n      return [pool.mallocInt32, pool.freeInt32];\n    case \"float32\":\n      return [pool.mallocFloat, pool.freeFloat];\n    case \"float64\":\n      return [pool.mallocDouble, pool.freeDouble];\n    default:\n      return null;\n  }\n}\nfunction shapeArgs(dimension) {\n  var args = [];\n  for (var i = 0; i < dimension; ++i) {\n    args.push(\"s\" + i);\n  }\n  for (var i = 0; i < dimension; ++i) {\n    args.push(\"n\" + i);\n  }\n  for (var i = 1; i < dimension; ++i) {\n    args.push(\"d\" + i);\n  }\n  for (var i = 1; i < dimension; ++i) {\n    args.push(\"e\" + i);\n  }\n  for (var i = 1; i < dimension; ++i) {\n    args.push(\"f\" + i);\n  }\n  return args;\n}\nfunction createInsertionSort(order, dtype) {\n  var code = [\"'use strict'\"];\n  var funcName = [\"ndarrayInsertionSort\", order.join(\"d\"), dtype].join(\"\");\n  var funcArgs = [\"left\", \"right\", \"data\", \"offset\"].concat(shapeArgs(order.length));\n  var allocator = getMallocFree(dtype);\n  var vars = [\"i,j,cptr,ptr=left*s0+offset\"];\n  if (order.length > 1) {\n    var scratch_shape = [];\n    for (var i = 1; i < order.length; ++i) {\n      vars.push(\"i\" + i);\n      scratch_shape.push(\"n\" + i);\n    }\n    if (allocator) {\n      vars.push(\"scratch=malloc(\" + scratch_shape.join(\"*\") + \")\");\n    } else {\n      vars.push(\"scratch=new Array(\" + scratch_shape.join(\"*\") + \")\");\n    }\n    vars.push(\"dptr\", \"sptr\", \"a\", \"b\");\n  } else {\n    vars.push(\"scratch\");\n  }\n  function dataRead(ptr) {\n    if (dtype === \"generic\") {\n      return [\"data.get(\", ptr, \")\"].join(\"\");\n    }\n    return [\"data[\", ptr, \"]\"].join(\"\");\n  }\n  function dataWrite(ptr, v) {\n    if (dtype === \"generic\") {\n      return [\"data.set(\", ptr, \",\", v, \")\"].join(\"\");\n    }\n    return [\"data[\", ptr, \"]=\", v].join(\"\");\n  }\n\n  //Create function header\n  code.push([\"function \", funcName, \"(\", funcArgs.join(\",\"), \"){var \", vars.join(\",\")].join(\"\"), \"for(i=left+1;i<=right;++i){\", \"j=i;ptr+=s0\", \"cptr=ptr\");\n  if (order.length > 1) {\n    //Copy data into scratch\n    code.push(\"dptr=0;sptr=ptr\");\n    for (var i = order.length - 1; i >= 0; --i) {\n      var j = order[i];\n      if (j === 0) {\n        continue;\n      }\n      code.push([\"for(i\", j, \"=0;i\", j, \"<n\", j, \";++i\", j, \"){\"].join(\"\"));\n    }\n    code.push(\"scratch[dptr++]=\", dataRead(\"sptr\"));\n    for (var i = 0; i < order.length; ++i) {\n      var j = order[i];\n      if (j === 0) {\n        continue;\n      }\n      code.push(\"sptr+=d\" + j, \"}\");\n    }\n\n    //Compare items in outer loop\n    code.push(\"__g:while(j-->left){\", \"dptr=0\", \"sptr=cptr-s0\");\n    for (var i = 1; i < order.length; ++i) {\n      if (i === 1) {\n        code.push(\"__l:\");\n      }\n      code.push([\"for(i\", i, \"=0;i\", i, \"<n\", i, \";++i\", i, \"){\"].join(\"\"));\n    }\n    code.push([\"a=\", dataRead(\"sptr\"), \"\\nb=scratch[dptr]\\nif(a<b){break __g}\\nif(a>b){break __l}\"].join(\"\"));\n    for (var i = order.length - 1; i >= 1; --i) {\n      code.push(\"sptr+=e\" + i, \"dptr+=f\" + i, \"}\");\n    }\n\n    //Copy data back\n    code.push(\"dptr=cptr;sptr=cptr-s0\");\n    for (var i = order.length - 1; i >= 0; --i) {\n      var j = order[i];\n      if (j === 0) {\n        continue;\n      }\n      code.push([\"for(i\", j, \"=0;i\", j, \"<n\", j, \";++i\", j, \"){\"].join(\"\"));\n    }\n    code.push(dataWrite(\"dptr\", dataRead(\"sptr\")));\n    for (var i = 0; i < order.length; ++i) {\n      var j = order[i];\n      if (j === 0) {\n        continue;\n      }\n      code.push([\"dptr+=d\", j, \";sptr+=d\", j].join(\"\"), \"}\");\n    }\n\n    //Close while loop\n    code.push(\"cptr-=s0\\n}\");\n\n    //Copy scratch into cptr\n    code.push(\"dptr=cptr;sptr=0\");\n    for (var i = order.length - 1; i >= 0; --i) {\n      var j = order[i];\n      if (j === 0) {\n        continue;\n      }\n      code.push([\"for(i\", j, \"=0;i\", j, \"<n\", j, \";++i\", j, \"){\"].join(\"\"));\n    }\n    code.push(dataWrite(\"dptr\", \"scratch[sptr++]\"));\n    for (var i = 0; i < order.length; ++i) {\n      var j = order[i];\n      if (j === 0) {\n        continue;\n      }\n      code.push(\"dptr+=d\" + j, \"}\");\n    }\n  } else {\n    code.push(\"scratch=\" + dataRead(\"ptr\"), \"while((j-->left)&&(\" + dataRead(\"cptr-s0\") + \">scratch)){\", dataWrite(\"cptr\", dataRead(\"cptr-s0\")), \"cptr-=s0\", \"}\", dataWrite(\"cptr\", \"scratch\"));\n  }\n\n  //Close outer loop body\n  code.push(\"}\");\n  if (order.length > 1 && allocator) {\n    code.push(\"free(scratch)\");\n  }\n  code.push(\"} return \" + funcName);\n\n  //Compile and link function\n  if (allocator) {\n    var result = new Function(\"malloc\", \"free\", code.join(\"\\n\"));\n    return result(allocator[0], allocator[1]);\n  } else {\n    var result = new Function(code.join(\"\\n\"));\n    return result();\n  }\n}\nfunction createQuickSort(order, dtype, insertionSort) {\n  var code = [\"'use strict'\"];\n  var funcName = [\"ndarrayQuickSort\", order.join(\"d\"), dtype].join(\"\");\n  var funcArgs = [\"left\", \"right\", \"data\", \"offset\"].concat(shapeArgs(order.length));\n  var allocator = getMallocFree(dtype);\n  var labelCounter = 0;\n  code.push([\"function \", funcName, \"(\", funcArgs.join(\",\"), \"){\"].join(\"\"));\n  var vars = [\"sixth=((right-left+1)/6)|0\", \"index1=left+sixth\", \"index5=right-sixth\", \"index3=(left+right)>>1\", \"index2=index3-sixth\", \"index4=index3+sixth\", \"el1=index1\", \"el2=index2\", \"el3=index3\", \"el4=index4\", \"el5=index5\", \"less=left+1\", \"great=right-1\", \"pivots_are_equal=true\", \"tmp\", \"tmp0\", \"x\", \"y\", \"z\", \"k\", \"ptr0\", \"ptr1\", \"ptr2\", \"comp_pivot1=0\", \"comp_pivot2=0\", \"comp=0\"];\n  if (order.length > 1) {\n    var ele_size = [];\n    for (var i = 1; i < order.length; ++i) {\n      ele_size.push(\"n\" + i);\n      vars.push(\"i\" + i);\n    }\n    for (var i = 0; i < 8; ++i) {\n      vars.push(\"b_ptr\" + i);\n    }\n    vars.push(\"ptr3\", \"ptr4\", \"ptr5\", \"ptr6\", \"ptr7\", \"pivot_ptr\", \"ptr_shift\", \"elementSize=\" + ele_size.join(\"*\"));\n    if (allocator) {\n      vars.push(\"pivot1=malloc(elementSize)\", \"pivot2=malloc(elementSize)\");\n    } else {\n      vars.push(\"pivot1=new Array(elementSize),pivot2=new Array(elementSize)\");\n    }\n  } else {\n    vars.push(\"pivot1\", \"pivot2\");\n  }\n\n  //Initialize local variables\n  code.push(\"var \" + vars.join(\",\"));\n  function toPointer(v) {\n    return [\"(offset+\", v, \"*s0)\"].join(\"\");\n  }\n  function dataRead(ptr) {\n    if (dtype === \"generic\") {\n      return [\"data.get(\", ptr, \")\"].join(\"\");\n    }\n    return [\"data[\", ptr, \"]\"].join(\"\");\n  }\n  function dataWrite(ptr, v) {\n    if (dtype === \"generic\") {\n      return [\"data.set(\", ptr, \",\", v, \")\"].join(\"\");\n    }\n    return [\"data[\", ptr, \"]=\", v].join(\"\");\n  }\n  function cacheLoop(ptrs, usePivot, body) {\n    if (ptrs.length === 1) {\n      code.push(\"ptr0=\" + toPointer(ptrs[0]));\n    } else {\n      for (var i = 0; i < ptrs.length; ++i) {\n        code.push([\"b_ptr\", i, \"=s0*\", ptrs[i]].join(\"\"));\n      }\n    }\n    if (usePivot) {\n      code.push(\"pivot_ptr=0\");\n    }\n    code.push(\"ptr_shift=offset\");\n    for (var i = order.length - 1; i >= 0; --i) {\n      var j = order[i];\n      if (j === 0) {\n        continue;\n      }\n      code.push([\"for(i\", j, \"=0;i\", j, \"<n\", j, \";++i\", j, \"){\"].join(\"\"));\n    }\n    if (ptrs.length > 1) {\n      for (var i = 0; i < ptrs.length; ++i) {\n        code.push([\"ptr\", i, \"=b_ptr\", i, \"+ptr_shift\"].join(\"\"));\n      }\n    }\n    code.push(body);\n    if (usePivot) {\n      code.push(\"++pivot_ptr\");\n    }\n    for (var i = 0; i < order.length; ++i) {\n      var j = order[i];\n      if (j === 0) {\n        continue;\n      }\n      if (ptrs.length > 1) {\n        code.push(\"ptr_shift+=d\" + j);\n      } else {\n        code.push(\"ptr0+=d\" + j);\n      }\n      code.push(\"}\");\n    }\n  }\n  function lexicoLoop(label, ptrs, usePivot, body) {\n    if (ptrs.length === 1) {\n      code.push(\"ptr0=\" + toPointer(ptrs[0]));\n    } else {\n      for (var i = 0; i < ptrs.length; ++i) {\n        code.push([\"b_ptr\", i, \"=s0*\", ptrs[i]].join(\"\"));\n      }\n      code.push(\"ptr_shift=offset\");\n    }\n    if (usePivot) {\n      code.push(\"pivot_ptr=0\");\n    }\n    if (label) {\n      code.push(label + \":\");\n    }\n    for (var i = 1; i < order.length; ++i) {\n      code.push([\"for(i\", i, \"=0;i\", i, \"<n\", i, \";++i\", i, \"){\"].join(\"\"));\n    }\n    if (ptrs.length > 1) {\n      for (var i = 0; i < ptrs.length; ++i) {\n        code.push([\"ptr\", i, \"=b_ptr\", i, \"+ptr_shift\"].join(\"\"));\n      }\n    }\n    code.push(body);\n    for (var i = order.length - 1; i >= 1; --i) {\n      if (usePivot) {\n        code.push(\"pivot_ptr+=f\" + i);\n      }\n      if (ptrs.length > 1) {\n        code.push(\"ptr_shift+=e\" + i);\n      } else {\n        code.push(\"ptr0+=e\" + i);\n      }\n      code.push(\"}\");\n    }\n  }\n  function cleanUp() {\n    if (order.length > 1 && allocator) {\n      code.push(\"free(pivot1)\", \"free(pivot2)\");\n    }\n  }\n  function compareSwap(a_id, b_id) {\n    var a = \"el\" + a_id;\n    var b = \"el\" + b_id;\n    if (order.length > 1) {\n      var lbl = \"__l\" + ++labelCounter;\n      lexicoLoop(lbl, [a, b], false, [\"comp=\", dataRead(\"ptr0\"), \"-\", dataRead(\"ptr1\"), \"\\n\", \"if(comp>0){tmp0=\", a, \";\", a, \"=\", b, \";\", b, \"=tmp0;break \", lbl, \"}\\n\", \"if(comp<0){break \", lbl, \"}\"].join(\"\"));\n    } else {\n      code.push([\"if(\", dataRead(toPointer(a)), \">\", dataRead(toPointer(b)), \"){tmp0=\", a, \";\", a, \"=\", b, \";\", b, \"=tmp0}\"].join(\"\"));\n    }\n  }\n  compareSwap(1, 2);\n  compareSwap(4, 5);\n  compareSwap(1, 3);\n  compareSwap(2, 3);\n  compareSwap(1, 4);\n  compareSwap(3, 4);\n  compareSwap(2, 5);\n  compareSwap(2, 3);\n  compareSwap(4, 5);\n  if (order.length > 1) {\n    cacheLoop([\"el1\", \"el2\", \"el3\", \"el4\", \"el5\", \"index1\", \"index3\", \"index5\"], true, [\"pivot1[pivot_ptr]=\", dataRead(\"ptr1\"), \"\\n\", \"pivot2[pivot_ptr]=\", dataRead(\"ptr3\"), \"\\n\", \"pivots_are_equal=pivots_are_equal&&(pivot1[pivot_ptr]===pivot2[pivot_ptr])\\n\", \"x=\", dataRead(\"ptr0\"), \"\\n\", \"y=\", dataRead(\"ptr2\"), \"\\n\", \"z=\", dataRead(\"ptr4\"), \"\\n\", dataWrite(\"ptr5\", \"x\"), \"\\n\", dataWrite(\"ptr6\", \"y\"), \"\\n\", dataWrite(\"ptr7\", \"z\")].join(\"\"));\n  } else {\n    code.push([\"pivot1=\", dataRead(toPointer(\"el2\")), \"\\n\", \"pivot2=\", dataRead(toPointer(\"el4\")), \"\\n\", \"pivots_are_equal=pivot1===pivot2\\n\", \"x=\", dataRead(toPointer(\"el1\")), \"\\n\", \"y=\", dataRead(toPointer(\"el3\")), \"\\n\", \"z=\", dataRead(toPointer(\"el5\")), \"\\n\", dataWrite(toPointer(\"index1\"), \"x\"), \"\\n\", dataWrite(toPointer(\"index3\"), \"y\"), \"\\n\", dataWrite(toPointer(\"index5\"), \"z\")].join(\"\"));\n  }\n  function moveElement(dst, src) {\n    if (order.length > 1) {\n      cacheLoop([dst, src], false, dataWrite(\"ptr0\", dataRead(\"ptr1\")));\n    } else {\n      code.push(dataWrite(toPointer(dst), dataRead(toPointer(src))));\n    }\n  }\n  moveElement(\"index2\", \"left\");\n  moveElement(\"index4\", \"right\");\n  function comparePivot(result, ptr, n) {\n    if (order.length > 1) {\n      var lbl = \"__l\" + ++labelCounter;\n      lexicoLoop(lbl, [ptr], true, [result, \"=\", dataRead(\"ptr0\"), \"-pivot\", n, \"[pivot_ptr]\\n\", \"if(\", result, \"!==0){break \", lbl, \"}\"].join(\"\"));\n    } else {\n      code.push([result, \"=\", dataRead(toPointer(ptr)), \"-pivot\", n].join(\"\"));\n    }\n  }\n  function swapElements(a, b) {\n    if (order.length > 1) {\n      cacheLoop([a, b], false, [\"tmp=\", dataRead(\"ptr0\"), \"\\n\", dataWrite(\"ptr0\", dataRead(\"ptr1\")), \"\\n\", dataWrite(\"ptr1\", \"tmp\")].join(\"\"));\n    } else {\n      code.push([\"ptr0=\", toPointer(a), \"\\n\", \"ptr1=\", toPointer(b), \"\\n\", \"tmp=\", dataRead(\"ptr0\"), \"\\n\", dataWrite(\"ptr0\", dataRead(\"ptr1\")), \"\\n\", dataWrite(\"ptr1\", \"tmp\")].join(\"\"));\n    }\n  }\n  function tripleSwap(k, less, great) {\n    if (order.length > 1) {\n      cacheLoop([k, less, great], false, [\"tmp=\", dataRead(\"ptr0\"), \"\\n\", dataWrite(\"ptr0\", dataRead(\"ptr1\")), \"\\n\", dataWrite(\"ptr1\", dataRead(\"ptr2\")), \"\\n\", dataWrite(\"ptr2\", \"tmp\")].join(\"\"));\n      code.push(\"++\" + less, \"--\" + great);\n    } else {\n      code.push([\"ptr0=\", toPointer(k), \"\\n\", \"ptr1=\", toPointer(less), \"\\n\", \"ptr2=\", toPointer(great), \"\\n\", \"++\", less, \"\\n\", \"--\", great, \"\\n\", \"tmp=\", dataRead(\"ptr0\"), \"\\n\", dataWrite(\"ptr0\", dataRead(\"ptr1\")), \"\\n\", dataWrite(\"ptr1\", dataRead(\"ptr2\")), \"\\n\", dataWrite(\"ptr2\", \"tmp\")].join(\"\"));\n    }\n  }\n  function swapAndDecrement(k, great) {\n    swapElements(k, great);\n    code.push(\"--\" + great);\n  }\n  code.push(\"if(pivots_are_equal){\");\n  //Pivots are equal case\n  code.push(\"for(k=less;k<=great;++k){\");\n  comparePivot(\"comp\", \"k\", 1);\n  code.push(\"if(comp===0){continue}\");\n  code.push(\"if(comp<0){\");\n  code.push(\"if(k!==less){\");\n  swapElements(\"k\", \"less\");\n  code.push(\"}\");\n  code.push(\"++less\");\n  code.push(\"}else{\");\n  code.push(\"while(true){\");\n  comparePivot(\"comp\", \"great\", 1);\n  code.push(\"if(comp>0){\");\n  code.push(\"great--\");\n  code.push(\"}else if(comp<0){\");\n  tripleSwap(\"k\", \"less\", \"great\");\n  code.push(\"break\");\n  code.push(\"}else{\");\n  swapAndDecrement(\"k\", \"great\");\n  code.push(\"break\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}else{\");\n  //Pivots not equal case\n  code.push(\"for(k=less;k<=great;++k){\");\n  comparePivot(\"comp_pivot1\", \"k\", 1);\n  code.push(\"if(comp_pivot1<0){\");\n  code.push(\"if(k!==less){\");\n  swapElements(\"k\", \"less\");\n  code.push(\"}\");\n  code.push(\"++less\");\n  code.push(\"}else{\");\n  comparePivot(\"comp_pivot2\", \"k\", 2);\n  code.push(\"if(comp_pivot2>0){\");\n  code.push(\"while(true){\");\n  comparePivot(\"comp\", \"great\", 2);\n  code.push(\"if(comp>0){\");\n  code.push(\"if(--great<k){break}\");\n  code.push(\"continue\");\n  code.push(\"}else{\");\n  comparePivot(\"comp\", \"great\", 1);\n  code.push(\"if(comp<0){\");\n  tripleSwap(\"k\", \"less\", \"great\");\n  code.push(\"}else{\");\n  swapAndDecrement(\"k\", \"great\");\n  code.push(\"}\");\n  code.push(\"break\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n\n  //Move pivots to correct place\n  function storePivot(mem_dest, pivot_dest, pivot) {\n    if (order.length > 1) {\n      cacheLoop([mem_dest, pivot_dest], true, [dataWrite(\"ptr0\", dataRead(\"ptr1\")), \"\\n\", dataWrite(\"ptr1\", [\"pivot\", pivot, \"[pivot_ptr]\"].join(\"\"))].join(\"\"));\n    } else {\n      code.push(dataWrite(toPointer(mem_dest), dataRead(toPointer(pivot_dest))), dataWrite(toPointer(pivot_dest), \"pivot\" + pivot));\n    }\n  }\n  storePivot(\"left\", \"(less-1)\", 1);\n  storePivot(\"right\", \"(great+1)\", 2);\n\n  //Recursive sort call\n  function doSort(left, right) {\n    code.push([\"if((\", right, \"-\", left, \")<=\", INSERTION_SORT_THRESHOLD, \"){\\n\", \"insertionSort(\", left, \",\", right, \",data,offset,\", shapeArgs(order.length).join(\",\"), \")\\n\", \"}else{\\n\", funcName, \"(\", left, \",\", right, \",data,offset,\", shapeArgs(order.length).join(\",\"), \")\\n\", \"}\"].join(\"\"));\n  }\n  doSort(\"left\", \"(less-2)\");\n  doSort(\"(great+2)\", \"right\");\n\n  //If pivots are equal, then early out\n  code.push(\"if(pivots_are_equal){\");\n  cleanUp();\n  code.push(\"return\");\n  code.push(\"}\");\n  function walkPointer(ptr, pivot, body) {\n    if (order.length > 1) {\n      code.push([\"__l\", ++labelCounter, \":while(true){\"].join(\"\"));\n      cacheLoop([ptr], true, [\"if(\", dataRead(\"ptr0\"), \"!==pivot\", pivot, \"[pivot_ptr]){break __l\", labelCounter, \"}\"].join(\"\"));\n      code.push(body, \"}\");\n    } else {\n      code.push([\"while(\", dataRead(toPointer(ptr)), \"===pivot\", pivot, \"){\", body, \"}\"].join(\"\"));\n    }\n  }\n\n  //Check bounds\n  code.push(\"if(less<index1&&great>index5){\");\n  walkPointer(\"less\", 1, \"++less\");\n  walkPointer(\"great\", 2, \"--great\");\n  code.push(\"for(k=less;k<=great;++k){\");\n  comparePivot(\"comp_pivot1\", \"k\", 1);\n  code.push(\"if(comp_pivot1===0){\");\n  code.push(\"if(k!==less){\");\n  swapElements(\"k\", \"less\");\n  code.push(\"}\");\n  code.push(\"++less\");\n  code.push(\"}else{\");\n  comparePivot(\"comp_pivot2\", \"k\", 2);\n  code.push(\"if(comp_pivot2===0){\");\n  code.push(\"while(true){\");\n  comparePivot(\"comp\", \"great\", 2);\n  code.push(\"if(comp===0){\");\n  code.push(\"if(--great<k){break}\");\n  code.push(\"continue\");\n  code.push(\"}else{\");\n  comparePivot(\"comp\", \"great\", 1);\n  code.push(\"if(comp<0){\");\n  tripleSwap(\"k\", \"less\", \"great\");\n  code.push(\"}else{\");\n  swapAndDecrement(\"k\", \"great\");\n  code.push(\"}\");\n  code.push(\"break\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n\n  //Clean up and do a final sorting pass\n  cleanUp();\n  doSort(\"less\", \"great\");\n\n  //Close off main loop\n  code.push(\"}return \" + funcName);\n\n  //Compile and link\n  if (order.length > 1 && allocator) {\n    var compiled = new Function(\"insertionSort\", \"malloc\", \"free\", code.join(\"\\n\"));\n    return compiled(insertionSort, allocator[0], allocator[1]);\n  }\n  var compiled = new Function(\"insertionSort\", code.join(\"\\n\"));\n  return compiled(insertionSort);\n}\nfunction compileSort(order, dtype) {\n  var code = [\"'use strict'\"];\n  var funcName = [\"ndarraySortWrapper\", order.join(\"d\"), dtype].join(\"\");\n  var funcArgs = [\"array\"];\n  code.push([\"function \", funcName, \"(\", funcArgs.join(\",\"), \"){\"].join(\"\"));\n\n  //Unpack local variables from array\n  var vars = [\"data=array.data,offset=array.offset|0,shape=array.shape,stride=array.stride\"];\n  for (var i = 0; i < order.length; ++i) {\n    vars.push([\"s\", i, \"=stride[\", i, \"]|0,n\", i, \"=shape[\", i, \"]|0\"].join(\"\"));\n  }\n  var scratch_stride = new Array(order.length);\n  var nprod = [];\n  for (var i = 0; i < order.length; ++i) {\n    var k = order[i];\n    if (k === 0) {\n      continue;\n    }\n    if (nprod.length === 0) {\n      scratch_stride[k] = \"1\";\n    } else {\n      scratch_stride[k] = nprod.join(\"*\");\n    }\n    nprod.push(\"n\" + k);\n  }\n  var p = -1,\n    q = -1;\n  for (var i = 0; i < order.length; ++i) {\n    var j = order[i];\n    if (j !== 0) {\n      if (p > 0) {\n        vars.push([\"d\", j, \"=s\", j, \"-d\", p, \"*n\", p].join(\"\"));\n      } else {\n        vars.push([\"d\", j, \"=s\", j].join(\"\"));\n      }\n      p = j;\n    }\n    var k = order.length - 1 - i;\n    if (k !== 0) {\n      if (q > 0) {\n        vars.push([\"e\", k, \"=s\", k, \"-e\", q, \"*n\", q, \",f\", k, \"=\", scratch_stride[k], \"-f\", q, \"*n\", q].join(\"\"));\n      } else {\n        vars.push([\"e\", k, \"=s\", k, \",f\", k, \"=\", scratch_stride[k]].join(\"\"));\n      }\n      q = k;\n    }\n  }\n\n  //Declare local variables\n  code.push(\"var \" + vars.join(\",\"));\n\n  //Create arguments for subroutine\n  var sortArgs = [\"0\", \"n0-1\", \"data\", \"offset\"].concat(shapeArgs(order.length));\n\n  //Call main sorting routine\n  code.push([\"if(n0<=\", INSERTION_SORT_THRESHOLD, \"){\", \"insertionSort(\", sortArgs.join(\",\"), \")}else{\", \"quickSort(\", sortArgs.join(\",\"), \")}\"].join(\"\"));\n\n  //Return\n  code.push(\"}return \" + funcName);\n\n  //Link everything together\n  var result = new Function(\"insertionSort\", \"quickSort\", code.join(\"\\n\"));\n  var insertionSort = createInsertionSort(order, dtype);\n  var quickSort = createQuickSort(order, dtype, insertionSort);\n  return result(insertionSort, quickSort);\n}\nmodule.exports = compileSort;","map":{"version":3,"names":["pool","require","INSERTION_SORT_THRESHOLD","getMallocFree","dtype","mallocUint8","freeUint8","mallocUint16","freeUint16","mallocUint32","freeUint32","mallocInt8","freeInt8","mallocInt16","freeInt16","mallocInt32","freeInt32","mallocFloat","freeFloat","mallocDouble","freeDouble","shapeArgs","dimension","args","i","push","createInsertionSort","order","code","funcName","join","funcArgs","concat","length","allocator","vars","scratch_shape","dataRead","ptr","dataWrite","v","j","result","Function","createQuickSort","insertionSort","labelCounter","ele_size","toPointer","cacheLoop","ptrs","usePivot","body","lexicoLoop","label","cleanUp","compareSwap","a_id","b_id","a","b","lbl","moveElement","dst","src","comparePivot","n","swapElements","tripleSwap","k","less","great","swapAndDecrement","storePivot","mem_dest","pivot_dest","pivot","doSort","left","right","walkPointer","compiled","compileSort","scratch_stride","Array","nprod","p","q","sortArgs","quickSort","module","exports"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/ndarray-sort/lib/compile_sort.js"],"sourcesContent":["\"use strict\"\n\nvar pool = require(\"typedarray-pool\")\n\nvar INSERTION_SORT_THRESHOLD = 32\n\nfunction getMallocFree(dtype) {\n  switch(dtype) {\n    case \"uint8\":\n      return [pool.mallocUint8, pool.freeUint8]\n    case \"uint16\":\n      return [pool.mallocUint16, pool.freeUint16]\n    case \"uint32\":\n      return [pool.mallocUint32, pool.freeUint32]\n    case \"int8\":\n      return [pool.mallocInt8, pool.freeInt8]\n    case \"int16\":\n      return [pool.mallocInt16, pool.freeInt16]\n    case \"int32\":\n      return [pool.mallocInt32, pool.freeInt32]\n    case \"float32\":\n      return [pool.mallocFloat, pool.freeFloat]\n    case \"float64\":\n      return [pool.mallocDouble, pool.freeDouble]\n    default:\n      return null\n  }\n}\n\nfunction shapeArgs(dimension) {\n  var args = []\n  for(var i=0; i<dimension; ++i) {\n    args.push(\"s\"+i)\n  }\n  for(var i=0; i<dimension; ++i) {\n    args.push(\"n\"+i)\n  }\n  for(var i=1; i<dimension; ++i) {\n    args.push(\"d\"+i)\n  }\n  for(var i=1; i<dimension; ++i) {\n    args.push(\"e\"+i)\n  }\n  for(var i=1; i<dimension; ++i) {\n    args.push(\"f\"+i)\n  }\n  return args\n}\n\nfunction createInsertionSort(order, dtype) {\n\n  var code = [\"'use strict'\"]\n  var funcName = [\"ndarrayInsertionSort\", order.join(\"d\"), dtype].join(\"\")\n  var funcArgs = [\"left\", \"right\", \"data\", \"offset\" ].concat(shapeArgs(order.length))\n  var allocator = getMallocFree(dtype)\n  \n  var vars = [ \"i,j,cptr,ptr=left*s0+offset\" ]\n  \n  if(order.length > 1) {\n    var scratch_shape = []\n    for(var i=1; i<order.length; ++i) {\n      vars.push(\"i\"+i)\n      scratch_shape.push(\"n\"+i)\n    }\n    if(allocator) {\n      vars.push(\"scratch=malloc(\" + scratch_shape.join(\"*\") + \")\")\n    } else {\n      vars.push(\"scratch=new Array(\"+scratch_shape.join(\"*\") + \")\")\n    }\n    vars.push(\"dptr\",\"sptr\",\"a\",\"b\")\n  } else {\n    vars.push(\"scratch\")\n  }\n  \n  function dataRead(ptr) {\n    if(dtype === \"generic\") {\n      return [\"data.get(\", ptr, \")\"].join(\"\")\n    }\n    return [\"data[\",ptr,\"]\"].join(\"\")\n  }\n  \n  function dataWrite(ptr, v) {\n    if(dtype === \"generic\") {\n      return [\"data.set(\", ptr, \",\", v, \")\"].join(\"\")\n    }\n    return [\"data[\",ptr,\"]=\",v].join(\"\")\n  }\n  \n  //Create function header\n  code.push(\n    [\"function \", funcName, \"(\", funcArgs.join(\",\"), \"){var \", vars.join(\",\")].join(\"\"),\n      \"for(i=left+1;i<=right;++i){\",\n        \"j=i;ptr+=s0\",\n        \"cptr=ptr\")\n  \n  \n  if(order.length > 1) {\n  \n    //Copy data into scratch\n    code.push(\"dptr=0;sptr=ptr\")\n    for(var i=order.length-1; i>=0; --i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      code.push([\"for(i\",j,\"=0;i\",j,\"<n\",j,\";++i\",j,\"){\"].join(\"\"))\n    }\n    code.push(\"scratch[dptr++]=\",dataRead(\"sptr\"))\n    for(var i=0; i<order.length; ++i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      code.push(\"sptr+=d\"+j,\"}\")\n    }\n\n    \n    //Compare items in outer loop\n    code.push(\"__g:while(j-->left){\",\n              \"dptr=0\",\n              \"sptr=cptr-s0\")\n    for(var i=1; i<order.length; ++i) {\n      if(i === 1) {\n        code.push(\"__l:\")\n      }\n      code.push([\"for(i\",i,\"=0;i\",i,\"<n\",i,\";++i\",i,\"){\"].join(\"\"))\n    }\n    code.push([\"a=\", dataRead(\"sptr\"),\"\\nb=scratch[dptr]\\nif(a<b){break __g}\\nif(a>b){break __l}\"].join(\"\"))\n    for(var i=order.length-1; i>=1; --i) {\n      code.push(\n        \"sptr+=e\"+i,\n        \"dptr+=f\"+i,\n        \"}\")\n    }\n    \n    //Copy data back\n    code.push(\"dptr=cptr;sptr=cptr-s0\")\n    for(var i=order.length-1; i>=0; --i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      code.push([\"for(i\",j,\"=0;i\",j,\"<n\",j,\";++i\",j,\"){\"].join(\"\"))\n    }\n    code.push(dataWrite(\"dptr\", dataRead(\"sptr\")))\n    for(var i=0; i<order.length; ++i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      code.push([\"dptr+=d\",j,\";sptr+=d\",j].join(\"\"),\"}\")\n    }\n    \n    //Close while loop\n    code.push(\"cptr-=s0\\n}\")\n\n    //Copy scratch into cptr\n    code.push(\"dptr=cptr;sptr=0\")\n    for(var i=order.length-1; i>=0; --i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      code.push([\"for(i\",j,\"=0;i\",j,\"<n\",j,\";++i\",j,\"){\"].join(\"\"))\n    }\n    code.push(dataWrite(\"dptr\", \"scratch[sptr++]\"))\n    for(var i=0; i<order.length; ++i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      code.push(\"dptr+=d\"+j,\"}\")\n    }\n  } else {\n    code.push(\"scratch=\" + dataRead(\"ptr\"),\n              \"while((j-->left)&&(\"+dataRead(\"cptr-s0\")+\">scratch)){\",\n                dataWrite(\"cptr\", dataRead(\"cptr-s0\")),\n                \"cptr-=s0\",\n              \"}\",\n              dataWrite(\"cptr\", \"scratch\"))\n  }\n  \n  //Close outer loop body\n  code.push(\"}\")\n  if(order.length > 1 && allocator) {\n    code.push(\"free(scratch)\")\n  }\n  code.push(\"} return \" + funcName)\n  \n  //Compile and link function\n  if(allocator) {\n    var result = new Function(\"malloc\", \"free\", code.join(\"\\n\"))\n    return result(allocator[0], allocator[1])\n  } else {\n    var result = new Function(code.join(\"\\n\"))\n    return result()\n  }\n}\n\nfunction createQuickSort(order, dtype, insertionSort) {\n  var code = [ \"'use strict'\" ]\n  var funcName = [\"ndarrayQuickSort\", order.join(\"d\"), dtype].join(\"\")\n  var funcArgs = [\"left\", \"right\", \"data\", \"offset\" ].concat(shapeArgs(order.length))\n  var allocator = getMallocFree(dtype)\n  var labelCounter=0\n  \n  code.push([\"function \", funcName, \"(\", funcArgs.join(\",\"), \"){\"].join(\"\"))\n  \n  var vars = [\n    \"sixth=((right-left+1)/6)|0\",\n    \"index1=left+sixth\",\n    \"index5=right-sixth\",\n    \"index3=(left+right)>>1\",\n    \"index2=index3-sixth\",\n    \"index4=index3+sixth\",\n    \"el1=index1\",\n    \"el2=index2\",\n    \"el3=index3\",\n    \"el4=index4\",\n    \"el5=index5\",\n    \"less=left+1\",\n    \"great=right-1\",\n    \"pivots_are_equal=true\",\n    \"tmp\",\n    \"tmp0\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"k\",\n    \"ptr0\",\n    \"ptr1\",\n    \"ptr2\",\n    \"comp_pivot1=0\",\n    \"comp_pivot2=0\",\n    \"comp=0\"\n  ]\n  \n  if(order.length > 1) {\n    var ele_size = []\n    for(var i=1; i<order.length; ++i) {\n      ele_size.push(\"n\"+i)\n      vars.push(\"i\"+i)\n    }\n    for(var i=0; i<8; ++i) {\n      vars.push(\"b_ptr\"+i)\n    }\n    vars.push(\n      \"ptr3\",\n      \"ptr4\",\n      \"ptr5\",\n      \"ptr6\",\n      \"ptr7\",\n      \"pivot_ptr\",\n      \"ptr_shift\",\n      \"elementSize=\"+ele_size.join(\"*\"))\n    if(allocator) {\n      vars.push(\"pivot1=malloc(elementSize)\",\n                \"pivot2=malloc(elementSize)\")\n    } else {\n      vars.push(\"pivot1=new Array(elementSize),pivot2=new Array(elementSize)\")\n    }\n  } else {\n    vars.push(\"pivot1\", \"pivot2\")\n  }\n  \n  //Initialize local variables\n  code.push(\"var \" + vars.join(\",\"))\n  \n  function toPointer(v) {\n    return [\"(offset+\",v,\"*s0)\"].join(\"\")\n  }\n  \n  function dataRead(ptr) {\n    if(dtype === \"generic\") {\n      return [\"data.get(\", ptr, \")\"].join(\"\")\n    }\n    return [\"data[\",ptr,\"]\"].join(\"\")\n  }\n  \n  function dataWrite(ptr, v) {\n    if(dtype === \"generic\") {\n      return [\"data.set(\", ptr, \",\", v, \")\"].join(\"\")\n    }\n    return [\"data[\",ptr,\"]=\",v].join(\"\")\n  }\n  \n  function cacheLoop(ptrs, usePivot, body) {\n    if(ptrs.length === 1) {\n      code.push(\"ptr0=\"+toPointer(ptrs[0]))\n    } else {\n      for(var i=0; i<ptrs.length; ++i) {\n        code.push([\"b_ptr\",i,\"=s0*\",ptrs[i]].join(\"\"))\n      }\n    }\n    if(usePivot) {\n      code.push(\"pivot_ptr=0\")\n    }\n    code.push(\"ptr_shift=offset\")\n    for(var i=order.length-1; i>=0; --i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      code.push([\"for(i\",j,\"=0;i\",j,\"<n\",j,\";++i\",j,\"){\"].join(\"\"))\n    }\n    if(ptrs.length > 1) {\n      for(var i=0; i<ptrs.length; ++i) {\n        code.push([\"ptr\",i,\"=b_ptr\",i,\"+ptr_shift\"].join(\"\"))\n      }\n    }\n    code.push(body)\n    if(usePivot) {\n      code.push(\"++pivot_ptr\")\n    }\n    for(var i=0; i<order.length; ++i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      if(ptrs.length>1) {\n        code.push(\"ptr_shift+=d\"+j)\n      } else {\n        code.push(\"ptr0+=d\"+j)\n      }\n      code.push(\"}\")\n    }\n  }\n  \n  function lexicoLoop(label, ptrs, usePivot, body) {\n    if(ptrs.length === 1) {\n      code.push(\"ptr0=\"+toPointer(ptrs[0]))\n    } else {\n      for(var i=0; i<ptrs.length; ++i) {\n        code.push([\"b_ptr\",i,\"=s0*\",ptrs[i]].join(\"\"))\n      }\n      code.push(\"ptr_shift=offset\")\n    }\n    if(usePivot) {\n      code.push(\"pivot_ptr=0\")\n    }\n    if(label) {\n      code.push(label+\":\")\n    }\n    for(var i=1; i<order.length; ++i) {\n      code.push([\"for(i\",i,\"=0;i\",i,\"<n\",i,\";++i\",i,\"){\"].join(\"\"))\n    }\n    if(ptrs.length > 1) {\n      for(var i=0; i<ptrs.length; ++i) {\n        code.push([\"ptr\",i,\"=b_ptr\",i,\"+ptr_shift\"].join(\"\"))\n      }\n    }\n    code.push(body)\n    for(var i=order.length-1; i>=1; --i) {\n      if(usePivot) {\n        code.push(\"pivot_ptr+=f\"+i)\n      }\n      if(ptrs.length > 1) {\n        code.push(\"ptr_shift+=e\"+i)\n      } else {\n        code.push(\"ptr0+=e\"+i)\n      }\n      code.push(\"}\")\n    }\n  }\n  \n  function cleanUp() {\n    if(order.length > 1 && allocator) {\n      code.push(\"free(pivot1)\", \"free(pivot2)\")\n    }\n  }\n  \n  function compareSwap(a_id, b_id) {\n    var a = \"el\"+a_id\n    var b = \"el\"+b_id\n    if(order.length > 1) {\n      var lbl = \"__l\" + (++labelCounter)\n      lexicoLoop(lbl, [a, b], false, [\n        \"comp=\",dataRead(\"ptr0\"),\"-\",dataRead(\"ptr1\"),\"\\n\",\n        \"if(comp>0){tmp0=\", a, \";\",a,\"=\",b,\";\", b,\"=tmp0;break \", lbl,\"}\\n\",\n        \"if(comp<0){break \", lbl, \"}\"\n      ].join(\"\"))\n    } else {\n      code.push([\"if(\", dataRead(toPointer(a)), \">\", dataRead(toPointer(b)), \"){tmp0=\", a, \";\",a,\"=\",b,\";\", b,\"=tmp0}\"].join(\"\"))\n    }\n  }\n  \n  compareSwap(1, 2)\n  compareSwap(4, 5)\n  compareSwap(1, 3)\n  compareSwap(2, 3)\n  compareSwap(1, 4)\n  compareSwap(3, 4)\n  compareSwap(2, 5)\n  compareSwap(2, 3)\n  compareSwap(4, 5)\n  \n  if(order.length > 1) {\n    cacheLoop([\"el1\", \"el2\", \"el3\", \"el4\", \"el5\", \"index1\", \"index3\", \"index5\"], true, [\n      \"pivot1[pivot_ptr]=\",dataRead(\"ptr1\"),\"\\n\",\n      \"pivot2[pivot_ptr]=\",dataRead(\"ptr3\"),\"\\n\",\n      \"pivots_are_equal=pivots_are_equal&&(pivot1[pivot_ptr]===pivot2[pivot_ptr])\\n\",\n      \"x=\",dataRead(\"ptr0\"),\"\\n\",\n      \"y=\",dataRead(\"ptr2\"),\"\\n\",\n      \"z=\",dataRead(\"ptr4\"),\"\\n\",\n      dataWrite(\"ptr5\", \"x\"),\"\\n\",\n      dataWrite(\"ptr6\", \"y\"),\"\\n\",\n      dataWrite(\"ptr7\", \"z\")\n    ].join(\"\"))\n  } else {\n    code.push([\n      \"pivot1=\", dataRead(toPointer(\"el2\")), \"\\n\",\n      \"pivot2=\", dataRead(toPointer(\"el4\")), \"\\n\",\n      \"pivots_are_equal=pivot1===pivot2\\n\",\n      \"x=\", dataRead(toPointer(\"el1\")), \"\\n\",\n      \"y=\", dataRead(toPointer(\"el3\")), \"\\n\",\n      \"z=\", dataRead(toPointer(\"el5\")), \"\\n\",\n      dataWrite(toPointer(\"index1\"), \"x\"), \"\\n\",\n      dataWrite(toPointer(\"index3\"), \"y\"), \"\\n\",\n      dataWrite(toPointer(\"index5\"), \"z\")\n    ].join(\"\"))\n  }\n  \n\n  function moveElement(dst, src) {\n    if(order.length > 1) {\n      cacheLoop([dst, src], false,\n        dataWrite(\"ptr0\", dataRead(\"ptr1\"))\n      )\n    } else {\n      code.push(dataWrite(toPointer(dst), dataRead(toPointer(src))))\n    }\n  }\n  \n  moveElement(\"index2\", \"left\")\n  moveElement(\"index4\", \"right\")\n  \n  function comparePivot(result, ptr, n) {\n    if(order.length > 1) {\n      var lbl = \"__l\" + (++labelCounter)\n      lexicoLoop(lbl, [ptr], true, [\n        result,\"=\",dataRead(\"ptr0\"),\"-pivot\",n,\"[pivot_ptr]\\n\",\n        \"if(\",result,\"!==0){break \", lbl, \"}\"\n      ].join(\"\"))\n    } else {\n      code.push([result,\"=\", dataRead(toPointer(ptr)), \"-pivot\", n].join(\"\"))\n    }\n  }\n  \n  function swapElements(a, b) {\n    if(order.length > 1) {\n      cacheLoop([a,b],false,[\n        \"tmp=\",dataRead(\"ptr0\"),\"\\n\",\n        dataWrite(\"ptr0\", dataRead(\"ptr1\")),\"\\n\",\n        dataWrite(\"ptr1\", \"tmp\")\n      ].join(\"\"))\n    } else {\n      code.push([\n        \"ptr0=\",toPointer(a),\"\\n\",\n        \"ptr1=\",toPointer(b),\"\\n\",\n        \"tmp=\",dataRead(\"ptr0\"),\"\\n\",\n        dataWrite(\"ptr0\", dataRead(\"ptr1\")),\"\\n\",\n        dataWrite(\"ptr1\", \"tmp\")\n      ].join(\"\"))\n    }\n  }\n  \n  function tripleSwap(k, less, great) {\n    if(order.length > 1) {\n      cacheLoop([k,less,great], false, [\n        \"tmp=\",dataRead(\"ptr0\"),\"\\n\",\n        dataWrite(\"ptr0\", dataRead(\"ptr1\")),\"\\n\",\n        dataWrite(\"ptr1\", dataRead(\"ptr2\")),\"\\n\",\n        dataWrite(\"ptr2\", \"tmp\")\n      ].join(\"\"))\n      code.push(\"++\"+less, \"--\"+great)\n    } else {\n      code.push([\n        \"ptr0=\",toPointer(k),\"\\n\",\n        \"ptr1=\",toPointer(less),\"\\n\",\n        \"ptr2=\",toPointer(great),\"\\n\",\n        \"++\",less,\"\\n\",\n        \"--\",great,\"\\n\",\n        \"tmp=\", dataRead(\"ptr0\"), \"\\n\",\n        dataWrite(\"ptr0\", dataRead(\"ptr1\")), \"\\n\",\n        dataWrite(\"ptr1\", dataRead(\"ptr2\")), \"\\n\",\n        dataWrite(\"ptr2\", \"tmp\")\n      ].join(\"\"))\n    }\n  }\n  \n  function swapAndDecrement(k, great) {\n    swapElements(k, great)\n    code.push(\"--\"+great)\n  }\n    \n  code.push(\"if(pivots_are_equal){\")\n    //Pivots are equal case\n    code.push(\"for(k=less;k<=great;++k){\")\n      comparePivot(\"comp\", \"k\", 1)\n      code.push(\"if(comp===0){continue}\")\n      code.push(\"if(comp<0){\")\n        code.push(\"if(k!==less){\")\n          swapElements(\"k\", \"less\")\n        code.push(\"}\")\n        code.push(\"++less\")\n      code.push(\"}else{\")\n        code.push(\"while(true){\")\n          comparePivot(\"comp\", \"great\", 1)\n          code.push(\"if(comp>0){\")\n            code.push(\"great--\")\n          code.push(\"}else if(comp<0){\")\n            tripleSwap(\"k\", \"less\", \"great\")\n            code.push(\"break\")\n          code.push(\"}else{\")\n            swapAndDecrement(\"k\", \"great\")\n            code.push(\"break\")\n          code.push(\"}\")\n        code.push(\"}\")\n      code.push(\"}\")\n    code.push(\"}\")\n  code.push(\"}else{\")\n    //Pivots not equal case\n    code.push(\"for(k=less;k<=great;++k){\")\n      comparePivot(\"comp_pivot1\", \"k\", 1)\n      code.push(\"if(comp_pivot1<0){\")\n        code.push(\"if(k!==less){\")\n          swapElements(\"k\", \"less\")\n        code.push(\"}\")\n        code.push(\"++less\")\n      code.push(\"}else{\")\n        comparePivot(\"comp_pivot2\", \"k\", 2)\n        code.push(\"if(comp_pivot2>0){\")\n          code.push(\"while(true){\")\n            comparePivot(\"comp\", \"great\", 2)\n            code.push(\"if(comp>0){\")\n              code.push(\"if(--great<k){break}\")\n              code.push(\"continue\")\n            code.push(\"}else{\")\n              comparePivot(\"comp\", \"great\", 1)\n              code.push(\"if(comp<0){\")\n                tripleSwap(\"k\", \"less\", \"great\")\n              code.push(\"}else{\")\n                swapAndDecrement(\"k\", \"great\")\n              code.push(\"}\")\n              code.push(\"break\")\n            code.push(\"}\")\n          code.push(\"}\")\n        code.push(\"}\")\n      code.push(\"}\")\n    code.push(\"}\")\n  code.push(\"}\")\n  \n  //Move pivots to correct place\n  function storePivot(mem_dest, pivot_dest, pivot) {\n    if(order.length>1) {\n      cacheLoop([mem_dest, pivot_dest], true, [\n        dataWrite(\"ptr0\", dataRead(\"ptr1\")), \"\\n\",\n        dataWrite(\"ptr1\", [\"pivot\",pivot,\"[pivot_ptr]\"].join(\"\"))\n      ].join(\"\"))\n    } else {\n      code.push(\n          dataWrite(toPointer(mem_dest), dataRead(toPointer(pivot_dest))),\n          dataWrite(toPointer(pivot_dest), \"pivot\"+pivot))\n    }\n  }\n  \n  storePivot(\"left\", \"(less-1)\", 1)\n  storePivot(\"right\", \"(great+1)\", 2)\n\n  //Recursive sort call\n  function doSort(left, right) {\n    code.push([\n      \"if((\",right,\"-\",left,\")<=\",INSERTION_SORT_THRESHOLD,\"){\\n\",\n        \"insertionSort(\", left, \",\", right, \",data,offset,\", shapeArgs(order.length).join(\",\"), \")\\n\",\n      \"}else{\\n\",\n        funcName, \"(\", left, \",\", right, \",data,offset,\", shapeArgs(order.length).join(\",\"), \")\\n\",\n      \"}\"\n    ].join(\"\"))\n  }\n  doSort(\"left\", \"(less-2)\")\n  doSort(\"(great+2)\", \"right\")\n  \n  //If pivots are equal, then early out\n  code.push(\"if(pivots_are_equal){\")\n    cleanUp()\n    code.push(\"return\")\n  code.push(\"}\")\n  \n  function walkPointer(ptr, pivot, body) {\n    if(order.length > 1) {\n      code.push([\"__l\",++labelCounter,\":while(true){\"].join(\"\"))\n      cacheLoop([ptr], true, [\n        \"if(\", dataRead(\"ptr0\"), \"!==pivot\", pivot, \"[pivot_ptr]){break __l\", labelCounter, \"}\"\n      ].join(\"\"))\n      code.push(body, \"}\")\n    } else {\n      code.push([\"while(\", dataRead(toPointer(ptr)), \"===pivot\", pivot, \"){\", body, \"}\"].join(\"\"))\n    }\n  }\n  \n  //Check bounds\n  code.push(\"if(less<index1&&great>index5){\")\n  \n    walkPointer(\"less\", 1, \"++less\")\n    walkPointer(\"great\", 2, \"--great\")\n  \n    code.push(\"for(k=less;k<=great;++k){\")\n      comparePivot(\"comp_pivot1\", \"k\", 1)\n      code.push(\"if(comp_pivot1===0){\")\n        code.push(\"if(k!==less){\")\n          swapElements(\"k\", \"less\")\n        code.push(\"}\")\n        code.push(\"++less\")\n      code.push(\"}else{\")\n        comparePivot(\"comp_pivot2\", \"k\", 2)\n        code.push(\"if(comp_pivot2===0){\")\n          code.push(\"while(true){\")\n            comparePivot(\"comp\", \"great\", 2)\n            code.push(\"if(comp===0){\")\n              code.push(\"if(--great<k){break}\")\n              code.push(\"continue\")\n            code.push(\"}else{\")\n              comparePivot(\"comp\", \"great\", 1)\n              code.push(\"if(comp<0){\")\n                tripleSwap(\"k\", \"less\", \"great\")\n              code.push(\"}else{\")\n                swapAndDecrement(\"k\", \"great\")\n              code.push(\"}\")\n              code.push(\"break\")\n            code.push(\"}\")\n          code.push(\"}\")\n        code.push(\"}\")\n      code.push(\"}\")\n    code.push(\"}\")\n  code.push(\"}\")\n  \n  //Clean up and do a final sorting pass\n  cleanUp()\n  doSort(\"less\", \"great\")\n \n  //Close off main loop\n  code.push(\"}return \" + funcName)\n  \n  //Compile and link\n  if(order.length > 1 && allocator) {\n    var compiled = new Function(\"insertionSort\", \"malloc\", \"free\", code.join(\"\\n\"))\n    return compiled(insertionSort, allocator[0], allocator[1])\n  }\n  var compiled = new Function(\"insertionSort\", code.join(\"\\n\"))\n  return compiled(insertionSort)\n}\n\nfunction compileSort(order, dtype) {\n  var code = [\"'use strict'\"]\n  var funcName = [\"ndarraySortWrapper\", order.join(\"d\"), dtype].join(\"\")\n  var funcArgs = [ \"array\" ]\n  \n  code.push([\"function \", funcName, \"(\", funcArgs.join(\",\"), \"){\"].join(\"\"))\n  \n  //Unpack local variables from array\n  var vars = [\"data=array.data,offset=array.offset|0,shape=array.shape,stride=array.stride\"]\n  for(var i=0; i<order.length; ++i) {\n    vars.push([\"s\",i,\"=stride[\",i,\"]|0,n\",i,\"=shape[\",i,\"]|0\"].join(\"\"))\n  }\n  \n  var scratch_stride = new Array(order.length)\n  var nprod = []\n  for(var i=0; i<order.length; ++i) {\n    var k = order[i]\n    if(k === 0) {\n      continue\n    }\n    if(nprod.length === 0) {\n      scratch_stride[k] = \"1\"\n    } else {\n      scratch_stride[k] = nprod.join(\"*\")\n    }\n    nprod.push(\"n\"+k)\n  }\n  \n  var p = -1, q = -1\n  for(var i=0; i<order.length; ++i) {\n    var j = order[i]\n    if(j !== 0) {\n      if(p > 0) {\n        vars.push([\"d\",j,\"=s\",j,\"-d\",p,\"*n\",p].join(\"\"))\n      } else {\n        vars.push([\"d\",j,\"=s\",j].join(\"\"))\n      }\n      p = j\n    }\n    var k = order.length-1-i\n    if(k !== 0) {\n      if(q > 0) {\n        vars.push([\"e\",k,\"=s\",k,\"-e\",q,\"*n\",q,\n                  \",f\",k,\"=\",scratch_stride[k],\"-f\",q,\"*n\",q].join(\"\"))\n      } else {\n        vars.push([\"e\",k,\"=s\",k,\",f\",k,\"=\",scratch_stride[k]].join(\"\"))\n      }\n      q = k\n    }\n  }\n  \n  //Declare local variables\n  code.push(\"var \" + vars.join(\",\"))\n  \n  //Create arguments for subroutine\n  var sortArgs = [\"0\", \"n0-1\", \"data\", \"offset\"].concat(shapeArgs(order.length))\n  \n  //Call main sorting routine\n  code.push([\n    \"if(n0<=\",INSERTION_SORT_THRESHOLD,\"){\",\n      \"insertionSort(\", sortArgs.join(\",\"), \")}else{\",\n      \"quickSort(\", sortArgs.join(\",\"),\n    \")}\"\n  ].join(\"\"))\n  \n  //Return\n  code.push(\"}return \" + funcName)\n  \n  //Link everything together\n  var result = new Function(\"insertionSort\", \"quickSort\", code.join(\"\\n\"))\n  var insertionSort = createInsertionSort(order, dtype)\n  var quickSort = createQuickSort(order, dtype, insertionSort)\n  return result(insertionSort, quickSort)\n}\n\nmodule.exports = compileSort"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
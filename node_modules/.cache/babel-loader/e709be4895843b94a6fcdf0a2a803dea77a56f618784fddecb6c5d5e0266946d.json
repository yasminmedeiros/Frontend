{"ast":null,"code":"'use strict';\n\nvar DEFAULT_VERTEX_NORMALS_EPSILON = 1e-6; // may be too large if triangles are very small\nvar DEFAULT_FACE_NORMALS_EPSILON = 1e-6;\nvar createShader = require('gl-shader');\nvar createBuffer = require('gl-buffer');\nvar createVAO = require('gl-vao');\nvar createTexture = require('gl-texture2d');\nvar normals = require('normals');\nvar multiply = require('gl-mat4/multiply');\nvar invert = require('gl-mat4/invert');\nvar ndarray = require('ndarray');\nvar colormap = require('colormap');\nvar getContour = require('simplicial-complex-contour');\nvar pool = require('typedarray-pool');\nvar shaders = require('./lib/shaders');\nvar closestPoint = require('./lib/closest-point');\nvar meshShader = shaders.meshShader;\nvar wireShader = shaders.wireShader;\nvar pointShader = shaders.pointShader;\nvar pickShader = shaders.pickShader;\nvar pointPickShader = shaders.pointPickShader;\nvar contourShader = shaders.contourShader;\nvar IDENTITY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nfunction SimplicialMesh(gl, texture, triShader, lineShader, pointShader, pickShader, pointPickShader, contourShader, trianglePositions, triangleIds, triangleColors, triangleUVs, triangleNormals, triangleVAO, edgePositions, edgeIds, edgeColors, edgeUVs, edgeVAO, pointPositions, pointIds, pointColors, pointUVs, pointSizes, pointVAO, contourPositions, contourVAO) {\n  this.gl = gl;\n  this.pixelRatio = 1;\n  this.cells = [];\n  this.positions = [];\n  this.intensity = [];\n  this.texture = texture;\n  this.dirty = true;\n  this.triShader = triShader;\n  this.lineShader = lineShader;\n  this.pointShader = pointShader;\n  this.pickShader = pickShader;\n  this.pointPickShader = pointPickShader;\n  this.contourShader = contourShader;\n  this.trianglePositions = trianglePositions;\n  this.triangleColors = triangleColors;\n  this.triangleNormals = triangleNormals;\n  this.triangleUVs = triangleUVs;\n  this.triangleIds = triangleIds;\n  this.triangleVAO = triangleVAO;\n  this.triangleCount = 0;\n  this.lineWidth = 1;\n  this.edgePositions = edgePositions;\n  this.edgeColors = edgeColors;\n  this.edgeUVs = edgeUVs;\n  this.edgeIds = edgeIds;\n  this.edgeVAO = edgeVAO;\n  this.edgeCount = 0;\n  this.pointPositions = pointPositions;\n  this.pointColors = pointColors;\n  this.pointUVs = pointUVs;\n  this.pointSizes = pointSizes;\n  this.pointIds = pointIds;\n  this.pointVAO = pointVAO;\n  this.pointCount = 0;\n  this.contourLineWidth = 1;\n  this.contourPositions = contourPositions;\n  this.contourVAO = contourVAO;\n  this.contourCount = 0;\n  this.contourColor = [0, 0, 0];\n  this.contourEnable = true;\n  this.pickVertex = true;\n  this.pickId = 1;\n  this.bounds = [[Infinity, Infinity, Infinity], [-Infinity, -Infinity, -Infinity]];\n  this.clipBounds = [[-Infinity, -Infinity, -Infinity], [Infinity, Infinity, Infinity]];\n  this.lightPosition = [1e5, 1e5, 0];\n  this.ambientLight = 0.8;\n  this.diffuseLight = 0.8;\n  this.specularLight = 2.0;\n  this.roughness = 0.5;\n  this.fresnel = 1.5;\n  this.opacity = 1.0;\n  this.hasAlpha = false;\n  this.opacityscale = false;\n  this._model = IDENTITY;\n  this._view = IDENTITY;\n  this._projection = IDENTITY;\n  this._resolution = [1, 1];\n}\nvar proto = SimplicialMesh.prototype;\nproto.isOpaque = function () {\n  return !this.hasAlpha;\n};\nproto.isTransparent = function () {\n  return this.hasAlpha;\n};\nproto.pickSlots = 1;\nproto.setPickBase = function (id) {\n  this.pickId = id;\n};\nfunction getOpacityFromScale(ratio, opacityscale) {\n  if (!opacityscale) return 1;\n  if (!opacityscale.length) return 1;\n  for (var i = 0; i < opacityscale.length; ++i) {\n    if (opacityscale.length < 2) return 1;\n    if (opacityscale[i][0] === ratio) return opacityscale[i][1];\n    if (opacityscale[i][0] > ratio && i > 0) {\n      var d = (opacityscale[i][0] - ratio) / (opacityscale[i][0] - opacityscale[i - 1][0]);\n      return opacityscale[i][1] * (1 - d) + d * opacityscale[i - 1][1];\n    }\n  }\n  return 1;\n}\nfunction genColormap(param, opacityscale) {\n  var colors = colormap({\n    colormap: param,\n    nshades: 256,\n    format: 'rgba'\n  });\n  var result = new Uint8Array(256 * 4);\n  for (var i = 0; i < 256; ++i) {\n    var c = colors[i];\n    for (var j = 0; j < 3; ++j) {\n      result[4 * i + j] = c[j];\n    }\n    if (!opacityscale) {\n      result[4 * i + 3] = 255 * c[3];\n    } else {\n      result[4 * i + 3] = 255 * getOpacityFromScale(i / 255.0, opacityscale);\n    }\n  }\n  return ndarray(result, [256, 256, 4], [4, 0, 1]);\n}\nfunction takeZComponent(array) {\n  var n = array.length;\n  var result = new Array(n);\n  for (var i = 0; i < n; ++i) {\n    result[i] = array[i][2];\n  }\n  return result;\n}\nproto.highlight = function (selection) {\n  if (!selection || !this.contourEnable) {\n    this.contourCount = 0;\n    return;\n  }\n  var level = getContour(this.cells, this.intensity, selection.intensity);\n  var cells = level.cells;\n  var vertexIds = level.vertexIds;\n  var vertexWeights = level.vertexWeights;\n  var numCells = cells.length;\n  var result = pool.mallocFloat32(2 * 3 * numCells);\n  var ptr = 0;\n  for (var i = 0; i < numCells; ++i) {\n    var c = cells[i];\n    for (var j = 0; j < 2; ++j) {\n      var v = c[0];\n      if (c.length === 2) {\n        v = c[j];\n      }\n      var a = vertexIds[v][0];\n      var b = vertexIds[v][1];\n      var w = vertexWeights[v];\n      var wi = 1.0 - w;\n      var pa = this.positions[a];\n      var pb = this.positions[b];\n      for (var k = 0; k < 3; ++k) {\n        result[ptr++] = w * pa[k] + wi * pb[k];\n      }\n    }\n  }\n  this.contourCount = ptr / 3 | 0;\n  this.contourPositions.update(result.subarray(0, ptr));\n  pool.free(result);\n};\nproto.update = function (params) {\n  params = params || {};\n  var gl = this.gl;\n  this.dirty = true;\n  if ('contourEnable' in params) {\n    this.contourEnable = params.contourEnable;\n  }\n  if ('contourColor' in params) {\n    this.contourColor = params.contourColor;\n  }\n  if ('lineWidth' in params) {\n    this.lineWidth = params.lineWidth;\n  }\n  if ('lightPosition' in params) {\n    this.lightPosition = params.lightPosition;\n  }\n  this.hasAlpha = false; // default to no transparent draw\n  if ('opacity' in params) {\n    this.opacity = params.opacity;\n    if (this.opacity < 1) {\n      this.hasAlpha = true;\n    }\n  }\n  if ('opacityscale' in params) {\n    this.opacityscale = params.opacityscale;\n    this.hasAlpha = true;\n  }\n  if ('ambient' in params) {\n    this.ambientLight = params.ambient;\n  }\n  if ('diffuse' in params) {\n    this.diffuseLight = params.diffuse;\n  }\n  if ('specular' in params) {\n    this.specularLight = params.specular;\n  }\n  if ('roughness' in params) {\n    this.roughness = params.roughness;\n  }\n  if ('fresnel' in params) {\n    this.fresnel = params.fresnel;\n  }\n  if (params.texture) {\n    this.texture.dispose();\n    this.texture = createTexture(gl, params.texture);\n  } else if (params.colormap) {\n    this.texture.shape = [256, 256];\n    this.texture.minFilter = gl.LINEAR_MIPMAP_LINEAR;\n    this.texture.magFilter = gl.LINEAR;\n    this.texture.setPixels(genColormap(params.colormap, this.opacityscale));\n    this.texture.generateMipmap();\n  }\n  var cells = params.cells;\n  var positions = params.positions;\n  if (!positions || !cells) {\n    return;\n  }\n  var tPos = [];\n  var tCol = [];\n  var tNor = [];\n  var tUVs = [];\n  var tIds = [];\n  var ePos = [];\n  var eCol = [];\n  var eUVs = [];\n  var eIds = [];\n  var pPos = [];\n  var pCol = [];\n  var pUVs = [];\n  var pSiz = [];\n  var pIds = [];\n\n  //Save geometry data for picking calculations\n  this.cells = cells;\n  this.positions = positions;\n\n  //Compute normals\n  var vertexNormals = params.vertexNormals;\n  var cellNormals = params.cellNormals;\n  var vertexNormalsEpsilon = params.vertexNormalsEpsilon === void 0 ? DEFAULT_VERTEX_NORMALS_EPSILON : params.vertexNormalsEpsilon;\n  var faceNormalsEpsilon = params.faceNormalsEpsilon === void 0 ? DEFAULT_FACE_NORMALS_EPSILON : params.faceNormalsEpsilon;\n  if (params.useFacetNormals && !cellNormals) {\n    cellNormals = normals.faceNormals(cells, positions, faceNormalsEpsilon);\n  }\n  if (!cellNormals && !vertexNormals) {\n    vertexNormals = normals.vertexNormals(cells, positions, vertexNormalsEpsilon);\n  }\n\n  //Compute colors\n  var vertexColors = params.vertexColors;\n  var cellColors = params.cellColors;\n  var meshColor = params.meshColor || [1, 1, 1, 1];\n\n  //UVs\n  var vertexUVs = params.vertexUVs;\n  var vertexIntensity = params.vertexIntensity;\n  var cellUVs = params.cellUVs;\n  var cellIntensity = params.cellIntensity;\n  var intensityLo = Infinity;\n  var intensityHi = -Infinity;\n  if (!vertexUVs && !cellUVs) {\n    if (vertexIntensity) {\n      if (params.vertexIntensityBounds) {\n        intensityLo = +params.vertexIntensityBounds[0];\n        intensityHi = +params.vertexIntensityBounds[1];\n      } else {\n        for (var i = 0; i < vertexIntensity.length; ++i) {\n          var f = vertexIntensity[i];\n          intensityLo = Math.min(intensityLo, f);\n          intensityHi = Math.max(intensityHi, f);\n        }\n      }\n    } else if (cellIntensity) {\n      if (params.cellIntensityBounds) {\n        intensityLo = +params.cellIntensityBounds[0];\n        intensityHi = +params.cellIntensityBounds[1];\n      } else {\n        for (var i = 0; i < cellIntensity.length; ++i) {\n          var f = cellIntensity[i];\n          intensityLo = Math.min(intensityLo, f);\n          intensityHi = Math.max(intensityHi, f);\n        }\n      }\n    } else {\n      for (var i = 0; i < positions.length; ++i) {\n        var f = positions[i][2];\n        intensityLo = Math.min(intensityLo, f);\n        intensityHi = Math.max(intensityHi, f);\n      }\n    }\n  }\n  if (vertexIntensity) {\n    this.intensity = vertexIntensity;\n  } else if (cellIntensity) {\n    this.intensity = cellIntensity;\n  } else {\n    this.intensity = takeZComponent(positions);\n  }\n  this.pickVertex = !(cellIntensity || cellColors);\n\n  //Point size\n  var pointSizes = params.pointSizes;\n  var meshPointSize = params.pointSize || 1.0;\n\n  //Update bounds\n  this.bounds = [[Infinity, Infinity, Infinity], [-Infinity, -Infinity, -Infinity]];\n  for (var i = 0; i < positions.length; ++i) {\n    var p = positions[i];\n    for (var j = 0; j < 3; ++j) {\n      if (isNaN(p[j]) || !isFinite(p[j])) {\n        continue;\n      }\n      this.bounds[0][j] = Math.min(this.bounds[0][j], p[j]);\n      this.bounds[1][j] = Math.max(this.bounds[1][j], p[j]);\n    }\n  }\n\n  //Pack cells into buffers\n  var triangleCount = 0;\n  var edgeCount = 0;\n  var pointCount = 0;\n  fill_loop: for (var i = 0; i < cells.length; ++i) {\n    var cell = cells[i];\n    switch (cell.length) {\n      case 1:\n        var v = cell[0];\n        var p = positions[v];\n\n        //Check NaNs\n        for (var j = 0; j < 3; ++j) {\n          if (isNaN(p[j]) || !isFinite(p[j])) {\n            continue fill_loop;\n          }\n        }\n        pPos.push(p[0], p[1], p[2]);\n        var c;\n        if (vertexColors) {\n          c = vertexColors[v];\n        } else if (cellColors) {\n          c = cellColors[i];\n        } else {\n          c = meshColor;\n        }\n        if (this.opacityscale && vertexIntensity) {\n          tCol.push(c[0], c[1], c[2], this.opacity * getOpacityFromScale((vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo), this.opacityscale));\n        } else if (c.length === 3) {\n          pCol.push(c[0], c[1], c[2], this.opacity);\n        } else {\n          pCol.push(c[0], c[1], c[2], c[3] * this.opacity);\n          if (c[3] < 1) this.hasAlpha = true;\n        }\n        var uv;\n        if (vertexUVs) {\n          uv = vertexUVs[v];\n        } else if (vertexIntensity) {\n          uv = [(vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo), 0];\n        } else if (cellUVs) {\n          uv = cellUVs[i];\n        } else if (cellIntensity) {\n          uv = [(cellIntensity[i] - intensityLo) / (intensityHi - intensityLo), 0];\n        } else {\n          uv = [(p[2] - intensityLo) / (intensityHi - intensityLo), 0];\n        }\n        pUVs.push(uv[0], uv[1]);\n        if (pointSizes) {\n          pSiz.push(pointSizes[v]);\n        } else {\n          pSiz.push(meshPointSize);\n        }\n        pIds.push(i);\n        pointCount += 1;\n        break;\n      case 2:\n        //Check NaNs\n        for (var j = 0; j < 2; ++j) {\n          var v = cell[j];\n          var p = positions[v];\n          for (var k = 0; k < 3; ++k) {\n            if (isNaN(p[k]) || !isFinite(p[k])) {\n              continue fill_loop;\n            }\n          }\n        }\n        for (var j = 0; j < 2; ++j) {\n          var v = cell[j];\n          var p = positions[v];\n          ePos.push(p[0], p[1], p[2]);\n          var c;\n          if (vertexColors) {\n            c = vertexColors[v];\n          } else if (cellColors) {\n            c = cellColors[i];\n          } else {\n            c = meshColor;\n          }\n          if (this.opacityscale && vertexIntensity) {\n            tCol.push(c[0], c[1], c[2], this.opacity * getOpacityFromScale((vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo), this.opacityscale));\n          } else if (c.length === 3) {\n            eCol.push(c[0], c[1], c[2], this.opacity);\n          } else {\n            eCol.push(c[0], c[1], c[2], c[3] * this.opacity);\n            if (c[3] < 1) this.hasAlpha = true;\n          }\n          var uv;\n          if (vertexUVs) {\n            uv = vertexUVs[v];\n          } else if (vertexIntensity) {\n            uv = [(vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo), 0];\n          } else if (cellUVs) {\n            uv = cellUVs[i];\n          } else if (cellIntensity) {\n            uv = [(cellIntensity[i] - intensityLo) / (intensityHi - intensityLo), 0];\n          } else {\n            uv = [(p[2] - intensityLo) / (intensityHi - intensityLo), 0];\n          }\n          eUVs.push(uv[0], uv[1]);\n          eIds.push(i);\n        }\n        edgeCount += 1;\n        break;\n      case 3:\n        //Check NaNs\n        for (var j = 0; j < 3; ++j) {\n          var v = cell[j];\n          var p = positions[v];\n          for (var k = 0; k < 3; ++k) {\n            if (isNaN(p[k]) || !isFinite(p[k])) {\n              continue fill_loop;\n            }\n          }\n        }\n        for (var j = 0; j < 3; ++j) {\n          var v = cell[2 - j];\n          var p = positions[v];\n          tPos.push(p[0], p[1], p[2]);\n          var c;\n          if (vertexColors) {\n            c = vertexColors[v];\n          } else if (cellColors) {\n            c = cellColors[i];\n          } else {\n            c = meshColor;\n          }\n          if (!c) {\n            tCol.push(0.5, 0.5, 0.5, 1);\n          } else if (this.opacityscale && vertexIntensity) {\n            tCol.push(c[0], c[1], c[2], this.opacity * getOpacityFromScale((vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo), this.opacityscale));\n          } else if (c.length === 3) {\n            tCol.push(c[0], c[1], c[2], this.opacity);\n          } else {\n            tCol.push(c[0], c[1], c[2], c[3] * this.opacity);\n            if (c[3] < 1) this.hasAlpha = true;\n          }\n          var uv;\n          if (vertexUVs) {\n            uv = vertexUVs[v];\n          } else if (vertexIntensity) {\n            uv = [(vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo), 0];\n          } else if (cellUVs) {\n            uv = cellUVs[i];\n          } else if (cellIntensity) {\n            uv = [(cellIntensity[i] - intensityLo) / (intensityHi - intensityLo), 0];\n          } else {\n            uv = [(p[2] - intensityLo) / (intensityHi - intensityLo), 0];\n          }\n          tUVs.push(uv[0], uv[1]);\n          var q;\n          if (vertexNormals) {\n            q = vertexNormals[v];\n          } else {\n            q = cellNormals[i];\n          }\n          tNor.push(q[0], q[1], q[2]);\n          tIds.push(i);\n        }\n        triangleCount += 1;\n        break;\n      default:\n        break;\n    }\n  }\n  this.pointCount = pointCount;\n  this.edgeCount = edgeCount;\n  this.triangleCount = triangleCount;\n  this.pointPositions.update(pPos);\n  this.pointColors.update(pCol);\n  this.pointUVs.update(pUVs);\n  this.pointSizes.update(pSiz);\n  this.pointIds.update(new Uint32Array(pIds));\n  this.edgePositions.update(ePos);\n  this.edgeColors.update(eCol);\n  this.edgeUVs.update(eUVs);\n  this.edgeIds.update(new Uint32Array(eIds));\n  this.trianglePositions.update(tPos);\n  this.triangleColors.update(tCol);\n  this.triangleUVs.update(tUVs);\n  this.triangleNormals.update(tNor);\n  this.triangleIds.update(new Uint32Array(tIds));\n};\nproto.drawTransparent = proto.draw = function (params) {\n  params = params || {};\n  var gl = this.gl;\n  var model = params.model || IDENTITY;\n  var view = params.view || IDENTITY;\n  var projection = params.projection || IDENTITY;\n  var clipBounds = [[-1e6, -1e6, -1e6], [1e6, 1e6, 1e6]];\n  for (var i = 0; i < 3; ++i) {\n    clipBounds[0][i] = Math.max(clipBounds[0][i], this.clipBounds[0][i]);\n    clipBounds[1][i] = Math.min(clipBounds[1][i], this.clipBounds[1][i]);\n  }\n  var uniforms = {\n    model: model,\n    view: view,\n    projection: projection,\n    inverseModel: IDENTITY.slice(),\n    clipBounds: clipBounds,\n    kambient: this.ambientLight,\n    kdiffuse: this.diffuseLight,\n    kspecular: this.specularLight,\n    roughness: this.roughness,\n    fresnel: this.fresnel,\n    eyePosition: [0, 0, 0],\n    lightPosition: [0, 0, 0],\n    contourColor: this.contourColor,\n    texture: 0\n  };\n  uniforms.inverseModel = invert(uniforms.inverseModel, uniforms.model);\n  gl.disable(gl.CULL_FACE);\n  this.texture.bind(0);\n  var invCameraMatrix = new Array(16);\n  multiply(invCameraMatrix, uniforms.view, uniforms.model);\n  multiply(invCameraMatrix, uniforms.projection, invCameraMatrix);\n  invert(invCameraMatrix, invCameraMatrix);\n  for (var i = 0; i < 3; ++i) {\n    uniforms.eyePosition[i] = invCameraMatrix[12 + i] / invCameraMatrix[15];\n  }\n  var w = invCameraMatrix[15];\n  for (var i = 0; i < 3; ++i) {\n    w += this.lightPosition[i] * invCameraMatrix[4 * i + 3];\n  }\n  for (var i = 0; i < 3; ++i) {\n    var s = invCameraMatrix[12 + i];\n    for (var j = 0; j < 3; ++j) {\n      s += invCameraMatrix[4 * j + i] * this.lightPosition[j];\n    }\n    uniforms.lightPosition[i] = s / w;\n  }\n  if (this.triangleCount > 0) {\n    var shader = this.triShader;\n    shader.bind();\n    shader.uniforms = uniforms;\n    this.triangleVAO.bind();\n    gl.drawArrays(gl.TRIANGLES, 0, this.triangleCount * 3);\n    this.triangleVAO.unbind();\n  }\n  if (this.edgeCount > 0 && this.lineWidth > 0) {\n    var shader = this.lineShader;\n    shader.bind();\n    shader.uniforms = uniforms;\n    this.edgeVAO.bind();\n    gl.lineWidth(this.lineWidth * this.pixelRatio);\n    gl.drawArrays(gl.LINES, 0, this.edgeCount * 2);\n    this.edgeVAO.unbind();\n  }\n  if (this.pointCount > 0) {\n    var shader = this.pointShader;\n    shader.bind();\n    shader.uniforms = uniforms;\n    this.pointVAO.bind();\n    gl.drawArrays(gl.POINTS, 0, this.pointCount);\n    this.pointVAO.unbind();\n  }\n  if (this.contourEnable && this.contourCount > 0 && this.contourLineWidth > 0) {\n    var shader = this.contourShader;\n    shader.bind();\n    shader.uniforms = uniforms;\n    this.contourVAO.bind();\n    gl.drawArrays(gl.LINES, 0, this.contourCount);\n    this.contourVAO.unbind();\n  }\n};\nproto.drawPick = function (params) {\n  params = params || {};\n  var gl = this.gl;\n  var model = params.model || IDENTITY;\n  var view = params.view || IDENTITY;\n  var projection = params.projection || IDENTITY;\n  var clipBounds = [[-1e6, -1e6, -1e6], [1e6, 1e6, 1e6]];\n  for (var i = 0; i < 3; ++i) {\n    clipBounds[0][i] = Math.max(clipBounds[0][i], this.clipBounds[0][i]);\n    clipBounds[1][i] = Math.min(clipBounds[1][i], this.clipBounds[1][i]);\n  }\n\n  //Save camera parameters\n  this._model = [].slice.call(model);\n  this._view = [].slice.call(view);\n  this._projection = [].slice.call(projection);\n  this._resolution = [gl.drawingBufferWidth, gl.drawingBufferHeight];\n  var uniforms = {\n    model: model,\n    view: view,\n    projection: projection,\n    clipBounds: clipBounds,\n    pickId: this.pickId / 255.0\n  };\n  var shader = this.pickShader;\n  shader.bind();\n  shader.uniforms = uniforms;\n  if (this.triangleCount > 0) {\n    this.triangleVAO.bind();\n    gl.drawArrays(gl.TRIANGLES, 0, this.triangleCount * 3);\n    this.triangleVAO.unbind();\n  }\n  if (this.edgeCount > 0) {\n    this.edgeVAO.bind();\n    gl.lineWidth(this.lineWidth * this.pixelRatio);\n    gl.drawArrays(gl.LINES, 0, this.edgeCount * 2);\n    this.edgeVAO.unbind();\n  }\n  if (this.pointCount > 0) {\n    var shader = this.pointPickShader;\n    shader.bind();\n    shader.uniforms = uniforms;\n    this.pointVAO.bind();\n    gl.drawArrays(gl.POINTS, 0, this.pointCount);\n    this.pointVAO.unbind();\n  }\n};\nproto.pick = function (pickData) {\n  if (!pickData) {\n    return null;\n  }\n  if (pickData.id !== this.pickId) {\n    return null;\n  }\n  var cellId = pickData.value[0] + 256 * pickData.value[1] + 65536 * pickData.value[2];\n  var cell = this.cells[cellId];\n  var positions = this.positions;\n  var simplex = new Array(cell.length);\n  for (var i = 0; i < cell.length; ++i) {\n    simplex[i] = positions[cell[i]];\n  }\n  var x = pickData.coord[0];\n  var y = pickData.coord[1];\n  if (!this.pickVertex) {\n    var A = this.positions[cell[0]];\n    var B = this.positions[cell[1]];\n    var C = this.positions[cell[2]];\n    var dataCoordinate = [(A[0] + B[0] + C[0]) / 3, (A[1] + B[1] + C[1]) / 3, (A[2] + B[2] + C[2]) / 3];\n    return {\n      _cellCenter: true,\n      position: [x, y],\n      index: cellId,\n      cell: cell,\n      cellId: cellId,\n      intensity: this.intensity[cellId],\n      dataCoordinate: dataCoordinate\n    };\n  }\n  var data = closestPoint(simplex, [x * this.pixelRatio, this._resolution[1] - y * this.pixelRatio], this._model, this._view, this._projection, this._resolution);\n  if (!data) {\n    return null;\n  }\n  var weights = data[2];\n  var interpIntensity = 0.0;\n  for (var i = 0; i < cell.length; ++i) {\n    interpIntensity += weights[i] * this.intensity[cell[i]];\n  }\n  return {\n    position: data[1],\n    index: cell[data[0]],\n    cell: cell,\n    cellId: cellId,\n    intensity: interpIntensity,\n    dataCoordinate: this.positions[cell[data[0]]]\n  };\n};\nproto.dispose = function () {\n  this.texture.dispose();\n  this.triShader.dispose();\n  this.lineShader.dispose();\n  this.pointShader.dispose();\n  this.pickShader.dispose();\n  this.pointPickShader.dispose();\n  this.triangleVAO.dispose();\n  this.trianglePositions.dispose();\n  this.triangleColors.dispose();\n  this.triangleUVs.dispose();\n  this.triangleNormals.dispose();\n  this.triangleIds.dispose();\n  this.edgeVAO.dispose();\n  this.edgePositions.dispose();\n  this.edgeColors.dispose();\n  this.edgeUVs.dispose();\n  this.edgeIds.dispose();\n  this.pointVAO.dispose();\n  this.pointPositions.dispose();\n  this.pointColors.dispose();\n  this.pointUVs.dispose();\n  this.pointSizes.dispose();\n  this.pointIds.dispose();\n  this.contourVAO.dispose();\n  this.contourPositions.dispose();\n  this.contourShader.dispose();\n};\nfunction createMeshShader(gl) {\n  var shader = createShader(gl, meshShader.vertex, meshShader.fragment);\n  shader.attributes.position.location = 0;\n  shader.attributes.color.location = 2;\n  shader.attributes.uv.location = 3;\n  shader.attributes.normal.location = 4;\n  return shader;\n}\nfunction createWireShader(gl) {\n  var shader = createShader(gl, wireShader.vertex, wireShader.fragment);\n  shader.attributes.position.location = 0;\n  shader.attributes.color.location = 2;\n  shader.attributes.uv.location = 3;\n  return shader;\n}\nfunction createPointShader(gl) {\n  var shader = createShader(gl, pointShader.vertex, pointShader.fragment);\n  shader.attributes.position.location = 0;\n  shader.attributes.color.location = 2;\n  shader.attributes.uv.location = 3;\n  shader.attributes.pointSize.location = 4;\n  return shader;\n}\nfunction createPickShader(gl) {\n  var shader = createShader(gl, pickShader.vertex, pickShader.fragment);\n  shader.attributes.position.location = 0;\n  shader.attributes.id.location = 1;\n  return shader;\n}\nfunction createPointPickShader(gl) {\n  var shader = createShader(gl, pointPickShader.vertex, pointPickShader.fragment);\n  shader.attributes.position.location = 0;\n  shader.attributes.id.location = 1;\n  shader.attributes.pointSize.location = 4;\n  return shader;\n}\nfunction createContourShader(gl) {\n  var shader = createShader(gl, contourShader.vertex, contourShader.fragment);\n  shader.attributes.position.location = 0;\n  return shader;\n}\nfunction createSimplicialMesh(gl, params) {\n  if (arguments.length === 1) {\n    params = gl;\n    gl = params.gl;\n  }\n\n  //enable derivatives for face normals\n  var ext = gl.getExtension('OES_standard_derivatives') || gl.getExtension('MOZ_OES_standard_derivatives') || gl.getExtension('WEBKIT_OES_standard_derivatives');\n  if (!ext) throw new Error('derivatives not supported');\n  var triShader = createMeshShader(gl);\n  var lineShader = createWireShader(gl);\n  var pointShader = createPointShader(gl);\n  var pickShader = createPickShader(gl);\n  var pointPickShader = createPointPickShader(gl);\n  var contourShader = createContourShader(gl);\n  var meshTexture = createTexture(gl, ndarray(new Uint8Array([255, 255, 255, 255]), [1, 1, 4]));\n  meshTexture.generateMipmap();\n  meshTexture.minFilter = gl.LINEAR_MIPMAP_LINEAR;\n  meshTexture.magFilter = gl.LINEAR;\n  var trianglePositions = createBuffer(gl);\n  var triangleColors = createBuffer(gl);\n  var triangleUVs = createBuffer(gl);\n  var triangleNormals = createBuffer(gl);\n  var triangleIds = createBuffer(gl);\n  var triangleVAO = createVAO(gl, [{\n    buffer: trianglePositions,\n    type: gl.FLOAT,\n    size: 3\n  }, {\n    buffer: triangleIds,\n    type: gl.UNSIGNED_BYTE,\n    size: 4,\n    normalized: true\n  }, {\n    buffer: triangleColors,\n    type: gl.FLOAT,\n    size: 4\n  }, {\n    buffer: triangleUVs,\n    type: gl.FLOAT,\n    size: 2\n  }, {\n    buffer: triangleNormals,\n    type: gl.FLOAT,\n    size: 3\n  }]);\n  var edgePositions = createBuffer(gl);\n  var edgeColors = createBuffer(gl);\n  var edgeUVs = createBuffer(gl);\n  var edgeIds = createBuffer(gl);\n  var edgeVAO = createVAO(gl, [{\n    buffer: edgePositions,\n    type: gl.FLOAT,\n    size: 3\n  }, {\n    buffer: edgeIds,\n    type: gl.UNSIGNED_BYTE,\n    size: 4,\n    normalized: true\n  }, {\n    buffer: edgeColors,\n    type: gl.FLOAT,\n    size: 4\n  }, {\n    buffer: edgeUVs,\n    type: gl.FLOAT,\n    size: 2\n  }]);\n  var pointPositions = createBuffer(gl);\n  var pointColors = createBuffer(gl);\n  var pointUVs = createBuffer(gl);\n  var pointSizes = createBuffer(gl);\n  var pointIds = createBuffer(gl);\n  var pointVAO = createVAO(gl, [{\n    buffer: pointPositions,\n    type: gl.FLOAT,\n    size: 3\n  }, {\n    buffer: pointIds,\n    type: gl.UNSIGNED_BYTE,\n    size: 4,\n    normalized: true\n  }, {\n    buffer: pointColors,\n    type: gl.FLOAT,\n    size: 4\n  }, {\n    buffer: pointUVs,\n    type: gl.FLOAT,\n    size: 2\n  }, {\n    buffer: pointSizes,\n    type: gl.FLOAT,\n    size: 1\n  }]);\n  var contourPositions = createBuffer(gl);\n  var contourVAO = createVAO(gl, [{\n    buffer: contourPositions,\n    type: gl.FLOAT,\n    size: 3\n  }]);\n  var mesh = new SimplicialMesh(gl, meshTexture, triShader, lineShader, pointShader, pickShader, pointPickShader, contourShader, trianglePositions, triangleIds, triangleColors, triangleUVs, triangleNormals, triangleVAO, edgePositions, edgeIds, edgeColors, edgeUVs, edgeVAO, pointPositions, pointIds, pointColors, pointUVs, pointSizes, pointVAO, contourPositions, contourVAO);\n  mesh.update(params);\n  return mesh;\n}\nmodule.exports = createSimplicialMesh;","map":{"version":3,"names":["DEFAULT_VERTEX_NORMALS_EPSILON","DEFAULT_FACE_NORMALS_EPSILON","createShader","require","createBuffer","createVAO","createTexture","normals","multiply","invert","ndarray","colormap","getContour","pool","shaders","closestPoint","meshShader","wireShader","pointShader","pickShader","pointPickShader","contourShader","IDENTITY","SimplicialMesh","gl","texture","triShader","lineShader","trianglePositions","triangleIds","triangleColors","triangleUVs","triangleNormals","triangleVAO","edgePositions","edgeIds","edgeColors","edgeUVs","edgeVAO","pointPositions","pointIds","pointColors","pointUVs","pointSizes","pointVAO","contourPositions","contourVAO","pixelRatio","cells","positions","intensity","dirty","triangleCount","lineWidth","edgeCount","pointCount","contourLineWidth","contourCount","contourColor","contourEnable","pickVertex","pickId","bounds","Infinity","clipBounds","lightPosition","ambientLight","diffuseLight","specularLight","roughness","fresnel","opacity","hasAlpha","opacityscale","_model","_view","_projection","_resolution","proto","prototype","isOpaque","isTransparent","pickSlots","setPickBase","id","getOpacityFromScale","ratio","length","i","d","genColormap","param","colors","nshades","format","result","Uint8Array","c","j","takeZComponent","array","n","Array","highlight","selection","level","vertexIds","vertexWeights","numCells","mallocFloat32","ptr","v","a","b","w","wi","pa","pb","k","update","subarray","free","params","ambient","diffuse","specular","dispose","shape","minFilter","LINEAR_MIPMAP_LINEAR","magFilter","LINEAR","setPixels","generateMipmap","tPos","tCol","tNor","tUVs","tIds","ePos","eCol","eUVs","eIds","pPos","pCol","pUVs","pSiz","pIds","vertexNormals","cellNormals","vertexNormalsEpsilon","faceNormalsEpsilon","useFacetNormals","faceNormals","vertexColors","cellColors","meshColor","vertexUVs","vertexIntensity","cellUVs","cellIntensity","intensityLo","intensityHi","vertexIntensityBounds","f","Math","min","max","cellIntensityBounds","meshPointSize","pointSize","p","isNaN","isFinite","fill_loop","cell","push","uv","q","Uint32Array","drawTransparent","draw","model","view","projection","uniforms","inverseModel","slice","kambient","kdiffuse","kspecular","eyePosition","disable","CULL_FACE","bind","invCameraMatrix","s","shader","drawArrays","TRIANGLES","unbind","LINES","POINTS","drawPick","call","drawingBufferWidth","drawingBufferHeight","pick","pickData","cellId","value","simplex","x","coord","y","A","B","C","dataCoordinate","_cellCenter","position","index","data","weights","interpIntensity","createMeshShader","vertex","fragment","attributes","location","color","normal","createWireShader","createPointShader","createPickShader","createPointPickShader","createContourShader","createSimplicialMesh","arguments","ext","getExtension","Error","meshTexture","buffer","type","FLOAT","size","UNSIGNED_BYTE","normalized","mesh","module","exports"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/gl-mesh3d/mesh.js"],"sourcesContent":["'use strict'\n\nvar DEFAULT_VERTEX_NORMALS_EPSILON = 1e-6; // may be too large if triangles are very small\nvar DEFAULT_FACE_NORMALS_EPSILON = 1e-6;\n\nvar createShader  = require('gl-shader')\nvar createBuffer  = require('gl-buffer')\nvar createVAO     = require('gl-vao')\nvar createTexture = require('gl-texture2d')\nvar normals       = require('normals')\nvar multiply      = require('gl-mat4/multiply')\nvar invert        = require('gl-mat4/invert')\nvar ndarray       = require('ndarray')\nvar colormap      = require('colormap')\nvar getContour    = require('simplicial-complex-contour')\nvar pool          = require('typedarray-pool')\nvar shaders       = require('./lib/shaders')\nvar closestPoint  = require('./lib/closest-point')\n\nvar meshShader    = shaders.meshShader\nvar wireShader    = shaders.wireShader\nvar pointShader   = shaders.pointShader\nvar pickShader    = shaders.pickShader\nvar pointPickShader = shaders.pointPickShader\nvar contourShader = shaders.contourShader\n\nvar IDENTITY = [\n  1,0,0,0,\n  0,1,0,0,\n  0,0,1,0,\n  0,0,0,1]\n\n\nfunction SimplicialMesh(gl\n  , texture\n  , triShader\n  , lineShader\n  , pointShader\n  , pickShader\n  , pointPickShader\n  , contourShader\n  , trianglePositions\n  , triangleIds\n  , triangleColors\n  , triangleUVs\n  , triangleNormals\n  , triangleVAO\n  , edgePositions\n  , edgeIds\n  , edgeColors\n  , edgeUVs\n  , edgeVAO\n  , pointPositions\n  , pointIds\n  , pointColors\n  , pointUVs\n  , pointSizes\n  , pointVAO\n  , contourPositions\n  , contourVAO) {\n\n  this.gl                = gl\n  this.pixelRatio         = 1\n  this.cells             = []\n  this.positions         = []\n  this.intensity         = []\n  this.texture           = texture\n  this.dirty             = true\n\n  this.triShader         = triShader\n  this.lineShader        = lineShader\n  this.pointShader       = pointShader\n  this.pickShader        = pickShader\n  this.pointPickShader   = pointPickShader\n  this.contourShader     = contourShader\n\n  this.trianglePositions = trianglePositions\n  this.triangleColors    = triangleColors\n  this.triangleNormals   = triangleNormals\n  this.triangleUVs       = triangleUVs\n  this.triangleIds       = triangleIds\n  this.triangleVAO       = triangleVAO\n  this.triangleCount     = 0\n\n  this.lineWidth         = 1\n  this.edgePositions     = edgePositions\n  this.edgeColors        = edgeColors\n  this.edgeUVs           = edgeUVs\n  this.edgeIds           = edgeIds\n  this.edgeVAO           = edgeVAO\n  this.edgeCount         = 0\n\n  this.pointPositions    = pointPositions\n  this.pointColors       = pointColors\n  this.pointUVs          = pointUVs\n  this.pointSizes        = pointSizes\n  this.pointIds          = pointIds\n  this.pointVAO          = pointVAO\n  this.pointCount        = 0\n\n  this.contourLineWidth  = 1\n  this.contourPositions  = contourPositions\n  this.contourVAO        = contourVAO\n  this.contourCount      = 0\n  this.contourColor      = [0,0,0]\n  this.contourEnable     = true\n\n  this.pickVertex        = true;\n  this.pickId            = 1\n  this.bounds            = [\n    [ Infinity, Infinity, Infinity],\n    [-Infinity,-Infinity,-Infinity] ]\n  this.clipBounds        = [\n    [-Infinity,-Infinity,-Infinity],\n    [ Infinity, Infinity, Infinity] ]\n\n  this.lightPosition = [1e5, 1e5, 0]\n  this.ambientLight  = 0.8\n  this.diffuseLight  = 0.8\n  this.specularLight = 2.0\n  this.roughness     = 0.5\n  this.fresnel       = 1.5\n\n  this.opacity       = 1.0\n  this.hasAlpha      = false\n  this.opacityscale  = false\n\n  this._model       = IDENTITY\n  this._view        = IDENTITY\n  this._projection  = IDENTITY\n  this._resolution  = [1,1]\n}\n\nvar proto = SimplicialMesh.prototype\n\nproto.isOpaque = function() {\n  return !this.hasAlpha\n}\n\nproto.isTransparent = function() {\n  return this.hasAlpha\n}\n\nproto.pickSlots = 1\n\nproto.setPickBase = function(id) {\n  this.pickId = id\n}\n\nfunction getOpacityFromScale(ratio, opacityscale) {\n\n  if(!opacityscale) return 1\n  if(!opacityscale.length) return 1\n\n  for(var i = 0; i < opacityscale.length; ++i) {\n    if(opacityscale.length < 2) return 1\n    if(opacityscale[i][0] === ratio) return opacityscale[i][1]\n    if(opacityscale[i][0] > ratio && i > 0) {\n      var d = (opacityscale[i][0] - ratio) / (opacityscale[i][0] - opacityscale[i - 1][0])\n      return opacityscale[i][1] * (1 - d) + d * opacityscale[i - 1][1]\n    }\n  }\n\n  return 1\n}\n\nfunction genColormap(param, opacityscale) {\n  var colors = colormap({\n      colormap: param\n    , nshades:  256\n    , format:  'rgba'\n  })\n\n  var result = new Uint8Array(256*4)\n  for(var i=0; i<256; ++i) {\n    var c = colors[i]\n    for(var j=0; j<3; ++j) {\n      result[4*i+j] = c[j]\n    }\n    if(!opacityscale) {\n      result[4*i+3] = 255 * c[3]\n    } else {\n      result[4*i+3] = 255 * getOpacityFromScale(i / 255.0, opacityscale)\n    }\n  }\n\n  return ndarray(result, [256,256,4], [4,0,1])\n}\n\nfunction takeZComponent(array) {\n  var n = array.length\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = array[i][2]\n  }\n  return result\n}\n\nproto.highlight = function(selection) {\n  if(!selection || !this.contourEnable) {\n    this.contourCount = 0\n    return\n  }\n  var level = getContour(this.cells, this.intensity, selection.intensity)\n  var cells         = level.cells\n  var vertexIds     = level.vertexIds\n  var vertexWeights = level.vertexWeights\n  var numCells = cells.length\n  var result = pool.mallocFloat32(2 * 3 * numCells)\n  var ptr = 0\n  for(var i=0; i<numCells; ++i) {\n    var c = cells[i]\n    for(var j=0; j<2; ++j) {\n      var v = c[0]\n      if(c.length === 2) {\n        v = c[j]\n      }\n      var a = vertexIds[v][0]\n      var b = vertexIds[v][1]\n      var w = vertexWeights[v]\n      var wi = 1.0 - w\n      var pa = this.positions[a]\n      var pb = this.positions[b]\n      for(var k=0; k<3; ++k) {\n        result[ptr++] = w * pa[k] + wi * pb[k]\n      }\n    }\n  }\n  this.contourCount = (ptr / 3)|0\n  this.contourPositions.update(result.subarray(0, ptr))\n  pool.free(result)\n}\n\nproto.update = function(params) {\n  params = params || {}\n  var gl = this.gl\n\n  this.dirty = true\n\n  if('contourEnable' in params) {\n    this.contourEnable = params.contourEnable\n  }\n  if('contourColor' in params) {\n    this.contourColor = params.contourColor\n  }\n  if('lineWidth' in params) {\n    this.lineWidth = params.lineWidth\n  }\n  if('lightPosition' in params) {\n    this.lightPosition = params.lightPosition\n  }\n\n  this.hasAlpha = false // default to no transparent draw\n  if('opacity' in params) {\n    this.opacity = params.opacity\n    if(this.opacity < 1) {\n      this.hasAlpha = true;\n    }\n  }\n  if('opacityscale' in params) {\n    this.opacityscale = params.opacityscale\n    this.hasAlpha = true;\n  }\n\n  if('ambient' in params) {\n    this.ambientLight  = params.ambient\n  }\n  if('diffuse' in params) {\n    this.diffuseLight = params.diffuse\n  }\n  if('specular' in params) {\n    this.specularLight = params.specular\n  }\n  if('roughness' in params) {\n    this.roughness = params.roughness\n  }\n  if('fresnel' in params) {\n    this.fresnel = params.fresnel\n  }\n\n  if(params.texture) {\n    this.texture.dispose()\n    this.texture = createTexture(gl, params.texture)\n  } else if (params.colormap) {\n    this.texture.shape = [256,256]\n    this.texture.minFilter = gl.LINEAR_MIPMAP_LINEAR\n    this.texture.magFilter = gl.LINEAR\n    this.texture.setPixels(genColormap(params.colormap, this.opacityscale))\n    this.texture.generateMipmap()\n  }\n\n  var cells = params.cells\n  var positions = params.positions\n\n  if(!positions || !cells) {\n    return\n  }\n\n  var tPos = []\n  var tCol = []\n  var tNor = []\n  var tUVs = []\n  var tIds = []\n\n  var ePos = []\n  var eCol = []\n  var eUVs = []\n  var eIds = []\n\n  var pPos = []\n  var pCol = []\n  var pUVs = []\n  var pSiz = []\n  var pIds = []\n\n  //Save geometry data for picking calculations\n  this.cells     = cells\n  this.positions = positions\n\n  //Compute normals\n  var vertexNormals = params.vertexNormals\n  var cellNormals   = params.cellNormals\n  var vertexNormalsEpsilon = params.vertexNormalsEpsilon === void(0) ? DEFAULT_VERTEX_NORMALS_EPSILON : params.vertexNormalsEpsilon\n  var faceNormalsEpsilon = params.faceNormalsEpsilon === void(0) ? DEFAULT_FACE_NORMALS_EPSILON : params.faceNormalsEpsilon\n  if(params.useFacetNormals && !cellNormals) {\n    cellNormals = normals.faceNormals(cells, positions, faceNormalsEpsilon)\n  }\n  if(!cellNormals && !vertexNormals) {\n    vertexNormals = normals.vertexNormals(cells, positions, vertexNormalsEpsilon)\n  }\n\n  //Compute colors\n  var vertexColors    = params.vertexColors\n  var cellColors      = params.cellColors\n  var meshColor       = params.meshColor || [1,1,1,1]\n\n  //UVs\n  var vertexUVs       = params.vertexUVs\n  var vertexIntensity = params.vertexIntensity\n  var cellUVs         = params.cellUVs\n  var cellIntensity   = params.cellIntensity\n\n  var intensityLo     = Infinity\n  var intensityHi     = -Infinity\n  if(!vertexUVs && !cellUVs) {\n    if(vertexIntensity) {\n      if(params.vertexIntensityBounds) {\n        intensityLo = +params.vertexIntensityBounds[0]\n        intensityHi = +params.vertexIntensityBounds[1]\n      } else {\n        for(var i=0; i<vertexIntensity.length; ++i) {\n          var f = vertexIntensity[i]\n          intensityLo = Math.min(intensityLo, f)\n          intensityHi = Math.max(intensityHi, f)\n        }\n      }\n    } else if(cellIntensity) {\n      if(params.cellIntensityBounds) {\n        intensityLo = +params.cellIntensityBounds[0]\n        intensityHi = +params.cellIntensityBounds[1]\n      } else {\n        for(var i=0; i<cellIntensity.length; ++i) {\n          var f = cellIntensity[i]\n          intensityLo = Math.min(intensityLo, f)\n          intensityHi = Math.max(intensityHi, f)\n        }\n      }\n    } else {\n      for(var i=0; i<positions.length; ++i) {\n        var f = positions[i][2]\n        intensityLo = Math.min(intensityLo, f)\n        intensityHi = Math.max(intensityHi, f)\n      }\n    }\n  }\n\n  if(vertexIntensity) {\n    this.intensity = vertexIntensity\n  } else if(cellIntensity) {\n    this.intensity = cellIntensity\n  } else {\n    this.intensity = takeZComponent(positions)\n  }\n\n  this.pickVertex = !(cellIntensity || cellColors)\n\n  //Point size\n  var pointSizes      = params.pointSizes\n  var meshPointSize   = params.pointSize || 1.0\n\n  //Update bounds\n  this.bounds       = [[Infinity,Infinity,Infinity], [-Infinity,-Infinity,-Infinity]]\n  for(var i=0; i<positions.length; ++i) {\n    var p = positions[i]\n    for(var j=0; j<3; ++j) {\n      if(isNaN(p[j]) || !isFinite(p[j])) {\n        continue\n      }\n      this.bounds[0][j] = Math.min(this.bounds[0][j], p[j])\n      this.bounds[1][j] = Math.max(this.bounds[1][j], p[j])\n    }\n  }\n\n  //Pack cells into buffers\n  var triangleCount = 0\n  var edgeCount = 0\n  var pointCount = 0\n\nfill_loop:\n  for(var i=0; i<cells.length; ++i) {\n    var cell = cells[i]\n    switch(cell.length) {\n      case 1:\n\n        var v = cell[0]\n        var p = positions[v]\n\n        //Check NaNs\n        for(var j=0; j<3; ++j) {\n          if(isNaN(p[j]) || !isFinite(p[j])) {\n            continue fill_loop\n          }\n        }\n\n        pPos.push(p[0], p[1], p[2])\n\n        var c\n        if(vertexColors) {\n          c = vertexColors[v]\n        } else if(cellColors) {\n          c = cellColors[i]\n        } else {\n          c = meshColor\n        }\n        if(this.opacityscale && vertexIntensity) {\n          tCol.push(c[0], c[1], c[2],\n            this.opacity * getOpacityFromScale(\n              (vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo),\n              this.opacityscale\n            )\n          )\n        } else if(c.length === 3) {\n          pCol.push(c[0], c[1], c[2], this.opacity)\n        } else {\n          pCol.push(c[0], c[1], c[2], c[3] * this.opacity)\n          if(c[3] < 1) this.hasAlpha = true\n        }\n\n        var uv\n        if(vertexUVs) {\n          uv = vertexUVs[v]\n        } else if(vertexIntensity) {\n          uv = [\n            (vertexIntensity[v] - intensityLo) /\n            (intensityHi - intensityLo), 0]\n        } else if(cellUVs) {\n          uv = cellUVs[i]\n        } else if(cellIntensity) {\n          uv = [\n            (cellIntensity[i] - intensityLo) /\n            (intensityHi - intensityLo), 0]\n        } else {\n          uv = [\n            (p[2] - intensityLo) /\n            (intensityHi - intensityLo), 0]\n        }\n        pUVs.push(uv[0], uv[1])\n\n        if(pointSizes) {\n          pSiz.push(pointSizes[v])\n        } else {\n          pSiz.push(meshPointSize)\n        }\n\n        pIds.push(i)\n\n        pointCount += 1\n      break\n\n      case 2:\n\n        //Check NaNs\n        for(var j=0; j<2; ++j) {\n          var v = cell[j]\n          var p = positions[v]\n          for(var k=0; k<3; ++k) {\n            if(isNaN(p[k]) || !isFinite(p[k])) {\n              continue fill_loop\n            }\n          }\n        }\n\n        for(var j=0; j<2; ++j) {\n          var v = cell[j]\n          var p = positions[v]\n\n          ePos.push(p[0], p[1], p[2])\n\n          var c\n          if(vertexColors) {\n            c = vertexColors[v]\n          } else if(cellColors) {\n            c = cellColors[i]\n          } else {\n            c = meshColor\n          }\n          if(this.opacityscale && vertexIntensity) {\n            tCol.push(c[0], c[1], c[2],\n              this.opacity * getOpacityFromScale(\n                (vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo),\n                this.opacityscale\n              )\n            )\n          } else if(c.length === 3) {\n            eCol.push(c[0], c[1], c[2], this.opacity)\n          } else {\n            eCol.push(c[0], c[1], c[2], c[3] * this.opacity)\n            if(c[3] < 1) this.hasAlpha = true\n          }\n\n          var uv\n          if(vertexUVs) {\n            uv = vertexUVs[v]\n          } else if(vertexIntensity) {\n            uv = [\n              (vertexIntensity[v] - intensityLo) /\n              (intensityHi - intensityLo), 0]\n          } else if(cellUVs) {\n            uv = cellUVs[i]\n          } else if(cellIntensity) {\n            uv = [\n              (cellIntensity[i] - intensityLo) /\n              (intensityHi - intensityLo), 0]\n          } else {\n            uv = [\n              (p[2] - intensityLo) /\n              (intensityHi - intensityLo), 0]\n          }\n          eUVs.push(uv[0], uv[1])\n\n          eIds.push(i)\n        }\n        edgeCount += 1\n      break\n\n      case 3:\n        //Check NaNs\n        for(var j=0; j<3; ++j) {\n          var v = cell[j]\n          var p = positions[v]\n          for(var k=0; k<3; ++k) {\n            if(isNaN(p[k]) || !isFinite(p[k])) {\n              continue fill_loop\n            }\n          }\n        }\n\n        for(var j=0; j<3; ++j) {\n          var v = cell[2 - j]\n\n          var p = positions[v]\n          tPos.push(p[0], p[1], p[2])\n\n          var c\n          if(vertexColors) {\n            c = vertexColors[v]\n          } else if(cellColors) {\n            c = cellColors[i]\n          } else {\n            c = meshColor\n          }\n\n          if(!c) {\n            tCol.push(0.5,0.5,0.5,1)\n          } else if(this.opacityscale && vertexIntensity) {\n            tCol.push(c[0], c[1], c[2],\n              this.opacity * getOpacityFromScale(\n                (vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo),\n                this.opacityscale\n              )\n            )\n          } else if(c.length === 3) {\n            tCol.push(c[0], c[1], c[2], this.opacity)\n          } else {\n            tCol.push(c[0], c[1], c[2], c[3] * this.opacity)\n            if(c[3] < 1) this.hasAlpha = true\n          }\n\n          var uv\n          if(vertexUVs) {\n            uv = vertexUVs[v]\n          } else if(vertexIntensity) {\n            uv = [\n              (vertexIntensity[v] - intensityLo) /\n              (intensityHi - intensityLo), 0]\n          } else if(cellUVs) {\n            uv = cellUVs[i]\n          } else if(cellIntensity) {\n            uv = [\n              (cellIntensity[i] - intensityLo) /\n              (intensityHi - intensityLo), 0]\n          } else {\n            uv = [\n              (p[2] - intensityLo) /\n              (intensityHi - intensityLo), 0]\n          }\n          tUVs.push(uv[0], uv[1])\n\n          var q\n          if(vertexNormals) {\n            q = vertexNormals[v]\n          } else {\n            q = cellNormals[i]\n          }\n          tNor.push(q[0], q[1], q[2])\n\n          tIds.push(i)\n        }\n        triangleCount += 1\n      break\n\n      default:\n      break\n    }\n  }\n\n  this.pointCount     = pointCount\n  this.edgeCount      = edgeCount\n  this.triangleCount  = triangleCount\n\n  this.pointPositions.update(pPos)\n  this.pointColors.update(pCol)\n  this.pointUVs.update(pUVs)\n  this.pointSizes.update(pSiz)\n  this.pointIds.update(new Uint32Array(pIds))\n\n  this.edgePositions.update(ePos)\n  this.edgeColors.update(eCol)\n  this.edgeUVs.update(eUVs)\n  this.edgeIds.update(new Uint32Array(eIds))\n\n  this.trianglePositions.update(tPos)\n  this.triangleColors.update(tCol)\n  this.triangleUVs.update(tUVs)\n  this.triangleNormals.update(tNor)\n  this.triangleIds.update(new Uint32Array(tIds))\n}\n\nproto.drawTransparent = proto.draw = function(params) {\n  params = params || {}\n  var gl          = this.gl\n  var model       = params.model      || IDENTITY\n  var view        = params.view       || IDENTITY\n  var projection  = params.projection || IDENTITY\n\n  var clipBounds = [[-1e6,-1e6,-1e6],[1e6,1e6,1e6]]\n  for(var i=0; i<3; ++i) {\n    clipBounds[0][i] = Math.max(clipBounds[0][i], this.clipBounds[0][i])\n    clipBounds[1][i] = Math.min(clipBounds[1][i], this.clipBounds[1][i])\n  }\n\n  var uniforms = {\n    model:      model,\n    view:       view,\n    projection: projection,\n    inverseModel: IDENTITY.slice(),\n\n    clipBounds: clipBounds,\n\n    kambient:   this.ambientLight,\n    kdiffuse:   this.diffuseLight,\n    kspecular:  this.specularLight,\n    roughness:  this.roughness,\n    fresnel:    this.fresnel,\n\n    eyePosition:   [0,0,0],\n    lightPosition: [0,0,0],\n\n    contourColor: this.contourColor,\n\n    texture:    0\n  }\n\n  uniforms.inverseModel = invert(uniforms.inverseModel, uniforms.model)\n\n  gl.disable(gl.CULL_FACE)\n\n  this.texture.bind(0)\n\n  var invCameraMatrix = new Array(16)\n  multiply(invCameraMatrix, uniforms.view, uniforms.model)\n  multiply(invCameraMatrix, uniforms.projection, invCameraMatrix)\n  invert(invCameraMatrix, invCameraMatrix)\n\n  for(var i=0; i<3; ++i) {\n    uniforms.eyePosition[i] = invCameraMatrix[12+i] / invCameraMatrix[15]\n  }\n\n  var w = invCameraMatrix[15]\n  for(var i=0; i<3; ++i) {\n    w += this.lightPosition[i] * invCameraMatrix[4*i+3]\n  }\n  for(var i=0; i<3; ++i) {\n    var s = invCameraMatrix[12+i]\n    for(var j=0; j<3; ++j) {\n      s += invCameraMatrix[4*j+i] * this.lightPosition[j]\n    }\n    uniforms.lightPosition[i] = s / w\n  }\n\n  if(this.triangleCount > 0) {\n    var shader = this.triShader\n    shader.bind()\n    shader.uniforms = uniforms\n\n    this.triangleVAO.bind()\n    gl.drawArrays(gl.TRIANGLES, 0, this.triangleCount*3)\n    this.triangleVAO.unbind()\n  }\n\n  if(this.edgeCount > 0 && this.lineWidth > 0) {\n    var shader = this.lineShader\n    shader.bind()\n    shader.uniforms = uniforms\n\n    this.edgeVAO.bind()\n    gl.lineWidth(this.lineWidth * this.pixelRatio)\n    gl.drawArrays(gl.LINES, 0, this.edgeCount*2)\n    this.edgeVAO.unbind()\n  }\n\n  if(this.pointCount > 0) {\n    var shader = this.pointShader\n    shader.bind()\n    shader.uniforms = uniforms\n\n    this.pointVAO.bind()\n    gl.drawArrays(gl.POINTS, 0, this.pointCount)\n    this.pointVAO.unbind()\n  }\n\n  if(this.contourEnable && this.contourCount > 0 && this.contourLineWidth > 0) {\n    var shader = this.contourShader\n    shader.bind()\n    shader.uniforms = uniforms\n\n    this.contourVAO.bind()\n    gl.drawArrays(gl.LINES, 0, this.contourCount)\n    this.contourVAO.unbind()\n  }\n}\n\nproto.drawPick = function(params) {\n  params = params || {}\n\n  var gl         = this.gl\n\n  var model      = params.model      || IDENTITY\n  var view       = params.view       || IDENTITY\n  var projection = params.projection || IDENTITY\n\n  var clipBounds = [[-1e6,-1e6,-1e6],[1e6,1e6,1e6]]\n  for(var i=0; i<3; ++i) {\n    clipBounds[0][i] = Math.max(clipBounds[0][i], this.clipBounds[0][i])\n    clipBounds[1][i] = Math.min(clipBounds[1][i], this.clipBounds[1][i])\n  }\n\n  //Save camera parameters\n  this._model      = [].slice.call(model)\n  this._view       = [].slice.call(view)\n  this._projection = [].slice.call(projection)\n  this._resolution = [gl.drawingBufferWidth, gl.drawingBufferHeight]\n\n  var uniforms = {\n    model:      model,\n    view:       view,\n    projection: projection,\n    clipBounds: clipBounds,\n    pickId:     this.pickId / 255.0,\n  }\n\n  var shader = this.pickShader\n  shader.bind()\n  shader.uniforms = uniforms\n\n  if(this.triangleCount > 0) {\n    this.triangleVAO.bind()\n    gl.drawArrays(gl.TRIANGLES, 0, this.triangleCount*3)\n    this.triangleVAO.unbind()\n  }\n\n  if(this.edgeCount > 0) {\n    this.edgeVAO.bind()\n    gl.lineWidth(this.lineWidth * this.pixelRatio)\n    gl.drawArrays(gl.LINES, 0, this.edgeCount*2)\n    this.edgeVAO.unbind()\n  }\n\n  if(this.pointCount > 0) {\n    var shader = this.pointPickShader\n    shader.bind()\n    shader.uniforms = uniforms\n\n    this.pointVAO.bind()\n    gl.drawArrays(gl.POINTS, 0, this.pointCount)\n    this.pointVAO.unbind()\n  }\n}\n\n\nproto.pick = function(pickData) {\n  if(!pickData) {\n    return null\n  }\n  if(pickData.id !== this.pickId) {\n    return null\n  }\n\n  var cellId    = pickData.value[0] + 256*pickData.value[1] + 65536*pickData.value[2]\n  var cell      = this.cells[cellId]\n  var positions = this.positions\n\n  var simplex   = new Array(cell.length)\n  for(var i=0; i<cell.length; ++i) {\n    simplex[i] = positions[cell[i]]\n  }\n\n  var x = pickData.coord[0];\n  var y = pickData.coord[1];\n\n  if(!this.pickVertex) {\n    var A = this.positions[cell[0]];\n    var B = this.positions[cell[1]];\n    var C = this.positions[cell[2]];\n\n    var dataCoordinate = [\n      (A[0] + B[0] + C[0]) / 3,\n      (A[1] + B[1] + C[1]) / 3,\n      (A[2] + B[2] + C[2]) / 3\n    ]\n\n    return {\n      _cellCenter : true,\n      position: [x, y],\n      index:    cellId,\n      cell:     cell,\n      cellId:   cellId,\n      intensity:  this.intensity[cellId],\n      dataCoordinate: dataCoordinate\n    }\n  }\n\n  var data = closestPoint(\n    simplex,\n    [x * this.pixelRatio, this._resolution[1] - y * this.pixelRatio],\n    this._model,\n    this._view,\n    this._projection,\n    this._resolution)\n\n  if(!data) {\n    return null\n  }\n\n  var weights = data[2]\n  var interpIntensity = 0.0\n  for(var i=0; i<cell.length; ++i) {\n    interpIntensity += weights[i] * this.intensity[cell[i]]\n  }\n\n  return {\n    position: data[1],\n    index:    cell[data[0]],\n    cell:     cell,\n    cellId:   cellId,\n    intensity:  interpIntensity,\n    dataCoordinate: this.positions[cell[data[0]]]\n  }\n}\n\n\nproto.dispose = function() {\n  this.texture.dispose()\n\n  this.triShader.dispose()\n  this.lineShader.dispose()\n  this.pointShader.dispose()\n  this.pickShader.dispose()\n  this.pointPickShader.dispose()\n\n  this.triangleVAO.dispose()\n  this.trianglePositions.dispose()\n  this.triangleColors.dispose()\n  this.triangleUVs.dispose()\n  this.triangleNormals.dispose()\n  this.triangleIds.dispose()\n\n  this.edgeVAO.dispose()\n  this.edgePositions.dispose()\n  this.edgeColors.dispose()\n  this.edgeUVs.dispose()\n  this.edgeIds.dispose()\n\n  this.pointVAO.dispose()\n  this.pointPositions.dispose()\n  this.pointColors.dispose()\n  this.pointUVs.dispose()\n  this.pointSizes.dispose()\n  this.pointIds.dispose()\n\n  this.contourVAO.dispose()\n  this.contourPositions.dispose()\n  this.contourShader.dispose()\n}\n\nfunction createMeshShader(gl) {\n  var shader = createShader(gl, meshShader.vertex, meshShader.fragment)\n  shader.attributes.position.location = 0\n  shader.attributes.color.location    = 2\n  shader.attributes.uv.location       = 3\n  shader.attributes.normal.location   = 4\n  return shader\n}\n\nfunction createWireShader(gl) {\n  var shader = createShader(gl, wireShader.vertex, wireShader.fragment)\n  shader.attributes.position.location = 0\n  shader.attributes.color.location    = 2\n  shader.attributes.uv.location       = 3\n  return shader\n}\n\nfunction createPointShader(gl) {\n  var shader = createShader(gl, pointShader.vertex, pointShader.fragment)\n  shader.attributes.position.location  = 0\n  shader.attributes.color.location     = 2\n  shader.attributes.uv.location        = 3\n  shader.attributes.pointSize.location = 4\n  return shader\n}\n\nfunction createPickShader(gl) {\n  var shader = createShader(gl, pickShader.vertex, pickShader.fragment)\n  shader.attributes.position.location = 0\n  shader.attributes.id.location       = 1\n  return shader\n}\n\nfunction createPointPickShader(gl) {\n  var shader = createShader(gl, pointPickShader.vertex, pointPickShader.fragment)\n  shader.attributes.position.location  = 0\n  shader.attributes.id.location        = 1\n  shader.attributes.pointSize.location = 4\n  return shader\n}\n\nfunction createContourShader(gl) {\n  var shader = createShader(gl, contourShader.vertex, contourShader.fragment)\n  shader.attributes.position.location = 0\n  return shader\n}\n\nfunction createSimplicialMesh(gl, params) {\n  if (arguments.length === 1) {\n    params = gl;\n    gl = params.gl;\n  }\n\n  //enable derivatives for face normals\n  var ext = gl.getExtension('OES_standard_derivatives') || gl.getExtension('MOZ_OES_standard_derivatives') || gl.getExtension('WEBKIT_OES_standard_derivatives')\n  if (!ext)\n    throw new Error('derivatives not supported')\n\n  var triShader       = createMeshShader(gl)\n  var lineShader      = createWireShader(gl)\n  var pointShader     = createPointShader(gl)\n  var pickShader      = createPickShader(gl)\n  var pointPickShader = createPointPickShader(gl)\n  var contourShader   = createContourShader(gl)\n\n  var meshTexture       = createTexture(gl,\n    ndarray(new Uint8Array([255,255,255,255]), [1,1,4]))\n  meshTexture.generateMipmap()\n  meshTexture.minFilter = gl.LINEAR_MIPMAP_LINEAR\n  meshTexture.magFilter = gl.LINEAR\n\n  var trianglePositions = createBuffer(gl)\n  var triangleColors    = createBuffer(gl)\n  var triangleUVs       = createBuffer(gl)\n  var triangleNormals   = createBuffer(gl)\n  var triangleIds       = createBuffer(gl)\n  var triangleVAO       = createVAO(gl, [\n    { buffer: trianglePositions,\n      type: gl.FLOAT,\n      size: 3\n    },\n    { buffer: triangleIds,\n      type: gl.UNSIGNED_BYTE,\n      size: 4,\n      normalized: true\n    },\n    { buffer: triangleColors,\n      type: gl.FLOAT,\n      size: 4\n    },\n    { buffer: triangleUVs,\n      type: gl.FLOAT,\n      size: 2\n    },\n    { buffer: triangleNormals,\n      type: gl.FLOAT,\n      size: 3\n    }\n  ])\n\n  var edgePositions = createBuffer(gl)\n  var edgeColors    = createBuffer(gl)\n  var edgeUVs       = createBuffer(gl)\n  var edgeIds       = createBuffer(gl)\n  var edgeVAO       = createVAO(gl, [\n    { buffer: edgePositions,\n      type: gl.FLOAT,\n      size: 3\n    },\n    { buffer: edgeIds,\n      type: gl.UNSIGNED_BYTE,\n      size: 4,\n      normalized: true\n    },\n    { buffer: edgeColors,\n      type: gl.FLOAT,\n      size: 4\n    },\n    { buffer: edgeUVs,\n      type: gl.FLOAT,\n      size: 2\n    }\n  ])\n\n  var pointPositions  = createBuffer(gl)\n  var pointColors     = createBuffer(gl)\n  var pointUVs        = createBuffer(gl)\n  var pointSizes      = createBuffer(gl)\n  var pointIds        = createBuffer(gl)\n  var pointVAO        = createVAO(gl, [\n    { buffer: pointPositions,\n      type: gl.FLOAT,\n      size: 3\n    },\n    { buffer: pointIds,\n      type: gl.UNSIGNED_BYTE,\n      size: 4,\n      normalized: true\n    },\n    { buffer: pointColors,\n      type: gl.FLOAT,\n      size: 4\n    },\n    { buffer: pointUVs,\n      type: gl.FLOAT,\n      size: 2\n    },\n    { buffer: pointSizes,\n      type: gl.FLOAT,\n      size: 1\n    }\n  ])\n\n  var contourPositions = createBuffer(gl)\n  var contourVAO       = createVAO(gl, [\n    { buffer: contourPositions,\n      type:   gl.FLOAT,\n      size:   3\n    }])\n\n  var mesh = new SimplicialMesh(gl\n    , meshTexture\n    , triShader\n    , lineShader\n    , pointShader\n    , pickShader\n    , pointPickShader\n    , contourShader\n    , trianglePositions\n    , triangleIds\n    , triangleColors\n    , triangleUVs\n    , triangleNormals\n    , triangleVAO\n    , edgePositions\n    , edgeIds\n    , edgeColors\n    , edgeUVs\n    , edgeVAO\n    , pointPositions\n    , pointIds\n    , pointColors\n    , pointUVs\n    , pointSizes\n    , pointVAO\n    , contourPositions\n    , contourVAO)\n\n  mesh.update(params)\n\n  return mesh\n}\n\nmodule.exports = createSimplicialMesh\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
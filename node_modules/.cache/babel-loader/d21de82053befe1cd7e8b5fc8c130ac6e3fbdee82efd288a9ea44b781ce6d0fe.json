{"ast":null,"code":"\"use strict\";\n\nmodule.exports = getCubeEdges;\nvar bits = require('bit-twiddle');\nvar multiply = require('gl-mat4/multiply');\nvar splitPoly = require('split-polygon');\nvar orient = require('robust-orientation');\nvar mvp = new Array(16);\nvar pCubeVerts = new Array(8);\nvar cubeVerts = new Array(8);\nvar x = new Array(3);\nvar zero3 = [0, 0, 0];\n(function () {\n  for (var i = 0; i < 8; ++i) {\n    pCubeVerts[i] = [1, 1, 1, 1];\n    cubeVerts[i] = [1, 1, 1];\n  }\n})();\nfunction transformHg(result, x, mat) {\n  for (var i = 0; i < 4; ++i) {\n    result[i] = mat[12 + i];\n    for (var j = 0; j < 3; ++j) {\n      result[i] += x[j] * mat[4 * j + i];\n    }\n  }\n}\nvar FRUSTUM_PLANES = [[0, 0, 1, 0, 0], [0, 0, -1, 1, 0], [0, -1, 0, 1, 0], [0, 1, 0, 1, 0], [-1, 0, 0, 1, 0], [1, 0, 0, 1, 0]];\nfunction polygonArea(p) {\n  for (var i = 0; i < FRUSTUM_PLANES.length; ++i) {\n    p = splitPoly.positive(p, FRUSTUM_PLANES[i]);\n    if (p.length < 3) {\n      return 0;\n    }\n  }\n  var base = p[0];\n  var ax = base[0] / base[3];\n  var ay = base[1] / base[3];\n  var area = 0.0;\n  for (var i = 1; i + 1 < p.length; ++i) {\n    var b = p[i];\n    var c = p[i + 1];\n    var bx = b[0] / b[3];\n    var by = b[1] / b[3];\n    var cx = c[0] / c[3];\n    var cy = c[1] / c[3];\n    var ux = bx - ax;\n    var uy = by - ay;\n    var vx = cx - ax;\n    var vy = cy - ay;\n    area += Math.abs(ux * vy - uy * vx);\n  }\n  return area;\n}\nvar CUBE_EDGES = [1, 1, 1];\nvar CUBE_AXIS = [0, 0, 0];\nvar CUBE_RESULT = {\n  cubeEdges: CUBE_EDGES,\n  axis: CUBE_AXIS\n};\nfunction getCubeEdges(model, view, projection, bounds, ortho) {\n  //Concatenate matrices\n  multiply(mvp, view, model);\n  multiply(mvp, projection, mvp);\n\n  //First project cube vertices\n  var ptr = 0;\n  for (var i = 0; i < 2; ++i) {\n    x[2] = bounds[i][2];\n    for (var j = 0; j < 2; ++j) {\n      x[1] = bounds[j][1];\n      for (var k = 0; k < 2; ++k) {\n        x[0] = bounds[k][0];\n        transformHg(pCubeVerts[ptr], x, mvp);\n        ptr += 1;\n      }\n    }\n  }\n\n  //Classify camera against cube faces\n  var closest = -1;\n  for (var i = 0; i < 8; ++i) {\n    var w = pCubeVerts[i][3];\n    for (var l = 0; l < 3; ++l) {\n      cubeVerts[i][l] = pCubeVerts[i][l] / w;\n    }\n    if (ortho) cubeVerts[i][2] *= -1;\n    if (w < 0) {\n      if (closest < 0) {\n        closest = i;\n      } else if (cubeVerts[i][2] < cubeVerts[closest][2]) {\n        closest = i;\n      }\n    }\n  }\n  if (closest < 0) {\n    closest = 0;\n    for (var d = 0; d < 3; ++d) {\n      var u = (d + 2) % 3;\n      var v = (d + 1) % 3;\n      var o0 = -1;\n      var o1 = -1;\n      for (var s = 0; s < 2; ++s) {\n        var f0 = s << d;\n        var f1 = f0 + (s << u) + (1 - s << v);\n        var f2 = f0 + (1 - s << u) + (s << v);\n        if (orient(cubeVerts[f0], cubeVerts[f1], cubeVerts[f2], zero3) < 0) {\n          continue;\n        }\n        if (s) {\n          o0 = 1;\n        } else {\n          o1 = 1;\n        }\n      }\n      if (o0 < 0 || o1 < 0) {\n        if (o1 > o0) {\n          closest |= 1 << d;\n        }\n        continue;\n      }\n      for (var s = 0; s < 2; ++s) {\n        var f0 = s << d;\n        var f1 = f0 + (s << u) + (1 - s << v);\n        var f2 = f0 + (1 - s << u) + (s << v);\n        var o = polygonArea([pCubeVerts[f0], pCubeVerts[f1], pCubeVerts[f2], pCubeVerts[f0 + (1 << u) + (1 << v)]]);\n        if (s) {\n          o0 = o;\n        } else {\n          o1 = o;\n        }\n      }\n      if (o1 > o0) {\n        closest |= 1 << d;\n        continue;\n      }\n    }\n  }\n  var farthest = 7 ^ closest;\n\n  //Find lowest vertex which is not closest closest\n  var bottom = -1;\n  for (var i = 0; i < 8; ++i) {\n    if (i === closest || i === farthest) {\n      continue;\n    }\n    if (bottom < 0) {\n      bottom = i;\n    } else if (cubeVerts[bottom][1] > cubeVerts[i][1]) {\n      bottom = i;\n    }\n  }\n\n  //Find left/right neighbors of bottom vertex\n  var left = -1;\n  for (var i = 0; i < 3; ++i) {\n    var idx = bottom ^ 1 << i;\n    if (idx === closest || idx === farthest) {\n      continue;\n    }\n    if (left < 0) {\n      left = idx;\n    }\n    var v = cubeVerts[idx];\n    if (v[0] < cubeVerts[left][0]) {\n      left = idx;\n    }\n  }\n  var right = -1;\n  for (var i = 0; i < 3; ++i) {\n    var idx = bottom ^ 1 << i;\n    if (idx === closest || idx === farthest || idx === left) {\n      continue;\n    }\n    if (right < 0) {\n      right = idx;\n    }\n    var v = cubeVerts[idx];\n    if (v[0] > cubeVerts[right][0]) {\n      right = idx;\n    }\n  }\n\n  //Determine edge axis coordinates\n  var cubeEdges = CUBE_EDGES;\n  cubeEdges[0] = cubeEdges[1] = cubeEdges[2] = 0;\n  cubeEdges[bits.log2(left ^ bottom)] = bottom & left;\n  cubeEdges[bits.log2(bottom ^ right)] = bottom & right;\n  var top = right ^ 7;\n  if (top === closest || top === farthest) {\n    top = left ^ 7;\n    cubeEdges[bits.log2(right ^ top)] = top & right;\n  } else {\n    cubeEdges[bits.log2(left ^ top)] = top & left;\n  }\n\n  //Determine visible faces\n  var axis = CUBE_AXIS;\n  var cutCorner = closest;\n  for (var d = 0; d < 3; ++d) {\n    if (cutCorner & 1 << d) {\n      axis[d] = -1;\n    } else {\n      axis[d] = 1;\n    }\n  }\n\n  //Return result\n  return CUBE_RESULT;\n}","map":{"version":3,"names":["module","exports","getCubeEdges","bits","require","multiply","splitPoly","orient","mvp","Array","pCubeVerts","cubeVerts","x","zero3","i","transformHg","result","mat","j","FRUSTUM_PLANES","polygonArea","p","length","positive","base","ax","ay","area","b","c","bx","by","cx","cy","ux","uy","vx","vy","Math","abs","CUBE_EDGES","CUBE_AXIS","CUBE_RESULT","cubeEdges","axis","model","view","projection","bounds","ortho","ptr","k","closest","w","l","d","u","v","o0","o1","s","f0","f1","f2","o","farthest","bottom","left","idx","right","log2","top","cutCorner"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/gl-axes3d/lib/cube.js"],"sourcesContent":["\"use strict\"\n\nmodule.exports = getCubeEdges\n\nvar bits      = require('bit-twiddle')\nvar multiply  = require('gl-mat4/multiply')\nvar splitPoly = require('split-polygon')\nvar orient    = require('robust-orientation')\n\nvar mvp        = new Array(16)\nvar pCubeVerts = new Array(8)\nvar cubeVerts  = new Array(8)\nvar x          = new Array(3)\nvar zero3      = [0,0,0]\n\n;(function() {\n  for(var i=0; i<8; ++i) {\n    pCubeVerts[i] =[1,1,1,1]\n    cubeVerts[i] = [1,1,1]\n  }\n})()\n\n\nfunction transformHg(result, x, mat) {\n  for(var i=0; i<4; ++i) {\n    result[i] = mat[12+i]\n    for(var j=0; j<3; ++j) {\n      result[i] += x[j]*mat[4*j+i]\n    }\n  }\n}\n\nvar FRUSTUM_PLANES = [\n  [ 0, 0, 1, 0, 0],\n  [ 0, 0,-1, 1, 0],\n  [ 0,-1, 0, 1, 0],\n  [ 0, 1, 0, 1, 0],\n  [-1, 0, 0, 1, 0],\n  [ 1, 0, 0, 1, 0]\n]\n\nfunction polygonArea(p) {\n  for(var i=0; i<FRUSTUM_PLANES.length; ++i) {\n    p = splitPoly.positive(p, FRUSTUM_PLANES[i])\n    if(p.length < 3) {\n      return 0\n    }\n  }\n\n  var base = p[0]\n  var ax = base[0] / base[3]\n  var ay = base[1] / base[3]\n  var area = 0.0\n  for(var i=1; i+1<p.length; ++i) {\n    var b = p[i]\n    var c = p[i+1]\n\n    var bx = b[0]/b[3]\n    var by = b[1]/b[3]\n    var cx = c[0]/c[3]\n    var cy = c[1]/c[3]\n\n    var ux = bx - ax\n    var uy = by - ay\n\n    var vx = cx - ax\n    var vy = cy - ay\n\n    area += Math.abs(ux * vy - uy * vx)\n  }\n\n  return area\n}\n\nvar CUBE_EDGES = [1,1,1]\nvar CUBE_AXIS  = [0,0,0]\nvar CUBE_RESULT = {\n  cubeEdges: CUBE_EDGES,\n  axis: CUBE_AXIS\n}\n\nfunction getCubeEdges(model, view, projection, bounds, ortho) {\n\n  //Concatenate matrices\n  multiply(mvp, view, model)\n  multiply(mvp, projection, mvp)\n\n  //First project cube vertices\n  var ptr = 0\n  for(var i=0; i<2; ++i) {\n    x[2] = bounds[i][2]\n    for(var j=0; j<2; ++j) {\n      x[1] = bounds[j][1]\n      for(var k=0; k<2; ++k) {\n        x[0] = bounds[k][0]\n        transformHg(pCubeVerts[ptr], x, mvp)\n        ptr += 1\n      }\n    }\n  }\n\n  //Classify camera against cube faces\n  var closest = -1\n\n  for(var i=0; i<8; ++i) {\n    var w = pCubeVerts[i][3]\n    for(var l=0; l<3; ++l) {\n      cubeVerts[i][l] = pCubeVerts[i][l] / w\n    }\n\n    if(ortho) cubeVerts[i][2] *= -1;\n\n    if(w < 0) {\n      if(closest < 0) {\n        closest = i\n      } else if(cubeVerts[i][2] < cubeVerts[closest][2]) {\n        closest = i\n      }\n    }\n  }\n\n  if(closest < 0) {\n    closest = 0\n    for(var d=0; d<3; ++d) {\n      var u = (d+2) % 3\n      var v = (d+1) % 3\n      var o0 = -1\n      var o1 = -1\n      for(var s=0; s<2; ++s) {\n        var f0 = (s<<d)\n        var f1 = f0 + (s << u) + ((1-s) << v)\n        var f2 = f0 + ((1-s) << u) + (s << v)\n        if(orient(cubeVerts[f0], cubeVerts[f1], cubeVerts[f2], zero3) < 0) {\n          continue\n        }\n        if(s) {\n          o0 = 1\n        } else {\n          o1 = 1\n        }\n      }\n      if(o0 < 0 || o1 < 0) {\n        if(o1 > o0) {\n          closest |= 1<<d\n        }\n        continue\n      }\n      for(var s=0; s<2; ++s) {\n        var f0 = (s<<d)\n        var f1 = f0 + (s << u) + ((1-s) << v)\n        var f2 = f0 + ((1-s) << u) + (s << v)\n        var o = polygonArea([\n            pCubeVerts[f0],\n            pCubeVerts[f1],\n            pCubeVerts[f2],\n            pCubeVerts[f0+(1<<u)+(1<<v)]])\n        if(s) {\n          o0 = o\n        } else {\n          o1 = o\n        }\n      }\n      if(o1 > o0) {\n        closest |= 1<<d\n        continue\n      }\n    }\n  }\n\n  var farthest = 7^closest\n\n  //Find lowest vertex which is not closest closest\n  var bottom = -1\n  for(var i=0; i<8; ++i) {\n    if(i === closest || i === farthest) {\n      continue\n    }\n    if(bottom < 0) {\n      bottom = i\n    } else if(cubeVerts[bottom][1] > cubeVerts[i][1]) {\n      bottom = i\n    }\n  }\n\n  //Find left/right neighbors of bottom vertex\n  var left = -1\n  for(var i=0; i<3; ++i) {\n    var idx = bottom ^ (1<<i)\n    if(idx === closest || idx === farthest) {\n      continue\n    }\n    if(left < 0) {\n      left = idx\n    }\n    var v = cubeVerts[idx]\n    if(v[0] < cubeVerts[left][0]) {\n      left = idx\n    }\n  }\n  var right = -1\n  for(var i=0; i<3; ++i) {\n    var idx = bottom ^ (1<<i)\n    if(idx === closest || idx === farthest || idx === left) {\n      continue\n    }\n    if(right < 0) {\n      right = idx\n    }\n    var v = cubeVerts[idx]\n    if(v[0] > cubeVerts[right][0]) {\n      right = idx\n    }\n  }\n\n  //Determine edge axis coordinates\n  var cubeEdges = CUBE_EDGES\n  cubeEdges[0] = cubeEdges[1] = cubeEdges[2] = 0\n  cubeEdges[bits.log2(left^bottom)] = bottom&left\n  cubeEdges[bits.log2(bottom^right)] = bottom&right\n  var top = right ^ 7\n  if(top === closest || top === farthest) {\n    top = left ^ 7\n    cubeEdges[bits.log2(right^top)] = top&right\n  } else {\n    cubeEdges[bits.log2(left^top)] = top&left\n  }\n\n  //Determine visible faces\n  var axis = CUBE_AXIS\n  var cutCorner = closest\n  for(var d=0; d<3; ++d) {\n    if(cutCorner & (1<<d)) {\n      axis[d] = -1\n    } else {\n      axis[d] = 1\n    }\n  }\n\n  //Return result\n  return CUBE_RESULT\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,YAAY;AAE7B,IAAIC,IAAI,GAAQC,OAAO,CAAC,aAAa,CAAC;AACtC,IAAIC,QAAQ,GAAID,OAAO,CAAC,kBAAkB,CAAC;AAC3C,IAAIE,SAAS,GAAGF,OAAO,CAAC,eAAe,CAAC;AACxC,IAAIG,MAAM,GAAMH,OAAO,CAAC,oBAAoB,CAAC;AAE7C,IAAII,GAAG,GAAU,IAAIC,KAAK,CAAC,EAAE,CAAC;AAC9B,IAAIC,UAAU,GAAG,IAAID,KAAK,CAAC,CAAC,CAAC;AAC7B,IAAIE,SAAS,GAAI,IAAIF,KAAK,CAAC,CAAC,CAAC;AAC7B,IAAIG,CAAC,GAAY,IAAIH,KAAK,CAAC,CAAC,CAAC;AAC7B,IAAII,KAAK,GAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;AAEvB,CAAC,YAAW;EACX,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;IACrBJ,UAAU,CAACI,CAAC,CAAC,GAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IACxBH,SAAS,CAACG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EACxB;AACF,CAAC,GAAG;AAGJ,SAASC,WAAW,CAACC,MAAM,EAAEJ,CAAC,EAAEK,GAAG,EAAE;EACnC,KAAI,IAAIH,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;IACrBE,MAAM,CAACF,CAAC,CAAC,GAAGG,GAAG,CAAC,EAAE,GAACH,CAAC,CAAC;IACrB,KAAI,IAAII,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;MACrBF,MAAM,CAACF,CAAC,CAAC,IAAIF,CAAC,CAACM,CAAC,CAAC,GAACD,GAAG,CAAC,CAAC,GAACC,CAAC,GAACJ,CAAC,CAAC;IAC9B;EACF;AACF;AAEA,IAAIK,cAAc,GAAG,CACnB,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAChB,CAAE,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAChB,CAAE,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAChB,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAChB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAChB,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACjB;AAED,SAASC,WAAW,CAACC,CAAC,EAAE;EACtB,KAAI,IAAIP,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACK,cAAc,CAACG,MAAM,EAAE,EAAER,CAAC,EAAE;IACzCO,CAAC,GAAGf,SAAS,CAACiB,QAAQ,CAACF,CAAC,EAAEF,cAAc,CAACL,CAAC,CAAC,CAAC;IAC5C,IAAGO,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;MACf,OAAO,CAAC;IACV;EACF;EAEA,IAAIE,IAAI,GAAGH,CAAC,CAAC,CAAC,CAAC;EACf,IAAII,EAAE,GAAGD,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC;EAC1B,IAAIE,EAAE,GAAGF,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC;EAC1B,IAAIG,IAAI,GAAG,GAAG;EACd,KAAI,IAAIb,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,GAACO,CAAC,CAACC,MAAM,EAAE,EAAER,CAAC,EAAE;IAC9B,IAAIc,CAAC,GAAGP,CAAC,CAACP,CAAC,CAAC;IACZ,IAAIe,CAAC,GAAGR,CAAC,CAACP,CAAC,GAAC,CAAC,CAAC;IAEd,IAAIgB,EAAE,GAAGF,CAAC,CAAC,CAAC,CAAC,GAACA,CAAC,CAAC,CAAC,CAAC;IAClB,IAAIG,EAAE,GAAGH,CAAC,CAAC,CAAC,CAAC,GAACA,CAAC,CAAC,CAAC,CAAC;IAClB,IAAII,EAAE,GAAGH,CAAC,CAAC,CAAC,CAAC,GAACA,CAAC,CAAC,CAAC,CAAC;IAClB,IAAII,EAAE,GAAGJ,CAAC,CAAC,CAAC,CAAC,GAACA,CAAC,CAAC,CAAC,CAAC;IAElB,IAAIK,EAAE,GAAGJ,EAAE,GAAGL,EAAE;IAChB,IAAIU,EAAE,GAAGJ,EAAE,GAAGL,EAAE;IAEhB,IAAIU,EAAE,GAAGJ,EAAE,GAAGP,EAAE;IAChB,IAAIY,EAAE,GAAGJ,EAAE,GAAGP,EAAE;IAEhBC,IAAI,IAAIW,IAAI,CAACC,GAAG,CAACL,EAAE,GAAGG,EAAE,GAAGF,EAAE,GAAGC,EAAE,CAAC;EACrC;EAEA,OAAOT,IAAI;AACb;AAEA,IAAIa,UAAU,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;AACxB,IAAIC,SAAS,GAAI,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;AACxB,IAAIC,WAAW,GAAG;EAChBC,SAAS,EAAEH,UAAU;EACrBI,IAAI,EAAEH;AACR,CAAC;AAED,SAASvC,YAAY,CAAC2C,KAAK,EAAEC,IAAI,EAAEC,UAAU,EAAEC,MAAM,EAAEC,KAAK,EAAE;EAE5D;EACA5C,QAAQ,CAACG,GAAG,EAAEsC,IAAI,EAAED,KAAK,CAAC;EAC1BxC,QAAQ,CAACG,GAAG,EAAEuC,UAAU,EAAEvC,GAAG,CAAC;;EAE9B;EACA,IAAI0C,GAAG,GAAG,CAAC;EACX,KAAI,IAAIpC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;IACrBF,CAAC,CAAC,CAAC,CAAC,GAAGoC,MAAM,CAAClC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,KAAI,IAAII,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;MACrBN,CAAC,CAAC,CAAC,CAAC,GAAGoC,MAAM,CAAC9B,CAAC,CAAC,CAAC,CAAC,CAAC;MACnB,KAAI,IAAIiC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;QACrBvC,CAAC,CAAC,CAAC,CAAC,GAAGoC,MAAM,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC;QACnBpC,WAAW,CAACL,UAAU,CAACwC,GAAG,CAAC,EAAEtC,CAAC,EAAEJ,GAAG,CAAC;QACpC0C,GAAG,IAAI,CAAC;MACV;IACF;EACF;;EAEA;EACA,IAAIE,OAAO,GAAG,CAAC,CAAC;EAEhB,KAAI,IAAItC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;IACrB,IAAIuC,CAAC,GAAG3C,UAAU,CAACI,CAAC,CAAC,CAAC,CAAC,CAAC;IACxB,KAAI,IAAIwC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;MACrB3C,SAAS,CAACG,CAAC,CAAC,CAACwC,CAAC,CAAC,GAAG5C,UAAU,CAACI,CAAC,CAAC,CAACwC,CAAC,CAAC,GAAGD,CAAC;IACxC;IAEA,IAAGJ,KAAK,EAAEtC,SAAS,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAE/B,IAAGuC,CAAC,GAAG,CAAC,EAAE;MACR,IAAGD,OAAO,GAAG,CAAC,EAAE;QACdA,OAAO,GAAGtC,CAAC;MACb,CAAC,MAAM,IAAGH,SAAS,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGH,SAAS,CAACyC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;QACjDA,OAAO,GAAGtC,CAAC;MACb;IACF;EACF;EAEA,IAAGsC,OAAO,GAAG,CAAC,EAAE;IACdA,OAAO,GAAG,CAAC;IACX,KAAI,IAAIG,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;MACrB,IAAIC,CAAC,GAAG,CAACD,CAAC,GAAC,CAAC,IAAI,CAAC;MACjB,IAAIE,CAAC,GAAG,CAACF,CAAC,GAAC,CAAC,IAAI,CAAC;MACjB,IAAIG,EAAE,GAAG,CAAC,CAAC;MACX,IAAIC,EAAE,GAAG,CAAC,CAAC;MACX,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;QACrB,IAAIC,EAAE,GAAID,CAAC,IAAEL,CAAE;QACf,IAAIO,EAAE,GAAGD,EAAE,IAAID,CAAC,IAAIJ,CAAC,CAAC,IAAK,CAAC,GAACI,CAAC,IAAKH,CAAC,CAAC;QACrC,IAAIM,EAAE,GAAGF,EAAE,IAAK,CAAC,GAACD,CAAC,IAAKJ,CAAC,CAAC,IAAII,CAAC,IAAIH,CAAC,CAAC;QACrC,IAAGlD,MAAM,CAACI,SAAS,CAACkD,EAAE,CAAC,EAAElD,SAAS,CAACmD,EAAE,CAAC,EAAEnD,SAAS,CAACoD,EAAE,CAAC,EAAElD,KAAK,CAAC,GAAG,CAAC,EAAE;UACjE;QACF;QACA,IAAG+C,CAAC,EAAE;UACJF,EAAE,GAAG,CAAC;QACR,CAAC,MAAM;UACLC,EAAE,GAAG,CAAC;QACR;MACF;MACA,IAAGD,EAAE,GAAG,CAAC,IAAIC,EAAE,GAAG,CAAC,EAAE;QACnB,IAAGA,EAAE,GAAGD,EAAE,EAAE;UACVN,OAAO,IAAI,CAAC,IAAEG,CAAC;QACjB;QACA;MACF;MACA,KAAI,IAAIK,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;QACrB,IAAIC,EAAE,GAAID,CAAC,IAAEL,CAAE;QACf,IAAIO,EAAE,GAAGD,EAAE,IAAID,CAAC,IAAIJ,CAAC,CAAC,IAAK,CAAC,GAACI,CAAC,IAAKH,CAAC,CAAC;QACrC,IAAIM,EAAE,GAAGF,EAAE,IAAK,CAAC,GAACD,CAAC,IAAKJ,CAAC,CAAC,IAAII,CAAC,IAAIH,CAAC,CAAC;QACrC,IAAIO,CAAC,GAAG5C,WAAW,CAAC,CAChBV,UAAU,CAACmD,EAAE,CAAC,EACdnD,UAAU,CAACoD,EAAE,CAAC,EACdpD,UAAU,CAACqD,EAAE,CAAC,EACdrD,UAAU,CAACmD,EAAE,IAAE,CAAC,IAAEL,CAAC,CAAC,IAAE,CAAC,IAAEC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,IAAGG,CAAC,EAAE;UACJF,EAAE,GAAGM,CAAC;QACR,CAAC,MAAM;UACLL,EAAE,GAAGK,CAAC;QACR;MACF;MACA,IAAGL,EAAE,GAAGD,EAAE,EAAE;QACVN,OAAO,IAAI,CAAC,IAAEG,CAAC;QACf;MACF;IACF;EACF;EAEA,IAAIU,QAAQ,GAAG,CAAC,GAACb,OAAO;;EAExB;EACA,IAAIc,MAAM,GAAG,CAAC,CAAC;EACf,KAAI,IAAIpD,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;IACrB,IAAGA,CAAC,KAAKsC,OAAO,IAAItC,CAAC,KAAKmD,QAAQ,EAAE;MAClC;IACF;IACA,IAAGC,MAAM,GAAG,CAAC,EAAE;MACbA,MAAM,GAAGpD,CAAC;IACZ,CAAC,MAAM,IAAGH,SAAS,CAACuD,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGvD,SAAS,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MAChDoD,MAAM,GAAGpD,CAAC;IACZ;EACF;;EAEA;EACA,IAAIqD,IAAI,GAAG,CAAC,CAAC;EACb,KAAI,IAAIrD,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;IACrB,IAAIsD,GAAG,GAAGF,MAAM,GAAI,CAAC,IAAEpD,CAAE;IACzB,IAAGsD,GAAG,KAAKhB,OAAO,IAAIgB,GAAG,KAAKH,QAAQ,EAAE;MACtC;IACF;IACA,IAAGE,IAAI,GAAG,CAAC,EAAE;MACXA,IAAI,GAAGC,GAAG;IACZ;IACA,IAAIX,CAAC,GAAG9C,SAAS,CAACyD,GAAG,CAAC;IACtB,IAAGX,CAAC,CAAC,CAAC,CAAC,GAAG9C,SAAS,CAACwD,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;MAC5BA,IAAI,GAAGC,GAAG;IACZ;EACF;EACA,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,KAAI,IAAIvD,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;IACrB,IAAIsD,GAAG,GAAGF,MAAM,GAAI,CAAC,IAAEpD,CAAE;IACzB,IAAGsD,GAAG,KAAKhB,OAAO,IAAIgB,GAAG,KAAKH,QAAQ,IAAIG,GAAG,KAAKD,IAAI,EAAE;MACtD;IACF;IACA,IAAGE,KAAK,GAAG,CAAC,EAAE;MACZA,KAAK,GAAGD,GAAG;IACb;IACA,IAAIX,CAAC,GAAG9C,SAAS,CAACyD,GAAG,CAAC;IACtB,IAAGX,CAAC,CAAC,CAAC,CAAC,GAAG9C,SAAS,CAAC0D,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MAC7BA,KAAK,GAAGD,GAAG;IACb;EACF;;EAEA;EACA,IAAIzB,SAAS,GAAGH,UAAU;EAC1BG,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;EAC9CA,SAAS,CAACxC,IAAI,CAACmE,IAAI,CAACH,IAAI,GAACD,MAAM,CAAC,CAAC,GAAGA,MAAM,GAACC,IAAI;EAC/CxB,SAAS,CAACxC,IAAI,CAACmE,IAAI,CAACJ,MAAM,GAACG,KAAK,CAAC,CAAC,GAAGH,MAAM,GAACG,KAAK;EACjD,IAAIE,GAAG,GAAGF,KAAK,GAAG,CAAC;EACnB,IAAGE,GAAG,KAAKnB,OAAO,IAAImB,GAAG,KAAKN,QAAQ,EAAE;IACtCM,GAAG,GAAGJ,IAAI,GAAG,CAAC;IACdxB,SAAS,CAACxC,IAAI,CAACmE,IAAI,CAACD,KAAK,GAACE,GAAG,CAAC,CAAC,GAAGA,GAAG,GAACF,KAAK;EAC7C,CAAC,MAAM;IACL1B,SAAS,CAACxC,IAAI,CAACmE,IAAI,CAACH,IAAI,GAACI,GAAG,CAAC,CAAC,GAAGA,GAAG,GAACJ,IAAI;EAC3C;;EAEA;EACA,IAAIvB,IAAI,GAAGH,SAAS;EACpB,IAAI+B,SAAS,GAAGpB,OAAO;EACvB,KAAI,IAAIG,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAE,EAAEA,CAAC,EAAE;IACrB,IAAGiB,SAAS,GAAI,CAAC,IAAEjB,CAAE,EAAE;MACrBX,IAAI,CAACW,CAAC,CAAC,GAAG,CAAC,CAAC;IACd,CAAC,MAAM;MACLX,IAAI,CAACW,CAAC,CAAC,GAAG,CAAC;IACb;EACF;;EAEA;EACA,OAAOb,WAAW;AACpB"},"metadata":{},"sourceType":"script","externalDependencies":[]}
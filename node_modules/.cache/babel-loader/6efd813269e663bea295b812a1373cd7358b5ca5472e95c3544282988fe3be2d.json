{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar tinycolor = require('tinycolor2');\nexports.coerceString = function (attributeDefinition, value, defaultValue) {\n  if (typeof value === 'string') {\n    if (value || !attributeDefinition.noBlank) return value;\n  } else if (typeof value === 'number') {\n    if (!attributeDefinition.strict) return String(value);\n  }\n  return defaultValue !== undefined ? defaultValue : attributeDefinition.dflt;\n};\nexports.coerceNumber = function (attributeDefinition, value, defaultValue) {\n  if (isNumeric(value)) {\n    value = +value;\n    var min = attributeDefinition.min;\n    var max = attributeDefinition.max;\n    var isOutOfBounds = min !== undefined && value < min || max !== undefined && value > max;\n    if (!isOutOfBounds) return value;\n  }\n  return defaultValue !== undefined ? defaultValue : attributeDefinition.dflt;\n};\nexports.coerceColor = function (attributeDefinition, value, defaultValue) {\n  if (tinycolor(value).isValid()) return value;\n  return defaultValue !== undefined ? defaultValue : attributeDefinition.dflt;\n};\nexports.coerceEnumerated = function (attributeDefinition, value, defaultValue) {\n  if (attributeDefinition.coerceNumber) value = +value;\n  if (attributeDefinition.values.indexOf(value) !== -1) return value;\n  return defaultValue !== undefined ? defaultValue : attributeDefinition.dflt;\n};\nexports.getValue = function (arrayOrScalar, index) {\n  var value;\n  if (!Array.isArray(arrayOrScalar)) value = arrayOrScalar;else if (index < arrayOrScalar.length) value = arrayOrScalar[index];\n  return value;\n};","map":{"version":3,"names":["isNumeric","require","tinycolor","exports","coerceString","attributeDefinition","value","defaultValue","noBlank","strict","String","undefined","dflt","coerceNumber","min","max","isOutOfBounds","coerceColor","isValid","coerceEnumerated","values","indexOf","getValue","arrayOrScalar","index","Array","isArray","length"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/traces/bar/helpers.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar tinycolor = require('tinycolor2');\n\nexports.coerceString = function(attributeDefinition, value, defaultValue) {\n    if(typeof value === 'string') {\n        if(value || !attributeDefinition.noBlank) return value;\n    } else if(typeof value === 'number') {\n        if(!attributeDefinition.strict) return String(value);\n    }\n\n    return (defaultValue !== undefined) ?\n      defaultValue :\n      attributeDefinition.dflt;\n};\n\nexports.coerceNumber = function(attributeDefinition, value, defaultValue) {\n    if(isNumeric(value)) {\n        value = +value;\n\n        var min = attributeDefinition.min;\n        var max = attributeDefinition.max;\n        var isOutOfBounds = (min !== undefined && value < min) ||\n              (max !== undefined && value > max);\n\n        if(!isOutOfBounds) return value;\n    }\n\n    return (defaultValue !== undefined) ?\n      defaultValue :\n      attributeDefinition.dflt;\n};\n\nexports.coerceColor = function(attributeDefinition, value, defaultValue) {\n    if(tinycolor(value).isValid()) return value;\n\n    return (defaultValue !== undefined) ?\n      defaultValue :\n      attributeDefinition.dflt;\n};\n\nexports.coerceEnumerated = function(attributeDefinition, value, defaultValue) {\n    if(attributeDefinition.coerceNumber) value = +value;\n\n    if(attributeDefinition.values.indexOf(value) !== -1) return value;\n\n    return (defaultValue !== undefined) ?\n      defaultValue :\n      attributeDefinition.dflt;\n};\n\nexports.getValue = function(arrayOrScalar, index) {\n    var value;\n    if(!Array.isArray(arrayOrScalar)) value = arrayOrScalar;\n    else if(index < arrayOrScalar.length) value = arrayOrScalar[index];\n    return value;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACzC,IAAIC,SAAS,GAAGD,OAAO,CAAC,YAAY,CAAC;AAErCE,OAAO,CAACC,YAAY,GAAG,UAASC,mBAAmB,EAAEC,KAAK,EAAEC,YAAY,EAAE;EACtE,IAAG,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC1B,IAAGA,KAAK,IAAI,CAACD,mBAAmB,CAACG,OAAO,EAAE,OAAOF,KAAK;EAC1D,CAAC,MAAM,IAAG,OAAOA,KAAK,KAAK,QAAQ,EAAE;IACjC,IAAG,CAACD,mBAAmB,CAACI,MAAM,EAAE,OAAOC,MAAM,CAACJ,KAAK,CAAC;EACxD;EAEA,OAAQC,YAAY,KAAKI,SAAS,GAChCJ,YAAY,GACZF,mBAAmB,CAACO,IAAI;AAC9B,CAAC;AAEDT,OAAO,CAACU,YAAY,GAAG,UAASR,mBAAmB,EAAEC,KAAK,EAAEC,YAAY,EAAE;EACtE,IAAGP,SAAS,CAACM,KAAK,CAAC,EAAE;IACjBA,KAAK,GAAG,CAACA,KAAK;IAEd,IAAIQ,GAAG,GAAGT,mBAAmB,CAACS,GAAG;IACjC,IAAIC,GAAG,GAAGV,mBAAmB,CAACU,GAAG;IACjC,IAAIC,aAAa,GAAIF,GAAG,KAAKH,SAAS,IAAIL,KAAK,GAAGQ,GAAG,IAC9CC,GAAG,KAAKJ,SAAS,IAAIL,KAAK,GAAGS,GAAI;IAExC,IAAG,CAACC,aAAa,EAAE,OAAOV,KAAK;EACnC;EAEA,OAAQC,YAAY,KAAKI,SAAS,GAChCJ,YAAY,GACZF,mBAAmB,CAACO,IAAI;AAC9B,CAAC;AAEDT,OAAO,CAACc,WAAW,GAAG,UAASZ,mBAAmB,EAAEC,KAAK,EAAEC,YAAY,EAAE;EACrE,IAAGL,SAAS,CAACI,KAAK,CAAC,CAACY,OAAO,EAAE,EAAE,OAAOZ,KAAK;EAE3C,OAAQC,YAAY,KAAKI,SAAS,GAChCJ,YAAY,GACZF,mBAAmB,CAACO,IAAI;AAC9B,CAAC;AAEDT,OAAO,CAACgB,gBAAgB,GAAG,UAASd,mBAAmB,EAAEC,KAAK,EAAEC,YAAY,EAAE;EAC1E,IAAGF,mBAAmB,CAACQ,YAAY,EAAEP,KAAK,GAAG,CAACA,KAAK;EAEnD,IAAGD,mBAAmB,CAACe,MAAM,CAACC,OAAO,CAACf,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,OAAOA,KAAK;EAEjE,OAAQC,YAAY,KAAKI,SAAS,GAChCJ,YAAY,GACZF,mBAAmB,CAACO,IAAI;AAC9B,CAAC;AAEDT,OAAO,CAACmB,QAAQ,GAAG,UAASC,aAAa,EAAEC,KAAK,EAAE;EAC9C,IAAIlB,KAAK;EACT,IAAG,CAACmB,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,EAAEjB,KAAK,GAAGiB,aAAa,CAAC,KACnD,IAAGC,KAAK,GAAGD,aAAa,CAACI,MAAM,EAAErB,KAAK,GAAGiB,aAAa,CAACC,KAAK,CAAC;EAClE,OAAOlB,KAAK;AAChB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n * @module color-parse\n */\n\n'use strict';\n\nvar names = require('color-name');\nvar isObject = require('is-plain-obj');\nvar defined = require('defined');\nmodule.exports = parse;\n\n/**\n * Base hues\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\n */\n//FIXME: use external hue detector\nvar baseHues = {\n  red: 0,\n  orange: 60,\n  yellow: 120,\n  green: 180,\n  blue: 240,\n  purple: 300\n};\n\n/**\n * Parse color from the string passed\n *\n * @return {Object} A space indicator `space`, an array `values` and `alpha`\n */\nfunction parse(cstr) {\n  var m,\n    parts = [],\n    alpha = 1,\n    space;\n  if (typeof cstr === 'string') {\n    //keyword\n    if (names[cstr]) {\n      parts = names[cstr].slice();\n      space = 'rgb';\n    }\n\n    //reserved words\n    else if (cstr === 'transparent') {\n      alpha = 0;\n      space = 'rgb';\n      parts = [0, 0, 0];\n    }\n\n    //hex\n    else if (/^#[A-Fa-f0-9]+$/.test(cstr)) {\n      var base = cstr.slice(1);\n      var size = base.length;\n      var isShort = size <= 4;\n      alpha = 1;\n      if (isShort) {\n        parts = [parseInt(base[0] + base[0], 16), parseInt(base[1] + base[1], 16), parseInt(base[2] + base[2], 16)];\n        if (size === 4) {\n          alpha = parseInt(base[3] + base[3], 16) / 255;\n        }\n      } else {\n        parts = [parseInt(base[0] + base[1], 16), parseInt(base[2] + base[3], 16), parseInt(base[4] + base[5], 16)];\n        if (size === 8) {\n          alpha = parseInt(base[6] + base[7], 16) / 255;\n        }\n      }\n      if (!parts[0]) parts[0] = 0;\n      if (!parts[1]) parts[1] = 0;\n      if (!parts[2]) parts[2] = 0;\n      space = 'rgb';\n    }\n\n    //color space\n    else if (m = /^((?:rgb|hs[lvb]|hwb|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms)a?)\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\n      var name = m[1];\n      var isRGB = name === 'rgb';\n      var base = name.replace(/a$/, '');\n      space = base;\n      var size = base === 'cmyk' ? 4 : base === 'gray' ? 1 : 3;\n      parts = m[2].trim().split(/\\s*,\\s*/).map(function (x, i) {\n        //<percentage>\n        if (/%$/.test(x)) {\n          //alpha\n          if (i === size) return parseFloat(x) / 100;\n          //rgb\n          if (base === 'rgb') return parseFloat(x) * 255 / 100;\n          return parseFloat(x);\n        }\n        //hue\n        else if (base[i] === 'h') {\n          //<deg>\n          if (/deg$/.test(x)) {\n            return parseFloat(x);\n          }\n          //<base-hue>\n          else if (baseHues[x] !== undefined) {\n            return baseHues[x];\n          }\n        }\n        return parseFloat(x);\n      });\n      if (name === base) parts.push(1);\n      alpha = isRGB ? 1 : parts[size] === undefined ? 1 : parts[size];\n      parts = parts.slice(0, size);\n    }\n\n    //named channels case\n    else if (cstr.length > 10 && /[0-9](?:\\s|\\/)/.test(cstr)) {\n      parts = cstr.match(/([0-9]+)/g).map(function (value) {\n        return parseFloat(value);\n      });\n      space = cstr.match(/([a-z])/ig).join('').toLowerCase();\n    }\n  }\n\n  //numeric case\n  else if (!isNaN(cstr)) {\n    space = 'rgb';\n    parts = [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff];\n  }\n\n  //object case - detects css cases of rgb and hsl\n  else if (isObject(cstr)) {\n    var r = defined(cstr.r, cstr.red, cstr.R, null);\n    if (r !== null) {\n      space = 'rgb';\n      parts = [r, defined(cstr.g, cstr.green, cstr.G), defined(cstr.b, cstr.blue, cstr.B)];\n    } else {\n      space = 'hsl';\n      parts = [defined(cstr.h, cstr.hue, cstr.H), defined(cstr.s, cstr.saturation, cstr.S), defined(cstr.l, cstr.lightness, cstr.L, cstr.b, cstr.brightness)];\n    }\n    alpha = defined(cstr.a, cstr.alpha, cstr.opacity, 1);\n    if (cstr.opacity != null) alpha /= 100;\n  }\n\n  //array\n  else if (Array.isArray(cstr) || global.ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(cstr)) {\n    parts = [cstr[0], cstr[1], cstr[2]];\n    space = 'rgb';\n    alpha = cstr.length === 4 ? cstr[3] : 1;\n  }\n  return {\n    space: space,\n    values: parts,\n    alpha: alpha\n  };\n}","map":{"version":3,"names":["names","require","isObject","defined","module","exports","parse","baseHues","red","orange","yellow","green","blue","purple","cstr","m","parts","alpha","space","slice","test","base","size","length","isShort","parseInt","exec","name","isRGB","replace","trim","split","map","x","i","parseFloat","undefined","push","match","value","join","toLowerCase","isNaN","r","R","g","G","b","B","h","hue","H","s","saturation","S","l","lightness","L","brightness","a","opacity","Array","isArray","global","ArrayBuffer","isView","values"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/color-parse/index.js"],"sourcesContent":["/**\n * @module color-parse\n */\n\n'use strict'\n\nvar names = require('color-name')\nvar isObject = require('is-plain-obj')\nvar defined = require('defined')\n\nmodule.exports = parse\n\n/**\n * Base hues\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\n */\n//FIXME: use external hue detector\nvar baseHues = {\n\tred: 0,\n\torange: 60,\n\tyellow: 120,\n\tgreen: 180,\n\tblue: 240,\n\tpurple: 300\n}\n\n/**\n * Parse color from the string passed\n *\n * @return {Object} A space indicator `space`, an array `values` and `alpha`\n */\nfunction parse (cstr) {\n\tvar m, parts = [], alpha = 1, space\n\n\tif (typeof cstr === 'string') {\n\t\t//keyword\n\t\tif (names[cstr]) {\n\t\t\tparts = names[cstr].slice()\n\t\t\tspace = 'rgb'\n\t\t}\n\n\t\t//reserved words\n\t\telse if (cstr === 'transparent') {\n\t\t\talpha = 0\n\t\t\tspace = 'rgb'\n\t\t\tparts = [0,0,0]\n\t\t}\n\n\t\t//hex\n\t\telse if (/^#[A-Fa-f0-9]+$/.test(cstr)) {\n\t\t\tvar base = cstr.slice(1)\n\t\t\tvar size = base.length\n\t\t\tvar isShort = size <= 4\n\t\t\talpha = 1\n\n\t\t\tif (isShort) {\n\t\t\t\tparts = [\n\t\t\t\t\tparseInt(base[0] + base[0], 16),\n\t\t\t\t\tparseInt(base[1] + base[1], 16),\n\t\t\t\t\tparseInt(base[2] + base[2], 16)\n\t\t\t\t]\n\t\t\t\tif (size === 4) {\n\t\t\t\t\talpha = parseInt(base[3] + base[3], 16) / 255\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tparts = [\n\t\t\t\t\tparseInt(base[0] + base[1], 16),\n\t\t\t\t\tparseInt(base[2] + base[3], 16),\n\t\t\t\t\tparseInt(base[4] + base[5], 16)\n\t\t\t\t]\n\t\t\t\tif (size === 8) {\n\t\t\t\t\talpha = parseInt(base[6] + base[7], 16) / 255\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!parts[0]) parts[0] = 0\n\t\t\tif (!parts[1]) parts[1] = 0\n\t\t\tif (!parts[2]) parts[2] = 0\n\n\t\t\tspace = 'rgb'\n\t\t}\n\n\t\t//color space\n\t\telse if (m = /^((?:rgb|hs[lvb]|hwb|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms)a?)\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\n\t\t\tvar name = m[1]\n\t\t\tvar isRGB = name === 'rgb'\n\t\t\tvar base = name.replace(/a$/, '')\n\t\t\tspace = base\n\t\t\tvar size = base === 'cmyk' ? 4 : base === 'gray' ? 1 : 3\n\t\t\tparts = m[2].trim()\n\t\t\t\t.split(/\\s*,\\s*/)\n\t\t\t\t.map(function (x, i) {\n\t\t\t\t\t//<percentage>\n\t\t\t\t\tif (/%$/.test(x)) {\n\t\t\t\t\t\t//alpha\n\t\t\t\t\t\tif (i === size)\treturn parseFloat(x) / 100\n\t\t\t\t\t\t//rgb\n\t\t\t\t\t\tif (base === 'rgb') return parseFloat(x) * 255 / 100\n\t\t\t\t\t\treturn parseFloat(x)\n\t\t\t\t\t}\n\t\t\t\t\t//hue\n\t\t\t\t\telse if (base[i] === 'h') {\n\t\t\t\t\t\t//<deg>\n\t\t\t\t\t\tif (/deg$/.test(x)) {\n\t\t\t\t\t\t\treturn parseFloat(x)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//<base-hue>\n\t\t\t\t\t\telse if (baseHues[x] !== undefined) {\n\t\t\t\t\t\t\treturn baseHues[x]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn parseFloat(x)\n\t\t\t\t})\n\n\t\t\tif (name === base) parts.push(1)\n\t\t\talpha = (isRGB) ? 1 : (parts[size] === undefined) ? 1 : parts[size]\n\t\t\tparts = parts.slice(0, size)\n\t\t}\n\n\t\t//named channels case\n\t\telse if (cstr.length > 10 && /[0-9](?:\\s|\\/)/.test(cstr)) {\n\t\t\tparts = cstr.match(/([0-9]+)/g).map(function (value) {\n\t\t\t\treturn parseFloat(value)\n\t\t\t})\n\n\t\t\tspace = cstr.match(/([a-z])/ig).join('').toLowerCase()\n\t\t}\n\t}\n\n\t//numeric case\n\telse if (!isNaN(cstr)) {\n\t\tspace = 'rgb'\n\t\tparts = [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff]\n\t}\n\n\t//object case - detects css cases of rgb and hsl\n\telse if (isObject(cstr)) {\n\t\tvar r = defined(cstr.r, cstr.red, cstr.R, null)\n\n\t\tif (r !== null) {\n\t\t\tspace = 'rgb'\n\t\t\tparts = [\n\t\t\t\tr,\n\t\t\t\tdefined(cstr.g, cstr.green, cstr.G),\n\t\t\t\tdefined(cstr.b, cstr.blue, cstr.B)\n\t\t\t]\n\t\t}\n\t\telse {\n\t\t\tspace = 'hsl'\n\t\t\tparts = [\n\t\t\t\tdefined(cstr.h, cstr.hue, cstr.H),\n\t\t\t\tdefined(cstr.s, cstr.saturation, cstr.S),\n\t\t\t\tdefined(cstr.l, cstr.lightness, cstr.L, cstr.b, cstr.brightness)\n\t\t\t]\n\t\t}\n\n\t\talpha = defined(cstr.a, cstr.alpha, cstr.opacity, 1)\n\n\t\tif (cstr.opacity != null) alpha /= 100\n\t}\n\n\t//array\n\telse if (Array.isArray(cstr) || global.ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(cstr)) {\n\t\tparts = [cstr[0], cstr[1], cstr[2]]\n\t\tspace = 'rgb'\n\t\talpha = cstr.length === 4 ? cstr[3] : 1\n\t}\n\n\treturn {\n\t\tspace: space,\n\t\tvalues: parts,\n\t\talpha: alpha\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
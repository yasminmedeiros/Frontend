{"ast":null,"code":"\"use strict\";\n\nvar ch = require(\"incremental-convex-hull\");\nvar uniq = require(\"uniq\");\nmodule.exports = triangulate;\nfunction LiftedPoint(p, i) {\n  this.point = p;\n  this.index = i;\n}\nfunction compareLifted(a, b) {\n  var ap = a.point;\n  var bp = b.point;\n  var d = ap.length;\n  for (var i = 0; i < d; ++i) {\n    var s = bp[i] - ap[i];\n    if (s) {\n      return s;\n    }\n  }\n  return 0;\n}\nfunction triangulate1D(n, points, includePointAtInfinity) {\n  if (n === 1) {\n    if (includePointAtInfinity) {\n      return [[-1, 0]];\n    } else {\n      return [];\n    }\n  }\n  var lifted = points.map(function (p, i) {\n    return [p[0], i];\n  });\n  lifted.sort(function (a, b) {\n    return a[0] - b[0];\n  });\n  var cells = new Array(n - 1);\n  for (var i = 1; i < n; ++i) {\n    var a = lifted[i - 1];\n    var b = lifted[i];\n    cells[i - 1] = [a[1], b[1]];\n  }\n  if (includePointAtInfinity) {\n    cells.push([-1, cells[0][1]], [cells[n - 1][1], -1]);\n  }\n  return cells;\n}\nfunction triangulate(points, includePointAtInfinity) {\n  var n = points.length;\n  if (n === 0) {\n    return [];\n  }\n  var d = points[0].length;\n  if (d < 1) {\n    return [];\n  }\n\n  //Special case:  For 1D we can just sort the points\n  if (d === 1) {\n    return triangulate1D(n, points, includePointAtInfinity);\n  }\n\n  //Lift points, sort\n  var lifted = new Array(n);\n  var upper = 1.0;\n  for (var i = 0; i < n; ++i) {\n    var p = points[i];\n    var x = new Array(d + 1);\n    var l = 0.0;\n    for (var j = 0; j < d; ++j) {\n      var v = p[j];\n      x[j] = v;\n      l += v * v;\n    }\n    x[d] = l;\n    lifted[i] = new LiftedPoint(x, i);\n    upper = Math.max(l, upper);\n  }\n  uniq(lifted, compareLifted);\n\n  //Double points\n  n = lifted.length;\n\n  //Create new list of points\n  var dpoints = new Array(n + d + 1);\n  var dindex = new Array(n + d + 1);\n\n  //Add steiner points at top\n  var u = (d + 1) * (d + 1) * upper;\n  var y = new Array(d + 1);\n  for (var i = 0; i <= d; ++i) {\n    y[i] = 0.0;\n  }\n  y[d] = u;\n  dpoints[0] = y.slice();\n  dindex[0] = -1;\n  for (var i = 0; i <= d; ++i) {\n    var x = y.slice();\n    x[i] = 1;\n    dpoints[i + 1] = x;\n    dindex[i + 1] = -1;\n  }\n\n  //Copy rest of the points over\n  for (var i = 0; i < n; ++i) {\n    var h = lifted[i];\n    dpoints[i + d + 1] = h.point;\n    dindex[i + d + 1] = h.index;\n  }\n\n  //Construct convex hull\n  var hull = ch(dpoints, false);\n  if (includePointAtInfinity) {\n    hull = hull.filter(function (cell) {\n      var count = 0;\n      for (var j = 0; j <= d; ++j) {\n        var v = dindex[cell[j]];\n        if (v < 0) {\n          if (++count >= 2) {\n            return false;\n          }\n        }\n        cell[j] = v;\n      }\n      return true;\n    });\n  } else {\n    hull = hull.filter(function (cell) {\n      for (var i = 0; i <= d; ++i) {\n        var v = dindex[cell[i]];\n        if (v < 0) {\n          return false;\n        }\n        cell[i] = v;\n      }\n      return true;\n    });\n  }\n  if (d & 1) {\n    for (var i = 0; i < hull.length; ++i) {\n      var h = hull[i];\n      var x = h[0];\n      h[0] = h[1];\n      h[1] = x;\n    }\n  }\n  return hull;\n}","map":{"version":3,"names":["ch","require","uniq","module","exports","triangulate","LiftedPoint","p","i","point","index","compareLifted","a","b","ap","bp","d","length","s","triangulate1D","n","points","includePointAtInfinity","lifted","map","sort","cells","Array","push","upper","x","l","j","v","Math","max","dpoints","dindex","u","y","slice","h","hull","filter","cell","count"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/delaunay-triangulate/triangulate.js"],"sourcesContent":["\"use strict\"\n\nvar ch = require(\"incremental-convex-hull\")\nvar uniq = require(\"uniq\")\n\nmodule.exports = triangulate\n\nfunction LiftedPoint(p, i) {\n  this.point = p\n  this.index = i\n}\n\nfunction compareLifted(a, b) {\n  var ap = a.point\n  var bp = b.point\n  var d = ap.length\n  for(var i=0; i<d; ++i) {\n    var s = bp[i] - ap[i]\n    if(s) {\n      return s\n    }\n  }\n  return 0\n}\n\nfunction triangulate1D(n, points, includePointAtInfinity) {\n  if(n === 1) {\n    if(includePointAtInfinity) {\n      return [ [-1, 0] ]\n    } else {\n      return []\n    }\n  }\n  var lifted = points.map(function(p, i) {\n    return [ p[0], i ]\n  })\n  lifted.sort(function(a,b) {\n    return a[0] - b[0]\n  })\n  var cells = new Array(n - 1)\n  for(var i=1; i<n; ++i) {\n    var a = lifted[i-1]\n    var b = lifted[i]\n    cells[i-1] = [ a[1], b[1] ]\n  }\n  if(includePointAtInfinity) {\n    cells.push(\n      [ -1, cells[0][1], ],\n      [ cells[n-1][1], -1 ])\n  }\n  return cells\n}\n\nfunction triangulate(points, includePointAtInfinity) {\n  var n = points.length\n  if(n === 0) {\n    return []\n  }\n  \n  var d = points[0].length\n  if(d < 1) {\n    return []\n  }\n\n  //Special case:  For 1D we can just sort the points\n  if(d === 1) {\n    return triangulate1D(n, points, includePointAtInfinity)\n  }\n  \n  //Lift points, sort\n  var lifted = new Array(n)\n  var upper = 1.0\n  for(var i=0; i<n; ++i) {\n    var p = points[i]\n    var x = new Array(d+1)\n    var l = 0.0\n    for(var j=0; j<d; ++j) {\n      var v = p[j]\n      x[j] = v\n      l += v * v\n    }\n    x[d] = l\n    lifted[i] = new LiftedPoint(x, i)\n    upper = Math.max(l, upper)\n  }\n  uniq(lifted, compareLifted)\n  \n  //Double points\n  n = lifted.length\n\n  //Create new list of points\n  var dpoints = new Array(n + d + 1)\n  var dindex = new Array(n + d + 1)\n\n  //Add steiner points at top\n  var u = (d+1) * (d+1) * upper\n  var y = new Array(d+1)\n  for(var i=0; i<=d; ++i) {\n    y[i] = 0.0\n  }\n  y[d] = u\n\n  dpoints[0] = y.slice()\n  dindex[0] = -1\n\n  for(var i=0; i<=d; ++i) {\n    var x = y.slice()\n    x[i] = 1\n    dpoints[i+1] = x\n    dindex[i+1] = -1\n  }\n\n  //Copy rest of the points over\n  for(var i=0; i<n; ++i) {\n    var h = lifted[i]\n    dpoints[i + d + 1] = h.point\n    dindex[i + d + 1] =  h.index\n  }\n\n  //Construct convex hull\n  var hull = ch(dpoints, false)\n  if(includePointAtInfinity) {\n    hull = hull.filter(function(cell) {\n      var count = 0\n      for(var j=0; j<=d; ++j) {\n        var v = dindex[cell[j]]\n        if(v < 0) {\n          if(++count >= 2) {\n            return false\n          }\n        }\n        cell[j] = v\n      }\n      return true\n    })\n  } else {\n    hull = hull.filter(function(cell) {\n      for(var i=0; i<=d; ++i) {\n        var v = dindex[cell[i]]\n        if(v < 0) {\n          return false\n        }\n        cell[i] = v\n      }\n      return true\n    })\n  }\n\n  if(d & 1) {\n    for(var i=0; i<hull.length; ++i) {\n      var h = hull[i]\n      var x = h[0]\n      h[0] = h[1]\n      h[1] = x\n    }\n  }\n\n  return hull\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
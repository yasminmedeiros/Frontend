{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Color = require('../../components/color');\nvar colorscaleAttrs = require('../../components/colorscale/attributes');\nvar colorbarAttrs = require('../../components/colorbar/attributes');\nvar baseAttrs = require('../../plots/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nfunction makeContourProjAttr(axLetter) {\n  return {\n    valType: 'boolean',\n    role: 'info',\n    dflt: false,\n    description: ['Determines whether or not these contour lines are projected', 'on the', axLetter, 'plane.', 'If `highlight` is set to *true* (the default), the projected', 'lines are shown on hover.', 'If `show` is set to *true*, the projected lines are shown', 'in permanence.'].join(' ')\n  };\n}\nfunction makeContourAttr(axLetter) {\n  return {\n    show: {\n      valType: 'boolean',\n      role: 'info',\n      dflt: false,\n      description: ['Determines whether or not contour lines about the', axLetter, 'dimension are drawn.'].join(' ')\n    },\n    project: {\n      x: makeContourProjAttr('x'),\n      y: makeContourProjAttr('y'),\n      z: makeContourProjAttr('z')\n    },\n    color: {\n      valType: 'color',\n      role: 'style',\n      dflt: Color.defaultLine,\n      description: 'Sets the color of the contour lines.'\n    },\n    usecolormap: {\n      valType: 'boolean',\n      role: 'info',\n      dflt: false,\n      description: ['An alternate to *color*.', 'Determines whether or not the contour lines are colored using', 'the trace *colorscale*.'].join(' ')\n    },\n    width: {\n      valType: 'number',\n      role: 'style',\n      min: 1,\n      max: 16,\n      dflt: 2,\n      description: 'Sets the width of the contour lines.'\n    },\n    highlight: {\n      valType: 'boolean',\n      role: 'info',\n      dflt: true,\n      description: ['Determines whether or not contour lines about the', axLetter, 'dimension are highlighted on hover.'].join(' ')\n    },\n    highlightcolor: {\n      valType: 'color',\n      role: 'style',\n      dflt: Color.defaultLine,\n      description: 'Sets the color of the highlighted contour lines.'\n    },\n    highlightwidth: {\n      valType: 'number',\n      role: 'style',\n      min: 1,\n      max: 16,\n      dflt: 2,\n      description: 'Sets the width of the highlighted contour lines.'\n    }\n  };\n}\nvar attrs = module.exports = overrideAll(extendFlat({\n  z: {\n    valType: 'data_array',\n    description: 'Sets the z coordinates.'\n  },\n  x: {\n    valType: 'data_array',\n    description: 'Sets the x coordinates.'\n  },\n  y: {\n    valType: 'data_array',\n    description: 'Sets the y coordinates.'\n  },\n  text: {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    arrayOk: true,\n    description: ['Sets the text elements associated with each z value.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  },\n  surfacecolor: {\n    valType: 'data_array',\n    description: ['Sets the surface color values,', 'used for setting a color scale independent of `z`.'].join(' ')\n  }\n}, colorscaleAttrs('', {\n  colorAttr: 'z or surfacecolor',\n  showScaleDflt: true,\n  autoColorDflt: false,\n  editTypeOverride: 'calc'\n}), {\n  colorbar: colorbarAttrs,\n  contours: {\n    x: makeContourAttr('x'),\n    y: makeContourAttr('y'),\n    z: makeContourAttr('z')\n  },\n  hidesurface: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: false,\n    description: ['Determines whether or not a surface is drawn.', 'For example, set `hidesurface` to *false*', '`contours.x.show` to *true* and', '`contours.y.show` to *true* to draw a wire frame plot.'].join(' ')\n  },\n  lightposition: {\n    x: {\n      valType: 'number',\n      role: 'style',\n      min: -1e5,\n      max: 1e5,\n      dflt: 10,\n      description: 'Numeric vector, representing the X coordinate for each vertex.'\n    },\n    y: {\n      valType: 'number',\n      role: 'style',\n      min: -1e5,\n      max: 1e5,\n      dflt: 1e4,\n      description: 'Numeric vector, representing the Y coordinate for each vertex.'\n    },\n    z: {\n      valType: 'number',\n      role: 'style',\n      min: -1e5,\n      max: 1e5,\n      dflt: 0,\n      description: 'Numeric vector, representing the Z coordinate for each vertex.'\n    }\n  },\n  lighting: {\n    ambient: {\n      valType: 'number',\n      role: 'style',\n      min: 0.00,\n      max: 1.0,\n      dflt: 0.8,\n      description: 'Ambient light increases overall color visibility but can wash out the image.'\n    },\n    diffuse: {\n      valType: 'number',\n      role: 'style',\n      min: 0.00,\n      max: 1.00,\n      dflt: 0.8,\n      description: 'Represents the extent that incident rays are reflected in a range of angles.'\n    },\n    specular: {\n      valType: 'number',\n      role: 'style',\n      min: 0.00,\n      max: 2.00,\n      dflt: 0.05,\n      description: 'Represents the level that incident rays are reflected in a single direction, causing shine.'\n    },\n    roughness: {\n      valType: 'number',\n      role: 'style',\n      min: 0.00,\n      max: 1.00,\n      dflt: 0.5,\n      description: 'Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.'\n    },\n    fresnel: {\n      valType: 'number',\n      role: 'style',\n      min: 0.00,\n      max: 5.00,\n      dflt: 0.2,\n      description: ['Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective', 'when viewing it from the edge of the paper (almost 90 degrees), causing shine.'].join(' ')\n    }\n  },\n  opacity: {\n    valType: 'number',\n    role: 'style',\n    min: 0,\n    max: 1,\n    dflt: 1,\n    description: 'Sets the opacity of the surface.'\n  },\n  _deprecated: {\n    zauto: extendFlat({}, colorscaleAttrs.zauto, {\n      description: 'Obsolete. Use `cauto` instead.'\n    }),\n    zmin: extendFlat({}, colorscaleAttrs.zmin, {\n      description: 'Obsolete. Use `cmin` instead.'\n    }),\n    zmax: extendFlat({}, colorscaleAttrs.zmax, {\n      description: 'Obsolete. Use `cmax` instead.'\n    })\n  },\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo)\n}), 'calc', 'nested');\nattrs.x.editType = attrs.y.editType = attrs.z.editType = 'calc+clearAxisTypes';\nattrs.transforms = undefined;","map":{"version":3,"names":["Color","require","colorscaleAttrs","colorbarAttrs","baseAttrs","extendFlat","overrideAll","makeContourProjAttr","axLetter","valType","role","dflt","description","join","makeContourAttr","show","project","x","y","z","color","defaultLine","usecolormap","width","min","max","highlight","highlightcolor","highlightwidth","attrs","module","exports","text","arrayOk","surfacecolor","colorAttr","showScaleDflt","autoColorDflt","editTypeOverride","colorbar","contours","hidesurface","lightposition","lighting","ambient","diffuse","specular","roughness","fresnel","opacity","_deprecated","zauto","zmin","zmax","hoverinfo","editType","transforms","undefined"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/surface/attributes.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Color = require('../../components/color');\nvar colorscaleAttrs = require('../../components/colorscale/attributes');\nvar colorbarAttrs = require('../../components/colorbar/attributes');\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nfunction makeContourProjAttr(axLetter) {\n    return {\n        valType: 'boolean',\n        role: 'info',\n        dflt: false,\n        description: [\n            'Determines whether or not these contour lines are projected',\n            'on the', axLetter, 'plane.',\n            'If `highlight` is set to *true* (the default), the projected',\n            'lines are shown on hover.',\n            'If `show` is set to *true*, the projected lines are shown',\n            'in permanence.'\n        ].join(' ')\n    };\n}\n\nfunction makeContourAttr(axLetter) {\n    return {\n        show: {\n            valType: 'boolean',\n            role: 'info',\n            dflt: false,\n            description: [\n                'Determines whether or not contour lines about the', axLetter,\n                'dimension are drawn.'\n            ].join(' ')\n        },\n        project: {\n            x: makeContourProjAttr('x'),\n            y: makeContourProjAttr('y'),\n            z: makeContourProjAttr('z')\n        },\n        color: {\n            valType: 'color',\n            role: 'style',\n            dflt: Color.defaultLine,\n            description: 'Sets the color of the contour lines.'\n        },\n        usecolormap: {\n            valType: 'boolean',\n            role: 'info',\n            dflt: false,\n            description: [\n                'An alternate to *color*.',\n                'Determines whether or not the contour lines are colored using',\n                'the trace *colorscale*.'\n            ].join(' ')\n        },\n        width: {\n            valType: 'number',\n            role: 'style',\n            min: 1,\n            max: 16,\n            dflt: 2,\n            description: 'Sets the width of the contour lines.'\n        },\n        highlight: {\n            valType: 'boolean',\n            role: 'info',\n            dflt: true,\n            description: [\n                'Determines whether or not contour lines about the', axLetter,\n                'dimension are highlighted on hover.'\n            ].join(' ')\n        },\n        highlightcolor: {\n            valType: 'color',\n            role: 'style',\n            dflt: Color.defaultLine,\n            description: 'Sets the color of the highlighted contour lines.'\n        },\n        highlightwidth: {\n            valType: 'number',\n            role: 'style',\n            min: 1,\n            max: 16,\n            dflt: 2,\n            description: 'Sets the width of the highlighted contour lines.'\n        }\n    };\n}\n\nvar attrs = module.exports = overrideAll(extendFlat({\n    z: {\n        valType: 'data_array',\n        description: 'Sets the z coordinates.'\n    },\n    x: {\n        valType: 'data_array',\n        description: 'Sets the x coordinates.'\n    },\n    y: {\n        valType: 'data_array',\n        description: 'Sets the y coordinates.'\n    },\n\n    text: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        arrayOk: true,\n        description: [\n            'Sets the text elements associated with each z value.',\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\n            'these elements will be seen in the hover labels.'\n        ].join(' ')\n    },\n\n    surfacecolor: {\n        valType: 'data_array',\n        description: [\n            'Sets the surface color values,',\n            'used for setting a color scale independent of `z`.'\n        ].join(' ')\n    },\n},\n\ncolorscaleAttrs('', {\n    colorAttr: 'z or surfacecolor',\n    showScaleDflt: true,\n    autoColorDflt: false,\n    editTypeOverride: 'calc'\n}), {\n    colorbar: colorbarAttrs,\n\n    contours: {\n        x: makeContourAttr('x'),\n        y: makeContourAttr('y'),\n        z: makeContourAttr('z')\n    },\n    hidesurface: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: false,\n        description: [\n            'Determines whether or not a surface is drawn.',\n            'For example, set `hidesurface` to *false*',\n            '`contours.x.show` to *true* and',\n            '`contours.y.show` to *true* to draw a wire frame plot.'\n        ].join(' ')\n    },\n\n    lightposition: {\n        x: {\n            valType: 'number',\n            role: 'style',\n            min: -1e5,\n            max: 1e5,\n            dflt: 10,\n            description: 'Numeric vector, representing the X coordinate for each vertex.'\n        },\n        y: {\n            valType: 'number',\n            role: 'style',\n            min: -1e5,\n            max: 1e5,\n            dflt: 1e4,\n            description: 'Numeric vector, representing the Y coordinate for each vertex.'\n        },\n        z: {\n            valType: 'number',\n            role: 'style',\n            min: -1e5,\n            max: 1e5,\n            dflt: 0,\n            description: 'Numeric vector, representing the Z coordinate for each vertex.'\n        }\n    },\n\n    lighting: {\n        ambient: {\n            valType: 'number',\n            role: 'style',\n            min: 0.00,\n            max: 1.0,\n            dflt: 0.8,\n            description: 'Ambient light increases overall color visibility but can wash out the image.'\n        },\n        diffuse: {\n            valType: 'number',\n            role: 'style',\n            min: 0.00,\n            max: 1.00,\n            dflt: 0.8,\n            description: 'Represents the extent that incident rays are reflected in a range of angles.'\n        },\n        specular: {\n            valType: 'number',\n            role: 'style',\n            min: 0.00,\n            max: 2.00,\n            dflt: 0.05,\n            description: 'Represents the level that incident rays are reflected in a single direction, causing shine.'\n        },\n        roughness: {\n            valType: 'number',\n            role: 'style',\n            min: 0.00,\n            max: 1.00,\n            dflt: 0.5,\n            description: 'Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.'\n        },\n        fresnel: {\n            valType: 'number',\n            role: 'style',\n            min: 0.00,\n            max: 5.00,\n            dflt: 0.2,\n            description: [\n                'Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective',\n                'when viewing it from the edge of the paper (almost 90 degrees), causing shine.'\n            ].join(' ')\n        }\n    },\n\n    opacity: {\n        valType: 'number',\n        role: 'style',\n        min: 0,\n        max: 1,\n        dflt: 1,\n        description: 'Sets the opacity of the surface.'\n    },\n\n    _deprecated: {\n        zauto: extendFlat({}, colorscaleAttrs.zauto, {\n            description: 'Obsolete. Use `cauto` instead.'\n        }),\n        zmin: extendFlat({}, colorscaleAttrs.zmin, {\n            description: 'Obsolete. Use `cmin` instead.'\n        }),\n        zmax: extendFlat({}, colorscaleAttrs.zmax, {\n            description: 'Obsolete. Use `cmax` instead.'\n        })\n    },\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo)\n}), 'calc', 'nested');\n\nattrs.x.editType = attrs.y.editType = attrs.z.editType = 'calc+clearAxisTypes';\nattrs.transforms = undefined;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
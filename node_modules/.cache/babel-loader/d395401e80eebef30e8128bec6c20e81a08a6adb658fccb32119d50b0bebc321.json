{"ast":null,"code":"'use strict';\n\nvar getBounds = require('array-bounds');\nvar rgba = require('color-normalize');\nvar updateDiff = require('update-diff');\nvar pick = require('pick-by-alias');\nvar extend = require('object-assign');\nvar flatten = require('flatten-vertex-data');\nvar _require = require('to-float32'),\n  float32 = _require.float32,\n  fract32 = _require.fract32;\nmodule.exports = Error2D;\nvar WEIGHTS = [\n//direction, lineWidth shift, capSize shift\n\n// x-error bar\n[1, 0, 0, 1, 0, 0], [1, 0, 0, -1, 0, 0], [-1, 0, 0, -1, 0, 0], [-1, 0, 0, -1, 0, 0], [-1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0],\n// x-error right cap\n[1, 0, -1, 0, 0, 1], [1, 0, -1, 0, 0, -1], [1, 0, 1, 0, 0, -1], [1, 0, 1, 0, 0, -1], [1, 0, 1, 0, 0, 1], [1, 0, -1, 0, 0, 1],\n// x-error left cap\n[-1, 0, -1, 0, 0, 1], [-1, 0, -1, 0, 0, -1], [-1, 0, 1, 0, 0, -1], [-1, 0, 1, 0, 0, -1], [-1, 0, 1, 0, 0, 1], [-1, 0, -1, 0, 0, 1],\n// y-error bar\n[0, 1, 1, 0, 0, 0], [0, 1, -1, 0, 0, 0], [0, -1, -1, 0, 0, 0], [0, -1, -1, 0, 0, 0], [0, 1, 1, 0, 0, 0], [0, -1, 1, 0, 0, 0],\n// y-error top cap\n[0, 1, 0, -1, 1, 0], [0, 1, 0, -1, -1, 0], [0, 1, 0, 1, -1, 0], [0, 1, 0, 1, 1, 0], [0, 1, 0, -1, 1, 0], [0, 1, 0, 1, -1, 0],\n// y-error bottom cap\n[0, -1, 0, -1, 1, 0], [0, -1, 0, -1, -1, 0], [0, -1, 0, 1, -1, 0], [0, -1, 0, 1, 1, 0], [0, -1, 0, -1, 1, 0], [0, -1, 0, 1, -1, 0]];\nfunction Error2D(regl, options) {\n  if (typeof regl === 'function') {\n    if (!options) options = {};\n    options.regl = regl;\n  } else {\n    options = regl;\n  }\n  if (options.length) options.positions = options;\n  regl = options.regl;\n  if (!regl.hasExtension('ANGLE_instanced_arrays')) {\n    throw Error('regl-error2d: `ANGLE_instanced_arrays` extension should be enabled');\n  }\n\n  // persistent variables\n  var gl = regl._gl,\n    drawErrors,\n    positionBuffer,\n    positionFractBuffer,\n    colorBuffer,\n    errorBuffer,\n    meshBuffer,\n    defaults = {\n      color: 'black',\n      capSize: 5,\n      lineWidth: 1,\n      opacity: 1,\n      viewport: null,\n      range: null,\n      offset: 0,\n      count: 0,\n      bounds: null,\n      positions: [],\n      errors: []\n    },\n    groups = [];\n\n  //color per-point\n  colorBuffer = regl.buffer({\n    usage: 'dynamic',\n    type: 'uint8',\n    data: new Uint8Array(0)\n  });\n  //xy-position per-point\n  positionBuffer = regl.buffer({\n    usage: 'dynamic',\n    type: 'float',\n    data: new Uint8Array(0)\n  });\n  //xy-position float32-fraction\n  positionFractBuffer = regl.buffer({\n    usage: 'dynamic',\n    type: 'float',\n    data: new Uint8Array(0)\n  });\n  //4 errors per-point\n  errorBuffer = regl.buffer({\n    usage: 'dynamic',\n    type: 'float',\n    data: new Uint8Array(0)\n  });\n  //error bar mesh\n  meshBuffer = regl.buffer({\n    usage: 'static',\n    type: 'float',\n    data: WEIGHTS\n  });\n  update(options);\n\n  //drawing method\n  drawErrors = regl({\n    vert: \"\\n\\t\\tprecision highp float;\\n\\n\\t\\tattribute vec2 position, positionFract;\\n\\t\\tattribute vec4 error;\\n\\t\\tattribute vec4 color;\\n\\n\\t\\tattribute vec2 direction, lineOffset, capOffset;\\n\\n\\t\\tuniform vec4 viewport;\\n\\t\\tuniform float lineWidth, capSize;\\n\\t\\tuniform vec2 scale, scaleFract, translate, translateFract;\\n\\n\\t\\tvarying vec4 fragColor;\\n\\n\\t\\tvoid main() {\\n\\t\\t\\tfragColor = color / 255.;\\n\\n\\t\\t\\tvec2 pixelOffset = lineWidth * lineOffset + (capSize + lineWidth) * capOffset;\\n\\n\\t\\t\\tvec2 dxy = -step(.5, direction.xy) * error.xz + step(direction.xy, vec2(-.5)) * error.yw;\\n\\n\\t\\t\\tvec2 position = position + dxy;\\n\\n\\t\\t\\tvec2 pos = (position + translate) * scale\\n\\t\\t\\t\\t+ (positionFract + translateFract) * scale\\n\\t\\t\\t\\t+ (position + translate) * scaleFract\\n\\t\\t\\t\\t+ (positionFract + translateFract) * scaleFract;\\n\\n\\t\\t\\tpos += pixelOffset / viewport.zw;\\n\\n\\t\\t\\tgl_Position = vec4(pos * 2. - 1., 0, 1);\\n\\t\\t}\\n\\t\\t\",\n    frag: \"\\n\\t\\tprecision highp float;\\n\\n\\t\\tvarying vec4 fragColor;\\n\\n\\t\\tuniform float opacity;\\n\\n\\t\\tvoid main() {\\n\\t\\t\\tgl_FragColor = fragColor;\\n\\t\\t\\tgl_FragColor.a *= opacity;\\n\\t\\t}\\n\\t\\t\",\n    uniforms: {\n      range: regl.prop('range'),\n      lineWidth: regl.prop('lineWidth'),\n      capSize: regl.prop('capSize'),\n      opacity: regl.prop('opacity'),\n      scale: regl.prop('scale'),\n      translate: regl.prop('translate'),\n      scaleFract: regl.prop('scaleFract'),\n      translateFract: regl.prop('translateFract'),\n      viewport: function viewport(ctx, prop) {\n        return [prop.viewport.x, prop.viewport.y, ctx.viewportWidth, ctx.viewportHeight];\n      }\n    },\n    attributes: {\n      //dynamic attributes\n      color: {\n        buffer: colorBuffer,\n        offset: function offset(ctx, prop) {\n          return prop.offset * 4;\n        },\n        divisor: 1\n      },\n      position: {\n        buffer: positionBuffer,\n        offset: function offset(ctx, prop) {\n          return prop.offset * 8;\n        },\n        divisor: 1\n      },\n      positionFract: {\n        buffer: positionFractBuffer,\n        offset: function offset(ctx, prop) {\n          return prop.offset * 8;\n        },\n        divisor: 1\n      },\n      error: {\n        buffer: errorBuffer,\n        offset: function offset(ctx, prop) {\n          return prop.offset * 16;\n        },\n        divisor: 1\n      },\n      //static attributes\n      direction: {\n        buffer: meshBuffer,\n        stride: 24,\n        offset: 0\n      },\n      lineOffset: {\n        buffer: meshBuffer,\n        stride: 24,\n        offset: 8\n      },\n      capOffset: {\n        buffer: meshBuffer,\n        stride: 24,\n        offset: 16\n      }\n    },\n    primitive: 'triangles',\n    blend: {\n      enable: true,\n      color: [0, 0, 0, 0],\n      equation: {\n        rgb: 'add',\n        alpha: 'add'\n      },\n      func: {\n        srcRGB: 'src alpha',\n        dstRGB: 'one minus src alpha',\n        srcAlpha: 'one minus dst alpha',\n        dstAlpha: 'one'\n      }\n    },\n    depth: {\n      enable: false\n    },\n    scissor: {\n      enable: true,\n      box: regl.prop('viewport')\n    },\n    viewport: regl.prop('viewport'),\n    stencil: false,\n    instances: regl.prop('count'),\n    count: WEIGHTS.length\n  });\n\n  //expose API\n  extend(error2d, {\n    update: update,\n    draw: draw,\n    destroy: destroy,\n    regl: regl,\n    gl: gl,\n    canvas: gl.canvas,\n    groups: groups\n  });\n  return error2d;\n  function error2d(opts) {\n    //update\n    if (opts) {\n      update(opts);\n    }\n\n    //destroy\n    else if (opts === null) {\n      destroy();\n    }\n    draw();\n  }\n\n  //main draw method\n  function draw(options) {\n    if (typeof options === 'number') return drawGroup(options);\n\n    //make options a batch\n    if (options && !Array.isArray(options)) options = [options];\n    regl._refresh();\n\n    //render multiple polylines via regl batch\n    groups.forEach(function (s, i) {\n      if (!s) return;\n      if (options) {\n        if (!options[i]) s.draw = false;else s.draw = true;\n      }\n\n      //ignore draw flag for one pass\n      if (!s.draw) {\n        s.draw = true;\n        return;\n      }\n      drawGroup(i);\n    });\n  }\n\n  //draw single error group by id\n  function drawGroup(s) {\n    if (typeof s === 'number') s = groups[s];\n    if (s == null) return;\n    if (!(s && s.count && s.color && s.opacity && s.positions && s.positions.length > 1)) return;\n    s.scaleRatio = [s.scale[0] * s.viewport.width, s.scale[1] * s.viewport.height];\n    drawErrors(s);\n    if (s.after) s.after(s);\n  }\n  function update(options) {\n    if (!options) return;\n\n    //direct points argument\n    if (options.length != null) {\n      if (typeof options[0] === 'number') options = [{\n        positions: options\n      }];\n    }\n\n    //make options a batch\n    else if (!Array.isArray(options)) options = [options];\n\n    //global count of points\n    var pointCount = 0,\n      errorCount = 0;\n    error2d.groups = groups = options.map(function (options, i) {\n      var group = groups[i];\n      if (!options) return group;else if (typeof options === 'function') options = {\n        after: options\n      };else if (typeof options[0] === 'number') options = {\n        positions: options\n      };\n\n      //copy options to avoid mutation & handle aliases\n      options = pick(options, {\n        color: 'color colors fill',\n        capSize: 'capSize cap capsize cap-size',\n        lineWidth: 'lineWidth line-width width line thickness',\n        opacity: 'opacity alpha',\n        range: 'range dataBox',\n        viewport: 'viewport viewBox',\n        errors: 'errors error',\n        positions: 'positions position data points'\n      });\n      if (!group) {\n        groups[i] = group = {\n          id: i,\n          scale: null,\n          translate: null,\n          scaleFract: null,\n          translateFract: null,\n          draw: true\n        };\n        options = extend({}, defaults, options);\n      }\n      updateDiff(group, options, [{\n        lineWidth: function lineWidth(v) {\n          return +v * .5;\n        },\n        capSize: function capSize(v) {\n          return +v * .5;\n        },\n        opacity: parseFloat,\n        errors: function errors(_errors) {\n          _errors = flatten(_errors);\n          errorCount += _errors.length;\n          return _errors;\n        },\n        positions: function positions(_positions, state) {\n          _positions = flatten(_positions, 'float64');\n          state.count = Math.floor(_positions.length / 2);\n          state.bounds = getBounds(_positions, 2);\n          state.offset = pointCount;\n          pointCount += state.count;\n          return _positions;\n        }\n      }, {\n        color: function color(colors, state) {\n          var count = state.count;\n          if (!colors) colors = 'transparent';\n\n          // 'black' or [0,0,0,0] case\n          if (!Array.isArray(colors) || typeof colors[0] === 'number') {\n            var color = colors;\n            colors = Array(count);\n            for (var _i = 0; _i < count; _i++) {\n              colors[_i] = color;\n            }\n          }\n          if (colors.length < count) throw Error('Not enough colors');\n          var colorData = new Uint8Array(count * 4);\n\n          //convert colors to float arrays\n          for (var _i2 = 0; _i2 < count; _i2++) {\n            var c = rgba(colors[_i2], 'uint8');\n            colorData.set(c, _i2 * 4);\n          }\n          return colorData;\n        },\n        range: function range(_range, state, options) {\n          var bounds = state.bounds;\n          if (!_range) _range = bounds;\n          state.scale = [1 / (_range[2] - _range[0]), 1 / (_range[3] - _range[1])];\n          state.translate = [-_range[0], -_range[1]];\n          state.scaleFract = fract32(state.scale);\n          state.translateFract = fract32(state.translate);\n          return _range;\n        },\n        viewport: function viewport(vp) {\n          var viewport;\n          if (Array.isArray(vp)) {\n            viewport = {\n              x: vp[0],\n              y: vp[1],\n              width: vp[2] - vp[0],\n              height: vp[3] - vp[1]\n            };\n          } else if (vp) {\n            viewport = {\n              x: vp.x || vp.left || 0,\n              y: vp.y || vp.top || 0\n            };\n            if (vp.right) viewport.width = vp.right - viewport.x;else viewport.width = vp.w || vp.width || 0;\n            if (vp.bottom) viewport.height = vp.bottom - viewport.y;else viewport.height = vp.h || vp.height || 0;\n          } else {\n            viewport = {\n              x: 0,\n              y: 0,\n              width: gl.drawingBufferWidth,\n              height: gl.drawingBufferHeight\n            };\n          }\n          return viewport;\n        }\n      }]);\n      return group;\n    });\n    if (pointCount || errorCount) {\n      var len = groups.reduce(function (acc, group, i) {\n        return acc + (group ? group.count : 0);\n      }, 0);\n      var positionData = new Float64Array(len * 2);\n      var colorData = new Uint8Array(len * 4);\n      var errorData = new Float32Array(len * 4);\n      groups.forEach(function (group, i) {\n        if (!group) return;\n        var positions = group.positions,\n          count = group.count,\n          offset = group.offset,\n          color = group.color,\n          errors = group.errors;\n        if (!count) return;\n        colorData.set(color, offset * 4);\n        errorData.set(errors, offset * 4);\n        positionData.set(positions, offset * 2);\n      });\n      positionBuffer(float32(positionData));\n      positionFractBuffer(fract32(positionData));\n      colorBuffer(colorData);\n      errorBuffer(errorData);\n    }\n  }\n  function destroy() {\n    positionBuffer.destroy();\n    positionFractBuffer.destroy();\n    colorBuffer.destroy();\n    errorBuffer.destroy();\n    meshBuffer.destroy();\n  }\n}","map":{"version":3,"names":["getBounds","require","rgba","updateDiff","pick","extend","flatten","float32","fract32","module","exports","Error2D","WEIGHTS","regl","options","length","positions","hasExtension","Error","gl","_gl","drawErrors","positionBuffer","positionFractBuffer","colorBuffer","errorBuffer","meshBuffer","defaults","color","capSize","lineWidth","opacity","viewport","range","offset","count","bounds","errors","groups","buffer","usage","type","data","Uint8Array","update","vert","frag","uniforms","prop","scale","translate","scaleFract","translateFract","ctx","x","y","viewportWidth","viewportHeight","attributes","divisor","position","positionFract","error","direction","stride","lineOffset","capOffset","primitive","blend","enable","equation","rgb","alpha","func","srcRGB","dstRGB","srcAlpha","dstAlpha","depth","scissor","box","stencil","instances","error2d","draw","destroy","canvas","opts","drawGroup","Array","isArray","_refresh","forEach","s","i","scaleRatio","width","height","after","pointCount","errorCount","map","group","id","v","parseFloat","state","Math","floor","colors","colorData","c","set","vp","left","top","right","w","bottom","h","drawingBufferWidth","drawingBufferHeight","len","reduce","acc","positionData","Float64Array","errorData","Float32Array"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/regl-error2d/index.js"],"sourcesContent":["'use strict'\n\nconst getBounds = require('array-bounds')\nconst rgba = require('color-normalize')\nconst updateDiff = require('update-diff')\nconst pick = require('pick-by-alias')\nconst extend = require('object-assign')\nconst flatten = require('flatten-vertex-data')\nconst {float32, fract32} = require('to-float32')\n\nmodule.exports = Error2D\n\nconst WEIGHTS = [\n\t//direction, lineWidth shift, capSize shift\n\n\t// x-error bar\n\t[1, 0, 0, 1, 0, 0],\n\t[1, 0, 0, -1, 0, 0],\n\t[-1, 0, 0, -1, 0, 0],\n\n\t[-1, 0, 0, -1, 0, 0],\n\t[-1, 0, 0, 1, 0, 0],\n\t[1, 0, 0, 1, 0, 0],\n\n\t// x-error right cap\n\t[1, 0, -1, 0, 0, 1],\n\t[1, 0, -1, 0, 0, -1],\n\t[1, 0, 1, 0, 0, -1],\n\n\t[1, 0, 1, 0, 0, -1],\n\t[1, 0, 1, 0, 0, 1],\n\t[1, 0, -1, 0, 0, 1],\n\n\t// x-error left cap\n\t[-1, 0, -1, 0, 0, 1],\n\t[-1, 0, -1, 0, 0, -1],\n\t[-1, 0, 1, 0, 0, -1],\n\n\t[-1, 0, 1, 0, 0, -1],\n\t[-1, 0, 1, 0, 0, 1],\n\t[-1, 0, -1, 0, 0, 1],\n\n\t// y-error bar\n\t[0, 1, 1, 0, 0, 0],\n\t[0, 1, -1, 0, 0, 0],\n\t[0, -1, -1, 0, 0, 0],\n\n\t[0, -1, -1, 0, 0, 0],\n\t[0, 1, 1, 0, 0, 0],\n\t[0, -1, 1, 0, 0, 0],\n\n\t// y-error top cap\n\t[0, 1, 0, -1, 1, 0],\n\t[0, 1, 0, -1, -1, 0],\n\t[0, 1, 0, 1, -1, 0],\n\n\t[0, 1, 0, 1, 1, 0],\n\t[0, 1, 0, -1, 1, 0],\n\t[0, 1, 0, 1, -1, 0],\n\n\t// y-error bottom cap\n\t[0, -1, 0, -1, 1, 0],\n\t[0, -1, 0, -1, -1, 0],\n\t[0, -1, 0, 1, -1, 0],\n\n\t[0, -1, 0, 1, 1, 0],\n\t[0, -1, 0, -1, 1, 0],\n\t[0, -1, 0, 1, -1, 0]\n]\n\n\nfunction Error2D (regl, options) {\n\tif (typeof regl === 'function') {\n\t\tif (!options) options = {}\n\t\toptions.regl = regl\n\t}\n\telse {\n\t\toptions = regl\n\t}\n\tif (options.length) options.positions = options\n\tregl = options.regl\n\n\tif (!regl.hasExtension('ANGLE_instanced_arrays')) {\n\t\tthrow Error('regl-error2d: `ANGLE_instanced_arrays` extension should be enabled');\n\t}\n\n\t// persistent variables\n\tlet gl = regl._gl, drawErrors, positionBuffer, positionFractBuffer, colorBuffer, errorBuffer, meshBuffer,\n\t\t\tdefaults = {\n\t\t\t\tcolor: 'black',\n\t\t\t\tcapSize: 5,\n\t\t\t\tlineWidth: 1,\n\t\t\t\topacity: 1,\n\t\t\t\tviewport: null,\n\t\t\t\trange: null,\n\t\t\t\toffset: 0,\n\t\t\t\tcount: 0,\n\t\t\t\tbounds: null,\n\t\t\t\tpositions: [],\n\t\t\t\terrors: []\n\t\t\t}, groups = []\n\n\t//color per-point\n\tcolorBuffer = regl.buffer({\n\t\tusage: 'dynamic',\n\t\ttype: 'uint8',\n\t\tdata: new Uint8Array(0)\n\t})\n\t//xy-position per-point\n\tpositionBuffer = regl.buffer({\n\t\tusage: 'dynamic',\n\t\ttype: 'float',\n\t\tdata: new Uint8Array(0)\n\t})\n\t//xy-position float32-fraction\n\tpositionFractBuffer = regl.buffer({\n\t\tusage: 'dynamic',\n\t\ttype: 'float',\n\t\tdata: new Uint8Array(0)\n\t})\n\t//4 errors per-point\n\terrorBuffer = regl.buffer({\n\t\tusage: 'dynamic',\n\t\ttype: 'float',\n\t\tdata: new Uint8Array(0)\n\t})\n\t//error bar mesh\n\tmeshBuffer = regl.buffer({\n\t\tusage: 'static',\n\t\ttype: 'float',\n\t\tdata: WEIGHTS\n\t})\n\n\tupdate(options)\n\n\t//drawing method\n\tdrawErrors = regl({\n\t\tvert: `\n\t\tprecision highp float;\n\n\t\tattribute vec2 position, positionFract;\n\t\tattribute vec4 error;\n\t\tattribute vec4 color;\n\n\t\tattribute vec2 direction, lineOffset, capOffset;\n\n\t\tuniform vec4 viewport;\n\t\tuniform float lineWidth, capSize;\n\t\tuniform vec2 scale, scaleFract, translate, translateFract;\n\n\t\tvarying vec4 fragColor;\n\n\t\tvoid main() {\n\t\t\tfragColor = color / 255.;\n\n\t\t\tvec2 pixelOffset = lineWidth * lineOffset + (capSize + lineWidth) * capOffset;\n\n\t\t\tvec2 dxy = -step(.5, direction.xy) * error.xz + step(direction.xy, vec2(-.5)) * error.yw;\n\n\t\t\tvec2 position = position + dxy;\n\n\t\t\tvec2 pos = (position + translate) * scale\n\t\t\t\t+ (positionFract + translateFract) * scale\n\t\t\t\t+ (position + translate) * scaleFract\n\t\t\t\t+ (positionFract + translateFract) * scaleFract;\n\n\t\t\tpos += pixelOffset / viewport.zw;\n\n\t\t\tgl_Position = vec4(pos * 2. - 1., 0, 1);\n\t\t}\n\t\t`,\n\n\t\tfrag: `\n\t\tprecision highp float;\n\n\t\tvarying vec4 fragColor;\n\n\t\tuniform float opacity;\n\n\t\tvoid main() {\n\t\t\tgl_FragColor = fragColor;\n\t\t\tgl_FragColor.a *= opacity;\n\t\t}\n\t\t`,\n\n\t\tuniforms: {\n\t\t\trange: regl.prop('range'),\n\t\t\tlineWidth: regl.prop('lineWidth'),\n\t\t\tcapSize: regl.prop('capSize'),\n\t\t\topacity: regl.prop('opacity'),\n\t\t\tscale: regl.prop('scale'),\n\t\t\ttranslate: regl.prop('translate'),\n\t\t\tscaleFract: regl.prop('scaleFract'),\n\t\t\ttranslateFract: regl.prop('translateFract'),\n\t\t\tviewport: (ctx, prop) => [prop.viewport.x, prop.viewport.y, ctx.viewportWidth, ctx.viewportHeight]\n\t\t},\n\n\t\tattributes: {\n\t\t\t//dynamic attributes\n\t\t\tcolor: {\n\t\t\t\tbuffer: colorBuffer,\n\t\t\t\toffset: (ctx, prop) => prop.offset * 4,\n\t\t\t\tdivisor: 1,\n\t\t\t},\n\t\t\tposition: {\n\t\t\t\tbuffer: positionBuffer,\n\t\t\t\toffset: (ctx, prop) => prop.offset * 8,\n\t\t\t\tdivisor: 1\n\t\t\t},\n\t\t\tpositionFract: {\n\t\t\t\tbuffer: positionFractBuffer,\n\t\t\t\toffset: (ctx, prop) => prop.offset * 8,\n\t\t\t\tdivisor: 1\n\t\t\t},\n\t\t\terror: {\n\t\t\t\tbuffer: errorBuffer,\n\t\t\t\toffset: (ctx, prop) => prop.offset * 16,\n\t\t\t\tdivisor: 1\n\t\t\t},\n\n\t\t\t//static attributes\n\t\t\tdirection: {\n\t\t\t\tbuffer: meshBuffer,\n\t\t\t\tstride: 24,\n\t\t\t\toffset: 0\n\t\t\t},\n\t\t\tlineOffset: {\n\t\t\t\tbuffer: meshBuffer,\n\t\t\t\tstride: 24,\n\t\t\t\toffset: 8\n\t\t\t},\n\t\t\tcapOffset: {\n\t\t\t\tbuffer: meshBuffer,\n\t\t\t\tstride: 24,\n\t\t\t\toffset: 16\n\t\t\t}\n\t\t},\n\n\t\tprimitive: 'triangles',\n\n\t\tblend: {\n\t\t\tenable: true,\n\t\t\tcolor: [0,0,0,0],\n\t\t\tequation: {\n\t\t\t\trgb: 'add',\n\t\t\t\talpha: 'add'\n\t\t\t},\n\t\t\tfunc: {\n\t\t\t\tsrcRGB: 'src alpha',\n\t\t\t\tdstRGB: 'one minus src alpha',\n\t\t\t\tsrcAlpha: 'one minus dst alpha',\n\t\t\t\tdstAlpha: 'one'\n\t\t\t}\n\t\t},\n\n\t\tdepth: {\n\t\t\tenable: false\n\t\t},\n\n\t\tscissor: {\n\t\t\tenable: true,\n\t\t\tbox: regl.prop('viewport')\n\t\t},\n\t\tviewport: regl.prop('viewport'),\n\t\tstencil: false,\n\n\t\tinstances: regl.prop('count'),\n\t\tcount: WEIGHTS.length\n\t})\n\n\t//expose API\n\textend(error2d, {\n\t\tupdate: update,\n\t\tdraw: draw,\n\t\tdestroy: destroy,\n\t\tregl: regl,\n\t\tgl: gl,\n\t\tcanvas: gl.canvas,\n\t\tgroups: groups\n\t})\n\n\treturn error2d\n\n\tfunction error2d (opts) {\n\t\t//update\n\t\tif (opts) {\n\t\t\tupdate(opts)\n\t\t}\n\n\t\t//destroy\n\t\telse if (opts === null) {\n\t\t\tdestroy()\n\t\t}\n\n\t\tdraw()\n\t}\n\n\n\t//main draw method\n\tfunction draw (options) {\n\t\tif (typeof options === 'number') return drawGroup(options)\n\n\t\t//make options a batch\n\t\tif (options && !Array.isArray(options)) options = [options]\n\n\n\t\tregl._refresh()\n\n\t\t//render multiple polylines via regl batch\n\t\tgroups.forEach((s, i) => {\n\t\t\tif (!s) return\n\n\t\t\tif (options) {\n\t\t\t\tif (!options[i]) s.draw = false\n\t\t\t\telse s.draw = true\n\t\t\t}\n\n\t\t\t//ignore draw flag for one pass\n\t\t\tif (!s.draw) {\n\t\t\t\ts.draw = true;\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tdrawGroup(i)\n\t\t})\n\t}\n\n\t//draw single error group by id\n\tfunction drawGroup (s) {\n\t\tif (typeof s === 'number') s = groups[s]\n\t\tif (s == null) return\n\n\t\tif (!(s && s.count && s.color && s.opacity && s.positions && s.positions.length > 1)) return\n\n\t\ts.scaleRatio = [\n\t\t\ts.scale[0] * s.viewport.width,\n\t\t\ts.scale[1] * s.viewport.height\n\t\t]\n\n\t\tdrawErrors(s)\n\n\t\tif (s.after) s.after(s)\n\t}\n\n\tfunction update (options) {\n\t\tif (!options) return\n\n\t\t//direct points argument\n\t\tif (options.length != null) {\n\t\t\tif (typeof options[0] === 'number') options = [{positions: options}]\n\t\t}\n\n\t\t//make options a batch\n\t\telse if (!Array.isArray(options)) options = [options]\n\n\t\t//global count of points\n\t\tlet pointCount = 0, errorCount = 0\n\n\t\terror2d.groups = groups = options.map((options, i) => {\n\t\t\tlet group = groups[i]\n\n\t\t\tif (!options) return group\n\t\t\telse if (typeof options === 'function') options = {after: options}\n\t\t\telse if (typeof options[0] === 'number') options = {positions: options}\n\n\t\t\t//copy options to avoid mutation & handle aliases\n\t\t\toptions = pick(options, {\n\t\t\t\tcolor: 'color colors fill',\n\t\t\t\tcapSize: 'capSize cap capsize cap-size',\n\t\t\t\tlineWidth: 'lineWidth line-width width line thickness',\n\t\t\t\topacity: 'opacity alpha',\n\t\t\t\trange: 'range dataBox',\n\t\t\t\tviewport: 'viewport viewBox',\n\t\t\t\terrors: 'errors error',\n\t\t\t\tpositions: 'positions position data points'\n\t\t\t})\n\n\t\t\tif (!group) {\n\t\t\t\tgroups[i] = group = {\n\t\t\t\t\tid: i,\n\t\t\t\t\tscale: null,\n\t\t\t\t\ttranslate: null,\n\t\t\t\t\tscaleFract: null,\n\t\t\t\t\ttranslateFract: null,\n\t\t\t\t\tdraw: true\n\t\t\t\t}\n\t\t\t\toptions = extend({}, defaults, options)\n\t\t\t}\n\n\t\t\tupdateDiff(group, options, [{\n\t\t\t\tlineWidth: v => +v * .5,\n\t\t\t\tcapSize: v => +v * .5,\n\t\t\t\topacity: parseFloat,\n\t\t\t\terrors: errors => {\n\t\t\t\t\terrors = flatten(errors)\n\n\t\t\t\t\terrorCount += errors.length\n\t\t\t\t\treturn errors\n\t\t\t\t},\n\t\t\t\tpositions: (positions, state) => {\n\t\t\t\t\tpositions = flatten(positions, 'float64')\n\t\t\t\t\tstate.count = Math.floor(positions.length / 2)\n\t\t\t\t\tstate.bounds = getBounds(positions, 2)\n\t\t\t\t\tstate.offset = pointCount\n\n\t\t\t\t\tpointCount += state.count\n\n\t\t\t\t\treturn positions\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tcolor: (colors, state) => {\n\t\t\t\t\tlet count = state.count\n\n\t\t\t\t\tif (!colors) colors = 'transparent'\n\n\t\t\t\t\t// 'black' or [0,0,0,0] case\n\t\t\t\t\tif (!Array.isArray(colors) || typeof colors[0] === 'number') {\n\t\t\t\t\t\tlet color = colors\n\t\t\t\t\t\tcolors = Array(count)\n\t\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\t\tcolors[i] = color\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (colors.length < count) throw Error('Not enough colors')\n\n\t\t\t\t\tlet colorData = new Uint8Array(count * 4)\n\n\t\t\t\t\t//convert colors to float arrays\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\tlet c = rgba(colors[i], 'uint8')\n\t\t\t\t\t\tcolorData.set(c, i * 4)\n\t\t\t\t\t}\n\n\t\t\t\t\treturn colorData\n\t\t\t\t},\n\n\t\t\t\trange: (range, state, options) => {\n\t\t\t\t\tlet bounds = state.bounds\n\t\t\t\t\tif (!range) range = bounds\n\n\t\t\t\t\tstate.scale = [1 / (range[2] - range[0]), 1 / (range[3] - range[1])]\n\t\t\t\t\tstate.translate = [-range[0], -range[1]]\n\n\t\t\t\t\tstate.scaleFract = fract32(state.scale)\n\t\t\t\t\tstate.translateFract = fract32(state.translate)\n\n\t\t\t\t\treturn range\n\t\t\t\t},\n\n\t\t\t\tviewport: vp => {\n\t\t\t\t\tlet viewport\n\n\t\t\t\t\tif (Array.isArray(vp)) {\n\t\t\t\t\t\tviewport = {\n\t\t\t\t\t\t\tx: vp[0],\n\t\t\t\t\t\t\ty: vp[1],\n\t\t\t\t\t\t\twidth: vp[2] - vp[0],\n\t\t\t\t\t\t\theight: vp[3] - vp[1]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (vp) {\n\t\t\t\t\t\tviewport = {\n\t\t\t\t\t\t\tx: vp.x || vp.left || 0,\n\t\t\t\t\t\t\ty: vp.y || vp.top || 0\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (vp.right) viewport.width = vp.right - viewport.x\n\t\t\t\t\t\telse viewport.width = vp.w || vp.width || 0\n\n\t\t\t\t\t\tif (vp.bottom) viewport.height = vp.bottom - viewport.y\n\t\t\t\t\t\telse viewport.height = vp.h || vp.height || 0\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tviewport = {\n\t\t\t\t\t\t\tx: 0, y: 0,\n\t\t\t\t\t\t\twidth: gl.drawingBufferWidth,\n\t\t\t\t\t\t\theight: gl.drawingBufferHeight\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn viewport\n\t\t\t\t}\n\t\t\t}])\n\n\t\t\treturn group\n\t\t})\n\n\t\tif (pointCount || errorCount) {\n\t\t\tlet len = groups.reduce((acc, group, i) => {\n\t\t\t\treturn acc + (group ? group.count : 0)\n\t\t\t}, 0)\n\n\t\t\tlet positionData = new Float64Array(len * 2)\n\t\t\tlet colorData = new Uint8Array(len * 4)\n\t\t\tlet errorData = new Float32Array(len * 4)\n\n\t\t\tgroups.forEach((group, i) => {\n\t\t\t\tif (!group) return\n\t\t\t\tlet {positions, count, offset, color, errors} = group\n\t\t\t\tif (!count) return\n\n\t\t\t\tcolorData.set(color, offset * 4)\n\t\t\t\terrorData.set(errors, offset * 4)\n\t\t\t\tpositionData.set(positions, offset * 2)\n\t\t\t})\n\n\t\t\tpositionBuffer(float32(positionData))\n\t\t\tpositionFractBuffer(fract32(positionData))\n\t\t\tcolorBuffer(colorData)\n\t\t\terrorBuffer(errorData)\n\t\t}\n\n\t}\n\n\tfunction destroy () {\n\t\tpositionBuffer.destroy()\n\t\tpositionFractBuffer.destroy()\n\t\tcolorBuffer.destroy()\n\t\terrorBuffer.destroy()\n\t\tmeshBuffer.destroy()\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\nmodule.exports = createTable;\nvar chull = require('convex-hull');\nfunction constructVertex(d, a, b) {\n  var x = new Array(d);\n  for (var i = 0; i < d; ++i) {\n    x[i] = 0.0;\n    if (i === a) {\n      x[i] += 0.5;\n    }\n    if (i === b) {\n      x[i] += 0.5;\n    }\n  }\n  return x;\n}\nfunction constructCell(dimension, mask) {\n  if (mask === 0 || mask === (1 << dimension + 1) - 1) {\n    return [];\n  }\n  var points = [];\n  var index = [];\n  for (var i = 0; i <= dimension; ++i) {\n    if (mask & 1 << i) {\n      points.push(constructVertex(dimension, i - 1, i - 1));\n      index.push(null);\n      for (var j = 0; j <= dimension; ++j) {\n        if (~mask & 1 << j) {\n          points.push(constructVertex(dimension, i - 1, j - 1));\n          index.push([i, j]);\n        }\n      }\n    }\n  }\n\n  //Preprocess points so first d+1 points are linearly independent\n  var hull = chull(points);\n  var faces = [];\n  i_loop: for (var i = 0; i < hull.length; ++i) {\n    var face = hull[i];\n    var nface = [];\n    for (var j = 0; j < face.length; ++j) {\n      if (!index[face[j]]) {\n        continue i_loop;\n      }\n      nface.push(index[face[j]].slice());\n    }\n    faces.push(nface);\n  }\n  return faces;\n}\nfunction createTable(dimension) {\n  var numCells = 1 << dimension + 1;\n  var result = new Array(numCells);\n  for (var i = 0; i < numCells; ++i) {\n    result[i] = constructCell(dimension, i);\n  }\n  return result;\n}","map":{"version":3,"names":["module","exports","createTable","chull","require","constructVertex","d","a","b","x","Array","i","constructCell","dimension","mask","points","index","push","j","hull","faces","i_loop","length","face","nface","slice","numCells","result"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/marching-simplex-table/mstab.js"],"sourcesContent":["'use strict'\n\nmodule.exports = createTable\n\nvar chull = require('convex-hull')\n\nfunction constructVertex(d, a, b) {\n  var x = new Array(d)\n  for(var i=0; i<d; ++i) {\n    x[i] = 0.0\n    if(i === a) {\n      x[i] += 0.5\n    }\n    if(i === b) {\n      x[i] += 0.5\n    }\n  }\n  return x\n}\n\nfunction constructCell(dimension, mask) {\n  if(mask === 0 || mask === (1<<(dimension+1))-1) {\n    return []\n  }\n  var points = []\n  var index  = []\n  for(var i=0; i<=dimension; ++i) {\n    if(mask & (1<<i)) {\n      points.push(constructVertex(dimension, i-1, i-1))\n      index.push(null)\n      for(var j=0; j<=dimension; ++j) {\n        if(~mask & (1<<j)) {\n          points.push(constructVertex(dimension, i-1, j-1))\n          index.push([i,j])\n        }\n      }\n    }\n  }\n  \n  //Preprocess points so first d+1 points are linearly independent\n  var hull = chull(points)\n  var faces = []\ni_loop:\n  for(var i=0; i<hull.length; ++i) {\n    var face = hull[i]\n    var nface = []\n    for(var j=0; j<face.length; ++j) {\n      if(!index[face[j]]) {\n        continue i_loop\n      }\n      nface.push(index[face[j]].slice())\n    }\n    faces.push(nface)\n  }\n  return faces\n}\n\nfunction createTable(dimension) {\n  var numCells = 1<<(dimension+1)\n  var result = new Array(numCells)\n  for(var i=0; i<numCells; ++i) {\n    result[i] = constructCell(dimension, i)\n  }\n  return result\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
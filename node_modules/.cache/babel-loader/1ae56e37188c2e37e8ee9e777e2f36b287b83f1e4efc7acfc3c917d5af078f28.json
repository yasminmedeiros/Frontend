{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar helpers = require('./helpers');\nmodule.exports = function getLegendData(calcdata, opts) {\n  var lgroupToTraces = {};\n  var lgroups = [];\n  var hasOneNonBlankGroup = false;\n  var slicesShown = {};\n  var lgroupi = 0;\n  var i, j;\n  function addOneItem(legendGroup, legendItem) {\n    // each '' legend group is treated as a separate group\n    if (legendGroup === '' || !helpers.isGrouped(opts)) {\n      var uniqueGroup = '~~i' + lgroupi; // TODO: check this against fullData legendgroups?\n\n      lgroups.push(uniqueGroup);\n      lgroupToTraces[uniqueGroup] = [[legendItem]];\n      lgroupi++;\n    } else if (lgroups.indexOf(legendGroup) === -1) {\n      lgroups.push(legendGroup);\n      hasOneNonBlankGroup = true;\n      lgroupToTraces[legendGroup] = [[legendItem]];\n    } else lgroupToTraces[legendGroup].push([legendItem]);\n  }\n\n  // build an { legendgroup: [cd0, cd0], ... } object\n  for (i = 0; i < calcdata.length; i++) {\n    var cd = calcdata[i];\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    var lgroup = trace.legendgroup;\n    if (!trace.visible || !trace.showlegend) continue;\n    if (Registry.traceIs(trace, 'pie')) {\n      if (!slicesShown[lgroup]) slicesShown[lgroup] = {};\n      for (j = 0; j < cd.length; j++) {\n        var labelj = cd[j].label;\n        if (!slicesShown[lgroup][labelj]) {\n          addOneItem(lgroup, {\n            label: labelj,\n            color: cd[j].color,\n            i: cd[j].i,\n            trace: trace,\n            pts: cd[j].pts\n          });\n          slicesShown[lgroup][labelj] = true;\n        }\n      }\n    } else addOneItem(lgroup, cd0);\n  }\n\n  // won't draw a legend in this case\n  if (!lgroups.length) return [];\n\n  // rearrange lgroupToTraces into a d3-friendly array of arrays\n  var lgroupsLength = lgroups.length;\n  var ltraces;\n  var legendData;\n  if (hasOneNonBlankGroup && helpers.isGrouped(opts)) {\n    legendData = new Array(lgroupsLength);\n    for (i = 0; i < lgroupsLength; i++) {\n      ltraces = lgroupToTraces[lgroups[i]];\n      legendData[i] = helpers.isReversed(opts) ? ltraces.reverse() : ltraces;\n    }\n  } else {\n    // collapse all groups into one if all groups are blank\n    legendData = [new Array(lgroupsLength)];\n    for (i = 0; i < lgroupsLength; i++) {\n      ltraces = lgroupToTraces[lgroups[i]][0];\n      legendData[0][helpers.isReversed(opts) ? lgroupsLength - i - 1 : i] = ltraces;\n    }\n    lgroupsLength = 1;\n  }\n\n  // needed in repositionLegend\n  opts._lgroupsLength = lgroupsLength;\n  return legendData;\n};","map":{"version":3,"names":["Registry","require","helpers","module","exports","getLegendData","calcdata","opts","lgroupToTraces","lgroups","hasOneNonBlankGroup","slicesShown","lgroupi","i","j","addOneItem","legendGroup","legendItem","isGrouped","uniqueGroup","push","indexOf","length","cd","cd0","trace","lgroup","legendgroup","visible","showlegend","traceIs","labelj","label","color","pts","lgroupsLength","ltraces","legendData","Array","isReversed","reverse","_lgroupsLength"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/components/legend/get_legend_data.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar helpers = require('./helpers');\n\n\nmodule.exports = function getLegendData(calcdata, opts) {\n    var lgroupToTraces = {};\n    var lgroups = [];\n    var hasOneNonBlankGroup = false;\n    var slicesShown = {};\n    var lgroupi = 0;\n    var i, j;\n\n    function addOneItem(legendGroup, legendItem) {\n        // each '' legend group is treated as a separate group\n        if(legendGroup === '' || !helpers.isGrouped(opts)) {\n            var uniqueGroup = '~~i' + lgroupi; // TODO: check this against fullData legendgroups?\n\n            lgroups.push(uniqueGroup);\n            lgroupToTraces[uniqueGroup] = [[legendItem]];\n            lgroupi++;\n        }\n        else if(lgroups.indexOf(legendGroup) === -1) {\n            lgroups.push(legendGroup);\n            hasOneNonBlankGroup = true;\n            lgroupToTraces[legendGroup] = [[legendItem]];\n        }\n        else lgroupToTraces[legendGroup].push([legendItem]);\n    }\n\n    // build an { legendgroup: [cd0, cd0], ... } object\n    for(i = 0; i < calcdata.length; i++) {\n        var cd = calcdata[i];\n        var cd0 = cd[0];\n        var trace = cd0.trace;\n        var lgroup = trace.legendgroup;\n\n        if(!trace.visible || !trace.showlegend) continue;\n\n        if(Registry.traceIs(trace, 'pie')) {\n            if(!slicesShown[lgroup]) slicesShown[lgroup] = {};\n\n            for(j = 0; j < cd.length; j++) {\n                var labelj = cd[j].label;\n\n                if(!slicesShown[lgroup][labelj]) {\n                    addOneItem(lgroup, {\n                        label: labelj,\n                        color: cd[j].color,\n                        i: cd[j].i,\n                        trace: trace,\n                        pts: cd[j].pts\n                    });\n\n                    slicesShown[lgroup][labelj] = true;\n                }\n            }\n        }\n\n        else addOneItem(lgroup, cd0);\n    }\n\n    // won't draw a legend in this case\n    if(!lgroups.length) return [];\n\n    // rearrange lgroupToTraces into a d3-friendly array of arrays\n    var lgroupsLength = lgroups.length;\n    var ltraces;\n    var legendData;\n\n    if(hasOneNonBlankGroup && helpers.isGrouped(opts)) {\n        legendData = new Array(lgroupsLength);\n\n        for(i = 0; i < lgroupsLength; i++) {\n            ltraces = lgroupToTraces[lgroups[i]];\n            legendData[i] = helpers.isReversed(opts) ? ltraces.reverse() : ltraces;\n        }\n    }\n    else {\n        // collapse all groups into one if all groups are blank\n        legendData = [new Array(lgroupsLength)];\n\n        for(i = 0; i < lgroupsLength; i++) {\n            ltraces = lgroupToTraces[lgroups[i]][0];\n            legendData[0][helpers.isReversed(opts) ? lgroupsLength - i - 1 : i] = ltraces;\n        }\n        lgroupsLength = 1;\n    }\n\n    // needed in repositionLegend\n    opts._lgroupsLength = lgroupsLength;\n    return legendData;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
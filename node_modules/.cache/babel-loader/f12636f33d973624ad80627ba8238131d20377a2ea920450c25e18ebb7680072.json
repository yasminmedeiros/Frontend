{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorAttrs = require('../color/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar padAttrs = require('../../plots/pad_attributes');\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\nvar buttonsAttrs = templatedArray('button', {\n  visible: {\n    valType: 'boolean',\n    role: 'info',\n    description: 'Determines whether or not this button is visible.'\n  },\n  method: {\n    valType: 'enumerated',\n    values: ['restyle', 'relayout', 'animate', 'update', 'skip'],\n    dflt: 'restyle',\n    role: 'info',\n    description: ['Sets the Plotly method to be called on click.', 'If the `skip` method is used, the API updatemenu will function as normal', 'but will perform no API calls and will not bind automatically to state', 'updates. This may be used to create a component interface and attach to', 'updatemenu events manually via JavaScript.'].join(' ')\n  },\n  args: {\n    valType: 'info_array',\n    role: 'info',\n    freeLength: true,\n    items: [{\n      valType: 'any'\n    }, {\n      valType: 'any'\n    }, {\n      valType: 'any'\n    }],\n    description: ['Sets the arguments values to be passed to the Plotly', 'method set in `method` on click.'].join(' ')\n  },\n  label: {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    description: 'Sets the text label to appear on the button.'\n  },\n  execute: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: true,\n    description: ['When true, the API method is executed. When false, all other behaviors are the same', 'and command execution is skipped. This may be useful when hooking into, for example,', 'the `plotly_buttonclicked` method and executing the API command manually without losing', 'the benefit of the updatemenu automatically binding to the state of the plot through the', 'specification of `method` and `args`.'].join(' ')\n  }\n});\nmodule.exports = overrideAll(templatedArray('updatemenu', {\n  _arrayAttrRegexps: [/^updatemenus\\[(0|[1-9][0-9]+)\\]\\.buttons/],\n  visible: {\n    valType: 'boolean',\n    role: 'info',\n    description: ['Determines whether or not the update menu is visible.'].join(' ')\n  },\n  type: {\n    valType: 'enumerated',\n    values: ['dropdown', 'buttons'],\n    dflt: 'dropdown',\n    role: 'info',\n    description: ['Determines whether the buttons are accessible via a dropdown menu', 'or whether the buttons are stacked horizontally or vertically'].join(' ')\n  },\n  direction: {\n    valType: 'enumerated',\n    values: ['left', 'right', 'up', 'down'],\n    dflt: 'down',\n    role: 'info',\n    description: ['Determines the direction in which the buttons are laid out, whether', 'in a dropdown menu or a row/column of buttons. For `left` and `up`,', 'the buttons will still appear in left-to-right or top-to-bottom order', 'respectively.'].join(' ')\n  },\n  active: {\n    valType: 'integer',\n    role: 'info',\n    min: -1,\n    dflt: 0,\n    description: ['Determines which button (by index starting from 0) is', 'considered active.'].join(' ')\n  },\n  showactive: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: true,\n    description: 'Highlights active dropdown item or active button if true.'\n  },\n  buttons: buttonsAttrs,\n  x: {\n    valType: 'number',\n    min: -2,\n    max: 3,\n    dflt: -0.05,\n    role: 'style',\n    description: 'Sets the x position (in normalized coordinates) of the update menu.'\n  },\n  xanchor: {\n    valType: 'enumerated',\n    values: ['auto', 'left', 'center', 'right'],\n    dflt: 'right',\n    role: 'info',\n    description: ['Sets the update menu\\'s horizontal position anchor.', 'This anchor binds the `x` position to the *left*, *center*', 'or *right* of the range selector.'].join(' ')\n  },\n  y: {\n    valType: 'number',\n    min: -2,\n    max: 3,\n    dflt: 1,\n    role: 'style',\n    description: 'Sets the y position (in normalized coordinates) of the update menu.'\n  },\n  yanchor: {\n    valType: 'enumerated',\n    values: ['auto', 'top', 'middle', 'bottom'],\n    dflt: 'top',\n    role: 'info',\n    description: ['Sets the update menu\\'s vertical position anchor', 'This anchor binds the `y` position to the *top*, *middle*', 'or *bottom* of the range selector.'].join(' ')\n  },\n  pad: extendFlat(padAttrs({\n    editType: 'arraydraw'\n  }), {\n    description: 'Sets the padding around the buttons or dropdown menu.'\n  }),\n  font: fontAttrs({\n    description: 'Sets the font of the update menu button text.'\n  }),\n  bgcolor: {\n    valType: 'color',\n    role: 'style',\n    description: 'Sets the background color of the update menu buttons.'\n  },\n  bordercolor: {\n    valType: 'color',\n    dflt: colorAttrs.borderLine,\n    role: 'style',\n    description: 'Sets the color of the border enclosing the update menu.'\n  },\n  borderwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    role: 'style',\n    editType: 'arraydraw',\n    description: 'Sets the width (in px) of the border enclosing the update menu.'\n  }\n}), 'arraydraw', 'from-root');","map":{"version":3,"names":["fontAttrs","require","colorAttrs","extendFlat","overrideAll","padAttrs","templatedArray","buttonsAttrs","visible","valType","role","description","method","values","dflt","join","args","freeLength","items","label","execute","module","exports","_arrayAttrRegexps","type","direction","active","min","showactive","buttons","x","max","xanchor","y","yanchor","pad","editType","font","bgcolor","bordercolor","borderLine","borderwidth"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/components/updatemenus/attributes.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorAttrs = require('../color/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar padAttrs = require('../../plots/pad_attributes');\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\n\nvar buttonsAttrs = templatedArray('button', {\n    visible: {\n        valType: 'boolean',\n        role: 'info',\n        description: 'Determines whether or not this button is visible.'\n    },\n    method: {\n        valType: 'enumerated',\n        values: ['restyle', 'relayout', 'animate', 'update', 'skip'],\n        dflt: 'restyle',\n        role: 'info',\n        description: [\n            'Sets the Plotly method to be called on click.',\n            'If the `skip` method is used, the API updatemenu will function as normal',\n            'but will perform no API calls and will not bind automatically to state',\n            'updates. This may be used to create a component interface and attach to',\n            'updatemenu events manually via JavaScript.'\n        ].join(' ')\n    },\n    args: {\n        valType: 'info_array',\n        role: 'info',\n        freeLength: true,\n        items: [\n            {valType: 'any'},\n            {valType: 'any'},\n            {valType: 'any'}\n        ],\n        description: [\n            'Sets the arguments values to be passed to the Plotly',\n            'method set in `method` on click.'\n        ].join(' ')\n    },\n    label: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        description: 'Sets the text label to appear on the button.'\n    },\n    execute: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        description: [\n            'When true, the API method is executed. When false, all other behaviors are the same',\n            'and command execution is skipped. This may be useful when hooking into, for example,',\n            'the `plotly_buttonclicked` method and executing the API command manually without losing',\n            'the benefit of the updatemenu automatically binding to the state of the plot through the',\n            'specification of `method` and `args`.'\n        ].join(' ')\n    }\n});\n\nmodule.exports = overrideAll(templatedArray('updatemenu', {\n    _arrayAttrRegexps: [/^updatemenus\\[(0|[1-9][0-9]+)\\]\\.buttons/],\n\n    visible: {\n        valType: 'boolean',\n        role: 'info',\n        description: [\n            'Determines whether or not the update menu is visible.'\n        ].join(' ')\n    },\n\n    type: {\n        valType: 'enumerated',\n        values: ['dropdown', 'buttons'],\n        dflt: 'dropdown',\n        role: 'info',\n        description: [\n            'Determines whether the buttons are accessible via a dropdown menu',\n            'or whether the buttons are stacked horizontally or vertically'\n        ].join(' ')\n    },\n\n    direction: {\n        valType: 'enumerated',\n        values: ['left', 'right', 'up', 'down'],\n        dflt: 'down',\n        role: 'info',\n        description: [\n            'Determines the direction in which the buttons are laid out, whether',\n            'in a dropdown menu or a row/column of buttons. For `left` and `up`,',\n            'the buttons will still appear in left-to-right or top-to-bottom order',\n            'respectively.'\n        ].join(' ')\n    },\n\n    active: {\n        valType: 'integer',\n        role: 'info',\n        min: -1,\n        dflt: 0,\n        description: [\n            'Determines which button (by index starting from 0) is',\n            'considered active.'\n        ].join(' ')\n    },\n\n    showactive: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        description: 'Highlights active dropdown item or active button if true.'\n    },\n\n    buttons: buttonsAttrs,\n\n    x: {\n        valType: 'number',\n        min: -2,\n        max: 3,\n        dflt: -0.05,\n        role: 'style',\n        description: 'Sets the x position (in normalized coordinates) of the update menu.'\n    },\n    xanchor: {\n        valType: 'enumerated',\n        values: ['auto', 'left', 'center', 'right'],\n        dflt: 'right',\n        role: 'info',\n        description: [\n            'Sets the update menu\\'s horizontal position anchor.',\n            'This anchor binds the `x` position to the *left*, *center*',\n            'or *right* of the range selector.'\n        ].join(' ')\n    },\n    y: {\n        valType: 'number',\n        min: -2,\n        max: 3,\n        dflt: 1,\n        role: 'style',\n        description: 'Sets the y position (in normalized coordinates) of the update menu.'\n    },\n    yanchor: {\n        valType: 'enumerated',\n        values: ['auto', 'top', 'middle', 'bottom'],\n        dflt: 'top',\n        role: 'info',\n        description: [\n            'Sets the update menu\\'s vertical position anchor',\n            'This anchor binds the `y` position to the *top*, *middle*',\n            'or *bottom* of the range selector.'\n        ].join(' ')\n    },\n\n    pad: extendFlat(padAttrs({editType: 'arraydraw'}), {\n        description: 'Sets the padding around the buttons or dropdown menu.'\n    }),\n\n    font: fontAttrs({\n        description: 'Sets the font of the update menu button text.'\n    }),\n\n    bgcolor: {\n        valType: 'color',\n        role: 'style',\n        description: 'Sets the background color of the update menu buttons.'\n    },\n    bordercolor: {\n        valType: 'color',\n        dflt: colorAttrs.borderLine,\n        role: 'style',\n        description: 'Sets the color of the border enclosing the update menu.'\n    },\n    borderwidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        role: 'style',\n        editType: 'arraydraw',\n        description: 'Sets the width (in px) of the border enclosing the update menu.'\n    }\n}), 'arraydraw', 'from-root');\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
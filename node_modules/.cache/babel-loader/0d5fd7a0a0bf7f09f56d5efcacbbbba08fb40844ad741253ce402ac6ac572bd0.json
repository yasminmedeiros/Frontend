{"ast":null,"code":"var DEFAULT_NORMALS_EPSILON = 1e-6;\nvar DEFAULT_FACE_EPSILON = 1e-6;\n\n//Estimate the vertex normals of a mesh\nexports.vertexNormals = function (faces, positions, specifiedEpsilon) {\n  var N = positions.length;\n  var normals = new Array(N);\n  var epsilon = specifiedEpsilon === void 0 ? DEFAULT_NORMALS_EPSILON : specifiedEpsilon;\n\n  //Initialize normal array\n  for (var i = 0; i < N; ++i) {\n    normals[i] = [0.0, 0.0, 0.0];\n  }\n\n  //Walk over all the faces and add per-vertex contribution to normal weights\n  for (var i = 0; i < faces.length; ++i) {\n    var f = faces[i];\n    var p = 0;\n    var c = f[f.length - 1];\n    var n = f[0];\n    for (var j = 0; j < f.length; ++j) {\n      //Shift indices back\n      p = c;\n      c = n;\n      n = f[(j + 1) % f.length];\n      var v0 = positions[p];\n      var v1 = positions[c];\n      var v2 = positions[n];\n\n      //Compute infineteismal arcs\n      var d01 = new Array(3);\n      var m01 = 0.0;\n      var d21 = new Array(3);\n      var m21 = 0.0;\n      for (var k = 0; k < 3; ++k) {\n        d01[k] = v0[k] - v1[k];\n        m01 += d01[k] * d01[k];\n        d21[k] = v2[k] - v1[k];\n        m21 += d21[k] * d21[k];\n      }\n\n      //Accumulate values in normal\n      if (m01 * m21 > epsilon) {\n        var norm = normals[c];\n        var w = 1.0 / Math.sqrt(m01 * m21);\n        for (var k = 0; k < 3; ++k) {\n          var u = (k + 1) % 3;\n          var v = (k + 2) % 3;\n          norm[k] += w * (d21[u] * d01[v] - d21[v] * d01[u]);\n        }\n      }\n    }\n  }\n\n  //Scale all normals to unit length\n  for (var i = 0; i < N; ++i) {\n    var norm = normals[i];\n    var m = 0.0;\n    for (var k = 0; k < 3; ++k) {\n      m += norm[k] * norm[k];\n    }\n    if (m > epsilon) {\n      var w = 1.0 / Math.sqrt(m);\n      for (var k = 0; k < 3; ++k) {\n        norm[k] *= w;\n      }\n    } else {\n      for (var k = 0; k < 3; ++k) {\n        norm[k] = 0.0;\n      }\n    }\n  }\n\n  //Return the resulting set of patches\n  return normals;\n};\n\n//Compute face normals of a mesh\nexports.faceNormals = function (faces, positions, specifiedEpsilon) {\n  var N = faces.length;\n  var normals = new Array(N);\n  var epsilon = specifiedEpsilon === void 0 ? DEFAULT_FACE_EPSILON : specifiedEpsilon;\n  for (var i = 0; i < N; ++i) {\n    var f = faces[i];\n    var pos = new Array(3);\n    for (var j = 0; j < 3; ++j) {\n      pos[j] = positions[f[j]];\n    }\n    var d01 = new Array(3);\n    var d21 = new Array(3);\n    for (var j = 0; j < 3; ++j) {\n      d01[j] = pos[1][j] - pos[0][j];\n      d21[j] = pos[2][j] - pos[0][j];\n    }\n    var n = new Array(3);\n    var l = 0.0;\n    for (var j = 0; j < 3; ++j) {\n      var u = (j + 1) % 3;\n      var v = (j + 2) % 3;\n      n[j] = d01[u] * d21[v] - d01[v] * d21[u];\n      l += n[j] * n[j];\n    }\n    if (l > epsilon) {\n      l = 1.0 / Math.sqrt(l);\n    } else {\n      l = 0.0;\n    }\n    for (var j = 0; j < 3; ++j) {\n      n[j] *= l;\n    }\n    normals[i] = n;\n  }\n  return normals;\n};","map":{"version":3,"names":["DEFAULT_NORMALS_EPSILON","DEFAULT_FACE_EPSILON","exports","vertexNormals","faces","positions","specifiedEpsilon","N","length","normals","Array","epsilon","i","f","p","c","n","j","v0","v1","v2","d01","m01","d21","m21","k","norm","w","Math","sqrt","u","v","m","faceNormals","pos","l"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/normals/normals.js"],"sourcesContent":["var DEFAULT_NORMALS_EPSILON = 1e-6;\nvar DEFAULT_FACE_EPSILON = 1e-6;\n\n//Estimate the vertex normals of a mesh\nexports.vertexNormals = function(faces, positions, specifiedEpsilon) {\n\n  var N         = positions.length;\n  var normals   = new Array(N);\n  var epsilon   = specifiedEpsilon === void(0) ? DEFAULT_NORMALS_EPSILON : specifiedEpsilon;\n\n  //Initialize normal array\n  for(var i=0; i<N; ++i) {\n    normals[i] = [0.0, 0.0, 0.0];\n  }\n\n  //Walk over all the faces and add per-vertex contribution to normal weights\n  for(var i=0; i<faces.length; ++i) {\n    var f = faces[i];\n    var p = 0;\n    var c = f[f.length-1];\n    var n = f[0];\n    for(var j=0; j<f.length; ++j) {\n\n      //Shift indices back\n      p = c;\n      c = n;\n      n = f[(j+1) % f.length];\n\n      var v0 = positions[p];\n      var v1 = positions[c];\n      var v2 = positions[n];\n\n      //Compute infineteismal arcs\n      var d01 = new Array(3);\n      var m01 = 0.0;\n      var d21 = new Array(3);\n      var m21 = 0.0;\n      for(var k=0; k<3; ++k) {\n        d01[k] = v0[k]  - v1[k];\n        m01   += d01[k] * d01[k];\n        d21[k] = v2[k]  - v1[k];\n        m21   += d21[k] * d21[k];\n      }\n\n      //Accumulate values in normal\n      if(m01 * m21 > epsilon) {\n        var norm = normals[c];\n        var w = 1.0 / Math.sqrt(m01 * m21);\n        for(var k=0; k<3; ++k) {\n          var u = (k+1)%3;\n          var v = (k+2)%3;\n          norm[k] += w * (d21[u] * d01[v] - d21[v] * d01[u]);\n        }\n      }\n    }\n  }\n\n  //Scale all normals to unit length\n  for(var i=0; i<N; ++i) {\n    var norm = normals[i];\n    var m = 0.0;\n    for(var k=0; k<3; ++k) {\n      m += norm[k] * norm[k];\n    }\n    if(m > epsilon) {\n      var w = 1.0 / Math.sqrt(m);\n      for(var k=0; k<3; ++k) {\n        norm[k] *= w;\n      }\n    } else {\n      for(var k=0; k<3; ++k) {\n        norm[k] = 0.0;\n      }\n    }\n  }\n\n  //Return the resulting set of patches\n  return normals;\n}\n\n//Compute face normals of a mesh\nexports.faceNormals = function(faces, positions, specifiedEpsilon) {\n\n  var N         = faces.length;\n  var normals   = new Array(N);\n  var epsilon   = specifiedEpsilon === void(0) ? DEFAULT_FACE_EPSILON : specifiedEpsilon;\n\n  for(var i=0; i<N; ++i) {\n    var f = faces[i];\n    var pos = new Array(3);\n    for(var j=0; j<3; ++j) {\n      pos[j] = positions[f[j]];\n    }\n\n    var d01 = new Array(3);\n    var d21 = new Array(3);\n    for(var j=0; j<3; ++j) {\n      d01[j] = pos[1][j] - pos[0][j];\n      d21[j] = pos[2][j] - pos[0][j];\n    }\n\n    var n = new Array(3);\n    var l = 0.0;\n    for(var j=0; j<3; ++j) {\n      var u = (j+1)%3;\n      var v = (j+2)%3;\n      n[j] = d01[u] * d21[v] - d01[v] * d21[u];\n      l += n[j] * n[j];\n    }\n    if(l > epsilon) {\n      l = 1.0 / Math.sqrt(l);\n    } else {\n      l = 0.0;\n    }\n    for(var j=0; j<3; ++j) {\n      n[j] *= l;\n    }\n    normals[i] = n;\n  }\n  return normals;\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
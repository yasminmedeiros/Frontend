{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Carpet = {};\nCarpet.attributes = require('./attributes');\nCarpet.supplyDefaults = require('./defaults');\nCarpet.plot = require('./plot');\nCarpet.calc = require('./calc');\nCarpet.animatable = true;\nCarpet.isContainer = true; // so carpet traces get `calc` before other traces\n\nCarpet.moduleType = 'trace';\nCarpet.name = 'carpet';\nCarpet.basePlotModule = require('../../plots/cartesian');\nCarpet.categories = ['cartesian', 'svg', 'carpet', 'carpetAxis', 'notLegendIsolatable', 'noMultiCategory'];\nCarpet.meta = {\n  description: ['The data describing carpet axis layout is set in `y` and (optionally)', 'also `x`. If only `y` is present, `x` the plot is interpreted as a', 'cheater plot and is filled in using the `y` values.', '`x` and `y` may either be 2D arrays matching with each dimension matching', 'that of `a` and `b`, or they may be 1D arrays with total length equal to', 'that of `a` and `b`.'].join(' ')\n};\nmodule.exports = Carpet;","map":{"version":3,"names":["Carpet","attributes","require","supplyDefaults","plot","calc","animatable","isContainer","moduleType","name","basePlotModule","categories","meta","description","join","module","exports"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/carpet/index.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Carpet = {};\n\nCarpet.attributes = require('./attributes');\nCarpet.supplyDefaults = require('./defaults');\nCarpet.plot = require('./plot');\nCarpet.calc = require('./calc');\nCarpet.animatable = true;\nCarpet.isContainer = true; // so carpet traces get `calc` before other traces\n\nCarpet.moduleType = 'trace';\nCarpet.name = 'carpet';\nCarpet.basePlotModule = require('../../plots/cartesian');\nCarpet.categories = ['cartesian', 'svg', 'carpet', 'carpetAxis', 'notLegendIsolatable', 'noMultiCategory'];\nCarpet.meta = {\n    description: [\n        'The data describing carpet axis layout is set in `y` and (optionally)',\n        'also `x`. If only `y` is present, `x` the plot is interpreted as a',\n        'cheater plot and is filled in using the `y` values.',\n\n        '`x` and `y` may either be 2D arrays matching with each dimension matching',\n        'that of `a` and `b`, or they may be 1D arrays with total length equal to',\n        'that of `a` and `b`.'\n    ].join(' ')\n};\n\nmodule.exports = Carpet;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAY;;AAEZ,IAAIA,MAAM,GAAG,CAAC,CAAC;AAEfA,MAAM,CAACC,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC3CF,MAAM,CAACG,cAAc,GAAGD,OAAO,CAAC,YAAY,CAAC;AAC7CF,MAAM,CAACI,IAAI,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAC/BF,MAAM,CAACK,IAAI,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAC/BF,MAAM,CAACM,UAAU,GAAG,IAAI;AACxBN,MAAM,CAACO,WAAW,GAAG,IAAI,CAAC,CAAC;;AAE3BP,MAAM,CAACQ,UAAU,GAAG,OAAO;AAC3BR,MAAM,CAACS,IAAI,GAAG,QAAQ;AACtBT,MAAM,CAACU,cAAc,GAAGR,OAAO,CAAC,uBAAuB,CAAC;AACxDF,MAAM,CAACW,UAAU,GAAG,CAAC,WAAW,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE,qBAAqB,EAAE,iBAAiB,CAAC;AAC1GX,MAAM,CAACY,IAAI,GAAG;EACVC,WAAW,EAAE,CACT,uEAAuE,EACvE,oEAAoE,EACpE,qDAAqD,EAErD,2EAA2E,EAC3E,0EAA0E,EAC1E,sBAAsB,CACzB,CAACC,IAAI,CAAC,GAAG;AACd,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGhB,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}
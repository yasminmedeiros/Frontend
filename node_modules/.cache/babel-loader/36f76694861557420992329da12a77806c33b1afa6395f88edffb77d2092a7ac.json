{"ast":null,"code":"'use strict';\n\nvar stringifyFont = require('css-font/stringify');\nvar defaultChars = [32, 126];\nmodule.exports = atlas;\nfunction atlas(options) {\n  options = options || {};\n  var shape = options.shape ? options.shape : options.canvas ? [options.canvas.width, options.canvas.height] : [512, 512];\n  var canvas = options.canvas || document.createElement('canvas');\n  var font = options.font;\n  var step = typeof options.step === 'number' ? [options.step, options.step] : options.step || [32, 32];\n  var chars = options.chars || defaultChars;\n  if (font && typeof font !== 'string') font = stringifyFont(font);\n  if (!Array.isArray(chars)) {\n    chars = String(chars).split('');\n  } else if (chars.length === 2 && typeof chars[0] === 'number' && typeof chars[1] === 'number') {\n    var newchars = [];\n    for (var i = chars[0], j = 0; i <= chars[1]; i++) {\n      newchars[j++] = String.fromCharCode(i);\n    }\n    chars = newchars;\n  }\n  shape = shape.slice();\n  canvas.width = shape[0];\n  canvas.height = shape[1];\n  var ctx = canvas.getContext('2d');\n  ctx.fillStyle = '#000';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.font = font;\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillStyle = '#fff';\n  var x = step[0] / 2;\n  var y = step[1] / 2;\n  for (var i = 0; i < chars.length; i++) {\n    ctx.fillText(chars[i], x, y);\n    if ((x += step[0]) > shape[0] - step[0] / 2) x = step[0] / 2, y += step[1];\n  }\n  return canvas;\n}","map":{"version":3,"names":["stringifyFont","require","defaultChars","module","exports","atlas","options","shape","canvas","width","height","document","createElement","font","step","chars","Array","isArray","String","split","length","newchars","i","j","fromCharCode","slice","ctx","getContext","fillStyle","fillRect","textAlign","textBaseline","x","y","fillText"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/font-atlas/index.js"],"sourcesContent":["'use strict'\r\n\r\nvar stringifyFont = require('css-font/stringify')\r\nvar defaultChars = [32, 126]\r\n\r\nmodule.exports = atlas\r\n\r\nfunction atlas(options) {\r\n  options = options || {}\r\n\r\n  var shape  = options.shape ? options.shape : options.canvas ? [options.canvas.width, options.canvas.height] : [512, 512]\r\n  var canvas = options.canvas || document.createElement('canvas')\r\n  var font   = options.font\r\n  var step   = typeof options.step === 'number' ? [options.step, options.step] : options.step || [32, 32]\r\n  var chars  = options.chars || defaultChars\r\n\r\n  if (font && typeof font !== 'string') font = stringifyFont(font)\r\n\r\n  if (!Array.isArray(chars)) {\r\n    chars = String(chars).split('')\r\n  } else\r\n  if (chars.length === 2\r\n    && typeof chars[0] === 'number'\r\n    && typeof chars[1] === 'number'\r\n  ) {\r\n    var newchars = []\r\n\r\n    for (var i = chars[0], j = 0; i <= chars[1]; i++) {\r\n      newchars[j++] = String.fromCharCode(i)\r\n    }\r\n\r\n    chars = newchars\r\n  }\r\n\r\n  shape = shape.slice()\r\n  canvas.width  = shape[0]\r\n  canvas.height = shape[1]\r\n\r\n  var ctx = canvas.getContext('2d')\r\n\r\n  ctx.fillStyle = '#000'\r\n  ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n  ctx.font = font\r\n  ctx.textAlign = 'center'\r\n  ctx.textBaseline = 'middle'\r\n  ctx.fillStyle = '#fff'\r\n\r\n  var x = step[0] / 2\r\n  var y = step[1] / 2\r\n  for (var i = 0; i < chars.length; i++) {\r\n    ctx.fillText(chars[i], x, y)\r\n    if ((x += step[0]) > shape[0] - step[0]/2) (x = step[0]/2), (y += step[1])\r\n  }\r\n\r\n  return canvas\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
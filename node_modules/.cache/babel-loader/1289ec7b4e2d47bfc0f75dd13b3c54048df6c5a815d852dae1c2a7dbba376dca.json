{"ast":null,"code":"// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n\n//\n// converts a list of segments into a list of regions, while also removing unnecessary verticies\n//\n\nfunction SegmentChainer(segments, eps, buildLog) {\n  var chains = [];\n  var regions = [];\n  segments.forEach(function (seg) {\n    var pt1 = seg.start;\n    var pt2 = seg.end;\n    if (eps.pointsSame(pt1, pt2)) {\n      console.warn('PolyBool: Warning: Zero-length segment detected; your epsilon is ' + 'probably too small or too large');\n      return;\n    }\n    if (buildLog) buildLog.chainStart(seg);\n\n    // search for two chains that this segment matches\n    var first_match = {\n      index: 0,\n      matches_head: false,\n      matches_pt1: false\n    };\n    var second_match = {\n      index: 0,\n      matches_head: false,\n      matches_pt1: false\n    };\n    var next_match = first_match;\n    function setMatch(index, matches_head, matches_pt1) {\n      // return true if we've matched twice\n      next_match.index = index;\n      next_match.matches_head = matches_head;\n      next_match.matches_pt1 = matches_pt1;\n      if (next_match === first_match) {\n        next_match = second_match;\n        return false;\n      }\n      next_match = null;\n      return true; // we've matched twice, we're done here\n    }\n\n    for (var i = 0; i < chains.length; i++) {\n      var chain = chains[i];\n      var head = chain[0];\n      var head2 = chain[1];\n      var tail = chain[chain.length - 1];\n      var tail2 = chain[chain.length - 2];\n      if (eps.pointsSame(head, pt1)) {\n        if (setMatch(i, true, true)) break;\n      } else if (eps.pointsSame(head, pt2)) {\n        if (setMatch(i, true, false)) break;\n      } else if (eps.pointsSame(tail, pt1)) {\n        if (setMatch(i, false, true)) break;\n      } else if (eps.pointsSame(tail, pt2)) {\n        if (setMatch(i, false, false)) break;\n      }\n    }\n    if (next_match === first_match) {\n      // we didn't match anything, so create a new chain\n      chains.push([pt1, pt2]);\n      if (buildLog) buildLog.chainNew(pt1, pt2);\n      return;\n    }\n    if (next_match === second_match) {\n      // we matched a single chain\n\n      if (buildLog) buildLog.chainMatch(first_match.index);\n\n      // add the other point to the apporpriate end, and check to see if we've closed the\n      // chain into a loop\n\n      var index = first_match.index;\n      var pt = first_match.matches_pt1 ? pt2 : pt1; // if we matched pt1, then we add pt2, etc\n      var addToHead = first_match.matches_head; // if we matched at head, then add to the head\n\n      var chain = chains[index];\n      var grow = addToHead ? chain[0] : chain[chain.length - 1];\n      var grow2 = addToHead ? chain[1] : chain[chain.length - 2];\n      var oppo = addToHead ? chain[chain.length - 1] : chain[0];\n      var oppo2 = addToHead ? chain[chain.length - 2] : chain[1];\n      if (eps.pointsCollinear(grow2, grow, pt)) {\n        // grow isn't needed because it's directly between grow2 and pt:\n        // grow2 ---grow---> pt\n        if (addToHead) {\n          if (buildLog) buildLog.chainRemoveHead(first_match.index, pt);\n          chain.shift();\n        } else {\n          if (buildLog) buildLog.chainRemoveTail(first_match.index, pt);\n          chain.pop();\n        }\n        grow = grow2; // old grow is gone... new grow is what grow2 was\n      }\n\n      if (eps.pointsSame(oppo, pt)) {\n        // we're closing the loop, so remove chain from chains\n        chains.splice(index, 1);\n        if (eps.pointsCollinear(oppo2, oppo, grow)) {\n          // oppo isn't needed because it's directly between oppo2 and grow:\n          // oppo2 ---oppo--->grow\n          if (addToHead) {\n            if (buildLog) buildLog.chainRemoveTail(first_match.index, grow);\n            chain.pop();\n          } else {\n            if (buildLog) buildLog.chainRemoveHead(first_match.index, grow);\n            chain.shift();\n          }\n        }\n        if (buildLog) buildLog.chainClose(first_match.index);\n\n        // we have a closed chain!\n        regions.push(chain);\n        return;\n      }\n\n      // not closing a loop, so just add it to the apporpriate side\n      if (addToHead) {\n        if (buildLog) buildLog.chainAddHead(first_match.index, pt);\n        chain.unshift(pt);\n      } else {\n        if (buildLog) buildLog.chainAddTail(first_match.index, pt);\n        chain.push(pt);\n      }\n      return;\n    }\n\n    // otherwise, we matched two chains, so we need to combine those chains together\n\n    function reverseChain(index) {\n      if (buildLog) buildLog.chainReverse(index);\n      chains[index].reverse(); // gee, that's easy\n    }\n\n    function appendChain(index1, index2) {\n      // index1 gets index2 appended to it, and index2 is removed\n      var chain1 = chains[index1];\n      var chain2 = chains[index2];\n      var tail = chain1[chain1.length - 1];\n      var tail2 = chain1[chain1.length - 2];\n      var head = chain2[0];\n      var head2 = chain2[1];\n      if (eps.pointsCollinear(tail2, tail, head)) {\n        // tail isn't needed because it's directly between tail2 and head\n        // tail2 ---tail---> head\n        if (buildLog) buildLog.chainRemoveTail(index1, tail);\n        chain1.pop();\n        tail = tail2; // old tail is gone... new tail is what tail2 was\n      }\n\n      if (eps.pointsCollinear(tail, head, head2)) {\n        // head isn't needed because it's directly between tail and head2\n        // tail ---head---> head2\n        if (buildLog) buildLog.chainRemoveHead(index2, head);\n        chain2.shift();\n      }\n      if (buildLog) buildLog.chainJoin(index1, index2);\n      chains[index1] = chain1.concat(chain2);\n      chains.splice(index2, 1);\n    }\n    var F = first_match.index;\n    var S = second_match.index;\n    if (buildLog) buildLog.chainConnect(F, S);\n    var reverseF = chains[F].length < chains[S].length; // reverse the shorter chain, if needed\n    if (first_match.matches_head) {\n      if (second_match.matches_head) {\n        if (reverseF) {\n          // <<<< F <<<< --- >>>> S >>>>\n          reverseChain(F);\n          // >>>> F >>>> --- >>>> S >>>>\n          appendChain(F, S);\n        } else {\n          // <<<< F <<<< --- >>>> S >>>>\n          reverseChain(S);\n          // <<<< F <<<< --- <<<< S <<<<   logically same as:\n          // >>>> S >>>> --- >>>> F >>>>\n          appendChain(S, F);\n        }\n      } else {\n        // <<<< F <<<< --- <<<< S <<<<   logically same as:\n        // >>>> S >>>> --- >>>> F >>>>\n        appendChain(S, F);\n      }\n    } else {\n      if (second_match.matches_head) {\n        // >>>> F >>>> --- >>>> S >>>>\n        appendChain(F, S);\n      } else {\n        if (reverseF) {\n          // >>>> F >>>> --- <<<< S <<<<\n          reverseChain(F);\n          // <<<< F <<<< --- <<<< S <<<<   logically same as:\n          // >>>> S >>>> --- >>>> F >>>>\n          appendChain(S, F);\n        } else {\n          // >>>> F >>>> --- <<<< S <<<<\n          reverseChain(S);\n          // >>>> F >>>> --- >>>> S >>>>\n          appendChain(F, S);\n        }\n      }\n    }\n  });\n  return regions;\n}\nmodule.exports = SegmentChainer;","map":{"version":3,"names":["SegmentChainer","segments","eps","buildLog","chains","regions","forEach","seg","pt1","start","pt2","end","pointsSame","console","warn","chainStart","first_match","index","matches_head","matches_pt1","second_match","next_match","setMatch","i","length","chain","head","head2","tail","tail2","push","chainNew","chainMatch","pt","addToHead","grow","grow2","oppo","oppo2","pointsCollinear","chainRemoveHead","shift","chainRemoveTail","pop","splice","chainClose","chainAddHead","unshift","chainAddTail","reverseChain","chainReverse","reverse","appendChain","index1","index2","chain1","chain2","chainJoin","concat","F","S","chainConnect","reverseF","module","exports"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/polybooljs/lib/segment-chainer.js"],"sourcesContent":["// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n\n//\n// converts a list of segments into a list of regions, while also removing unnecessary verticies\n//\n\nfunction SegmentChainer(segments, eps, buildLog){\n\tvar chains = [];\n\tvar regions = [];\n\n\tsegments.forEach(function(seg){\n\t\tvar pt1 = seg.start;\n\t\tvar pt2 = seg.end;\n\t\tif (eps.pointsSame(pt1, pt2)){\n\t\t\tconsole.warn('PolyBool: Warning: Zero-length segment detected; your epsilon is ' +\n\t\t\t\t'probably too small or too large');\n\t\t\treturn;\n\t\t}\n\n\t\tif (buildLog)\n\t\t\tbuildLog.chainStart(seg);\n\n\t\t// search for two chains that this segment matches\n\t\tvar first_match = {\n\t\t\tindex: 0,\n\t\t\tmatches_head: false,\n\t\t\tmatches_pt1: false\n\t\t};\n\t\tvar second_match = {\n\t\t\tindex: 0,\n\t\t\tmatches_head: false,\n\t\t\tmatches_pt1: false\n\t\t};\n\t\tvar next_match = first_match;\n\t\tfunction setMatch(index, matches_head, matches_pt1){\n\t\t\t// return true if we've matched twice\n\t\t\tnext_match.index = index;\n\t\t\tnext_match.matches_head = matches_head;\n\t\t\tnext_match.matches_pt1 = matches_pt1;\n\t\t\tif (next_match === first_match){\n\t\t\t\tnext_match = second_match;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tnext_match = null;\n\t\t\treturn true; // we've matched twice, we're done here\n\t\t}\n\t\tfor (var i = 0; i < chains.length; i++){\n\t\t\tvar chain = chains[i];\n\t\t\tvar head  = chain[0];\n\t\t\tvar head2 = chain[1];\n\t\t\tvar tail  = chain[chain.length - 1];\n\t\t\tvar tail2 = chain[chain.length - 2];\n\t\t\tif (eps.pointsSame(head, pt1)){\n\t\t\t\tif (setMatch(i, true, true))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (eps.pointsSame(head, pt2)){\n\t\t\t\tif (setMatch(i, true, false))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (eps.pointsSame(tail, pt1)){\n\t\t\t\tif (setMatch(i, false, true))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (eps.pointsSame(tail, pt2)){\n\t\t\t\tif (setMatch(i, false, false))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (next_match === first_match){\n\t\t\t// we didn't match anything, so create a new chain\n\t\t\tchains.push([ pt1, pt2 ]);\n\t\t\tif (buildLog)\n\t\t\t\tbuildLog.chainNew(pt1, pt2);\n\t\t\treturn;\n\t\t}\n\n\t\tif (next_match === second_match){\n\t\t\t// we matched a single chain\n\n\t\t\tif (buildLog)\n\t\t\t\tbuildLog.chainMatch(first_match.index);\n\n\t\t\t// add the other point to the apporpriate end, and check to see if we've closed the\n\t\t\t// chain into a loop\n\n\t\t\tvar index = first_match.index;\n\t\t\tvar pt = first_match.matches_pt1 ? pt2 : pt1; // if we matched pt1, then we add pt2, etc\n\t\t\tvar addToHead = first_match.matches_head; // if we matched at head, then add to the head\n\n\t\t\tvar chain = chains[index];\n\t\t\tvar grow  = addToHead ? chain[0] : chain[chain.length - 1];\n\t\t\tvar grow2 = addToHead ? chain[1] : chain[chain.length - 2];\n\t\t\tvar oppo  = addToHead ? chain[chain.length - 1] : chain[0];\n\t\t\tvar oppo2 = addToHead ? chain[chain.length - 2] : chain[1];\n\n\t\t\tif (eps.pointsCollinear(grow2, grow, pt)){\n\t\t\t\t// grow isn't needed because it's directly between grow2 and pt:\n\t\t\t\t// grow2 ---grow---> pt\n\t\t\t\tif (addToHead){\n\t\t\t\t\tif (buildLog)\n\t\t\t\t\t\tbuildLog.chainRemoveHead(first_match.index, pt);\n\t\t\t\t\tchain.shift();\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif (buildLog)\n\t\t\t\t\t\tbuildLog.chainRemoveTail(first_match.index, pt);\n\t\t\t\t\tchain.pop();\n\t\t\t\t}\n\t\t\t\tgrow = grow2; // old grow is gone... new grow is what grow2 was\n\t\t\t}\n\n\t\t\tif (eps.pointsSame(oppo, pt)){\n\t\t\t\t// we're closing the loop, so remove chain from chains\n\t\t\t\tchains.splice(index, 1);\n\n\t\t\t\tif (eps.pointsCollinear(oppo2, oppo, grow)){\n\t\t\t\t\t// oppo isn't needed because it's directly between oppo2 and grow:\n\t\t\t\t\t// oppo2 ---oppo--->grow\n\t\t\t\t\tif (addToHead){\n\t\t\t\t\t\tif (buildLog)\n\t\t\t\t\t\t\tbuildLog.chainRemoveTail(first_match.index, grow);\n\t\t\t\t\t\tchain.pop();\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif (buildLog)\n\t\t\t\t\t\t\tbuildLog.chainRemoveHead(first_match.index, grow);\n\t\t\t\t\t\tchain.shift();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (buildLog)\n\t\t\t\t\tbuildLog.chainClose(first_match.index);\n\n\t\t\t\t// we have a closed chain!\n\t\t\t\tregions.push(chain);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// not closing a loop, so just add it to the apporpriate side\n\t\t\tif (addToHead){\n\t\t\t\tif (buildLog)\n\t\t\t\t\tbuildLog.chainAddHead(first_match.index, pt);\n\t\t\t\tchain.unshift(pt);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif (buildLog)\n\t\t\t\t\tbuildLog.chainAddTail(first_match.index, pt);\n\t\t\t\tchain.push(pt);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// otherwise, we matched two chains, so we need to combine those chains together\n\n\t\tfunction reverseChain(index){\n\t\t\tif (buildLog)\n\t\t\t\tbuildLog.chainReverse(index);\n\t\t\tchains[index].reverse(); // gee, that's easy\n\t\t}\n\n\t\tfunction appendChain(index1, index2){\n\t\t\t// index1 gets index2 appended to it, and index2 is removed\n\t\t\tvar chain1 = chains[index1];\n\t\t\tvar chain2 = chains[index2];\n\t\t\tvar tail  = chain1[chain1.length - 1];\n\t\t\tvar tail2 = chain1[chain1.length - 2];\n\t\t\tvar head  = chain2[0];\n\t\t\tvar head2 = chain2[1];\n\n\t\t\tif (eps.pointsCollinear(tail2, tail, head)){\n\t\t\t\t// tail isn't needed because it's directly between tail2 and head\n\t\t\t\t// tail2 ---tail---> head\n\t\t\t\tif (buildLog)\n\t\t\t\t\tbuildLog.chainRemoveTail(index1, tail);\n\t\t\t\tchain1.pop();\n\t\t\t\ttail = tail2; // old tail is gone... new tail is what tail2 was\n\t\t\t}\n\n\t\t\tif (eps.pointsCollinear(tail, head, head2)){\n\t\t\t\t// head isn't needed because it's directly between tail and head2\n\t\t\t\t// tail ---head---> head2\n\t\t\t\tif (buildLog)\n\t\t\t\t\tbuildLog.chainRemoveHead(index2, head);\n\t\t\t\tchain2.shift();\n\t\t\t}\n\n\t\t\tif (buildLog)\n\t\t\t\tbuildLog.chainJoin(index1, index2);\n\t\t\tchains[index1] = chain1.concat(chain2);\n\t\t\tchains.splice(index2, 1);\n\t\t}\n\n\t\tvar F = first_match.index;\n\t\tvar S = second_match.index;\n\n\t\tif (buildLog)\n\t\t\tbuildLog.chainConnect(F, S);\n\n\t\tvar reverseF = chains[F].length < chains[S].length; // reverse the shorter chain, if needed\n\t\tif (first_match.matches_head){\n\t\t\tif (second_match.matches_head){\n\t\t\t\tif (reverseF){\n\t\t\t\t\t// <<<< F <<<< --- >>>> S >>>>\n\t\t\t\t\treverseChain(F);\n\t\t\t\t\t// >>>> F >>>> --- >>>> S >>>>\n\t\t\t\t\tappendChain(F, S);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t// <<<< F <<<< --- >>>> S >>>>\n\t\t\t\t\treverseChain(S);\n\t\t\t\t\t// <<<< F <<<< --- <<<< S <<<<   logically same as:\n\t\t\t\t\t// >>>> S >>>> --- >>>> F >>>>\n\t\t\t\t\tappendChain(S, F);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\t// <<<< F <<<< --- <<<< S <<<<   logically same as:\n\t\t\t\t// >>>> S >>>> --- >>>> F >>>>\n\t\t\t\tappendChain(S, F);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif (second_match.matches_head){\n\t\t\t\t// >>>> F >>>> --- >>>> S >>>>\n\t\t\t\tappendChain(F, S);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif (reverseF){\n\t\t\t\t\t// >>>> F >>>> --- <<<< S <<<<\n\t\t\t\t\treverseChain(F);\n\t\t\t\t\t// <<<< F <<<< --- <<<< S <<<<   logically same as:\n\t\t\t\t\t// >>>> S >>>> --- >>>> F >>>>\n\t\t\t\t\tappendChain(S, F);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t// >>>> F >>>> --- <<<< S <<<<\n\t\t\t\t\treverseChain(S);\n\t\t\t\t\t// >>>> F >>>> --- >>>> S >>>>\n\t\t\t\t\tappendChain(F, S);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn regions;\n}\n\nmodule.exports = SegmentChainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../lib');\nvar Template = require('../plot_api/plot_template');\nvar handleDomainDefaults = require('./domain').defaults;\n\n/**\n * Find and supply defaults to all subplots of a given type\n * This handles subplots that are contained within one container - so\n * gl3d, geo, ternary... but not 2d axes which have separate x and y axes\n * finds subplots, coerces their `domain` attributes, then calls the\n * given handleDefaults function to fill in everything else.\n *\n * layoutIn: the complete user-supplied input layout\n * layoutOut: the complete finished layout\n * fullData: the finished data array, used only to find subplots\n * opts: {\n *  type: subplot type string\n *  attributes: subplot attributes object\n *  partition: 'x' or 'y', which direction to divide domain space by default\n *      (default 'x', ie side-by-side subplots)\n *      TODO: this option is only here because 3D and geo made opposite\n *      choices in this regard previously and I didn't want to change it.\n *      Instead we should do:\n *      - something consistent\n *      - something more square (4 cuts 2x2, 5/6 cuts 2x3, etc.)\n *      - something that includes all subplot types in one arrangement,\n *        now that we can have them together!\n *  handleDefaults: function of (subplotLayoutIn, subplotLayoutOut, coerce, opts)\n *      this opts object is passed through to handleDefaults, so attach any\n *      additional items needed by this function here as well\n * }\n */\nmodule.exports = function handleSubplotDefaults(layoutIn, layoutOut, fullData, opts) {\n  var subplotType = opts.type;\n  var subplotAttributes = opts.attributes;\n  var handleDefaults = opts.handleDefaults;\n  var partition = opts.partition || 'x';\n  var ids = layoutOut._subplots[subplotType];\n  var idsLength = ids.length;\n  var baseId = idsLength && ids[0].replace(/\\d+$/, '');\n  var subplotLayoutIn, subplotLayoutOut;\n  function coerce(attr, dflt) {\n    return Lib.coerce(subplotLayoutIn, subplotLayoutOut, subplotAttributes, attr, dflt);\n  }\n  for (var i = 0; i < idsLength; i++) {\n    var id = ids[i];\n\n    // ternary traces get a layout ternary for free!\n    if (layoutIn[id]) subplotLayoutIn = layoutIn[id];else subplotLayoutIn = layoutIn[id] = {};\n    subplotLayoutOut = Template.newContainer(layoutOut, id, baseId);\n\n    // All subplot containers get a `uirevision` inheriting from the base.\n    // Currently all subplots containers have some user interaction\n    // attributes, but if we ever add one that doesn't, we would need an\n    // option to skip this step.\n    coerce('uirevision', layoutOut.uirevision);\n    var dfltDomains = {};\n    dfltDomains[partition] = [i / idsLength, (i + 1) / idsLength];\n    handleDomainDefaults(subplotLayoutOut, layoutOut, coerce, dfltDomains);\n    opts.id = id;\n    handleDefaults(subplotLayoutIn, subplotLayoutOut, coerce, opts);\n  }\n};","map":{"version":3,"names":["Lib","require","Template","handleDomainDefaults","defaults","module","exports","handleSubplotDefaults","layoutIn","layoutOut","fullData","opts","subplotType","type","subplotAttributes","attributes","handleDefaults","partition","ids","_subplots","idsLength","length","baseId","replace","subplotLayoutIn","subplotLayoutOut","coerce","attr","dflt","i","id","newContainer","uirevision","dfltDomains"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/plots/subplot_defaults.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Lib = require('../lib');\nvar Template = require('../plot_api/plot_template');\nvar handleDomainDefaults = require('./domain').defaults;\n\n\n/**\n * Find and supply defaults to all subplots of a given type\n * This handles subplots that are contained within one container - so\n * gl3d, geo, ternary... but not 2d axes which have separate x and y axes\n * finds subplots, coerces their `domain` attributes, then calls the\n * given handleDefaults function to fill in everything else.\n *\n * layoutIn: the complete user-supplied input layout\n * layoutOut: the complete finished layout\n * fullData: the finished data array, used only to find subplots\n * opts: {\n *  type: subplot type string\n *  attributes: subplot attributes object\n *  partition: 'x' or 'y', which direction to divide domain space by default\n *      (default 'x', ie side-by-side subplots)\n *      TODO: this option is only here because 3D and geo made opposite\n *      choices in this regard previously and I didn't want to change it.\n *      Instead we should do:\n *      - something consistent\n *      - something more square (4 cuts 2x2, 5/6 cuts 2x3, etc.)\n *      - something that includes all subplot types in one arrangement,\n *        now that we can have them together!\n *  handleDefaults: function of (subplotLayoutIn, subplotLayoutOut, coerce, opts)\n *      this opts object is passed through to handleDefaults, so attach any\n *      additional items needed by this function here as well\n * }\n */\nmodule.exports = function handleSubplotDefaults(layoutIn, layoutOut, fullData, opts) {\n    var subplotType = opts.type;\n    var subplotAttributes = opts.attributes;\n    var handleDefaults = opts.handleDefaults;\n    var partition = opts.partition || 'x';\n\n    var ids = layoutOut._subplots[subplotType];\n    var idsLength = ids.length;\n\n    var baseId = idsLength && ids[0].replace(/\\d+$/, '');\n\n    var subplotLayoutIn, subplotLayoutOut;\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(subplotLayoutIn, subplotLayoutOut, subplotAttributes, attr, dflt);\n    }\n\n    for(var i = 0; i < idsLength; i++) {\n        var id = ids[i];\n\n        // ternary traces get a layout ternary for free!\n        if(layoutIn[id]) subplotLayoutIn = layoutIn[id];\n        else subplotLayoutIn = layoutIn[id] = {};\n\n        subplotLayoutOut = Template.newContainer(layoutOut, id, baseId);\n\n        // All subplot containers get a `uirevision` inheriting from the base.\n        // Currently all subplots containers have some user interaction\n        // attributes, but if we ever add one that doesn't, we would need an\n        // option to skip this step.\n        coerce('uirevision', layoutOut.uirevision);\n\n        var dfltDomains = {};\n        dfltDomains[partition] = [i / idsLength, (i + 1) / idsLength];\n        handleDomainDefaults(subplotLayoutOut, layoutOut, coerce, dfltDomains);\n\n        opts.id = id;\n        handleDefaults(subplotLayoutIn, subplotLayoutOut, coerce, opts);\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC3B,IAAIC,QAAQ,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AACnD,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,UAAU,CAAC,CAACG,QAAQ;;AAGvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,SAASC,qBAAqB,CAACC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EACjF,IAAIC,WAAW,GAAGD,IAAI,CAACE,IAAI;EAC3B,IAAIC,iBAAiB,GAAGH,IAAI,CAACI,UAAU;EACvC,IAAIC,cAAc,GAAGL,IAAI,CAACK,cAAc;EACxC,IAAIC,SAAS,GAAGN,IAAI,CAACM,SAAS,IAAI,GAAG;EAErC,IAAIC,GAAG,GAAGT,SAAS,CAACU,SAAS,CAACP,WAAW,CAAC;EAC1C,IAAIQ,SAAS,GAAGF,GAAG,CAACG,MAAM;EAE1B,IAAIC,MAAM,GAAGF,SAAS,IAAIF,GAAG,CAAC,CAAC,CAAC,CAACK,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EAEpD,IAAIC,eAAe,EAAEC,gBAAgB;EAErC,SAASC,MAAM,CAACC,IAAI,EAAEC,IAAI,EAAE;IACxB,OAAO5B,GAAG,CAAC0B,MAAM,CAACF,eAAe,EAAEC,gBAAgB,EAAEX,iBAAiB,EAAEa,IAAI,EAAEC,IAAI,CAAC;EACvF;EAEA,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,SAAS,EAAES,CAAC,EAAE,EAAE;IAC/B,IAAIC,EAAE,GAAGZ,GAAG,CAACW,CAAC,CAAC;;IAEf;IACA,IAAGrB,QAAQ,CAACsB,EAAE,CAAC,EAAEN,eAAe,GAAGhB,QAAQ,CAACsB,EAAE,CAAC,CAAC,KAC3CN,eAAe,GAAGhB,QAAQ,CAACsB,EAAE,CAAC,GAAG,CAAC,CAAC;IAExCL,gBAAgB,GAAGvB,QAAQ,CAAC6B,YAAY,CAACtB,SAAS,EAAEqB,EAAE,EAAER,MAAM,CAAC;;IAE/D;IACA;IACA;IACA;IACAI,MAAM,CAAC,YAAY,EAAEjB,SAAS,CAACuB,UAAU,CAAC;IAE1C,IAAIC,WAAW,GAAG,CAAC,CAAC;IACpBA,WAAW,CAAChB,SAAS,CAAC,GAAG,CAACY,CAAC,GAAGT,SAAS,EAAE,CAACS,CAAC,GAAG,CAAC,IAAIT,SAAS,CAAC;IAC7DjB,oBAAoB,CAACsB,gBAAgB,EAAEhB,SAAS,EAAEiB,MAAM,EAAEO,WAAW,CAAC;IAEtEtB,IAAI,CAACmB,EAAE,GAAGA,EAAE;IACZd,cAAc,CAACQ,eAAe,EAAEC,gBAAgB,EAAEC,MAAM,EAAEf,IAAI,CAAC;EACnE;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar traceIs = require('../../registry').traceIs;\nvar autoType = require('./axis_autotype');\n\n/*\n *  data: the plot data to use in choosing auto type\n *  name: axis object name (ie 'xaxis') if one should be stored\n */\nmodule.exports = function handleTypeDefaults(containerIn, containerOut, coerce, options) {\n  var axType = coerce('type', (options.splomStash || {}).type);\n  if (axType === '-') {\n    setAutoType(containerOut, options.data);\n    if (containerOut.type === '-') {\n      containerOut.type = 'linear';\n    } else {\n      // copy autoType back to input axis\n      // note that if this object didn't exist\n      // in the input layout, we have to put it in\n      // this happens in the main supplyDefaults function\n      containerIn.type = containerOut.type;\n    }\n  }\n};\nfunction setAutoType(ax, data) {\n  // new logic: let people specify any type they want,\n  // only autotype if type is '-'\n  if (ax.type !== '-') return;\n  var id = ax._id;\n  var axLetter = id.charAt(0);\n\n  // support 3d\n  if (id.indexOf('scene') !== -1) id = axLetter;\n  var d0 = getFirstNonEmptyTrace(data, id, axLetter);\n  if (!d0) return;\n\n  // first check for histograms, as the count direction\n  // should always default to a linear axis\n  if (d0.type === 'histogram' && axLetter === {\n    v: 'y',\n    h: 'x'\n  }[d0.orientation || 'v']) {\n    ax.type = 'linear';\n    return;\n  }\n  var calAttr = axLetter + 'calendar';\n  var calendar = d0[calAttr];\n  var opts = {\n    noMultiCategory: !traceIs(d0, 'cartesian') || traceIs(d0, 'noMultiCategory')\n  };\n  var i;\n\n  // check all boxes on this x axis to see\n  // if they're dates, numbers, or categories\n  if (isBoxWithoutPositionCoords(d0, axLetter)) {\n    var posLetter = getBoxPosLetter(d0);\n    var boxPositions = [];\n    for (i = 0; i < data.length; i++) {\n      var trace = data[i];\n      if (!traceIs(trace, 'box-violin') || (trace[axLetter + 'axis'] || axLetter) !== id) continue;\n      if (trace[posLetter] !== undefined) boxPositions.push(trace[posLetter][0]);else if (trace.name !== undefined) boxPositions.push(trace.name);else boxPositions.push('text');\n      if (trace[calAttr] !== calendar) calendar = undefined;\n    }\n    ax.type = autoType(boxPositions, calendar, opts);\n  } else if (d0.type === 'splom') {\n    var dimensions = d0.dimensions;\n    var diag = d0._diag;\n    for (i = 0; i < dimensions.length; i++) {\n      var dim = dimensions[i];\n      if (dim.visible && (diag[i][0] === id || diag[i][1] === id)) {\n        ax.type = autoType(dim.values, calendar, opts);\n        break;\n      }\n    }\n  } else {\n    ax.type = autoType(d0[axLetter] || [d0[axLetter + '0']], calendar, opts);\n  }\n}\nfunction getFirstNonEmptyTrace(data, id, axLetter) {\n  for (var i = 0; i < data.length; i++) {\n    var trace = data[i];\n    if (trace.type === 'splom' && trace._length > 0 && (trace['_' + axLetter + 'axes'] || {})[id]) {\n      return trace;\n    }\n    if ((trace[axLetter + 'axis'] || axLetter) === id) {\n      if (isBoxWithoutPositionCoords(trace, axLetter)) {\n        return trace;\n      } else if ((trace[axLetter] || []).length || trace[axLetter + '0']) {\n        return trace;\n      }\n    }\n  }\n}\nfunction getBoxPosLetter(trace) {\n  return {\n    v: 'x',\n    h: 'y'\n  }[trace.orientation || 'v'];\n}\nfunction isBoxWithoutPositionCoords(trace, axLetter) {\n  var posLetter = getBoxPosLetter(trace);\n  var isBox = traceIs(trace, 'box-violin');\n  var isCandlestick = traceIs(trace._fullInput || {}, 'candlestick');\n  return isBox && !isCandlestick && axLetter === posLetter && trace[posLetter] === undefined && trace[posLetter + '0'] === undefined;\n}","map":{"version":3,"names":["traceIs","require","autoType","module","exports","handleTypeDefaults","containerIn","containerOut","coerce","options","axType","splomStash","type","setAutoType","data","ax","id","_id","axLetter","charAt","indexOf","d0","getFirstNonEmptyTrace","v","h","orientation","calAttr","calendar","opts","noMultiCategory","i","isBoxWithoutPositionCoords","posLetter","getBoxPosLetter","boxPositions","length","trace","undefined","push","name","dimensions","diag","_diag","dim","visible","values","_length","isBox","isCandlestick","_fullInput"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/plots/cartesian/type_defaults.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar traceIs = require('../../registry').traceIs;\nvar autoType = require('./axis_autotype');\n\n/*\n *  data: the plot data to use in choosing auto type\n *  name: axis object name (ie 'xaxis') if one should be stored\n */\nmodule.exports = function handleTypeDefaults(containerIn, containerOut, coerce, options) {\n    var axType = coerce('type', (options.splomStash || {}).type);\n\n    if(axType === '-') {\n        setAutoType(containerOut, options.data);\n\n        if(containerOut.type === '-') {\n            containerOut.type = 'linear';\n        } else {\n            // copy autoType back to input axis\n            // note that if this object didn't exist\n            // in the input layout, we have to put it in\n            // this happens in the main supplyDefaults function\n            containerIn.type = containerOut.type;\n        }\n    }\n};\n\nfunction setAutoType(ax, data) {\n    // new logic: let people specify any type they want,\n    // only autotype if type is '-'\n    if(ax.type !== '-') return;\n\n    var id = ax._id;\n    var axLetter = id.charAt(0);\n\n    // support 3d\n    if(id.indexOf('scene') !== -1) id = axLetter;\n\n    var d0 = getFirstNonEmptyTrace(data, id, axLetter);\n    if(!d0) return;\n\n    // first check for histograms, as the count direction\n    // should always default to a linear axis\n    if(d0.type === 'histogram' &&\n            axLetter === {v: 'y', h: 'x'}[d0.orientation || 'v']) {\n        ax.type = 'linear';\n        return;\n    }\n\n    var calAttr = axLetter + 'calendar';\n    var calendar = d0[calAttr];\n    var opts = {noMultiCategory: !traceIs(d0, 'cartesian') || traceIs(d0, 'noMultiCategory')};\n    var i;\n\n    // check all boxes on this x axis to see\n    // if they're dates, numbers, or categories\n    if(isBoxWithoutPositionCoords(d0, axLetter)) {\n        var posLetter = getBoxPosLetter(d0);\n        var boxPositions = [];\n\n        for(i = 0; i < data.length; i++) {\n            var trace = data[i];\n            if(!traceIs(trace, 'box-violin') || (trace[axLetter + 'axis'] || axLetter) !== id) continue;\n\n            if(trace[posLetter] !== undefined) boxPositions.push(trace[posLetter][0]);\n            else if(trace.name !== undefined) boxPositions.push(trace.name);\n            else boxPositions.push('text');\n\n            if(trace[calAttr] !== calendar) calendar = undefined;\n        }\n\n        ax.type = autoType(boxPositions, calendar, opts);\n    }\n    else if(d0.type === 'splom') {\n        var dimensions = d0.dimensions;\n        var diag = d0._diag;\n        for(i = 0; i < dimensions.length; i++) {\n            var dim = dimensions[i];\n            if(dim.visible && (diag[i][0] === id || diag[i][1] === id)) {\n                ax.type = autoType(dim.values, calendar, opts);\n                break;\n            }\n        }\n    }\n    else {\n        ax.type = autoType(d0[axLetter] || [d0[axLetter + '0']], calendar, opts);\n    }\n}\n\nfunction getFirstNonEmptyTrace(data, id, axLetter) {\n    for(var i = 0; i < data.length; i++) {\n        var trace = data[i];\n\n        if(trace.type === 'splom' &&\n                trace._length > 0 &&\n                (trace['_' + axLetter + 'axes'] || {})[id]\n        ) {\n            return trace;\n        }\n\n        if((trace[axLetter + 'axis'] || axLetter) === id) {\n            if(isBoxWithoutPositionCoords(trace, axLetter)) {\n                return trace;\n            }\n            else if((trace[axLetter] || []).length || trace[axLetter + '0']) {\n                return trace;\n            }\n        }\n    }\n}\n\nfunction getBoxPosLetter(trace) {\n    return {v: 'x', h: 'y'}[trace.orientation || 'v'];\n}\n\nfunction isBoxWithoutPositionCoords(trace, axLetter) {\n    var posLetter = getBoxPosLetter(trace);\n    var isBox = traceIs(trace, 'box-violin');\n    var isCandlestick = traceIs(trace._fullInput || {}, 'candlestick');\n\n    return (\n        isBox &&\n        !isCandlestick &&\n        axLetter === posLetter &&\n        trace[posLetter] === undefined &&\n        trace[posLetter + '0'] === undefined\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
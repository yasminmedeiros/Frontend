{"ast":null,"code":"/*\nInput:  translation ; a 3 component vector\n        scale       ; a 3 component vector\n        skew        ; skew factors XY,XZ,YZ represented as a 3 component vector\n        perspective ; a 4 component vector\n        quaternion  ; a 4 component vector\nOutput: matrix      ; a 4x4 matrix\n\nFrom: http://www.w3.org/TR/css3-transforms/#recomposing-to-a-3d-matrix\n*/\n\nvar mat4 = {\n  identity: require('gl-mat4/identity'),\n  translate: require('gl-mat4/translate'),\n  multiply: require('gl-mat4/multiply'),\n  create: require('gl-mat4/create'),\n  scale: require('gl-mat4/scale'),\n  fromRotationTranslation: require('gl-mat4/fromRotationTranslation')\n};\nvar rotationMatrix = mat4.create();\nvar temp = mat4.create();\nmodule.exports = function recomposeMat4(matrix, translation, scale, skew, perspective, quaternion) {\n  mat4.identity(matrix);\n\n  //apply translation & rotation\n  mat4.fromRotationTranslation(matrix, quaternion, translation);\n\n  //apply perspective\n  matrix[3] = perspective[0];\n  matrix[7] = perspective[1];\n  matrix[11] = perspective[2];\n  matrix[15] = perspective[3];\n\n  // apply skew\n  // temp is a identity 4x4 matrix initially\n  mat4.identity(temp);\n  if (skew[2] !== 0) {\n    temp[9] = skew[2];\n    mat4.multiply(matrix, matrix, temp);\n  }\n  if (skew[1] !== 0) {\n    temp[9] = 0;\n    temp[8] = skew[1];\n    mat4.multiply(matrix, matrix, temp);\n  }\n  if (skew[0] !== 0) {\n    temp[8] = 0;\n    temp[4] = skew[0];\n    mat4.multiply(matrix, matrix, temp);\n  }\n\n  //apply scale\n  mat4.scale(matrix, matrix, scale);\n  return matrix;\n};","map":{"version":3,"names":["mat4","identity","require","translate","multiply","create","scale","fromRotationTranslation","rotationMatrix","temp","module","exports","recomposeMat4","matrix","translation","skew","perspective","quaternion"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/mat4-recompose/index.js"],"sourcesContent":["/*\nInput:  translation ; a 3 component vector\n        scale       ; a 3 component vector\n        skew        ; skew factors XY,XZ,YZ represented as a 3 component vector\n        perspective ; a 4 component vector\n        quaternion  ; a 4 component vector\nOutput: matrix      ; a 4x4 matrix\n\nFrom: http://www.w3.org/TR/css3-transforms/#recomposing-to-a-3d-matrix\n*/\n\nvar mat4 = {\n    identity: require('gl-mat4/identity'),\n    translate: require('gl-mat4/translate'),\n    multiply: require('gl-mat4/multiply'),\n    create: require('gl-mat4/create'),\n    scale: require('gl-mat4/scale'),\n    fromRotationTranslation: require('gl-mat4/fromRotationTranslation')\n}\n\nvar rotationMatrix = mat4.create()\nvar temp = mat4.create()\n\nmodule.exports = function recomposeMat4(matrix, translation, scale, skew, perspective, quaternion) {\n    mat4.identity(matrix)\n\n    //apply translation & rotation\n    mat4.fromRotationTranslation(matrix, quaternion, translation)\n\n    //apply perspective\n    matrix[3] = perspective[0]\n    matrix[7] = perspective[1]\n    matrix[11] = perspective[2]\n    matrix[15] = perspective[3]\n        \n    // apply skew\n    // temp is a identity 4x4 matrix initially\n    mat4.identity(temp)\n\n    if (skew[2] !== 0) {\n        temp[9] = skew[2]\n        mat4.multiply(matrix, matrix, temp)\n    }\n\n    if (skew[1] !== 0) {\n        temp[9] = 0\n        temp[8] = skew[1]\n        mat4.multiply(matrix, matrix, temp)\n    }\n\n    if (skew[0] !== 0) {\n        temp[8] = 0\n        temp[4] = skew[0]\n        mat4.multiply(matrix, matrix, temp)\n    }\n\n    //apply scale\n    mat4.scale(matrix, matrix, scale)\n    return matrix\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,IAAI,GAAG;EACPC,QAAQ,EAAEC,OAAO,CAAC,kBAAkB,CAAC;EACrCC,SAAS,EAAED,OAAO,CAAC,mBAAmB,CAAC;EACvCE,QAAQ,EAAEF,OAAO,CAAC,kBAAkB,CAAC;EACrCG,MAAM,EAAEH,OAAO,CAAC,gBAAgB,CAAC;EACjCI,KAAK,EAAEJ,OAAO,CAAC,eAAe,CAAC;EAC/BK,uBAAuB,EAAEL,OAAO,CAAC,iCAAiC;AACtE,CAAC;AAED,IAAIM,cAAc,GAAGR,IAAI,CAACK,MAAM,EAAE;AAClC,IAAII,IAAI,GAAGT,IAAI,CAACK,MAAM,EAAE;AAExBK,MAAM,CAACC,OAAO,GAAG,SAASC,aAAa,CAACC,MAAM,EAAEC,WAAW,EAAER,KAAK,EAAES,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAE;EAC/FjB,IAAI,CAACC,QAAQ,CAACY,MAAM,CAAC;;EAErB;EACAb,IAAI,CAACO,uBAAuB,CAACM,MAAM,EAAEI,UAAU,EAAEH,WAAW,CAAC;;EAE7D;EACAD,MAAM,CAAC,CAAC,CAAC,GAAGG,WAAW,CAAC,CAAC,CAAC;EAC1BH,MAAM,CAAC,CAAC,CAAC,GAAGG,WAAW,CAAC,CAAC,CAAC;EAC1BH,MAAM,CAAC,EAAE,CAAC,GAAGG,WAAW,CAAC,CAAC,CAAC;EAC3BH,MAAM,CAAC,EAAE,CAAC,GAAGG,WAAW,CAAC,CAAC,CAAC;;EAE3B;EACA;EACAhB,IAAI,CAACC,QAAQ,CAACQ,IAAI,CAAC;EAEnB,IAAIM,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;IACfN,IAAI,CAAC,CAAC,CAAC,GAAGM,IAAI,CAAC,CAAC,CAAC;IACjBf,IAAI,CAACI,QAAQ,CAACS,MAAM,EAAEA,MAAM,EAAEJ,IAAI,CAAC;EACvC;EAEA,IAAIM,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;IACfN,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;IACXA,IAAI,CAAC,CAAC,CAAC,GAAGM,IAAI,CAAC,CAAC,CAAC;IACjBf,IAAI,CAACI,QAAQ,CAACS,MAAM,EAAEA,MAAM,EAAEJ,IAAI,CAAC;EACvC;EAEA,IAAIM,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;IACfN,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;IACXA,IAAI,CAAC,CAAC,CAAC,GAAGM,IAAI,CAAC,CAAC,CAAC;IACjBf,IAAI,CAACI,QAAQ,CAACS,MAAM,EAAEA,MAAM,EAAEJ,IAAI,CAAC;EACvC;;EAEA;EACAT,IAAI,CAACM,KAAK,CAACO,MAAM,EAAEA,MAAM,EAAEP,KAAK,CAAC;EACjC,OAAOO,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
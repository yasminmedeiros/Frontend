{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorscaleAttrs = require('../../components/colorscale/attributes');\nvar colorbarAttrs = require('../../components/colorbar/attributes');\nvar surfaceAtts = require('../surface/attributes');\nvar baseAttrs = require('../../plots/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nmodule.exports = extendFlat({\n  x: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z`', 'jointly represent the X, Y and Z coordinates of the nth vertex.'].join(' ')\n  },\n  y: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z`', 'jointly represent the X, Y and Z coordinates of the nth vertex.'].join(' ')\n  },\n  z: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z`', 'jointly represent the X, Y and Z coordinates of the nth vertex.'].join(' ')\n  },\n  i: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['A vector of vertex indices, i.e. integer values between 0 and the length of the vertex', 'vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}`', 'together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet', '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a', 'point in space, which is the first vertex of a triangle.'].join(' ')\n  },\n  j: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['A vector of vertex indices, i.e. integer values between 0 and the length of the vertex', 'vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}` ', 'together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet', '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a', 'point in space, which is the second vertex of a triangle.'].join(' ')\n  },\n  k: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['A vector of vertex indices, i.e. integer values between 0 and the length of the vertex', 'vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}`', 'together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet ', '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a', 'point in space, which is the third vertex of a triangle.'].join(' ')\n  },\n  text: {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    arrayOk: true,\n    editType: 'calc',\n    description: ['Sets the text elements associated with the vertices.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  },\n  delaunayaxis: {\n    valType: 'enumerated',\n    role: 'info',\n    values: ['x', 'y', 'z'],\n    dflt: 'z',\n    editType: 'calc',\n    description: ['Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the', 'Delaunay triangulation.', 'It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate', 'Delaunay triangulation.'].join(' ')\n  },\n  alphahull: {\n    valType: 'number',\n    role: 'style',\n    dflt: -1,\n    editType: 'calc',\n    description: ['Determines how the mesh surface triangles are derived from the set of', 'vertices (points) represented by the `x`, `y` and `z` arrays, if', 'the `i`, `j`, `k` arrays are not supplied.', 'For general use of `mesh3d` it is preferred that `i`, `j`, `k` are', 'supplied.', 'If *-1*, Delaunay triangulation is used, which is mainly suitable if the', 'mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`.', 'In case the `delaunayaxis` intersects the mesh surface at more than one point', 'it will result triangles that are very long in the dimension of `delaunayaxis`.', 'If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value', 'signals the use of the alpha-shape algorithm, _and_ its value', 'acts as the parameter for the mesh fitting.', 'If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies', 'or if the intention is to enclose the `x`, `y` and `z` point set into a convex', 'hull.'].join(' ')\n  },\n  intensity: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the vertex intensity values,', 'used for plotting fields on meshes'].join(' ')\n  },\n  // Color field\n  color: {\n    valType: 'color',\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets the color of the whole mesh'\n  },\n  vertexcolor: {\n    valType: 'data_array',\n    role: 'style',\n    editType: 'calc',\n    description: ['Sets the color of each vertex', 'Overrides *color*.'].join(' ')\n  },\n  facecolor: {\n    valType: 'data_array',\n    role: 'style',\n    editType: 'calc',\n    description: ['Sets the color of each face', 'Overrides *color* and *vertexcolor*.'].join(' ')\n  },\n  transforms: undefined\n}, colorscaleAttrs('', {\n  colorAttr: '`intensity`',\n  showScaleDflt: true,\n  editTypeOverride: 'calc'\n}), {\n  colorbar: colorbarAttrs,\n  opacity: surfaceAtts.opacity,\n  // Flat shaded mode\n  flatshading: {\n    valType: 'boolean',\n    role: 'style',\n    dflt: false,\n    editType: 'calc',\n    description: ['Determines whether or not normal smoothing is applied to the meshes,', 'creating meshes with an angular, low-poly look via flat reflections.'].join(' ')\n  },\n  contour: {\n    show: extendFlat({}, surfaceAtts.contours.x.show, {\n      description: ['Sets whether or not dynamic contours are shown on hover'].join(' ')\n    }),\n    color: surfaceAtts.contours.x.color,\n    width: surfaceAtts.contours.x.width,\n    editType: 'calc'\n  },\n  lightposition: {\n    x: extendFlat({}, surfaceAtts.lightposition.x, {\n      dflt: 1e5\n    }),\n    y: extendFlat({}, surfaceAtts.lightposition.y, {\n      dflt: 1e5\n    }),\n    z: extendFlat({}, surfaceAtts.lightposition.z, {\n      dflt: 0\n    }),\n    editType: 'calc'\n  },\n  lighting: extendFlat({\n    vertexnormalsepsilon: {\n      valType: 'number',\n      role: 'style',\n      min: 0.00,\n      max: 1,\n      dflt: 1e-12,\n      // otherwise finely tessellated things eg. the brain will have no specular light reflection\n      editType: 'calc',\n      description: 'Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.'\n    },\n    facenormalsepsilon: {\n      valType: 'number',\n      role: 'style',\n      min: 0.00,\n      max: 1,\n      dflt: 1e-6,\n      // even the brain model doesn't appear to need finer than this\n      editType: 'calc',\n      description: 'Epsilon for face normals calculation avoids math issues arising from degenerate geometry.'\n    },\n    editType: 'calc'\n  }, surfaceAtts.lighting),\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    editType: 'calc'\n  })\n});","map":{"version":3,"names":["colorscaleAttrs","require","colorbarAttrs","surfaceAtts","baseAttrs","extendFlat","module","exports","x","valType","editType","description","join","y","z","i","j","k","text","role","dflt","arrayOk","delaunayaxis","values","alphahull","intensity","color","vertexcolor","facecolor","transforms","undefined","colorAttr","showScaleDflt","editTypeOverride","colorbar","opacity","flatshading","contour","show","contours","width","lightposition","lighting","vertexnormalsepsilon","min","max","facenormalsepsilon","hoverinfo"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/traces/mesh3d/attributes.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorscaleAttrs = require('../../components/colorscale/attributes');\nvar colorbarAttrs = require('../../components/colorbar/attributes');\nvar surfaceAtts = require('../surface/attributes');\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = extendFlat({\n    x: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z`',\n            'jointly represent the X, Y and Z coordinates of the nth vertex.'\n        ].join(' ')\n    },\n    y: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z`',\n            'jointly represent the X, Y and Z coordinates of the nth vertex.'\n        ].join(' ')\n    },\n    z: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z`',\n            'jointly represent the X, Y and Z coordinates of the nth vertex.'\n        ].join(' ')\n    },\n\n    i: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'A vector of vertex indices, i.e. integer values between 0 and the length of the vertex',\n            'vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}`',\n            'together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet',\n            '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a',\n            'point in space, which is the first vertex of a triangle.'\n        ].join(' ')\n    },\n    j: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'A vector of vertex indices, i.e. integer values between 0 and the length of the vertex',\n            'vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}` ',\n            'together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet',\n            '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a',\n            'point in space, which is the second vertex of a triangle.'\n        ].join(' ')\n\n    },\n    k: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'A vector of vertex indices, i.e. integer values between 0 and the length of the vertex',\n            'vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}`',\n            'together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet ',\n            '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a',\n            'point in space, which is the third vertex of a triangle.'\n        ].join(' ')\n\n    },\n\n    text: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        arrayOk: true,\n        editType: 'calc',\n        description: [\n            'Sets the text elements associated with the vertices.',\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\n            'these elements will be seen in the hover labels.'\n        ].join(' ')\n    },\n\n    delaunayaxis: {\n        valType: 'enumerated',\n        role: 'info',\n        values: [ 'x', 'y', 'z' ],\n        dflt: 'z',\n        editType: 'calc',\n        description: [\n            'Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the',\n            'Delaunay triangulation.',\n            'It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate',\n            'Delaunay triangulation.'\n        ].join(' ')\n    },\n\n    alphahull: {\n        valType: 'number',\n        role: 'style',\n        dflt: -1,\n        editType: 'calc',\n        description: [\n            'Determines how the mesh surface triangles are derived from the set of',\n            'vertices (points) represented by the `x`, `y` and `z` arrays, if',\n            'the `i`, `j`, `k` arrays are not supplied.',\n            'For general use of `mesh3d` it is preferred that `i`, `j`, `k` are',\n            'supplied.',\n\n            'If *-1*, Delaunay triangulation is used, which is mainly suitable if the',\n            'mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`.',\n            'In case the `delaunayaxis` intersects the mesh surface at more than one point',\n            'it will result triangles that are very long in the dimension of `delaunayaxis`.',\n\n            'If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value',\n            'signals the use of the alpha-shape algorithm, _and_ its value',\n            'acts as the parameter for the mesh fitting.',\n\n            'If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies',\n            'or if the intention is to enclose the `x`, `y` and `z` point set into a convex',\n            'hull.'\n        ].join(' ')\n    },\n\n    intensity: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the vertex intensity values,',\n            'used for plotting fields on meshes'\n        ].join(' ')\n    },\n\n    // Color field\n    color: {\n        valType: 'color',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the color of the whole mesh'\n    },\n    vertexcolor: {\n        valType: 'data_array',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Sets the color of each vertex',\n            'Overrides *color*.'\n        ].join(' ')\n    },\n    facecolor: {\n        valType: 'data_array',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Sets the color of each face',\n            'Overrides *color* and *vertexcolor*.'\n        ].join(' ')\n    },\n    transforms: undefined\n},\n\ncolorscaleAttrs('', {\n    colorAttr: '`intensity`',\n    showScaleDflt: true,\n    editTypeOverride: 'calc'\n}), {\n\n    colorbar: colorbarAttrs,\n\n    opacity: surfaceAtts.opacity,\n\n    // Flat shaded mode\n    flatshading: {\n        valType: 'boolean',\n        role: 'style',\n        dflt: false,\n        editType: 'calc',\n        description: [\n            'Determines whether or not normal smoothing is applied to the meshes,',\n            'creating meshes with an angular, low-poly look via flat reflections.'\n        ].join(' ')\n    },\n\n    contour: {\n        show: extendFlat({}, surfaceAtts.contours.x.show, {\n            description: [\n                'Sets whether or not dynamic contours are shown on hover'\n            ].join(' ')\n        }),\n        color: surfaceAtts.contours.x.color,\n        width: surfaceAtts.contours.x.width,\n        editType: 'calc'\n    },\n\n    lightposition: {\n        x: extendFlat({}, surfaceAtts.lightposition.x, {dflt: 1e5}),\n        y: extendFlat({}, surfaceAtts.lightposition.y, {dflt: 1e5}),\n        z: extendFlat({}, surfaceAtts.lightposition.z, {dflt: 0}),\n        editType: 'calc'\n    },\n    lighting: extendFlat({\n        vertexnormalsepsilon: {\n            valType: 'number',\n            role: 'style',\n            min: 0.00,\n            max: 1,\n            dflt: 1e-12, // otherwise finely tessellated things eg. the brain will have no specular light reflection\n            editType: 'calc',\n            description: 'Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.'\n        },\n        facenormalsepsilon: {\n            valType: 'number',\n            role: 'style',\n            min: 0.00,\n            max: 1,\n            dflt: 1e-6, // even the brain model doesn't appear to need finer than this\n            editType: 'calc',\n            description: 'Epsilon for face normals calculation avoids math issues arising from degenerate geometry.'\n        },\n        editType: 'calc'\n    }, surfaceAtts.lighting),\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {editType: 'calc'})\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
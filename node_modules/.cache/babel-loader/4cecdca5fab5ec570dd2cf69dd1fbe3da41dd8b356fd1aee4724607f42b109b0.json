{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar palettes = require('./scales.js').scales;\nvar paletteStr = Object.keys(palettes);\nfunction code(s) {\n  return '`' + s + '`';\n}\n\n/**\n * Make colorscale attribute declarations for\n *\n * - colorscale,\n * - (c|z)auto, (c|z)min, (c|z)max,\n * - autocolorscale, reversescale,\n * - showscale (optionally)\n * - color (optionally)\n *\n * @param {string} context (dflt: '', i.e. from trace root):\n *     the container this is in ('', *marker*, *marker.line* etc)\n *\n * @param {object} opts:\n *   - cLetter {string} (dflt: 'c'):\n *     leading letter for 'min', 'max and 'auto' attribute (either 'z' or 'c')\n *\n *   - colorAttr {string} (dflt: 'z' if `cLetter: 'z'`, 'color' if `cLetter: 'c'`):\n *     (for descriptions) sets the name of the color attribute that maps to the colorscale.\n *\n *     N.B. if `colorAttr: 'color'`, we include the `color` declaration here.\n *\n *   - onlyIfNumerical {string} (dflt: false' if `cLetter: 'z'`, true if `cLetter: 'c'`):\n *     (for descriptions) set to true if colorscale attribute only\n *\n *   - colorscaleDflt {string}:\n *     overrides the colorscale dflt\n *\n *   - autoColorDflt {boolean} (dflt true):\n *     normally autocolorscale.dflt is `true`, but pass `false` to override\n *\n *   - noScale {boolean} (dflt: true if `context: 'marker.line'`, false otherwise):\n *     set to `false` to not include showscale attribute (e.g. for 'marker.line')\n *\n *   - showScaleDflt {boolean} (dflt: true if `cLetter: 'z'`, false otherwise)\n *\n *   - editTypeOverride {boolean} (dflt: ''):\n *     most of these attributes already require a recalc, but the ones that do not\n *     have editType *style* or *plot* unless you override (presumably with *calc*)\n *\n *   - anim {boolean) (dflt: undefined): is 'color' animatable?\n *\n * @return {object}\n */\nmodule.exports = function colorScaleAttrs(context, opts) {\n  context = context || '';\n  opts = opts || {};\n  var cLetter = opts.cLetter || 'c';\n  var onlyIfNumerical = 'onlyIfNumerical' in opts ? opts.onlyIfNumerical : Boolean(context);\n  var noScale = 'noScale' in opts ? opts.noScale : context === 'marker.line';\n  var showScaleDflt = 'showScaleDflt' in opts ? opts.showScaleDflt : cLetter === 'z';\n  var colorscaleDflt = typeof opts.colorscaleDflt === 'string' ? palettes[opts.colorscaleDflt] : null;\n  var editTypeOverride = opts.editTypeOverride || '';\n  var contextHead = context ? context + '.' : '';\n  var colorAttr, colorAttrFull;\n  if ('colorAttr' in opts) {\n    colorAttr = opts.colorAttr;\n    colorAttrFull = opts.colorAttr;\n  } else {\n    colorAttr = {\n      z: 'z',\n      c: 'color'\n    }[cLetter];\n    colorAttrFull = 'in ' + code(contextHead + colorAttr);\n  }\n  var effectDesc = onlyIfNumerical ? ' Has an effect only if ' + colorAttrFull + 'is set to a numerical array.' : '';\n  var auto = cLetter + 'auto';\n  var min = cLetter + 'min';\n  var max = cLetter + 'max';\n  var minFull = code(contextHead + min);\n  var maxFull = code(contextHead + max);\n  var minmaxFull = minFull + ' and ' + maxFull;\n  var autoImpliedEdits = {};\n  autoImpliedEdits[min] = autoImpliedEdits[max] = undefined;\n  var minmaxImpliedEdits = {};\n  minmaxImpliedEdits[auto] = false;\n  var attrs = {};\n  if (colorAttr === 'color') {\n    attrs.color = {\n      valType: 'color',\n      arrayOk: true,\n      role: 'style',\n      editType: editTypeOverride || 'style',\n      description: ['Sets the', context, 'color.', ' It accepts either a specific color', ' or an array of numbers that are mapped to the colorscale', ' relative to the max and min values of the array or relative to', ' ' + minmaxFull + ' if set.'].join('')\n    };\n    if (opts.anim) {\n      attrs.color.anim = true;\n    }\n  }\n  attrs[auto] = {\n    valType: 'boolean',\n    role: 'info',\n    dflt: true,\n    editType: 'calc',\n    impliedEdits: autoImpliedEdits,\n    description: ['Determines whether or not the color domain is computed', ' with respect to the input data (here ' + colorAttrFull + ') or the bounds set in', ' ', minmaxFull, ' ', effectDesc, ' Defaults to `false` when ', minmaxFull, ' are set by the user.'].join('')\n  };\n  attrs[min] = {\n    valType: 'number',\n    role: 'info',\n    dflt: null,\n    editType: editTypeOverride || 'plot',\n    impliedEdits: minmaxImpliedEdits,\n    description: ['Sets the lower bound of the color domain.', effectDesc, ' Value should have the same units as ', colorAttrFull, ' and if set, ', maxFull, ' must be set as well.'].join('')\n  };\n  attrs[max] = {\n    valType: 'number',\n    role: 'info',\n    dflt: null,\n    editType: editTypeOverride || 'plot',\n    impliedEdits: minmaxImpliedEdits,\n    description: ['Sets the upper bound of the color domain.', effectDesc, ' Value should have the same units as ', colorAttrFull, ' and if set, ', minFull, ' must be set as well.'].join('')\n  };\n  attrs.colorscale = {\n    valType: 'colorscale',\n    role: 'style',\n    editType: 'calc',\n    dflt: colorscaleDflt,\n    impliedEdits: {\n      autocolorscale: false\n    },\n    description: ['Sets the colorscale.', effectDesc, ' The colorscale must be an array containing', ' arrays mapping a normalized value to an', ' rgb, rgba, hex, hsl, hsv, or named color string.', ' At minimum, a mapping for the lowest (0) and highest (1)', ' values are required. For example,', ' `[[0, \\'rgb(0,0,255)\\', [1, \\'rgb(255,0,0)\\']]`.', ' To control the bounds of the colorscale in color space,', ' use', minmaxFull, '.', ' Alternatively, `colorscale` may be a palette name string', ' of the following list: ' + paletteStr + '.'].join('')\n  };\n  attrs.autocolorscale = {\n    valType: 'boolean',\n    role: 'style',\n    // gets overrode in 'heatmap' & 'surface' for backwards comp.\n    dflt: opts.autoColorDflt === false ? false : true,\n    editType: 'calc',\n    impliedEdits: {\n      colorscale: undefined\n    },\n    description: ['Determines whether the colorscale is a default palette (`autocolorscale: true`)', ' or the palette determined by ', code(contextHead + 'colorscale'), '.', effectDesc, ' In case `colorscale` is unspecified or `autocolorscale` is true, the default ', ' palette will be chosen according to whether numbers in the `color` array are', ' all positive, all negative or mixed.'].join('')\n  };\n  attrs.reversescale = {\n    valType: 'boolean',\n    role: 'style',\n    dflt: false,\n    editType: 'plot',\n    description: ['Reverses the color mapping if true.', effectDesc, ' If true, ', minFull, ' will correspond to the last color', ' in the array and ', maxFull, ' will correspond to the first color.'].join('')\n  };\n  if (!noScale) {\n    attrs.showscale = {\n      valType: 'boolean',\n      role: 'info',\n      dflt: showScaleDflt,\n      editType: 'calc',\n      description: ['Determines whether or not a colorbar is displayed for this trace.', effectDesc].join('')\n    };\n  }\n  return attrs;\n};","map":{"version":3,"names":["palettes","require","scales","paletteStr","Object","keys","code","s","module","exports","colorScaleAttrs","context","opts","cLetter","onlyIfNumerical","Boolean","noScale","showScaleDflt","colorscaleDflt","editTypeOverride","contextHead","colorAttr","colorAttrFull","z","c","effectDesc","auto","min","max","minFull","maxFull","minmaxFull","autoImpliedEdits","undefined","minmaxImpliedEdits","attrs","color","valType","arrayOk","role","editType","description","join","anim","dflt","impliedEdits","colorscale","autocolorscale","autoColorDflt","reversescale","showscale"],"sources":["/home/yasmin/√Årea de Trabalho/Frontend/node_modules/plotly.js/src/components/colorscale/attributes.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar palettes = require('./scales.js').scales;\nvar paletteStr = Object.keys(palettes);\n\nfunction code(s) {\n    return '`' + s + '`';\n}\n\n/**\n * Make colorscale attribute declarations for\n *\n * - colorscale,\n * - (c|z)auto, (c|z)min, (c|z)max,\n * - autocolorscale, reversescale,\n * - showscale (optionally)\n * - color (optionally)\n *\n * @param {string} context (dflt: '', i.e. from trace root):\n *     the container this is in ('', *marker*, *marker.line* etc)\n *\n * @param {object} opts:\n *   - cLetter {string} (dflt: 'c'):\n *     leading letter for 'min', 'max and 'auto' attribute (either 'z' or 'c')\n *\n *   - colorAttr {string} (dflt: 'z' if `cLetter: 'z'`, 'color' if `cLetter: 'c'`):\n *     (for descriptions) sets the name of the color attribute that maps to the colorscale.\n *\n *     N.B. if `colorAttr: 'color'`, we include the `color` declaration here.\n *\n *   - onlyIfNumerical {string} (dflt: false' if `cLetter: 'z'`, true if `cLetter: 'c'`):\n *     (for descriptions) set to true if colorscale attribute only\n *\n *   - colorscaleDflt {string}:\n *     overrides the colorscale dflt\n *\n *   - autoColorDflt {boolean} (dflt true):\n *     normally autocolorscale.dflt is `true`, but pass `false` to override\n *\n *   - noScale {boolean} (dflt: true if `context: 'marker.line'`, false otherwise):\n *     set to `false` to not include showscale attribute (e.g. for 'marker.line')\n *\n *   - showScaleDflt {boolean} (dflt: true if `cLetter: 'z'`, false otherwise)\n *\n *   - editTypeOverride {boolean} (dflt: ''):\n *     most of these attributes already require a recalc, but the ones that do not\n *     have editType *style* or *plot* unless you override (presumably with *calc*)\n *\n *   - anim {boolean) (dflt: undefined): is 'color' animatable?\n *\n * @return {object}\n */\nmodule.exports = function colorScaleAttrs(context, opts) {\n    context = context || '';\n    opts = opts || {};\n\n    var cLetter = opts.cLetter || 'c';\n    var onlyIfNumerical = ('onlyIfNumerical' in opts) ? opts.onlyIfNumerical : Boolean(context);\n    var noScale = ('noScale' in opts) ? opts.noScale : context === 'marker.line';\n    var showScaleDflt = ('showScaleDflt' in opts) ? opts.showScaleDflt : cLetter === 'z';\n    var colorscaleDflt = typeof opts.colorscaleDflt === 'string' ? palettes[opts.colorscaleDflt] : null;\n    var editTypeOverride = opts.editTypeOverride || '';\n    var contextHead = context ? (context + '.') : '';\n\n    var colorAttr, colorAttrFull;\n\n    if('colorAttr' in opts) {\n        colorAttr = opts.colorAttr;\n        colorAttrFull = opts.colorAttr;\n    } else {\n        colorAttr = {z: 'z', c: 'color'}[cLetter];\n        colorAttrFull = 'in ' + code(contextHead + colorAttr);\n    }\n\n    var effectDesc = onlyIfNumerical ?\n        ' Has an effect only if ' + colorAttrFull + 'is set to a numerical array.' :\n        '';\n\n    var auto = cLetter + 'auto';\n    var min = cLetter + 'min';\n    var max = cLetter + 'max';\n    var minFull = code(contextHead + min);\n    var maxFull = code(contextHead + max);\n    var minmaxFull = minFull + ' and ' + maxFull;\n    var autoImpliedEdits = {};\n    autoImpliedEdits[min] = autoImpliedEdits[max] = undefined;\n    var minmaxImpliedEdits = {};\n    minmaxImpliedEdits[auto] = false;\n\n    var attrs = {};\n\n    if(colorAttr === 'color') {\n        attrs.color = {\n            valType: 'color',\n            arrayOk: true,\n            role: 'style',\n            editType: editTypeOverride || 'style',\n            description: [\n                'Sets the', context, 'color.',\n                ' It accepts either a specific color',\n                ' or an array of numbers that are mapped to the colorscale',\n                ' relative to the max and min values of the array or relative to',\n                ' ' + minmaxFull + ' if set.'\n            ].join('')\n        };\n\n        if(opts.anim) {\n            attrs.color.anim = true;\n        }\n    }\n\n    attrs[auto] = {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        editType: 'calc',\n        impliedEdits: autoImpliedEdits,\n        description: [\n            'Determines whether or not the color domain is computed',\n            ' with respect to the input data (here ' + colorAttrFull + ') or the bounds set in',\n            ' ', minmaxFull,\n            ' ', effectDesc,\n            ' Defaults to `false` when ', minmaxFull, ' are set by the user.'\n        ].join('')\n    };\n\n    attrs[min] = {\n        valType: 'number',\n        role: 'info',\n        dflt: null,\n        editType: editTypeOverride || 'plot',\n        impliedEdits: minmaxImpliedEdits,\n        description: [\n            'Sets the lower bound of the color domain.',\n            effectDesc,\n            ' Value should have the same units as ', colorAttrFull,\n            ' and if set, ', maxFull, ' must be set as well.'\n        ].join('')\n    };\n\n    attrs[max] = {\n        valType: 'number',\n        role: 'info',\n        dflt: null,\n        editType: editTypeOverride || 'plot',\n        impliedEdits: minmaxImpliedEdits,\n        description: [\n            'Sets the upper bound of the color domain.',\n            effectDesc,\n            ' Value should have the same units as ', colorAttrFull,\n            ' and if set, ', minFull, ' must be set as well.'\n        ].join('')\n    };\n\n    attrs.colorscale = {\n        valType: 'colorscale',\n        role: 'style',\n        editType: 'calc',\n        dflt: colorscaleDflt,\n        impliedEdits: {autocolorscale: false},\n        description: [\n            'Sets the colorscale.',\n            effectDesc,\n            ' The colorscale must be an array containing',\n            ' arrays mapping a normalized value to an',\n            ' rgb, rgba, hex, hsl, hsv, or named color string.',\n            ' At minimum, a mapping for the lowest (0) and highest (1)',\n            ' values are required. For example,',\n            ' `[[0, \\'rgb(0,0,255)\\', [1, \\'rgb(255,0,0)\\']]`.',\n            ' To control the bounds of the colorscale in color space,',\n            ' use', minmaxFull, '.',\n            ' Alternatively, `colorscale` may be a palette name string',\n            ' of the following list: ' + paletteStr + '.'\n        ].join('')\n    };\n\n    attrs.autocolorscale = {\n        valType: 'boolean',\n        role: 'style',\n        // gets overrode in 'heatmap' & 'surface' for backwards comp.\n        dflt: opts.autoColorDflt === false ? false : true,\n        editType: 'calc',\n        impliedEdits: {colorscale: undefined},\n        description: [\n            'Determines whether the colorscale is a default palette (`autocolorscale: true`)',\n            ' or the palette determined by ', code(contextHead + 'colorscale'), '.',\n            effectDesc,\n            ' In case `colorscale` is unspecified or `autocolorscale` is true, the default ',\n            ' palette will be chosen according to whether numbers in the `color` array are',\n            ' all positive, all negative or mixed.'\n        ].join('')\n    };\n\n    attrs.reversescale = {\n        valType: 'boolean',\n        role: 'style',\n        dflt: false,\n        editType: 'plot',\n        description: [\n            'Reverses the color mapping if true.',\n            effectDesc,\n            ' If true, ', minFull, ' will correspond to the last color',\n            ' in the array and ', maxFull, ' will correspond to the first color.'\n        ].join('')\n    };\n\n    if(!noScale) {\n        attrs.showscale = {\n            valType: 'boolean',\n            role: 'info',\n            dflt: showScaleDflt,\n            editType: 'calc',\n            description: [\n                'Determines whether or not a colorbar is displayed for this trace.',\n                effectDesc\n            ].join('')\n        };\n    }\n\n    return attrs;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAa,CAAC,CAACC,MAAM;AAC5C,IAAIC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACL,QAAQ,CAAC;AAEtC,SAASM,IAAI,CAACC,CAAC,EAAE;EACb,OAAO,GAAG,GAAGA,CAAC,GAAG,GAAG;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,SAASC,eAAe,CAACC,OAAO,EAAEC,IAAI,EAAE;EACrDD,OAAO,GAAGA,OAAO,IAAI,EAAE;EACvBC,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EAEjB,IAAIC,OAAO,GAAGD,IAAI,CAACC,OAAO,IAAI,GAAG;EACjC,IAAIC,eAAe,GAAI,iBAAiB,IAAIF,IAAI,GAAIA,IAAI,CAACE,eAAe,GAAGC,OAAO,CAACJ,OAAO,CAAC;EAC3F,IAAIK,OAAO,GAAI,SAAS,IAAIJ,IAAI,GAAIA,IAAI,CAACI,OAAO,GAAGL,OAAO,KAAK,aAAa;EAC5E,IAAIM,aAAa,GAAI,eAAe,IAAIL,IAAI,GAAIA,IAAI,CAACK,aAAa,GAAGJ,OAAO,KAAK,GAAG;EACpF,IAAIK,cAAc,GAAG,OAAON,IAAI,CAACM,cAAc,KAAK,QAAQ,GAAGlB,QAAQ,CAACY,IAAI,CAACM,cAAc,CAAC,GAAG,IAAI;EACnG,IAAIC,gBAAgB,GAAGP,IAAI,CAACO,gBAAgB,IAAI,EAAE;EAClD,IAAIC,WAAW,GAAGT,OAAO,GAAIA,OAAO,GAAG,GAAG,GAAI,EAAE;EAEhD,IAAIU,SAAS,EAAEC,aAAa;EAE5B,IAAG,WAAW,IAAIV,IAAI,EAAE;IACpBS,SAAS,GAAGT,IAAI,CAACS,SAAS;IAC1BC,aAAa,GAAGV,IAAI,CAACS,SAAS;EAClC,CAAC,MAAM;IACHA,SAAS,GAAG;MAACE,CAAC,EAAE,GAAG;MAAEC,CAAC,EAAE;IAAO,CAAC,CAACX,OAAO,CAAC;IACzCS,aAAa,GAAG,KAAK,GAAGhB,IAAI,CAACc,WAAW,GAAGC,SAAS,CAAC;EACzD;EAEA,IAAII,UAAU,GAAGX,eAAe,GAC5B,yBAAyB,GAAGQ,aAAa,GAAG,8BAA8B,GAC1E,EAAE;EAEN,IAAII,IAAI,GAAGb,OAAO,GAAG,MAAM;EAC3B,IAAIc,GAAG,GAAGd,OAAO,GAAG,KAAK;EACzB,IAAIe,GAAG,GAAGf,OAAO,GAAG,KAAK;EACzB,IAAIgB,OAAO,GAAGvB,IAAI,CAACc,WAAW,GAAGO,GAAG,CAAC;EACrC,IAAIG,OAAO,GAAGxB,IAAI,CAACc,WAAW,GAAGQ,GAAG,CAAC;EACrC,IAAIG,UAAU,GAAGF,OAAO,GAAG,OAAO,GAAGC,OAAO;EAC5C,IAAIE,gBAAgB,GAAG,CAAC,CAAC;EACzBA,gBAAgB,CAACL,GAAG,CAAC,GAAGK,gBAAgB,CAACJ,GAAG,CAAC,GAAGK,SAAS;EACzD,IAAIC,kBAAkB,GAAG,CAAC,CAAC;EAC3BA,kBAAkB,CAACR,IAAI,CAAC,GAAG,KAAK;EAEhC,IAAIS,KAAK,GAAG,CAAC,CAAC;EAEd,IAAGd,SAAS,KAAK,OAAO,EAAE;IACtBc,KAAK,CAACC,KAAK,GAAG;MACVC,OAAO,EAAE,OAAO;MAChBC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAErB,gBAAgB,IAAI,OAAO;MACrCsB,WAAW,EAAE,CACT,UAAU,EAAE9B,OAAO,EAAE,QAAQ,EAC7B,qCAAqC,EACrC,2DAA2D,EAC3D,iEAAiE,EACjE,GAAG,GAAGoB,UAAU,GAAG,UAAU,CAChC,CAACW,IAAI,CAAC,EAAE;IACb,CAAC;IAED,IAAG9B,IAAI,CAAC+B,IAAI,EAAE;MACVR,KAAK,CAACC,KAAK,CAACO,IAAI,GAAG,IAAI;IAC3B;EACJ;EAEAR,KAAK,CAACT,IAAI,CAAC,GAAG;IACVW,OAAO,EAAE,SAAS;IAClBE,IAAI,EAAE,MAAM;IACZK,IAAI,EAAE,IAAI;IACVJ,QAAQ,EAAE,MAAM;IAChBK,YAAY,EAAEb,gBAAgB;IAC9BS,WAAW,EAAE,CACT,wDAAwD,EACxD,wCAAwC,GAAGnB,aAAa,GAAG,wBAAwB,EACnF,GAAG,EAAES,UAAU,EACf,GAAG,EAAEN,UAAU,EACf,4BAA4B,EAAEM,UAAU,EAAE,uBAAuB,CACpE,CAACW,IAAI,CAAC,EAAE;EACb,CAAC;EAEDP,KAAK,CAACR,GAAG,CAAC,GAAG;IACTU,OAAO,EAAE,QAAQ;IACjBE,IAAI,EAAE,MAAM;IACZK,IAAI,EAAE,IAAI;IACVJ,QAAQ,EAAErB,gBAAgB,IAAI,MAAM;IACpC0B,YAAY,EAAEX,kBAAkB;IAChCO,WAAW,EAAE,CACT,2CAA2C,EAC3ChB,UAAU,EACV,uCAAuC,EAAEH,aAAa,EACtD,eAAe,EAAEQ,OAAO,EAAE,uBAAuB,CACpD,CAACY,IAAI,CAAC,EAAE;EACb,CAAC;EAEDP,KAAK,CAACP,GAAG,CAAC,GAAG;IACTS,OAAO,EAAE,QAAQ;IACjBE,IAAI,EAAE,MAAM;IACZK,IAAI,EAAE,IAAI;IACVJ,QAAQ,EAAErB,gBAAgB,IAAI,MAAM;IACpC0B,YAAY,EAAEX,kBAAkB;IAChCO,WAAW,EAAE,CACT,2CAA2C,EAC3ChB,UAAU,EACV,uCAAuC,EAAEH,aAAa,EACtD,eAAe,EAAEO,OAAO,EAAE,uBAAuB,CACpD,CAACa,IAAI,CAAC,EAAE;EACb,CAAC;EAEDP,KAAK,CAACW,UAAU,GAAG;IACfT,OAAO,EAAE,YAAY;IACrBE,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,MAAM;IAChBI,IAAI,EAAE1B,cAAc;IACpB2B,YAAY,EAAE;MAACE,cAAc,EAAE;IAAK,CAAC;IACrCN,WAAW,EAAE,CACT,sBAAsB,EACtBhB,UAAU,EACV,6CAA6C,EAC7C,0CAA0C,EAC1C,mDAAmD,EACnD,2DAA2D,EAC3D,oCAAoC,EACpC,mDAAmD,EACnD,0DAA0D,EAC1D,MAAM,EAAEM,UAAU,EAAE,GAAG,EACvB,2DAA2D,EAC3D,0BAA0B,GAAG5B,UAAU,GAAG,GAAG,CAChD,CAACuC,IAAI,CAAC,EAAE;EACb,CAAC;EAEDP,KAAK,CAACY,cAAc,GAAG;IACnBV,OAAO,EAAE,SAAS;IAClBE,IAAI,EAAE,OAAO;IACb;IACAK,IAAI,EAAEhC,IAAI,CAACoC,aAAa,KAAK,KAAK,GAAG,KAAK,GAAG,IAAI;IACjDR,QAAQ,EAAE,MAAM;IAChBK,YAAY,EAAE;MAACC,UAAU,EAAEb;IAAS,CAAC;IACrCQ,WAAW,EAAE,CACT,iFAAiF,EACjF,gCAAgC,EAAEnC,IAAI,CAACc,WAAW,GAAG,YAAY,CAAC,EAAE,GAAG,EACvEK,UAAU,EACV,gFAAgF,EAChF,+EAA+E,EAC/E,uCAAuC,CAC1C,CAACiB,IAAI,CAAC,EAAE;EACb,CAAC;EAEDP,KAAK,CAACc,YAAY,GAAG;IACjBZ,OAAO,EAAE,SAAS;IAClBE,IAAI,EAAE,OAAO;IACbK,IAAI,EAAE,KAAK;IACXJ,QAAQ,EAAE,MAAM;IAChBC,WAAW,EAAE,CACT,qCAAqC,EACrChB,UAAU,EACV,YAAY,EAAEI,OAAO,EAAE,oCAAoC,EAC3D,oBAAoB,EAAEC,OAAO,EAAE,sCAAsC,CACxE,CAACY,IAAI,CAAC,EAAE;EACb,CAAC;EAED,IAAG,CAAC1B,OAAO,EAAE;IACTmB,KAAK,CAACe,SAAS,GAAG;MACdb,OAAO,EAAE,SAAS;MAClBE,IAAI,EAAE,MAAM;MACZK,IAAI,EAAE3B,aAAa;MACnBuB,QAAQ,EAAE,MAAM;MAChBC,WAAW,EAAE,CACT,mEAAmE,EACnEhB,UAAU,CACb,CAACiB,IAAI,CAAC,EAAE;IACb,CAAC;EACL;EAEA,OAAOP,KAAK;AAChB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
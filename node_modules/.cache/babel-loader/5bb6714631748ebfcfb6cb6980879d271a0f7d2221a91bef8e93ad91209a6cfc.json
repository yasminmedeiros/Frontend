{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar handleSubplotDefaults = require('../../subplot_defaults');\nvar constants = require('../constants');\nvar layoutAttributes = require('./layout_attributes');\nvar axesNames = constants.axesNames;\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n  handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n    type: 'geo',\n    attributes: layoutAttributes,\n    handleDefaults: handleGeoDefaults,\n    partition: 'y'\n  });\n};\nfunction handleGeoDefaults(geoLayoutIn, geoLayoutOut, coerce) {\n  var show;\n  var resolution = coerce('resolution');\n  var scope = coerce('scope');\n  var scopeParams = constants.scopeDefaults[scope];\n  var projType = coerce('projection.type', scopeParams.projType);\n  var isAlbersUsa = geoLayoutOut._isAlbersUsa = projType === 'albers usa';\n\n  // no other scopes are allowed for 'albers usa' projection\n  if (isAlbersUsa) scope = geoLayoutOut.scope = 'usa';\n  var isScoped = geoLayoutOut._isScoped = scope !== 'world';\n  var isConic = geoLayoutOut._isConic = projType.indexOf('conic') !== -1;\n  geoLayoutOut._isClipped = !!constants.lonaxisSpan[projType];\n  for (var i = 0; i < axesNames.length; i++) {\n    var axisName = axesNames[i];\n    var dtickDflt = [30, 10][i];\n    var rangeDflt;\n    if (isScoped) {\n      rangeDflt = scopeParams[axisName + 'Range'];\n    } else {\n      var dfltSpans = constants[axisName + 'Span'];\n      var hSpan = (dfltSpans[projType] || dfltSpans['*']) / 2;\n      var rot = coerce('projection.rotation.' + axisName.substr(0, 3), scopeParams.projRotate[i]);\n      rangeDflt = [rot - hSpan, rot + hSpan];\n    }\n    var range = coerce(axisName + '.range', rangeDflt);\n    coerce(axisName + '.tick0', range[0]);\n    coerce(axisName + '.dtick', dtickDflt);\n    show = coerce(axisName + '.showgrid');\n    if (show) {\n      coerce(axisName + '.gridcolor');\n      coerce(axisName + '.gridwidth');\n    }\n  }\n  var lonRange = geoLayoutOut.lonaxis.range;\n  var latRange = geoLayoutOut.lataxis.range;\n\n  // to cross antimeridian w/o ambiguity\n  var lon0 = lonRange[0];\n  var lon1 = lonRange[1];\n  if (lon0 > 0 && lon1 < 0) lon1 += 360;\n  var centerLon = (lon0 + lon1) / 2;\n  var projLon;\n  if (!isAlbersUsa) {\n    var dfltProjRotate = isScoped ? scopeParams.projRotate : [centerLon, 0, 0];\n    projLon = coerce('projection.rotation.lon', dfltProjRotate[0]);\n    coerce('projection.rotation.lat', dfltProjRotate[1]);\n    coerce('projection.rotation.roll', dfltProjRotate[2]);\n    show = coerce('showcoastlines', !isScoped);\n    if (show) {\n      coerce('coastlinecolor');\n      coerce('coastlinewidth');\n    }\n    show = coerce('showocean');\n    if (show) coerce('oceancolor');\n  }\n  var centerLonDflt;\n  var centerLatDflt;\n  if (isAlbersUsa) {\n    // 'albers usa' does not have a 'center',\n    // these values were found using via:\n    //   projection.invert([geoLayout.center.lon, geoLayoutIn.center.lat])\n    centerLonDflt = -96.6;\n    centerLatDflt = 38.7;\n  } else {\n    centerLonDflt = isScoped ? centerLon : projLon;\n    centerLatDflt = (latRange[0] + latRange[1]) / 2;\n  }\n  coerce('center.lon', centerLonDflt);\n  coerce('center.lat', centerLatDflt);\n  if (isConic) {\n    var dfltProjParallels = scopeParams.projParallels || [0, 60];\n    coerce('projection.parallels', dfltProjParallels);\n  }\n  coerce('projection.scale');\n  show = coerce('showland');\n  if (show) coerce('landcolor');\n  show = coerce('showlakes');\n  if (show) coerce('lakecolor');\n  show = coerce('showrivers');\n  if (show) {\n    coerce('rivercolor');\n    coerce('riverwidth');\n  }\n  show = coerce('showcountries', isScoped && scope !== 'usa');\n  if (show) {\n    coerce('countrycolor');\n    coerce('countrywidth');\n  }\n  if (scope === 'usa' || scope === 'north america' && resolution === 50) {\n    // Only works for:\n    //   USA states at 110m\n    //   USA states + Canada provinces at 50m\n    coerce('showsubunits', true);\n    coerce('subunitcolor');\n    coerce('subunitwidth');\n  }\n  if (!isScoped) {\n    // Does not work in non-world scopes\n    show = coerce('showframe', true);\n    if (show) {\n      coerce('framecolor');\n      coerce('framewidth');\n    }\n  }\n  coerce('bgcolor');\n}","map":{"version":3,"names":["handleSubplotDefaults","require","constants","layoutAttributes","axesNames","module","exports","supplyLayoutDefaults","layoutIn","layoutOut","fullData","type","attributes","handleDefaults","handleGeoDefaults","partition","geoLayoutIn","geoLayoutOut","coerce","show","resolution","scope","scopeParams","scopeDefaults","projType","isAlbersUsa","_isAlbersUsa","isScoped","_isScoped","isConic","_isConic","indexOf","_isClipped","lonaxisSpan","i","length","axisName","dtickDflt","rangeDflt","dfltSpans","hSpan","rot","substr","projRotate","range","lonRange","lonaxis","latRange","lataxis","lon0","lon1","centerLon","projLon","dfltProjRotate","centerLonDflt","centerLatDflt","dfltProjParallels","projParallels"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/plots/geo/layout/defaults.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar handleSubplotDefaults = require('../../subplot_defaults');\nvar constants = require('../constants');\nvar layoutAttributes = require('./layout_attributes');\n\nvar axesNames = constants.axesNames;\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n    handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n        type: 'geo',\n        attributes: layoutAttributes,\n        handleDefaults: handleGeoDefaults,\n        partition: 'y'\n    });\n};\n\nfunction handleGeoDefaults(geoLayoutIn, geoLayoutOut, coerce) {\n    var show;\n\n    var resolution = coerce('resolution');\n    var scope = coerce('scope');\n    var scopeParams = constants.scopeDefaults[scope];\n\n    var projType = coerce('projection.type', scopeParams.projType);\n    var isAlbersUsa = geoLayoutOut._isAlbersUsa = projType === 'albers usa';\n\n    // no other scopes are allowed for 'albers usa' projection\n    if(isAlbersUsa) scope = geoLayoutOut.scope = 'usa';\n\n    var isScoped = geoLayoutOut._isScoped = (scope !== 'world');\n    var isConic = geoLayoutOut._isConic = projType.indexOf('conic') !== -1;\n    geoLayoutOut._isClipped = !!constants.lonaxisSpan[projType];\n\n    for(var i = 0; i < axesNames.length; i++) {\n        var axisName = axesNames[i];\n        var dtickDflt = [30, 10][i];\n        var rangeDflt;\n\n        if(isScoped) {\n            rangeDflt = scopeParams[axisName + 'Range'];\n        } else {\n            var dfltSpans = constants[axisName + 'Span'];\n            var hSpan = (dfltSpans[projType] || dfltSpans['*']) / 2;\n            var rot = coerce(\n                'projection.rotation.' + axisName.substr(0, 3),\n                scopeParams.projRotate[i]\n            );\n            rangeDflt = [rot - hSpan, rot + hSpan];\n        }\n\n        var range = coerce(axisName + '.range', rangeDflt);\n\n        coerce(axisName + '.tick0', range[0]);\n        coerce(axisName + '.dtick', dtickDflt);\n\n        show = coerce(axisName + '.showgrid');\n        if(show) {\n            coerce(axisName + '.gridcolor');\n            coerce(axisName + '.gridwidth');\n        }\n    }\n\n    var lonRange = geoLayoutOut.lonaxis.range;\n    var latRange = geoLayoutOut.lataxis.range;\n\n    // to cross antimeridian w/o ambiguity\n    var lon0 = lonRange[0];\n    var lon1 = lonRange[1];\n    if(lon0 > 0 && lon1 < 0) lon1 += 360;\n\n    var centerLon = (lon0 + lon1) / 2;\n    var projLon;\n\n    if(!isAlbersUsa) {\n        var dfltProjRotate = isScoped ? scopeParams.projRotate : [centerLon, 0, 0];\n\n        projLon = coerce('projection.rotation.lon', dfltProjRotate[0]);\n        coerce('projection.rotation.lat', dfltProjRotate[1]);\n        coerce('projection.rotation.roll', dfltProjRotate[2]);\n\n        show = coerce('showcoastlines', !isScoped);\n        if(show) {\n            coerce('coastlinecolor');\n            coerce('coastlinewidth');\n        }\n\n        show = coerce('showocean');\n        if(show) coerce('oceancolor');\n    }\n\n    var centerLonDflt;\n    var centerLatDflt;\n\n    if(isAlbersUsa) {\n        // 'albers usa' does not have a 'center',\n        // these values were found using via:\n        //   projection.invert([geoLayout.center.lon, geoLayoutIn.center.lat])\n        centerLonDflt = -96.6;\n        centerLatDflt = 38.7;\n    } else {\n        centerLonDflt = isScoped ? centerLon : projLon;\n        centerLatDflt = (latRange[0] + latRange[1]) / 2;\n    }\n\n    coerce('center.lon', centerLonDflt);\n    coerce('center.lat', centerLatDflt);\n\n    if(isConic) {\n        var dfltProjParallels = scopeParams.projParallels || [0, 60];\n        coerce('projection.parallels', dfltProjParallels);\n    }\n\n    coerce('projection.scale');\n\n    show = coerce('showland');\n    if(show) coerce('landcolor');\n\n    show = coerce('showlakes');\n    if(show) coerce('lakecolor');\n\n    show = coerce('showrivers');\n    if(show) {\n        coerce('rivercolor');\n        coerce('riverwidth');\n    }\n\n    show = coerce('showcountries', isScoped && scope !== 'usa');\n    if(show) {\n        coerce('countrycolor');\n        coerce('countrywidth');\n    }\n\n    if(scope === 'usa' || (scope === 'north america' && resolution === 50)) {\n        // Only works for:\n        //   USA states at 110m\n        //   USA states + Canada provinces at 50m\n        coerce('showsubunits', true);\n        coerce('subunitcolor');\n        coerce('subunitwidth');\n    }\n\n    if(!isScoped) {\n        // Does not work in non-world scopes\n        show = coerce('showframe', true);\n        if(show) {\n            coerce('framecolor');\n            coerce('framewidth');\n        }\n    }\n\n    coerce('bgcolor');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
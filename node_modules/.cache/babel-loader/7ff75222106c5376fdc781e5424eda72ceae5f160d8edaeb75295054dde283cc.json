{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar axisIds = require('../../plots/cartesian/axis_ids');\nvar scatterSubTypes = require('../../traces/scatter/subtypes');\nvar Registry = require('../../registry');\nvar createModeBar = require('./modebar');\nvar modeBarButtons = require('./buttons');\n\n/**\n * ModeBar wrapper around 'create' and 'update',\n * chooses buttons to pass to ModeBar constructor based on\n * plot type and plot config.\n *\n * @param {object} gd main plot object\n *\n */\nmodule.exports = function manageModeBar(gd) {\n  var fullLayout = gd._fullLayout;\n  var context = gd._context;\n  var modeBar = fullLayout._modeBar;\n  if (!context.displayModeBar && !context.watermark) {\n    if (modeBar) {\n      modeBar.destroy();\n      delete fullLayout._modeBar;\n    }\n    return;\n  }\n  if (!Array.isArray(context.modeBarButtonsToRemove)) {\n    throw new Error(['*modeBarButtonsToRemove* configuration options', 'must be an array.'].join(' '));\n  }\n  if (!Array.isArray(context.modeBarButtonsToAdd)) {\n    throw new Error(['*modeBarButtonsToAdd* configuration options', 'must be an array.'].join(' '));\n  }\n  var customButtons = context.modeBarButtons;\n  var buttonGroups;\n  if (Array.isArray(customButtons) && customButtons.length) {\n    buttonGroups = fillCustomButton(customButtons);\n  } else if (!context.displayModeBar && context.watermark) {\n    buttonGroups = [];\n  } else {\n    buttonGroups = getButtonGroups(gd, context.modeBarButtonsToRemove, context.modeBarButtonsToAdd, context.showSendToCloud);\n  }\n  if (modeBar) modeBar.update(gd, buttonGroups);else fullLayout._modeBar = createModeBar(gd, buttonGroups);\n};\n\n// logic behind which buttons are displayed by default\nfunction getButtonGroups(gd, buttonsToRemove, buttonsToAdd, showSendToCloud) {\n  var fullLayout = gd._fullLayout;\n  var fullData = gd._fullData;\n  var hasCartesian = fullLayout._has('cartesian');\n  var hasGL3D = fullLayout._has('gl3d');\n  var hasGeo = fullLayout._has('geo');\n  var hasPie = fullLayout._has('pie');\n  var hasGL2D = fullLayout._has('gl2d');\n  var hasTernary = fullLayout._has('ternary');\n  var hasMapbox = fullLayout._has('mapbox');\n  var hasPolar = fullLayout._has('polar');\n  var allAxesFixed = areAllAxesFixed(fullLayout);\n  var groups = [];\n  function addGroup(newGroup) {\n    if (!newGroup.length) return;\n    var out = [];\n    for (var i = 0; i < newGroup.length; i++) {\n      var button = newGroup[i];\n      if (buttonsToRemove.indexOf(button) !== -1) continue;\n      out.push(modeBarButtons[button]);\n    }\n    groups.push(out);\n  }\n\n  // buttons common to all plot types\n  var commonGroup = ['toImage'];\n  if (showSendToCloud) commonGroup.push('sendDataToCloud');\n  addGroup(commonGroup);\n  var zoomGroup = [];\n  var hoverGroup = [];\n  var resetGroup = [];\n  var dragModeGroup = [];\n  if ((hasCartesian || hasGL2D || hasPie || hasTernary) + hasGeo + hasGL3D + hasMapbox + hasPolar > 1) {\n    // graphs with more than one plot types get 'union buttons'\n    // which reset the view or toggle hover labels across all subplots.\n    hoverGroup = ['toggleHover'];\n    resetGroup = ['resetViews'];\n  } else if (hasGeo) {\n    zoomGroup = ['zoomInGeo', 'zoomOutGeo'];\n    hoverGroup = ['hoverClosestGeo'];\n    resetGroup = ['resetGeo'];\n  } else if (hasGL3D) {\n    hoverGroup = ['hoverClosest3d'];\n    resetGroup = ['resetCameraDefault3d', 'resetCameraLastSave3d'];\n  } else if (hasMapbox) {\n    hoverGroup = ['toggleHover'];\n    resetGroup = ['resetViewMapbox'];\n  } else if (hasGL2D) {\n    hoverGroup = ['hoverClosestGl2d'];\n  } else if (hasPie) {\n    hoverGroup = ['hoverClosestPie'];\n  } else {\n    // hasPolar, hasTernary\n    // always show at least one hover icon.\n    hoverGroup = ['toggleHover'];\n  }\n  // if we have cartesian, allow switching between closest and compare\n  // regardless of what other types are on the plot, since they'll all\n  // just treat any truthy hovermode as 'closest'\n  if (hasCartesian) {\n    hoverGroup = ['toggleSpikelines', 'hoverClosestCartesian', 'hoverCompareCartesian'];\n  }\n  if ((hasCartesian || hasGL2D) && !allAxesFixed) {\n    zoomGroup = ['zoomIn2d', 'zoomOut2d', 'autoScale2d'];\n    if (resetGroup[0] !== 'resetViews') resetGroup = ['resetScale2d'];\n  }\n  if (hasGL3D) {\n    dragModeGroup = ['zoom3d', 'pan3d', 'orbitRotation', 'tableRotation'];\n  } else if ((hasCartesian || hasGL2D) && !allAxesFixed || hasTernary) {\n    dragModeGroup = ['zoom2d', 'pan2d'];\n  } else if (hasMapbox || hasGeo) {\n    dragModeGroup = ['pan2d'];\n  } else if (hasPolar) {\n    dragModeGroup = ['zoom2d'];\n  }\n  if (isSelectable(fullData)) {\n    dragModeGroup.push('select2d', 'lasso2d');\n  }\n  addGroup(dragModeGroup);\n  addGroup(zoomGroup.concat(resetGroup));\n  addGroup(hoverGroup);\n  return appendButtonsToGroups(groups, buttonsToAdd);\n}\nfunction areAllAxesFixed(fullLayout) {\n  var axList = axisIds.list({\n    _fullLayout: fullLayout\n  }, null, true);\n  for (var i = 0; i < axList.length; i++) {\n    if (!axList[i].fixedrange) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// look for traces that support selection\n// to be updated as we add more selectPoints handlers\nfunction isSelectable(fullData) {\n  var selectable = false;\n  for (var i = 0; i < fullData.length; i++) {\n    if (selectable) break;\n    var trace = fullData[i];\n    if (!trace._module || !trace._module.selectPoints) continue;\n    if (Registry.traceIs(trace, 'scatter-like')) {\n      if (scatterSubTypes.hasMarkers(trace) || scatterSubTypes.hasText(trace)) {\n        selectable = true;\n      }\n    } else if (Registry.traceIs(trace, 'box-violin')) {\n      if (trace.boxpoints === 'all' || trace.points === 'all') {\n        selectable = true;\n      }\n    }\n    // assume that in general if the trace module has selectPoints,\n    // then it's selectable. Scatter is an exception to this because it must\n    // have markers or text, not just be a scatter type.\n    else selectable = true;\n  }\n  return selectable;\n}\nfunction appendButtonsToGroups(groups, buttons) {\n  if (buttons.length) {\n    if (Array.isArray(buttons[0])) {\n      for (var i = 0; i < buttons.length; i++) {\n        groups.push(buttons[i]);\n      }\n    } else groups.push(buttons);\n  }\n  return groups;\n}\n\n// fill in custom buttons referring to default mode bar buttons\nfunction fillCustomButton(customButtons) {\n  for (var i = 0; i < customButtons.length; i++) {\n    var buttonGroup = customButtons[i];\n    for (var j = 0; j < buttonGroup.length; j++) {\n      var button = buttonGroup[j];\n      if (typeof button === 'string') {\n        if (modeBarButtons[button] !== undefined) {\n          customButtons[i][j] = modeBarButtons[button];\n        } else {\n          throw new Error(['*modeBarButtons* configuration options', 'invalid button name'].join(' '));\n        }\n      }\n    }\n  }\n  return customButtons;\n}","map":{"version":3,"names":["axisIds","require","scatterSubTypes","Registry","createModeBar","modeBarButtons","module","exports","manageModeBar","gd","fullLayout","_fullLayout","context","_context","modeBar","_modeBar","displayModeBar","watermark","destroy","Array","isArray","modeBarButtonsToRemove","Error","join","modeBarButtonsToAdd","customButtons","buttonGroups","length","fillCustomButton","getButtonGroups","showSendToCloud","update","buttonsToRemove","buttonsToAdd","fullData","_fullData","hasCartesian","_has","hasGL3D","hasGeo","hasPie","hasGL2D","hasTernary","hasMapbox","hasPolar","allAxesFixed","areAllAxesFixed","groups","addGroup","newGroup","out","i","button","indexOf","push","commonGroup","zoomGroup","hoverGroup","resetGroup","dragModeGroup","isSelectable","concat","appendButtonsToGroups","axList","list","fixedrange","selectable","trace","_module","selectPoints","traceIs","hasMarkers","hasText","boxpoints","points","buttons","buttonGroup","j","undefined"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/components/modebar/manage.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar axisIds = require('../../plots/cartesian/axis_ids');\nvar scatterSubTypes = require('../../traces/scatter/subtypes');\nvar Registry = require('../../registry');\n\nvar createModeBar = require('./modebar');\nvar modeBarButtons = require('./buttons');\n\n/**\n * ModeBar wrapper around 'create' and 'update',\n * chooses buttons to pass to ModeBar constructor based on\n * plot type and plot config.\n *\n * @param {object} gd main plot object\n *\n */\nmodule.exports = function manageModeBar(gd) {\n    var fullLayout = gd._fullLayout;\n    var context = gd._context;\n    var modeBar = fullLayout._modeBar;\n\n    if(!context.displayModeBar && !context.watermark) {\n        if(modeBar) {\n            modeBar.destroy();\n            delete fullLayout._modeBar;\n        }\n        return;\n    }\n\n    if(!Array.isArray(context.modeBarButtonsToRemove)) {\n        throw new Error([\n            '*modeBarButtonsToRemove* configuration options',\n            'must be an array.'\n        ].join(' '));\n    }\n\n    if(!Array.isArray(context.modeBarButtonsToAdd)) {\n        throw new Error([\n            '*modeBarButtonsToAdd* configuration options',\n            'must be an array.'\n        ].join(' '));\n    }\n\n    var customButtons = context.modeBarButtons;\n    var buttonGroups;\n\n    if(Array.isArray(customButtons) && customButtons.length) {\n        buttonGroups = fillCustomButton(customButtons);\n    }\n    else if(!context.displayModeBar && context.watermark) {\n        buttonGroups = [];\n    }\n    else {\n        buttonGroups = getButtonGroups(\n            gd,\n            context.modeBarButtonsToRemove,\n            context.modeBarButtonsToAdd,\n            context.showSendToCloud\n        );\n    }\n\n    if(modeBar) modeBar.update(gd, buttonGroups);\n    else fullLayout._modeBar = createModeBar(gd, buttonGroups);\n};\n\n// logic behind which buttons are displayed by default\nfunction getButtonGroups(gd, buttonsToRemove, buttonsToAdd, showSendToCloud) {\n    var fullLayout = gd._fullLayout;\n    var fullData = gd._fullData;\n\n    var hasCartesian = fullLayout._has('cartesian');\n    var hasGL3D = fullLayout._has('gl3d');\n    var hasGeo = fullLayout._has('geo');\n    var hasPie = fullLayout._has('pie');\n    var hasGL2D = fullLayout._has('gl2d');\n    var hasTernary = fullLayout._has('ternary');\n    var hasMapbox = fullLayout._has('mapbox');\n    var hasPolar = fullLayout._has('polar');\n    var allAxesFixed = areAllAxesFixed(fullLayout);\n\n    var groups = [];\n\n    function addGroup(newGroup) {\n        if(!newGroup.length) return;\n\n        var out = [];\n\n        for(var i = 0; i < newGroup.length; i++) {\n            var button = newGroup[i];\n            if(buttonsToRemove.indexOf(button) !== -1) continue;\n            out.push(modeBarButtons[button]);\n        }\n\n        groups.push(out);\n    }\n\n    // buttons common to all plot types\n    var commonGroup = ['toImage'];\n    if(showSendToCloud) commonGroup.push('sendDataToCloud');\n    addGroup(commonGroup);\n\n    var zoomGroup = [];\n    var hoverGroup = [];\n    var resetGroup = [];\n    var dragModeGroup = [];\n\n    if((hasCartesian || hasGL2D || hasPie || hasTernary) + hasGeo + hasGL3D + hasMapbox + hasPolar > 1) {\n        // graphs with more than one plot types get 'union buttons'\n        // which reset the view or toggle hover labels across all subplots.\n        hoverGroup = ['toggleHover'];\n        resetGroup = ['resetViews'];\n    }\n    else if(hasGeo) {\n        zoomGroup = ['zoomInGeo', 'zoomOutGeo'];\n        hoverGroup = ['hoverClosestGeo'];\n        resetGroup = ['resetGeo'];\n    }\n    else if(hasGL3D) {\n        hoverGroup = ['hoverClosest3d'];\n        resetGroup = ['resetCameraDefault3d', 'resetCameraLastSave3d'];\n    }\n    else if(hasMapbox) {\n        hoverGroup = ['toggleHover'];\n        resetGroup = ['resetViewMapbox'];\n    }\n    else if(hasGL2D) {\n        hoverGroup = ['hoverClosestGl2d'];\n    }\n    else if(hasPie) {\n        hoverGroup = ['hoverClosestPie'];\n    }\n    else { // hasPolar, hasTernary\n        // always show at least one hover icon.\n        hoverGroup = ['toggleHover'];\n    }\n    // if we have cartesian, allow switching between closest and compare\n    // regardless of what other types are on the plot, since they'll all\n    // just treat any truthy hovermode as 'closest'\n    if(hasCartesian) {\n        hoverGroup = ['toggleSpikelines', 'hoverClosestCartesian', 'hoverCompareCartesian'];\n    }\n\n    if((hasCartesian || hasGL2D) && !allAxesFixed) {\n        zoomGroup = ['zoomIn2d', 'zoomOut2d', 'autoScale2d'];\n        if(resetGroup[0] !== 'resetViews') resetGroup = ['resetScale2d'];\n    }\n\n    if(hasGL3D) {\n        dragModeGroup = ['zoom3d', 'pan3d', 'orbitRotation', 'tableRotation'];\n    }\n    else if(((hasCartesian || hasGL2D) && !allAxesFixed) || hasTernary) {\n        dragModeGroup = ['zoom2d', 'pan2d'];\n    }\n    else if(hasMapbox || hasGeo) {\n        dragModeGroup = ['pan2d'];\n    }\n    else if(hasPolar) {\n        dragModeGroup = ['zoom2d'];\n    }\n    if(isSelectable(fullData)) {\n        dragModeGroup.push('select2d', 'lasso2d');\n    }\n\n    addGroup(dragModeGroup);\n    addGroup(zoomGroup.concat(resetGroup));\n    addGroup(hoverGroup);\n\n    return appendButtonsToGroups(groups, buttonsToAdd);\n}\n\nfunction areAllAxesFixed(fullLayout) {\n    var axList = axisIds.list({_fullLayout: fullLayout}, null, true);\n\n    for(var i = 0; i < axList.length; i++) {\n        if(!axList[i].fixedrange) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// look for traces that support selection\n// to be updated as we add more selectPoints handlers\nfunction isSelectable(fullData) {\n    var selectable = false;\n\n    for(var i = 0; i < fullData.length; i++) {\n        if(selectable) break;\n\n        var trace = fullData[i];\n\n        if(!trace._module || !trace._module.selectPoints) continue;\n\n        if(Registry.traceIs(trace, 'scatter-like')) {\n            if(scatterSubTypes.hasMarkers(trace) || scatterSubTypes.hasText(trace)) {\n                selectable = true;\n            }\n        } else if(Registry.traceIs(trace, 'box-violin')) {\n            if(trace.boxpoints === 'all' || trace.points === 'all') {\n                selectable = true;\n            }\n        }\n        // assume that in general if the trace module has selectPoints,\n        // then it's selectable. Scatter is an exception to this because it must\n        // have markers or text, not just be a scatter type.\n        else selectable = true;\n    }\n\n    return selectable;\n}\n\nfunction appendButtonsToGroups(groups, buttons) {\n    if(buttons.length) {\n        if(Array.isArray(buttons[0])) {\n            for(var i = 0; i < buttons.length; i++) {\n                groups.push(buttons[i]);\n            }\n        }\n        else groups.push(buttons);\n    }\n\n    return groups;\n}\n\n// fill in custom buttons referring to default mode bar buttons\nfunction fillCustomButton(customButtons) {\n    for(var i = 0; i < customButtons.length; i++) {\n        var buttonGroup = customButtons[i];\n\n        for(var j = 0; j < buttonGroup.length; j++) {\n            var button = buttonGroup[j];\n\n            if(typeof button === 'string') {\n                if(modeBarButtons[button] !== undefined) {\n                    customButtons[i][j] = modeBarButtons[button];\n                }\n                else {\n                    throw new Error([\n                        '*modeBarButtons* configuration options',\n                        'invalid button name'\n                    ].join(' '));\n                }\n            }\n        }\n    }\n\n    return customButtons;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isArray = Array.isArray;\n\n// IE9 fallbacks\n\nvar ab = typeof ArrayBuffer === 'undefined' || !ArrayBuffer.isView ? {\n  isView: function isView() {\n    return false;\n  }\n} : ArrayBuffer;\nvar dv = typeof DataView === 'undefined' ? function () {} : DataView;\nfunction isTypedArray(a) {\n  return ab.isView(a) && !(a instanceof dv);\n}\nexports.isTypedArray = isTypedArray;\nfunction isArrayOrTypedArray(a) {\n  return isArray(a) || isTypedArray(a);\n}\nexports.isArrayOrTypedArray = isArrayOrTypedArray;\n\n/*\n * Test whether an input object is 1D.\n *\n * Assumes we already know the object is an array.\n *\n * Looks only at the first element, if the dimensionality is\n * not consistent we won't figure that out here.\n */\nfunction isArray1D(a) {\n  return !isArrayOrTypedArray(a[0]);\n}\nexports.isArray1D = isArray1D;\n\n/*\n * Ensures an array has the right amount of storage space. If it doesn't\n * exist, it creates an array. If it does exist, it returns it if too\n * short or truncates it in-place.\n *\n * The goal is to just reuse memory to avoid a bit of excessive garbage\n * collection.\n */\nexports.ensureArray = function (out, n) {\n  // TODO: typed array support here? This is only used in\n  // traces/carpet/compute_control_points\n  if (!isArray(out)) out = [];\n\n  // If too long, truncate. (If too short, it will grow\n  // automatically so we don't care about that case)\n  out.length = n;\n  return out;\n};\n\n/*\n * TypedArray-compatible concatenation of n arrays\n * if all arrays are the same type it will preserve that type,\n * otherwise it falls back on Array.\n * Also tries to avoid copying, in case one array has zero length\n * But never mutates an existing array\n */\nexports.concat = function () {\n  var args = [];\n  var allArray = true;\n  var totalLen = 0;\n  var _constructor, arg0, i, argi, posi, leni, out, j;\n  for (i = 0; i < arguments.length; i++) {\n    argi = arguments[i];\n    leni = argi.length;\n    if (leni) {\n      if (arg0) args.push(argi);else {\n        arg0 = argi;\n        posi = leni;\n      }\n      if (isArray(argi)) {\n        _constructor = false;\n      } else {\n        allArray = false;\n        if (!totalLen) {\n          _constructor = argi.constructor;\n        } else if (_constructor !== argi.constructor) {\n          // TODO: in principle we could upgrade here,\n          // ie keep typed array but convert all to Float64Array?\n          _constructor = false;\n        }\n      }\n      totalLen += leni;\n    }\n  }\n  if (!totalLen) return [];\n  if (!args.length) return arg0;\n  if (allArray) return arg0.concat.apply(arg0, args);\n  if (_constructor) {\n    // matching typed arrays\n    out = new _constructor(totalLen);\n    out.set(arg0);\n    for (i = 0; i < args.length; i++) {\n      argi = args[i];\n      out.set(argi, posi);\n      posi += argi.length;\n    }\n    return out;\n  }\n\n  // mismatched types or Array + typed\n  out = new Array(totalLen);\n  for (j = 0; j < arg0.length; j++) {\n    out[j] = arg0[j];\n  }\n  for (i = 0; i < args.length; i++) {\n    argi = args[i];\n    for (j = 0; j < argi.length; j++) {\n      out[posi + j] = argi[j];\n    }\n    posi += j;\n  }\n  return out;\n};\nexports.maxRowLength = function (z) {\n  return _rowLength(z, Math.max, 0);\n};\nexports.minRowLength = function (z) {\n  return _rowLength(z, Math.min, Infinity);\n};\nfunction _rowLength(z, fn, len0) {\n  if (isArrayOrTypedArray(z)) {\n    if (isArrayOrTypedArray(z[0])) {\n      var len = len0;\n      for (var i = 0; i < z.length; i++) {\n        len = fn(len, z[i].length);\n      }\n      return len;\n    } else {\n      return z.length;\n    }\n  }\n  return 0;\n}","map":{"version":3,"names":["isArray","Array","ab","ArrayBuffer","isView","dv","DataView","isTypedArray","a","exports","isArrayOrTypedArray","isArray1D","ensureArray","out","n","length","concat","args","allArray","totalLen","_constructor","arg0","i","argi","posi","leni","j","arguments","push","constructor","apply","set","maxRowLength","z","_rowLength","Math","max","minRowLength","min","Infinity","fn","len0","len"],"sources":["/home/yasmin/Área de Trabalho/Frontend/node_modules/plotly.js/src/lib/array.js"],"sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isArray = Array.isArray;\n\n// IE9 fallbacks\n\nvar ab = (typeof ArrayBuffer === 'undefined' || !ArrayBuffer.isView) ?\n    {isView: function() { return false; }} :\n    ArrayBuffer;\n\nvar dv = (typeof DataView === 'undefined') ?\n    function() {} :\n    DataView;\n\nfunction isTypedArray(a) {\n    return ab.isView(a) && !(a instanceof dv);\n}\nexports.isTypedArray = isTypedArray;\n\nfunction isArrayOrTypedArray(a) {\n    return isArray(a) || isTypedArray(a);\n}\nexports.isArrayOrTypedArray = isArrayOrTypedArray;\n\n/*\n * Test whether an input object is 1D.\n *\n * Assumes we already know the object is an array.\n *\n * Looks only at the first element, if the dimensionality is\n * not consistent we won't figure that out here.\n */\nfunction isArray1D(a) {\n    return !isArrayOrTypedArray(a[0]);\n}\nexports.isArray1D = isArray1D;\n\n/*\n * Ensures an array has the right amount of storage space. If it doesn't\n * exist, it creates an array. If it does exist, it returns it if too\n * short or truncates it in-place.\n *\n * The goal is to just reuse memory to avoid a bit of excessive garbage\n * collection.\n */\nexports.ensureArray = function(out, n) {\n    // TODO: typed array support here? This is only used in\n    // traces/carpet/compute_control_points\n    if(!isArray(out)) out = [];\n\n    // If too long, truncate. (If too short, it will grow\n    // automatically so we don't care about that case)\n    out.length = n;\n\n    return out;\n};\n\n/*\n * TypedArray-compatible concatenation of n arrays\n * if all arrays are the same type it will preserve that type,\n * otherwise it falls back on Array.\n * Also tries to avoid copying, in case one array has zero length\n * But never mutates an existing array\n */\nexports.concat = function() {\n    var args = [];\n    var allArray = true;\n    var totalLen = 0;\n\n    var _constructor, arg0, i, argi, posi, leni, out, j;\n\n    for(i = 0; i < arguments.length; i++) {\n        argi = arguments[i];\n        leni = argi.length;\n        if(leni) {\n            if(arg0) args.push(argi);\n            else {\n                arg0 = argi;\n                posi = leni;\n            }\n\n            if(isArray(argi)) {\n                _constructor = false;\n            }\n            else {\n                allArray = false;\n                if(!totalLen) {\n                    _constructor = argi.constructor;\n                }\n                else if(_constructor !== argi.constructor) {\n                    // TODO: in principle we could upgrade here,\n                    // ie keep typed array but convert all to Float64Array?\n                    _constructor = false;\n                }\n            }\n\n            totalLen += leni;\n        }\n    }\n\n    if(!totalLen) return [];\n    if(!args.length) return arg0;\n\n    if(allArray) return arg0.concat.apply(arg0, args);\n    if(_constructor) {\n        // matching typed arrays\n        out = new _constructor(totalLen);\n        out.set(arg0);\n        for(i = 0; i < args.length; i++) {\n            argi = args[i];\n            out.set(argi, posi);\n            posi += argi.length;\n        }\n        return out;\n    }\n\n    // mismatched types or Array + typed\n    out = new Array(totalLen);\n    for(j = 0; j < arg0.length; j++) out[j] = arg0[j];\n    for(i = 0; i < args.length; i++) {\n        argi = args[i];\n        for(j = 0; j < argi.length; j++) out[posi + j] = argi[j];\n        posi += j;\n    }\n    return out;\n};\n\nexports.maxRowLength = function(z) {\n    return _rowLength(z, Math.max, 0);\n};\n\nexports.minRowLength = function(z) {\n    return _rowLength(z, Math.min, Infinity);\n};\n\nfunction _rowLength(z, fn, len0) {\n    if(isArrayOrTypedArray(z)) {\n        if(isArrayOrTypedArray(z[0])) {\n            var len = len0;\n            for(var i = 0; i < z.length; i++) {\n                len = fn(len, z[i].length);\n            }\n            return len;\n        } else {\n            return z.length;\n        }\n    }\n    return 0;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
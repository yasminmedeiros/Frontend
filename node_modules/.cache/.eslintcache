[{"/home/yasmin/Área de Trabalho/Frontend/src/index.js":"1","/home/yasmin/Área de Trabalho/Frontend/src/App.js":"2","/home/yasmin/Área de Trabalho/Frontend/src/routes.js":"3","/home/yasmin/Área de Trabalho/Frontend/src/pages/Dashboard/index.jsx":"4","/home/yasmin/Área de Trabalho/Frontend/src/pages/Professional/index.jsx":"5","/home/yasmin/Área de Trabalho/Frontend/src/pages/Students/index.jsx":"6","/home/yasmin/Área de Trabalho/Frontend/src/services/apisaber.js":"7","/home/yasmin/Área de Trabalho/Frontend/src/components/ChartPerYear/ChartPerYear.jsx":"8","/home/yasmin/Área de Trabalho/Frontend/src/components/LineChartBySchool/LineChartBySchool.jsx":"9","/home/yasmin/Área de Trabalho/Frontend/src/components/Options/CustomOption.jsx":"10","/home/yasmin/Área de Trabalho/Frontend/src/components/ChartBySchool/ChartBySchool.jsx":"11","/home/yasmin/Área de Trabalho/Frontend/src/components/Footer/index.js":"12","/home/yasmin/Área de Trabalho/Frontend/src/components/Datatable/index.jsx":"13","/home/yasmin/Área de Trabalho/Frontend/src/components/Header/index.jsx":"14","/home/yasmin/Área de Trabalho/Frontend/src/components/PlotlyMapBox/index.jsx":"15","/home/yasmin/Área de Trabalho/Frontend/src/components/Datatable/footer.jsx":"16","/home/yasmin/Área de Trabalho/Frontend/src/components/NoDataMessage/index.jsx":"17","/home/yasmin/Área de Trabalho/Frontend/src/components/Spinner/index.jsx":"18"},{"size":197,"mtime":1668517935883,"results":"19","hashOfConfig":"20"},{"size":145,"mtime":1668517935883,"results":"21","hashOfConfig":"20"},{"size":546,"mtime":1668517935883,"results":"22","hashOfConfig":"20"},{"size":32847,"mtime":1668517935883,"results":"23","hashOfConfig":"20"},{"size":26484,"mtime":1668517935883,"results":"24","hashOfConfig":"20"},{"size":35476,"mtime":1668517935883,"results":"25","hashOfConfig":"20"},{"size":200,"mtime":1669924995149,"results":"26","hashOfConfig":"20"},{"size":9496,"mtime":1668517935883,"results":"27","hashOfConfig":"20"},{"size":6175,"mtime":1668517935883,"results":"28","hashOfConfig":"20"},{"size":571,"mtime":1668517935883,"results":"29","hashOfConfig":"20"},{"size":6371,"mtime":1668517935883,"results":"30","hashOfConfig":"20"},{"size":362,"mtime":1668517935883,"results":"31","hashOfConfig":"20"},{"size":1612,"mtime":1668517935883,"results":"32","hashOfConfig":"20"},{"size":2705,"mtime":1668517935883,"results":"33","hashOfConfig":"20"},{"size":2517,"mtime":1668517935883,"results":"34","hashOfConfig":"20"},{"size":1195,"mtime":1668517935883,"results":"35","hashOfConfig":"20"},{"size":302,"mtime":1668517935883,"results":"36","hashOfConfig":"20"},{"size":127,"mtime":1668517935883,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pos4gs",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/yasmin/Área de Trabalho/Frontend/src/index.js",[],[],"/home/yasmin/Área de Trabalho/Frontend/src/App.js",[],[],"/home/yasmin/Área de Trabalho/Frontend/src/routes.js",[],[],"/home/yasmin/Área de Trabalho/Frontend/src/pages/Dashboard/index.jsx",["102"],[],"import React, { useState, useEffect } from 'react';\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import { withStyles } from '@material-ui/core/styles';\n// import { green } from '@material-ui/core/colors';\n\nimport apiSaber from '../../services/apisaber';\nimport Datatable from '../../components/Datatable';\nimport Header from \"../../components/Header\";\n// import Input from '../../components/Input';\nimport Footer from '../../components/Footer';\nimport { ChartPerYear } from '../../components/ChartPerYear/ChartPerYear';\nimport { LineChartBySchool } from '../../components/LineChartBySchool/LineChartBySchool';\nimport { ChartBySchool } from '../../components/ChartBySchool/ChartBySchool';\nimport PlotlyMapBox from '../../components/PlotlyMapBox';\nimport apisaber from '../../services/apisaber';\nimport './styles.css';\nimport Select, { createFilter } from 'react-select';\nimport CustomOption from \"../../components/Options/CustomOption\";\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\n// const GreenCheckbox = withStyles({\n//   root: {\n//     color: green[400],\n//     '&$checked': {\n//       color: green[600],\n//     },\n//   },\n//   checked: {},\n// })((props) => <Checkbox color=\"default\" {...props} />);\n\nfunction Dashboard() {\n  // const [escolas, setEscolas] = useState([]);\n  // const [query, setQuery] = useState(\"\");\n  // const [searchColumns, setSearchColumns] = useState([\"Escola\"]);\n  const dataChart = {\n    loading: true,\n    year: 2021,\n    x: [],\n    y: [],\n  };\n\n  const dataChartSchool = {\n    loading: true,\n    data_id: 0,\n    useSelect: true,\n    x: [],\n    y: [],\n  }\n\n  const dataLineChart = {\n    loading: true,\n    data_id: 0, //4556\n    useSelect: true,\n    x: [],\n    y: [],\n  };\n\n  const [schoolsPerSize, setSchoolsPerSize] = useState(dataChart);\n  const [enrollmentsPerSize, setEnrollmentsPerSize] = useState(dataChart);\n  const [averagesPersize, setAveragePerSize] = useState(dataChart);\n  const [schoolsPerGre, setSchoolsPerGre] = useState(dataChart);\n  const [enrollmentsPerGre, setEnrollmentsPerGre] = useState(dataChart);\n  const [averagesPerGre, setAveragesPerGre] = useState(dataChart);\n  const [highestEnrollments, setHighestEnrollments] = useState(dataChart);\n  const [enrollmentsJP, setEnrollmentsJP] = useState(dataChart);\n  const [enrollmentsCG, setEnrollmentsCG] = useState(dataChart);\n  const [averageIntSchoolEvasion, setAverageIntSchoolEvasion] = useState(dataChartSchool);\n  const [enrollmentsInYears, setEnrollmentsInYears] = useState(dataLineChart);\n  const [totalEnrollmentsInYears, setTotalEnrollmentsInYears] = useState(dataLineChart);\n  const [schoolsInYearsPerGre, setSchoolsInYearsPerGre] = useState(dataLineChart);\n  const [schoolsInYearsPerSize, setSchoolsInYearsPerSize] = useState(dataLineChart);\n  const [enrollmentsLocations, setEnrollmentsLocations] = useState([]);\n  const [schoolsLocations, setSchoolsLocations] = useState([]);\n  const [years, setYears] = useState([]);\n  const [selectedAdministrationType, setSelectedAdministrationType] = useState({ label: 'Todos', value: 3 });\n  const [schoolsInfos, setSchoolsInfos] = useState([]);\n  const [loadingTabel, setLoadingTabel] = useState(false);\n  const [optionsAdministrationType] = useState([\n    {\n      label: 'Todos',\n      value: 3,\n    },\n    {\n      label: 'Municipal',\n      value: 1,\n    },\n    {\n      label: 'Estadual',\n      value: 0,\n    }\n  ]);\n\n  const head = ['ID', 'GRE', 'UTB', 'INEP', 'Município', 'Escola', 'Matrículas'];\n  const DataTableColumns = [\n    { field: 'id', headerName: head[0], flex: 0.10, headerAlign: 'center', headerClassName: 'theme-header', align: 'center' },\n    { field: 'gr', headerName: head[1], flex: 0.15, headerAlign: 'center', headerClassName: 'theme-header', align: 'center' },\n    { field: 'utb', headerName: head[2], flex: 0.125, headerAlign: 'center', headerClassName: 'theme-header', align: 'center' },\n    { field: 'inep', headerName: head[3], flex: 0.125, headerAlign: 'center', headerClassName: 'theme-header', align: 'center' },\n    { field: 'mun', headerName: head[4], flex: 0.125, headerAlign: 'center', headerClassName: 'theme-header', align: 'left' },\n    { field: 'name', headerName: head[5], flex: 0.19, headerAlign: 'center', headerClassName: 'theme-header', align: 'left' },\n    { field: 'mat', headerName: head[6], flex: 0.125, headerAlign: 'center', headerClassName: 'theme-header', align: 'center' }\n  ];\n\n  const rows = schoolsInfos.map((item) => ({\n    id: item.school_id,\n    gr: item.gre,\n    utb: item.utb ? item.utb : '-',\n    inep: item.inep ? parseInt(item.inep) : '-',\n    mun: item.city,\n    name: item.school,\n    mat: item.enrollments ? parseInt(item.enrollments) : 0,\n  }));\n\n  function handleDownloadPdf() {\n    const doc = new jsPDF();\n    const lines = [];\n\n    setLoadingTabel(true);\n\n    schoolsInfos.forEach(item => {\n      lines.push([\n        item.school_id,\n        item.gre,\n        item.utb ? item.utb : '-',\n        item.inep ? parseInt(item.inep) : '-',\n        item.city,\n        item.school,\n        item.enrollments ? parseInt(item.enrollments) : 0,\n      ]);\n    });\n\n    doc.autoTable({\n      head: [head],\n      body: lines,\n    });\n\n    doc.save('escolas.pdf');\n\n    setLoadingTabel(false);\n  }\n\n  function handleDownloadCsv() {\n    const heads = head;\n    const serialized = schoolsInfos.map((item, index) => ({\n      [heads[0]]: item.school_id,\n      [heads[1]]: item.gre,\n      [heads[2]]: item.utb ? item.utb : '-',\n      [heads[3]]: item.inep ? parseInt(item.inep) : '-',\n      [heads[4]]: item.city,\n      [heads[5]]: item.school,\n      [heads[6]]: item.enrollments ? parseInt(item.enrollments) : 0,\n    }));\n\n    return serialized;\n  }\n\n\n  function onSelectYear(id, option) {\n    switch (id) {\n      case 'highestEnrollments':\n        setHighestEnrollments({ ...highestEnrollments, loading: true });\n        apiSaber.get(`/enrollments/get-highest/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(item => item.escolas);\n          const y = response.data.map(item => item.sum);\n\n          setHighestEnrollments({ loading: false, year: option, x, y });\n        });\n        break;\n\n      case 'enrollmentsJP':\n        setEnrollmentsJP({ ...enrollmentsJP, loading: true });\n        apiSaber.get(`/enrollments/by-city/?cityName=João Pessoa&year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(item => item.escolas);\n          const y = response.data.map(item => item.sum);\n\n          setEnrollmentsJP({ loading: false, year: option, x, y });\n        });\n        break;\n\n      case 'enrollmentsCG':\n        setEnrollmentsCG({ ...enrollmentsCG, loading: true });\n        apiSaber.get(`/enrollments/by-city/?cityName=Campina Grande&year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(item => item.escolas);\n          const y = response.data.map(item => item.sum);\n\n          setEnrollmentsCG({ loading: false, year: option, x, y });\n        });\n        break;\n\n      case 'schoolsPerSize':\n        setSchoolsPerSize({ ...schoolsPerSize, loading: true });\n        apiSaber.get(`/enrollments/get-schools-by-size/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.slice(1, 17).map(size => size.key);\n          const y = response.data.slice(1, 17).map((size) => size.data);\n\n          setSchoolsPerSize({ loading: false, year: option, x, y });\n        }).catch(error => console.log(error));\n        break;\n\n      case 'enrollmentsPerSize':\n        setEnrollmentsPerSize({ ...enrollmentsPerSize, loading: true });\n        apiSaber.get(`/enrollments/get-enrollments-by-size/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.slice(1, 17).map(size => size.key);\n          const y = response.data.slice(1, 17).map((size) => size.data);\n\n          setEnrollmentsPerSize({ loading: false, year: option, x, y });\n        }).catch(error => console.log(error));\n        break;\n\n      case 'averagesPersize':\n        setAveragePerSize({ ...averagesPersize, loading: true });\n        apiSaber.get(`/enrollments/get-average-by-size/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.slice(1, 17).map(size => size.key);\n          const y = response.data.slice(1, 17).map((size) => size.data);\n\n          setAveragePerSize({ loading: false, year: option, x, y });\n        }).catch(error => console.log(error));\n        break;\n\n      case 'schoolsPerGre':\n        setSchoolsPerGre({ ...schoolsPerGre, loading: true });\n        apiSaber.get(`/enrollments/get-schools-by-gre/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(size => size.key);\n          const y = response.data.map((size) => size.data);\n\n          setSchoolsPerGre({ loading: false, year: option, x, y });\n        }).catch(error => console.log(error));\n        break;\n\n      case 'enrollmentsPerGre':\n        setEnrollmentsPerGre({ ...enrollmentsPerGre, loading: true });\n        apiSaber.get(`/enrollments/get-enrollments-by-gre/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(size => size.key);\n          const y = response.data.map((size) => size.data);\n\n          setEnrollmentsPerGre({ loading: false, year: option, x, y });\n\n        }).catch(error => console.log(error));\n        break;\n\n      case 'averagesPerGre':\n        setAveragesPerGre({ ...averagesPerGre, loading: true });\n        apiSaber.get(`/enrollments/get-average-by-gre/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(size => size.key);\n          const y = response.data.map((size) => size.data);\n\n          setAveragesPerGre({ loading: false, year: option, x, y });\n        }).catch(error => console.log(error));\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function onSelectSchool(id, value) {\n    switch (id) {\n      case 'enrollmentsInYears':\n        setEnrollmentsInYears({ ...enrollmentsInYears, loading: true });\n        apiSaber.get(`/enrollments/in-years/?school_id=${value}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(item => item.key);\n          const y = response.data.map(item => item.data);\n\n          setEnrollmentsInYears({ ...enrollmentsInYears, loading: false, data_id: value, x, y });\n        }).catch(error => console.log(error));\n        break;\n\n      case 'schoolsInYearsPerGre':\n        setSchoolsInYearsPerGre({ ...schoolsInYearsPerGre, loading: true });\n        apisaber.get(`/schools/in-years-gre/?gre_id=${value}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(item => item.key);\n          const y = response.data.map(item => item.data);\n\n          setSchoolsInYearsPerGre({\n            ...schoolsInYearsPerGre,\n            loading: false,\n            data_id: value,\n            x,\n            y,\n          });\n        });\n        break;\n\n      case 'schoolsInYearsPerSize':\n        setSchoolsInYearsPerSize({ ...schoolsInYearsPerSize, loading: true });\n        apisaber.get(`/schools/in-years-size/?size_id=${value}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(item => item.key);\n          const y = response.data.map(item => item.data);\n\n          setSchoolsInYearsPerSize({\n            ...schoolsInYearsPerSize,\n            loading: false,\n            data_id: value,\n            x,\n            y,\n          });\n        });\n        break;\n\n      case 'averageIntSchoolEvasion':\n        setAverageIntSchoolEvasion({ ...averageIntSchoolEvasion, loading: true });\n        apisaber.get(`/enrollments/get-mean-integral-school-evasion-previously-regular/?school_id=${value}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(item => item.key);\n          const y = response.data.map(item => item.data);\n\n          setAverageIntSchoolEvasion({\n            ...averageIntSchoolEvasion,\n            loading: false,\n            data_id: value,\n            x,\n            y,\n          });\n        });\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  useEffect(() => {\n    apiSaber.get(`/enrollments/get-years/?type=${selectedAdministrationType.value}`).then(response => {\n      const options = response.data.map(item => item.year);\n      setYears(options);\n    }).catch(error => console.log(error));\n\n    if (highestEnrollments.year) {\n      apiSaber.get(`/enrollments/get-highest/?year=${highestEnrollments.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.map(item => item.escolas);\n        const y = response.data.map(item => item.sum);\n\n        setHighestEnrollments({ ...highestEnrollments, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (enrollmentsJP.year) {\n      apiSaber.get(`/enrollments/by-city/?cityName=João Pessoa&year=${enrollmentsJP.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.map(item => item.escolas);\n        const y = response.data.map(item => item.sum);\n\n        setEnrollmentsJP({ ...enrollmentsJP, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (enrollmentsCG.year) {\n      apiSaber.get(`/enrollments/by-city/?cityName=Campina Grande&year=${enrollmentsCG.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.map(item => item.escolas);\n        const y = response.data.map(item => item.sum);\n\n        setEnrollmentsCG({ ...enrollmentsCG, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (schoolsPerSize.year) {\n      apiSaber.get(`/enrollments/get-schools-by-size/?year=${schoolsPerSize.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.slice(1, 17).map(size => size.key);\n        const y = response.data.slice(1, 17).map((size) => size.data);\n\n        setSchoolsPerSize({ ...schoolsPerSize, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (enrollmentsPerSize.year) {\n      apiSaber.get(`/enrollments/get-enrollments-by-size/?year=${enrollmentsPerSize.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.slice(1, 17).map(size => size.key);\n        const y = response.data.slice(1, 17).map((size) => size.data);\n\n        setEnrollmentsPerSize({ ...enrollmentsPerSize, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (averagesPersize.year) {\n      apiSaber.get(`/enrollments/get-average-by-size/?year=${averagesPersize.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.slice(1, 17).map(size => size.key);\n        const y = response.data.slice(1, 17).map((size) => size.data);\n\n        setAveragePerSize({ ...averagesPersize, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (schoolsPerGre.year) {\n      apiSaber.get(`/enrollments/get-schools-by-gre/?year=${schoolsPerGre.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.map(size => size.key);\n        const y = response.data.map((size) => size.data);\n\n        setSchoolsPerGre({ ...schoolsPerGre, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (enrollmentsPerGre.year) {\n      apiSaber.get(`/enrollments/get-enrollments-by-gre/?year=${enrollmentsPerGre.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.map(size => size.key);\n        const y = response.data.map((size) => size.data);\n\n        setEnrollmentsPerGre({ ...enrollmentsPerGre, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (averagesPerGre.year) {\n      apiSaber.get(`/enrollments/get-average-by-gre/?year=${averagesPerGre.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.map(size => size.key);\n        const y = response.data.map((size) => size.data);\n\n        setAveragesPerGre({ ...averagesPerGre, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    apisaber.get(`/enrollments/get-mean-integral-school-evasion-previously-regular/?school_id=${averageIntSchoolEvasion.data_id === 0 ? 3 : averageIntSchoolEvasion.data_id}&type=${selectedAdministrationType.value}`).then(response => {\n      const x = response.data.map(item => item.key);\n      const y = response.data.map(item => item.data);\n\n      setAverageIntSchoolEvasion({ ...averageIntSchoolEvasion, loading: false, x, y });\n    });\n\n    apiSaber.get(\n      `/enrollments/in-years/?school_id=${enrollmentsInYears.data_id === 0 ? 4556 : enrollmentsInYears.data_id}&type=${selectedAdministrationType.value}`\n    ).then(response => {\n      const x = response.data.map(item => item.key);\n      const y = response.data.map(item => item.data);\n\n      setEnrollmentsInYears({ ...enrollmentsInYears, loading: false, x, y });\n    }).catch(error => console.log(error));\n\n    apisaber.get(\n      `/schools/in-years-gre/?gre_id=${schoolsInYearsPerGre.data_id === 0 ? 1 : schoolsInYearsPerGre.data_id}&type=${selectedAdministrationType.value}`\n    ).then(response => {\n      const x = response.data.map(item => item.key);\n      const y = response.data.map(item => item.data);\n\n      setSchoolsInYearsPerGre({ ...schoolsInYearsPerGre, loading: false, x, y });\n    }).catch(error => console.log(error));\n\n    apisaber.get(\n      `/schools/in-years-size/?size_id=${schoolsInYearsPerSize.data_id === 0 ? 1 : schoolsInYearsPerSize.data_id}&type=${selectedAdministrationType.value}`\n    ).then(response => {\n      const x = response.data.map(item => item.key);\n      const y = response.data.map(item => item.data);\n\n      setSchoolsInYearsPerSize({ ...schoolsInYearsPerSize, loading: false, x, y });\n    }).catch(error => console.log(error));\n\n    apiSaber.get(`/enrollments/total-in-years?type=${selectedAdministrationType.value}`).then(response => {\n      const x = response.data.map(item => item.key);\n      const y = response.data.map(item => item.data);\n\n      setTotalEnrollmentsInYears({ ...totalEnrollmentsInYears, useSelect: false, loading: false, x, y });\n    }).catch(error => console.log(error));\n\n    apiSaber.get(`/enrollments/get-city-location?type=${selectedAdministrationType.value}`).then(response => {\n      const enrollmentsLocations = response.data.map(item => {\n        return {\n          latitude: item.latitude,\n          longitude: item.longitude,\n          data: item.enrollments,\n        };\n      });\n\n      const schoolsLocations = response.data.map(item => {\n        return {\n          latitude: item.latitude,\n          longitude: item.longitude,\n          data: item.schools,\n        };\n      });\n\n      setEnrollmentsLocations(enrollmentsLocations);\n      setSchoolsLocations(schoolsLocations);\n    }).catch(error => console.log(error));\n\n    apiSaber.get(`/enrollments/get-all-schools-info?type=${selectedAdministrationType.value}`).then(response => {\n      const serialized = response.data.map(item => {\n        return {\n          school_id: item.school_id,\n          gre: item.gre,\n          utb: item.utb ? item.utb : '-',\n          inep: item.inep ? parseInt(item.inep) : '-',\n          city: item.city,\n          school: item.school,\n          enrollments: item.enrollments ? parseInt(item.enrollments) : 0,\n        }\n      });\n\n      setSchoolsInfos(serialized);\n    }).catch(error => console.log(error));\n  }, [selectedAdministrationType]);\n\n  // function search(rows) {\n  //   return rows.filter((row) =>\n  //     searchColumns.some(\n  //       (column) =>\n  //         row[column].toString().toLowerCase().indexOf(query.toLowerCase()) > -1\n  //     )\n  //   );\n  // }\n\n  // const columns = escolas[0] && Object.keys(escolas[0]).filter((column) => column !== 'field1' && column !== 'Unnamed: 7');\n\n  return (\n    <div className=\"dash\">\n      <Header />\n      <div id=\"wrapper\">\n        <div className=\"content-area\">\n          <div className=\"container-sm container-fluid\">\n            <div className=\"main\">\n              <div className='administration-type'>\n                <Select\n                  className=\"basic-single\"\n                  classNamePrefix=\"custom-select\"\n                  isSearchable={false}\n                  value={selectedAdministrationType}\n                  options={optionsAdministrationType}\n                  components={{ Option: CustomOption }}\n                  filterOption={createFilter({ ignoreAccents: false })}\n                  onChange={value => setSelectedAdministrationType(value)}\n                />\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <LineChartBySchool\n                      x={totalEnrollmentsInYears.x}\n                      y={totalEnrollmentsInYears.y}\n                      name='Matrículas'\n                      type=\"line\"\n                      title=\"Total de matrículas na Paraíba ao longo dos anos\"\n                      id=\"totalEnrollmentsInYears\"\n                      // onChange={onSelectSchool}\n                      useSelect={totalEnrollmentsInYears.useSelect}\n                      loading={totalEnrollmentsInYears.loading}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={highestEnrollments.x}\n                      y={highestEnrollments.y}\n                      name='Matrículas'\n                      type=\"bar\"\n                      title=\"Escolas paraibanas com maior número de matrículas\"\n                      id=\"highestEnrollments\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={highestEnrollments.loading}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <LineChartBySchool\n                      x={enrollmentsInYears.x}\n                      y={enrollmentsInYears.y}\n                      name='Matrículas'\n                      type=\"line\"\n                      title=\"Quantidade de matrículas ao longo dos anos\"\n                      id=\"enrollmentsInYears\"\n                      onChange={onSelectSchool}\n                      useSelect={enrollmentsInYears.useSelect}\n                      loading={enrollmentsInYears.loading}\n                      by=\"school\"\n                      administrationType={selectedAdministrationType.value}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <ChartBySchool\n                      x={averageIntSchoolEvasion.x}\n                      y={averageIntSchoolEvasion.y}\n                      name='Matrículas'\n                      type=\"bar\"\n                      title=\"Média de matrículas em escolas integrais anteriormente regulares\"\n                      id=\"averageIntSchoolEvasion\"\n                      onChange={onSelectSchool}\n                      useSelect={averageIntSchoolEvasion.useSelect}\n                      loading={averageIntSchoolEvasion.loading}\n                      administrationType={selectedAdministrationType.value}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-6 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={enrollmentsJP.x}\n                      y={enrollmentsJP.y}\n                      name='Matrículas'\n                      // color={color}\n                      type=\"bar\"\n                      title=\"Escolas de João Pessoa com mais Matrículas\"\n                      id=\"enrollmentsJP\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={enrollmentsJP.loading}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"col-lg-6 col-sm-12\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={enrollmentsCG.x}\n                      y={enrollmentsCG.y}\n                      name='Matrículas'\n                      type=\"bar\"\n                      title=\"Escolas de Campina Grande com mais Matrículas\"\n                      id=\"enrollmentsCG\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={enrollmentsCG.loading}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className='row mt-4 mb-4'>\n                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                  <div className=\"map box\">\n                    <PlotlyMapBox\n                      title=\"Matrículas por região\"\n                      locations={enrollmentsLocations}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className='row mt-4 mb-4'>\n                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                  <div className=\"map box\">\n                    <PlotlyMapBox\n                      title=\"Escolas por região\"\n                      locations={schoolsLocations}\n                    />\n                  </div>\n                </div>\n              </div>\n\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-6 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={schoolsPerSize.x}\n                      y={schoolsPerSize.y}\n                      name='Escolas'\n                      type=\"bar\"\n                      title=\"Total de Escolas por Porte\"\n                      id=\"schoolsPerSize\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={schoolsPerSize.loading}\n                    />\n                  </div>\n                </div>\n\n\n                <div className=\"col-lg-6 col-sm-12\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={schoolsPerGre.x}\n                      y={schoolsPerGre.y}\n                      name='Escolas'\n                      type=\"bar\"\n                      title=\"Total de Escolas por GRE\"\n                      id=\"schoolsPerGre\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={schoolsPerGre.loading}\n                      viewPercent={true}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-6 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={enrollmentsPerSize.x}\n                      y={enrollmentsPerSize.y}\n                      name='Matrículas'\n                      // color={color}\n                      type=\"bar\"\n                      title=\"Total de Matrículas por Porte\"\n                      id=\"enrollmentsPerSize\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={enrollmentsPerSize.loading}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"col-lg-6 col-sm-12\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={enrollmentsPerGre.x}\n                      y={enrollmentsPerGre.y}\n                      name='Matrículas'\n                      type=\"bar\"\n                      title=\"Total de Matrículas por GRE\"\n                      id=\"enrollmentsPerGre\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={enrollmentsPerGre.loading}\n                      viewPercent={true}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-6 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={averagesPersize.x}\n                      y={averagesPersize.y}\n                      name='Matrículas'\n                      // color={color}\n                      type=\"bar\"\n                      title=\"Média de Matrículas por Porte\"\n                      id=\"averagesPersize\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={averagesPersize.loading}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"col-lg-6 col-sm-12\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={averagesPerGre.x}\n                      y={averagesPerGre.y}\n                      name='Matrículas'\n                      // color={color}\n                      type=\"bar\"\n                      title=\"Média de Matrículas por GRE\"\n                      id=\"averagesPerGre\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={averagesPerGre.loading}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <LineChartBySchool\n                      x={schoolsInYearsPerGre.x}\n                      y={schoolsInYearsPerGre.y}\n                      name='Escolas'\n                      type=\"line\"\n                      title=\"Total de escolas por GRE ao longo dos anos\"\n                      id=\"schoolsInYearsPerGre\"\n                      onChange={onSelectSchool}\n                      useSelect={schoolsInYearsPerGre.useSelect}\n                      loading={schoolsInYearsPerGre.loading}\n                      by=\"gre\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <LineChartBySchool\n                      x={schoolsInYearsPerSize.x}\n                      y={schoolsInYearsPerSize.y}\n                      name='Escolas'\n                      type=\"line\"\n                      title=\"Total de escolas por porte ao longo dos anos\"\n                      id=\"schoolsInYearsPerSize\"\n                      onChange={onSelectSchool}\n                      useSelect={schoolsInYearsPerSize.useSelect}\n                      loading={schoolsInYearsPerSize.loading}\n                      by=\"size\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row mt-4 bm-4\">\n              <div className=\"col\">\n                <div className=\"table box\">\n                  <Datatable\n                    title=\"Escolas por Tipo de Administração\"\n                    infos={schoolsInfos}\n                    rows={rows}\n                    columns={DataTableColumns}\n                    head={head}\n                    downloadCsv={handleDownloadCsv}\n                    downloadPdf={handleDownloadPdf}\n                    loading={loadingTabel}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default Dashboard;\n","/home/yasmin/Área de Trabalho/Frontend/src/pages/Professional/index.jsx",["103"],[],"import React, { useState, useEffect } from 'react';\n\nimport apiSaber from '../../services/apisaber';\nimport DataTable from '../../components/Datatable';\nimport Header from \"../../components/Header\";\nimport Footer from '../../components/Footer';\nimport { ChartPerYear } from '../../components/ChartPerYear/ChartPerYear';\nimport { LineChartBySchool } from '../../components/LineChartBySchool/LineChartBySchool';\nimport apisaber from '../../services/apisaber';\nimport './styles.css';\nimport Select, { createFilter } from 'react-select';\nimport CustomOption from \"../../components/Options/CustomOption\";\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\nfunction Professional() {\n  const dataChart = {\n    loading: true,\n    year: 2021,\n    x: [],\n    y: [],\n  };\n\n  const dataLineChart = {\n    loading: true,\n    data_id: 0, //4556\n    useSelect: true,\n    x: [],\n    y: [],\n  };\n\n  const [schoolsPerSize, setSchoolsPerSize] = useState(dataChart);\n  const [enrollmentsPerSize, setEnrollmentsPerSize] = useState(dataChart);\n  const [averagesPersize, setAveragePerSize] = useState(dataChart);\n  const [schoolsPerGre, setSchoolsPerGre] = useState(dataChart);\n  const [enrollmentsPerGre, setEnrollmentsPerGre] = useState(dataChart);\n  const [averagesPerGre, setAveragesPerGre] = useState(dataChart);\n  const [highestEnrollments, setHighestEnrollments] = useState(dataChart);\n  const [enrollmentsJP, setEnrollmentsJP] = useState(dataChart);\n  const [enrollmentsCG, setEnrollmentsCG] = useState(dataChart);\n  const [totalEnrollmentsInYears, setTotalEnrollmentsInYears] = useState(dataLineChart);\n  const [schoolsInYearsPerGre, setSchoolsInYearsPerGre] = useState(dataLineChart);\n  const [schoolsInYearsPerSize, setSchoolsInYearsPerSize] = useState(dataLineChart);\n  const [regularSchoolsInYears, setRegularSchoolsInYears] = useState(dataLineChart);\n  const [years, setYears] = useState([]);\n  const [selectedAdministrationType, setSelectedAdministrationType] = useState({ label: 'Todos', value: 3 });\n  const [schoolsInfos, setSchoolsInfos] = useState([]);\n  const [loadingTabel, setLoadingTabel] = useState(false);\n  const [optionsAdministrationType] = useState([\n    {\n      label: 'Todos',\n      value: 3,\n    },\n    {\n      label: 'Municipal',\n      value: 1,\n    },\n    {\n      label: 'Estadual',\n      value: 0,\n    }\n  ]);\n\n  const head = ['ID', 'Escola'];\n  const DataTableColumns = [\n    { field: 'id', headerName: head[0], flex: 0.10, headerAlign: 'center', headerClassName: 'theme-header', align: 'center' },\n    { field: 'school', headerName: head[1], flex: 0.15, headerAlign: 'center', headerClassName: 'theme-header', align: 'center' },\n\n  ];\n\n  function handleDownloadPdf() {\n    const doc = new jsPDF();\n    const lines = [];\n\n    setLoadingTabel(true);\n\n    schoolsInfos.forEach((item, index) => {\n      lines.push([\n        index + 1,\n        item.school,\n      ]);\n    });\n\n    doc.autoTable({\n      head: [],\n      body: lines,\n    });\n\n    doc.save('escolas.pdf');\n\n    setLoadingTabel(false);\n  }\n\n  function handleDownloadCsv() {\n    const serialized = schoolsInfos.map((item, index) => ({\n      ID: index + 1,\n      Escola: item.school,\n    }));\n\n    return serialized;\n  }\n\n  const rows = schoolsInfos.map((item, index) => ({\n    id: index + 1,\n    school: item.school,\n  }));\n\n  function onSelectYear(id, option) {\n    switch (id) {\n      case 'highestEnrollments':\n        setHighestEnrollments({ ...highestEnrollments, loading: true });\n        apiSaber.get(`/enrollments/get-pro-highest-enroll/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(item => item.escolas);\n          const y = response.data.map(item => item.sum);\n\n          setHighestEnrollments({ loading: false, year: option, x, y });\n        });\n        break;\n\n      case 'enrollmentsJP':\n        setEnrollmentsJP({ ...enrollmentsJP, loading: true });\n        apiSaber.get(`/enrollments/get-pro-schools-per-city/?cityName=João Pessoa&year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(item => item.escolas);\n          const y = response.data.map(item => item.sum);\n\n          setEnrollmentsJP({ loading: false, year: option, x, y });\n        });\n        break;\n\n      case 'enrollmentsCG':\n        setEnrollmentsCG({ ...enrollmentsCG, loading: true });\n        apiSaber.get(`/enrollments/get-pro-schools-per-city/?cityName=Campina Grande&year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(item => item.escolas);\n          const y = response.data.map(item => item.sum);\n\n          setEnrollmentsCG({ loading: false, year: option, x, y });\n        });\n        break;\n\n      case 'schoolsPerSize':\n        setSchoolsPerSize({ ...schoolsPerSize, loading: true });\n        apiSaber.get(`/enrollments/get-pro-schools-by-size/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.slice(1, 17).map(size => size.key);\n          const y = response.data.slice(1, 17).map((size) => size.data);\n\n          setSchoolsPerSize({ loading: false, year: option, x, y });\n        }).catch(error => console.log(error));\n        break;\n\n      case 'enrollmentsPerSize':\n        setEnrollmentsPerSize({ ...enrollmentsPerSize, loading: true });\n        apiSaber.get(`/enrollments/get-pro-enrollments-by-size/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.slice(1, 17).map(size => size.key);\n          const y = response.data.slice(1, 17).map((size) => size.data);\n\n          setEnrollmentsPerSize({ loading: false, year: option, x, y });\n        }).catch(error => console.log(error));\n        break;\n\n      case 'averagesPersize':\n        setAveragePerSize({ ...averagesPersize, loading: true });\n        apiSaber.get(`/enrollments/get-pro-averages-by-size/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.slice(1, 17).map(size => size.key);\n          const y = response.data.slice(1, 17).map((size) => size.data);\n\n          setAveragePerSize({ loading: false, year: option, x, y });\n        }).catch(error => console.log(error));\n        break;\n\n      case 'schoolsPerGre':\n        setSchoolsPerGre({ ...schoolsPerGre, loading: true });\n        apiSaber.get(`/enrollments/get-pro-schools-by-gre/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(size => size.key);\n          const y = response.data.map((size) => size.data);\n\n          setSchoolsPerGre({ loading: false, year: option, x, y });\n        }).catch(error => console.log(error));\n        break;\n\n      case 'enrollmentsPerGre':\n        setEnrollmentsPerGre({ ...enrollmentsPerGre, loading: true });\n        apiSaber.get(`/enrollments/get-pro-enrollments-by-gre/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(size => size.key);\n          const y = response.data.map((size) => size.data);\n\n          setEnrollmentsPerGre({ loading: false, year: option, x, y });\n\n        }).catch(error => console.log(error));\n        break;\n\n      case 'averagesPerGre':\n        setAveragesPerGre({ ...averagesPerGre, loading: true });\n        apiSaber.get(`/enrollments/get-pro-averages-by-gre/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(size => size.key);\n          const y = response.data.map((size) => size.data);\n\n          setAveragesPerGre({ loading: false, year: option, x, y });\n        }).catch(error => console.log(error));\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function onSelectSchool(id, value) {\n    switch (id) {\n      case 'schoolsInYearsPerGre':\n        setSchoolsInYearsPerGre({ ...schoolsInYearsPerGre, loading: true });\n        apisaber.get(`/schools/pro-in-years-gre/?gre_id=${value}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(item => item.key);\n          const y = response.data.map(item => item.data);\n\n          setSchoolsInYearsPerGre({\n            ...schoolsInYearsPerGre,\n            loading: false,\n            data_id: value,\n            x,\n            y,\n          });\n        });\n        break;\n\n      case 'schoolsInYearsPerSize':\n        setSchoolsInYearsPerSize({ ...schoolsInYearsPerSize, loading: true });\n        apisaber.get(`/schools/pro-in-years-size/?size_id=${value}&type=${selectedAdministrationType.value}`).then(response => {\n          const x = response.data.map(item => item.key);\n          const y = response.data.map(item => item.data);\n\n          setSchoolsInYearsPerSize({\n            ...schoolsInYearsPerSize,\n            loading: false,\n            data_id: value,\n            x,\n            y,\n          });\n        });\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  useEffect(() => {\n    apiSaber.get(`/enrollments/get-years/?type=${selectedAdministrationType.value}`).then(response => {\n      const options = response.data.map(item => item.year);\n      setYears(options);\n    }).catch(error => console.log(error));\n\n    if (highestEnrollments.year) {\n      apiSaber.get(`/enrollments/get-pro-highest-enroll/?year=${highestEnrollments.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.map(item => item.escolas);\n        const y = response.data.map(item => item.sum);\n\n        setHighestEnrollments({ ...highestEnrollments, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (enrollmentsJP.year) {\n      apiSaber.get(`/enrollments/get-pro-schools-per-city/?cityName=João Pessoa&year=${enrollmentsJP.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.map(item => item.escolas);\n        const y = response.data.map(item => item.sum);\n\n        setEnrollmentsJP({ ...enrollmentsJP, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (enrollmentsCG.year) {\n      apiSaber.get(`/enrollments/get-pro-schools-per-city/?cityName=Campina Grande&year=${enrollmentsCG.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.map(item => item.escolas);\n        const y = response.data.map(item => item.sum);\n\n        setEnrollmentsCG({ ...enrollmentsCG, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (schoolsPerSize.year) {\n      apiSaber.get(`/enrollments/get-pro-schools-by-size/?year=${schoolsPerSize.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.slice(1, 17).map(size => size.key);\n        const y = response.data.slice(1, 17).map((size) => size.data);\n\n        setSchoolsPerSize({ ...schoolsPerSize, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (enrollmentsPerSize.year) {\n      apiSaber.get(`/enrollments/get-pro-enrollments-by-size/?year=${enrollmentsPerSize.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.slice(1, 17).map(size => size.key);\n        const y = response.data.slice(1, 17).map((size) => size.data);\n\n        setEnrollmentsPerSize({ ...enrollmentsPerSize, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (averagesPersize.year) {\n      apiSaber.get(`/enrollments/get-pro-averages-by-size/?year=${averagesPersize.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.slice(1, 17).map(size => size.key);\n        const y = response.data.slice(1, 17).map((size) => size.data);\n\n        setAveragePerSize({ ...averagesPersize, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (schoolsPerGre.year) {\n      apiSaber.get(`/enrollments/get-pro-schools-by-gre/?year=${schoolsPerGre.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.map(size => size.key);\n        const y = response.data.map((size) => size.data);\n\n        setSchoolsPerGre({ ...schoolsPerGre, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (enrollmentsPerGre.year) {\n      apiSaber.get(`/enrollments/get-pro-enrollments-by-gre/?year=${enrollmentsPerGre.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.map(size => size.key);\n        const y = response.data.map((size) => size.data);\n\n        setEnrollmentsPerGre({ ...enrollmentsPerGre, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    if (averagesPerGre.year) {\n      apiSaber.get(`/enrollments/get-pro-averages-by-gre/?year=${averagesPerGre.year}&type=${selectedAdministrationType.value}`).then(response => {\n        const x = response.data.map(size => size.key);\n        const y = response.data.map((size) => size.data);\n\n        setAveragesPerGre({ ...averagesPerGre, loading: false, x, y });\n      }).catch(error => console.log(error));\n    }\n\n    apisaber.get(\n      `/schools/pro-in-years-gre/?gre_id=${schoolsInYearsPerGre.data_id === 0 ? 1 : schoolsInYearsPerGre.data_id}&type=${selectedAdministrationType.value}`\n    ).then(response => {\n      const x = response.data.map(item => item.key);\n      const y = response.data.map(item => item.data);\n\n      setSchoolsInYearsPerGre({ ...schoolsInYearsPerGre, loading: false, x, y });\n    }).catch(error => console.log(error));\n\n    apisaber.get(\n      `/schools/pro-in-years-size/?size_id=${schoolsInYearsPerSize.data_id === 0 ? 1 : schoolsInYearsPerSize.data_id}&type=${selectedAdministrationType.value}`\n    ).then(response => {\n      const x = response.data.map(item => item.key);\n      const y = response.data.map(item => item.data);\n\n      setSchoolsInYearsPerSize({ ...schoolsInYearsPerSize, loading: false, x, y });\n    }).catch(error => console.log(error));\n\n    apiSaber.get(`/enrollments/pro-total-in-years?type=${selectedAdministrationType.value}`).then(response => {\n      const x = response.data.map(item => item.key);\n      const y = response.data.map(item => item.data);\n\n      setTotalEnrollmentsInYears({ ...totalEnrollmentsInYears, useSelect: false, loading: false, x, y });\n    }).catch(error => console.log(error));\n\n    apiSaber.get(`/enrollments/get-pro-schools-that-were-regular-in-years/?type=${selectedAdministrationType.value}`).then(response => {\n      const x = response.data.map(item => item.key);\n      const y = response.data.map(item => item.data);\n\n      setRegularSchoolsInYears({ ...regularSchoolsInYears, useSelect: false, loading: false, x, y });\n    }).catch(error => console.log(error));\n\n    apisaber.get(`/enrollments/get-pro-schools-that-were-regular?type=${selectedAdministrationType.value}`).then(response => {\n      const serialized = response.data.map(item => {\n        return {\n          id: item.school_id,\n          school: item.escolas,\n        }\n      });\n\n      setSchoolsInfos(serialized);\n    });\n  }, [selectedAdministrationType]);\n\n  // function search(rows) {\n  //   return rows.filter((row) =>\n  //     searchColumns.some(\n  //       (column) =>\n  //         row[column].toString().toLowerCase().indexOf(query.toLowerCase()) > -1\n  //     )\n  //   );\n  // }\n\n  // const columns = escolas[0] && Object.keys(escolas[0]).filter((column) => column !== 'field1' && column !== 'Unnamed: 7');\n\n  return (\n    <div className=\"dash\">\n      <Header />\n      <div id=\"wrapper\">\n        <div className=\"content-area\">\n          <div className=\"container-sm container-fluid\">\n            <div className=\"main\">\n              <div className='administration-type'>\n                <Select\n                  className=\"basic-single\"\n                  classNamePrefix=\"custom-select\"\n                  isSearchable={false}\n                  value={selectedAdministrationType}\n                  options={optionsAdministrationType}\n                  components={{ Option: CustomOption }}\n                  filterOption={createFilter({ ignoreAccents: false })}\n                  onChange={value => setSelectedAdministrationType(value)}\n                />\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <LineChartBySchool\n                      x={totalEnrollmentsInYears.x}\n                      y={totalEnrollmentsInYears.y}\n                      name='Matrículas'\n                      type=\"line\"\n                      title=\"Total de matrículas na Paraíba ao longo dos anos\"\n                      id=\"totalEnrollmentsInYears\"\n                      // onChange={onSelectSchool}\n                      useSelect={totalEnrollmentsInYears.useSelect}\n                      loading={totalEnrollmentsInYears.loading}\n                      administrationType={selectedAdministrationType.value}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={highestEnrollments.x}\n                      y={highestEnrollments.y}\n                      name='Matrículas'\n                      type=\"bar\"\n                      title=\"Escolas paraibanas com maior número de matrículas\"\n                      id=\"highestEnrollments\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={highestEnrollments.loading}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-6 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={enrollmentsJP.x}\n                      y={enrollmentsJP.y}\n                      name='Matrículas'\n                      // color={color}\n                      type=\"bar\"\n                      title=\"Escolas de João Pessoa com mais Matrículas\"\n                      id=\"enrollmentsJP\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={enrollmentsJP.loading}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"col-lg-6 col-sm-12\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={enrollmentsCG.x}\n                      y={enrollmentsCG.y}\n                      name='Matrículas'\n                      type=\"bar\"\n                      title=\"Escolas de Campina Grande com mais Matrículas\"\n                      id=\"enrollmentsCG\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={enrollmentsCG.loading}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-6 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={schoolsPerSize.x}\n                      y={schoolsPerSize.y}\n                      name='Escolas'\n                      type=\"bar\"\n                      title=\"Total de Escolas por Porte\"\n                      id=\"schoolsPerSize\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={schoolsPerSize.loading}\n                    />\n                  </div>\n                </div>\n\n\n                <div className=\"col-lg-6 col-sm-12\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={schoolsPerGre.x}\n                      y={schoolsPerGre.y}\n                      name='Escolas'\n                      type=\"bar\"\n                      title=\"Total de Escolas por GRE\"\n                      id=\"schoolsPerGre\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={schoolsPerGre.loading}\n                      viewPercent={true}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-6 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={enrollmentsPerSize.x}\n                      y={enrollmentsPerSize.y}\n                      name='Matrículas'\n                      // color={color}\n                      type=\"bar\"\n                      title=\"Total de Matrículas por Porte\"\n                      id=\"enrollmentsPerSize\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={enrollmentsPerSize.loading}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"col-lg-6 col-sm-12\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={enrollmentsPerGre.x}\n                      y={enrollmentsPerGre.y}\n                      name='Matrículas'\n                      type=\"bar\"\n                      title=\"Total de Matrículas por GRE\"\n                      id=\"enrollmentsPerGre\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={enrollmentsPerGre.loading}\n                      viewPercent={true}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-6 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={averagesPersize.x}\n                      y={averagesPersize.y}\n                      name='Matrículas'\n                      // color={color}\n                      type=\"bar\"\n                      title=\"Média de Matrículas por Porte\"\n                      id=\"averagesPersize\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={averagesPersize.loading}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"col-lg-6 col-sm-12\">\n                  <div className=\"card-box box\">\n                    <ChartPerYear\n                      x={averagesPerGre.x}\n                      y={averagesPerGre.y}\n                      name='Matrículas'\n                      // color={color}\n                      type=\"bar\"\n                      title=\"Média de Matrículas por GRE\"\n                      id=\"averagesPerGre\"\n                      onSelect={onSelectYear}\n                      options={years}\n                      loading={averagesPerGre.loading}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <LineChartBySchool\n                      x={schoolsInYearsPerGre.x}\n                      y={schoolsInYearsPerGre.y}\n                      name='Escolas'\n                      type=\"line\"\n                      title=\"Total de escolas por GRE ao longo dos anos\"\n                      id=\"schoolsInYearsPerGre\"\n                      onChange={onSelectSchool}\n                      useSelect={schoolsInYearsPerGre.useSelect}\n                      loading={schoolsInYearsPerGre.loading}\n                      by=\"gre\"\n                      administrationType={selectedAdministrationType.value}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <LineChartBySchool\n                      x={schoolsInYearsPerSize.x}\n                      y={schoolsInYearsPerSize.y}\n                      name='Escolas'\n                      type=\"line\"\n                      title=\"Total de escolas por porte ao longo dos anos\"\n                      id=\"schoolsInYearsPerSize\"\n                      onChange={onSelectSchool}\n                      useSelect={schoolsInYearsPerSize.useSelect}\n                      loading={schoolsInYearsPerSize.loading}\n                      by=\"size\"\n                      administrationType={selectedAdministrationType.value}\n                    />\n                  </div>\n                </div>\n              </div>\n\n\n              <div className=\"row mt-4 mb-4\">\n                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                  <div className=\"card-box box\">\n                    <LineChartBySchool\n                      x={regularSchoolsInYears.x}\n                      y={regularSchoolsInYears.y}\n                      name='Escolas'\n                      type=\"line\"\n                      title=\"Quantidade de escolas regulares que se tornaram profissionais ao longo dos anos\"\n                      id=\"regularSchoolsInYears\"\n                      loading={regularSchoolsInYears.loading}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"row mt-4 bm-4\">\n              <div className=\"col\">\n                <div className=\"table box\">\n                  <DataTable\n                    title=\"Escolas regulares que se tornaram profissionais\"\n                    infos={schoolsInfos}\n                    rows={rows}\n                    columns={DataTableColumns}\n                    head={head}\n                    downloadCsv={handleDownloadCsv}\n                    downloadPdf={handleDownloadPdf}\n                    loading={loadingTabel}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default Professional;\n","/home/yasmin/Área de Trabalho/Frontend/src/pages/Students/index.jsx",["104"],[],"import React from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { ChartPerYear } from '../../components/ChartPerYear/ChartPerYear';\nimport Header from \"../../components/Header\";\nimport apisaber from '../../services/apisaber';\nimport Select, { createFilter } from 'react-select';\nimport CustomOption from \"../../components/Options/CustomOption\";\nimport { LineChartBySchool } from '../../components/LineChartBySchool/LineChartBySchool';\n\nexport const Students = () => {\n    const dataChart = {\n        loading: true,\n        year: 2021,\n        x: [],\n        y: [],\n    };\n    \n    const dataLineChart = {\n        loading: true,\n        data_id: 0, //4556\n        useSelect: true,\n        x: [],\n        y: [],\n    };\n\n    const [studentRetention, setStudentRetention] = useState(dataChart);\n    const [studentEJA, setStudentEJA] = useState(dataChart);\n    // const [infantilRetention, setInfantilRetention] = useState(dataChart);\n    const [fundamentalRetention, setFundamentalRetention] = useState(dataChart);\n    const [medioRetention, setMedioRetention] = useState(dataChart);\n    const [ejaRetention, setEjaRetention] = useState(dataChart);\n    const [censoEarlyFundamentalComparison, setCensoEarlyFundamentalComparison] = useState(dataChart);\n    const [censoInfantilComparison, setCensoInfantilComparison] = useState(dataChart);\n    const [censoMedioComparison, setCensoMedioComparison] = useState(dataChart);\n    const [censoLateFundamentalComparison, setCensoLateFundamentalComparison] = useState(dataChart);\n    const [censoEJAFundamentalComparison, setCensoEJAFundamentalComparison] = useState(dataChart);\n    const [censoEJAMedioComparison, setCensoEJAMedioComparison] = useState(dataChart);\n    const [censoIntegralComparison, setCensoIntegralComparison] = useState(dataChart);\n    const [earlyFundamentalInYears, setEarlyFundamentalInYears] = useState(dataLineChart);\n    const [lateFundamentalInYears, setLateFundamentalInYears] = useState(dataLineChart);\n    const [firstMedioInYears, setFirstMedioInYears] = useState(dataLineChart);\n    const [secondMedioInYears, setSecondMedioInYears] = useState(dataLineChart);\n    const [thirdMedioInYears, setThirdMedioInYears] = useState(dataLineChart);\n    const [integralInYears, setIntegralInYears] = useState(dataLineChart);\n    const year_comparison = [2021]\n    const [years, setYears] = useState([]);\n    const [selectedAdministrationType, setSelectedAdministrationType] = useState({ label: 'Todos', value: 3 });\n    const [optionsAdministrationType] = useState([\n        {\n            label: 'Todos',\n            value: 3,\n        },\n        {\n            label: 'Municipal',\n            value: 1,\n        },\n        {\n            label: 'Estadual',\n            value: 0,\n        }\n    ]);\n\n    function onSelectYear(id, option) {\n        switch (id) {\n            case 'studentRetention':\n                setStudentRetention({ ...studentRetention, loading: true });\n                apisaber.get(`/enrollmentsratings/get-student-retention/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n                    const x = response.data.map(size => size.key);\n                    const y = response.data.map((size) => size.data);\n\n                    setStudentRetention({ loading: false, year: option, x, y });\n                }).catch(error => console.log(error));\n                break;\n\n            case 'studentEJA':\n                apisaber.get(`/enrollmentsratings/get-returning-students-eja/?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n                    const x = response.data.map(size => size.key);\n                    const y = response.data.map((size) => size.data);\n\n                    setStudentEJA({ loading: false, year: option, x, y });\n                }).catch(error => console.log(error));\n\n                break;\n\n            // case 'infantilRetention':\n            //     apisaber.get(`/enrollmentsratings/get-infantil-retention?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n            //         const x = response.data.map(size => size.key);\n            //         const y = response.data.map(size => size.data);\n\n            //         setInfantilRetention({ loading: false, year: option, x, y });\n            //     }).catch(error => console.log(error));\n\n            //     break;\n\n            case 'fundamentalRetention':\n                apisaber.get(`/enrollmentsratings/get-fundamental-retention?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n                    const x = response.data.map(size => size.key);\n                    const y = response.data.map(size => size.data);\n\n                    setFundamentalRetention({ loading: false, year: option, x, y });\n                }).catch(error => console.log(error));\n\n                break;\n\n            case 'medioRetention':\n                apisaber.get(`/enrollmentsratings/get-medio-retention?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n                    const x = response.data.map(size => size.key);\n                    const y = response.data.map(size => size.data);\n\n                    setMedioRetention({ loading: false, year: option, x, y });\n                }).catch(error => console.log(error));\n\n                break;\n\n            case 'ejaRetention':\n                apisaber.get(`/enrollmentsratings/get-eja-retention?year=${option}&type=${selectedAdministrationType.value}`).then(response => {\n                    const x = response.data.map(size => size.key);\n                    const y = response.data.map(size => size.data);\n\n                    setEjaRetention({ loading: false, year: option, x, y });\n                }).catch(error => console.log(error));\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    useEffect(() => {\n        apisaber.get(`/enrollments/get-years/?type=${selectedAdministrationType.value}`).then(response => {\n            const options = response.data.map(item => item.year);\n            setYears(options);\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollmentsratings/get-student-retention/?year=${studentRetention.year}&type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map((size) => size.data);\n\n            setStudentRetention({ ...studentRetention, loading: false, x, y });\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollmentsratings/get-returning-students-eja/?year=${studentEJA.year}&type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map((size) => size.data);\n\n            setStudentEJA({ ...studentEJA, loading: false, x, y });\n        }).catch(error => console.log(error));\n\n        // apisaber.get(`/enrollmentsratings/get-infantil-retention?year=${infantilRetention.year}&type=${selectedAdministrationType.value}`).then(response => {\n        //     const x = response.data.map(size => size.key);\n        //     const y = response.data.map(size => size.data);\n\n        //     setInfantilRetention({ ...infantilRetention, loading: false, x, y });\n        // }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollmentsratings/get-fundamental-retention?year=${fundamentalRetention.year}&type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setFundamentalRetention({ ...fundamentalRetention, loading: false, x, y });\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollmentsratings/get-medio-retention?year=${medioRetention.year}&type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setMedioRetention({ ...medioRetention, loading: false, x, y });\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollmentsratings/get-eja-retention?year=${ejaRetention.year}&type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setEjaRetention({ ...ejaRetention, loading: false, x, y });\n        }).catch(error => console.log(error));\n// censo\n        apisaber.get(`/enrollments/get-censo-early-fundamental-comparison?type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setCensoEarlyFundamentalComparison({ ...censoEarlyFundamentalComparison, loading: false, x, y });\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollments/get-censo-late-fundamental-comparison?type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setCensoLateFundamentalComparison({ ...censoLateFundamentalComparison, loading: false, x, y });\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollments/get-censo-infantil-comparison?type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setCensoInfantilComparison({ ...censoInfantilComparison, loading: false, x, y });\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollments/get-censo-integral-comparison?type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setCensoIntegralComparison({ ...censoIntegralComparison, loading: false, x, y });\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollments/get-censo-medio-comparison?type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setCensoMedioComparison({ ...censoMedioComparison, loading: false, x, y });\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollments/get-censo-eja-fundamental-comparison?type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setCensoEJAFundamentalComparison({ ...censoEJAFundamentalComparison, loading: false, x, y });\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollments/get-censo-eja-medio-comparison?type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setCensoEJAMedioComparison({ ...censoEJAMedioComparison, loading: false, x, y });\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollments/get-early-fundamental-students-in-years?type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setEarlyFundamentalInYears({ ...earlyFundamentalInYears, useSelect: false, loading: false, x, y})\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollments/get-late-fundamental-students-in-years?type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setLateFundamentalInYears({ ...lateFundamentalInYears, useSelect: false, loading: false, x, y})\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollments/get-first-medio-students-in-years?type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setFirstMedioInYears({ ...firstMedioInYears, useSelect: false, loading: false, x, y})\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollments/get-second-medio-students-in-years?type=${ selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setSecondMedioInYears({ ...secondMedioInYears, useSelect: false, loading: false, x, y})\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollments/get-third-medio-students-in-years?type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setThirdMedioInYears({ ...thirdMedioInYears, useSelect: false, loading: false, x, y})\n        }).catch(error => console.log(error));\n\n        apisaber.get(`/enrollments/get-integral-students-in-years?type=${selectedAdministrationType.value}`).then(response => {\n            const x = response.data.map(size => size.key);\n            const y = response.data.map(size => size.data);\n\n            setIntegralInYears({ ...integralInYears, useSelect: false, loading: false, x, y});\n        }).catch(error => console.log(error));\n\n    }, [selectedAdministrationType]);\n\n    return (\n        <div className='dash'>\n            <Header />\n            <div id=\"wrapper\">\n                <div className=\"content-area\">\n                    <div className=\"container-sm container-fluid\">\n                        <div className=\"main\">\n\n                            <div className='administration-type'>\n                                <Select\n                                    className=\"basic-single\"\n                                    classNamePrefix=\"custom-select\"\n                                    isSearchable={false}\n                                    value={selectedAdministrationType}\n                                    options={optionsAdministrationType}\n                                    components={{ Option: CustomOption }}\n                                    filterOption={createFilter({ ignoreAccents: false })}\n                                    onChange={value => setSelectedAdministrationType(value)}\n                                />\n                            </div>\n\n\n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <ChartPerYear\n                                            x={studentRetention.x}\n                                            y={studentRetention.y}\n                                            name='Alunos'\n                                            type=\"bar\"\n                                            title=\"Retenção de alunos\"\n                                            id=\"studentRetention\"\n                                            onSelect={onSelectYear}\n                                            options={years}\n                                            loading={studentRetention.loading}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <ChartPerYear\n                                            x={studentEJA.x}\n                                            y={studentEJA.y}\n                                            name='Alunos'\n                                            type=\"bar\"\n                                            title=\"Alunos que retornaram pelo EJA\"\n                                            id=\"studentEJA\"\n                                            onSelect={onSelectYear}\n                                            options={years}\n                                            loading={studentEJA.loading}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n                            {/* <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <ChartPerYear\n                                            x={infantilRetention.x}\n                                            y={infantilRetention.y}\n                                            name='Alunos'\n                                            type=\"bar\"\n                                            title=\"Retenção de alunos no ensino infantil\"\n                                            id=\"infantilRetention\"\n                                            onSelect={onSelectYear}\n                                            options={years}\n                                            loading={infantilRetention.loading}\n                                        />\n                                    </div>\n                                </div>\n                            </div> */}\n\n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <ChartPerYear\n                                            x={fundamentalRetention.x}\n                                            y={fundamentalRetention.y}\n                                            name='Alunos'\n                                            type=\"bar\"\n                                            title=\"Retenção de alunos no ensino fundamental\"\n                                            id=\"fundamentalRetention\"\n                                            onSelect={onSelectYear}\n                                            options={years}\n                                            loading={fundamentalRetention.loading}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <ChartPerYear\n                                            x={medioRetention.x}\n                                            y={medioRetention.y}\n                                            name='Alunos'\n                                            type=\"bar\"\n                                            title=\"Retenção de alunos no ensino médio\"\n                                            id=\"medioRetention\"\n                                            onSelect={onSelectYear}\n                                            options={years}\n                                            loading={medioRetention.loading}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n\n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <ChartPerYear\n                                            x={ejaRetention.x}\n                                            y={ejaRetention.y}\n                                            name='Alunos'\n                                            type=\"bar\"\n                                            title=\"Retenção de alunos no EJA\"\n                                            id=\"ejaRetention\"\n                                            onSelect={onSelectYear}\n                                            options={years}\n                                            loading={ejaRetention.loading}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <ChartPerYear\n                                            x={censoEarlyFundamentalComparison.x}\n                                            y={censoEarlyFundamentalComparison.y}\n                                            name='Alunos'\n                                            type=\"bar\"\n                                            title=\"Quantidade de Alunos Fundamental (Anos Iniciais) Censo vs Saber\"\n                                            // id=\"ejaRetention\"\n                                            // onSelect={onSelectYear}\n                                            options={year_comparison}\n                                            loading={censoEarlyFundamentalComparison.loading}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <ChartPerYear\n                                            x={censoLateFundamentalComparison.x}\n                                            y={censoLateFundamentalComparison.y}\n                                            name='Alunos'\n                                            type=\"bar\"\n                                            title=\"Quantidade de Alunos Fundamental (Anos Finais) Censo vs Saber\"\n                                            // id=\"ejaRetention\"\n                                            // onSelect={onSelectYear}\n                                            options={year_comparison}\n                                            loading={censoLateFundamentalComparison.loading}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <ChartPerYear\n                                            x={censoInfantilComparison.x}\n                                            y={censoInfantilComparison.y}\n                                            name='Alunos'\n                                            type=\"bar\"\n                                            title=\"Quantidade de Alunos Infantil Censo vs Saber\"\n                                            // id=\"ejaRetention\"\n                                            // onSelect={onSelectYear}\n                                            options={year_comparison}\n                                            loading={censoInfantilComparison.loading}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <ChartPerYear\n                                            x={censoIntegralComparison.x}\n                                            y={censoIntegralComparison.y}\n                                            name='Alunos'\n                                            type=\"bar\"\n                                            title=\"Quantidade de Alunos Integral Censo vs Saber\"\n                                            // id=\"ejaRetention\"\n                                            // onSelect={onSelectYear}\n                                            options={year_comparison}\n                                            loading={censoIntegralComparison.loading}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <ChartPerYear\n                                            x={censoMedioComparison.x}\n                                            y={censoMedioComparison.y}\n                                            name='Alunos'\n                                            type=\"bar\"\n                                            title=\"Quantidade de Alunos Médio Censo vs Saber\"\n                                            // id=\"ejaRetention\"\n                                            // onSelect={onSelectYear}\n                                            options={year_comparison}\n                                            loading={censoMedioComparison.loading}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <ChartPerYear\n                                            x={censoEJAFundamentalComparison.x}\n                                            y={censoEJAFundamentalComparison.y}\n                                            name='Alunos'\n                                            type=\"bar\"\n                                            title=\"Quantidade de Alunos do EJA Fundamental Censo vs Saber\"\n                                            // id=\"ejaRetention\"\n                                            // onSelect={onSelectYear}\n                                            options={year_comparison}\n                                            loading={censoEJAFundamentalComparison.loading}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <ChartPerYear\n                                            x={censoEJAMedioComparison.x}\n                                            y={censoEJAMedioComparison.y}\n                                            name='Alunos'\n                                            type=\"bar\"\n                                            title=\"Quantidade de Alunos do EJA Médio Censo vs Saber\"\n                                            // id=\"ejaRetention\"\n                                            // onSelect={onSelectYear}\n                                            options={year_comparison}\n                                            loading={censoEJAMedioComparison.loading}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <LineChartBySchool\n                                        x={earlyFundamentalInYears.x}\n                                        y={earlyFundamentalInYears.y}\n                                        name='Matrículas'\n                                        type=\"line\"\n                                        title=\"Total matrículas do Ensino Fundamental (Anos Iniciais) ao longo dos anos\"\n                                        id=\"earlyFundamentalInYears\"\n                                        useSelect={earlyFundamentalInYears.useSelect}\n                                        loading={earlyFundamentalInYears.loading}\n                                        administrationType={selectedAdministrationType.value}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n\n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <LineChartBySchool\n                                        x={lateFundamentalInYears.x}\n                                        y={lateFundamentalInYears.y}\n                                        name='Matrículas'\n                                        type=\"line\"\n                                        title=\"Total matrículas do Ensino Fundamental (Anos Finais) ao longo dos anos\"\n                                        id=\"lateFundamentalInYears\"\n                                        useSelect={lateFundamentalInYears.useSelect}\n                                        loading={lateFundamentalInYears.loading}\n                                        administrationType={selectedAdministrationType.value}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n\n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <LineChartBySchool\n                                        x={firstMedioInYears.x}\n                                        y={firstMedioInYears.y}\n                                        name='Matrículas'\n                                        type=\"line\"\n                                        title=\"Total matrículas na 1ª série ao longo dos anos\"\n                                        id=\"firstMedioInYears\"\n                                        useSelect={firstMedioInYears.useSelect}\n                                        loading={firstMedioInYears.loading}\n                                        administrationType={selectedAdministrationType.value}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <LineChartBySchool\n                                        x={secondMedioInYears.x}\n                                        y={secondMedioInYears.y}\n                                        name='Matrículas'\n                                        type=\"line\"\n                                        title=\"Total matrículas na 2ª série ao longo dos anos\"\n                                        id=\"secondMedioInYears\"\n                                        useSelect={secondMedioInYears.useSelect}\n                                        loading={secondMedioInYears.loading}\n                                        administrationType={selectedAdministrationType.value}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <LineChartBySchool\n                                        x={thirdMedioInYears.x}\n                                        y={thirdMedioInYears.y}\n                                        name='Matrículas'\n                                        type=\"line\"\n                                        title=\"Total matrículas na 3ª série ao longo dos anos\"\n                                        id=\"thirdMedioInYears\"\n                                        useSelect={thirdMedioInYears.useSelect}\n                                        loading={thirdMedioInYears.loading}\n                                        administrationType={selectedAdministrationType.value}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row mt-4 mb-4\">\n                                <div className=\"col-lg-12 col-sm-12 mb-sm-4\">\n                                    <div className=\"card-box box\">\n                                        <LineChartBySchool\n                                        x={integralInYears.x}\n                                        y={integralInYears.y}\n                                        name='Matrículas'\n                                        type=\"line\"\n                                        title=\"Total matrículas em escolas integrais ao longo dos anos\"\n                                        id=\"integralInYears\"\n                                        useSelect={integralInYears.useSelect}\n                                        loading={integralInYears.loading}\n                                        administrationType={selectedAdministrationType.value}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","/home/yasmin/Área de Trabalho/Frontend/src/services/apisaber.js",[],[],"/home/yasmin/Área de Trabalho/Frontend/src/components/ChartPerYear/ChartPerYear.jsx",["105"],[],"import React from \"react\"\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { Spinner } from '../Spinner';\nimport Chart from 'react-apexcharts';\nimport Switch from \"@material-ui/core/Switch\";\n\nimport './styles.css';\nimport { NoDataMessage } from \"../NoDataMessage\";\n\nexport const ChartPerYear = (props) => {\n    const [series, setSeries] = useState([{\n        name: props.name,\n        color: props.color,\n        data: props.y,\n    }]);\n    const [options, setOptions] = useState({\n        chart: {\n            type: props.type,\n            height: 450,\n        },\n        plotOptions: {\n            bar: {\n                barHeight: '100%',\n                distributed: true,\n                horizontal: true,\n                dataLabels: {\n                    position: 'bottom'\n                },\n            }\n        },\n        colors: [\n            '#E5BEDD', '#FFA8B8', '#DCD9F8',\n            '#F7D8C3', '#FFC8C3', '#BCCEF4',\n            '#B5DCF9', '#A9E5E3', '#A2EDCE',\n            '#A0D995', '#C5D084', '#D2C797',\n            '#FAE187', '#E8BA86', '#D3BEAD',\n            '#8CC2C2'\n        ],\n        title: {\n            text: props.title,\n            align: 'center',\n            floating: true,\n            margin: 20,\n        },\n        dataLabels: {\n            enabled: true,\n            textAnchor: 'start',\n            style: {\n                colors: ['#000']\n            },\n            formatter: function (val, opt) {\n                return opt.w.globals.labels[opt.dataPointIndex] + \":  \" + val.toLocaleString('pt-BR', { minimumFractionDigits: 0 })\n            },\n            offsetX: 0,\n            dropShadow: {\n                enabled: false\n            }\n        },\n        stroke: {\n            width: 1,\n            colors: ['#fff']\n        },\n        yaxis: {\n            labels: {\n                show: false,\n            },\n        },\n        xaxis: {\n            categories: props.x,\n            labels: {\n                rotate: -60,\n                rotateAlways: false,\n                style: {\n                    fontSize: '10px',\n                    colors: [\"#304758\"],\n                    fontFamily: 'Helvetica, Arial, sans-serif',\n                    fontWeight: 'bold',\n                },\n            },\n            style: {\n                marginBottom: '50px'\n            },\n        },\n        fill: {\n            opacity: 1\n        },\n        legend: {\n            show: false,\n        },\n        tooltip: {\n            theme: 'dark',\n            x: {\n                show: false,\n            },\n            y: {\n                title: {\n                    formatter: function (val, opt) {\n                        return val + ':';\n                    }\n                },\n                formatter: function (val) {\n                    return typeof val === \"number\" ? val.toFixed(0) : val;\n                },\n            }\n        }\n    });\n\n    const [pieSeries, setPieSeries] = useState([]);\n    const [pieOptions, setPieOptions] = useState({\n        chart: { type: 'donut', },\n        responsive: [{\n            breakpoint: 480,\n            options: {\n                chart: {\n                    width: 200\n                },\n                legend: {\n                    position: 'bottom'\n                }\n            }\n        }],\n        colors: [\n            '#E5BEDD', '#FFA8B8', '#DCD9F8',\n            '#F7D8C3', '#FFC8C3', '#BCCEF4',\n            '#B5DCF9', '#A9E5E3', '#A2EDCE',\n            '#A0D995', '#C5D084', '#D2C797',\n            '#FAE187', '#E8BA86', '#D3BEAD',\n            '#8CC2C2'\n        ],\n        title: {\n            text: props.title,\n            align: 'center',\n            floating: true\n        },\n        labels: props.x,\n        dataLabels: {\n            enabled: true,\n            formatter: function (val) {\n                return val.toFixed(2) + \"%\";\n            },\n            textAnchor: 'middle',\n            style: {\n                fontSize: '14px',\n                colors: ['#000'],\n            },\n            offsetX: 0,\n            dropShadow: {\n                enabled: false\n            },\n        },\n        tooltip: {\n            enabled: true,\n            style: {\n                fontSize: '12px',\n                colors: ['#000'],\n            },\n            theme: true,\n        },\n        plotOptions: {\n            pie: {\n                customScale: 0.9,\n                donut: {\n                    labels: {\n                        show: true,\n                        name: {\n                            show: true,\n                            fontSize: '15px',\n                            colors: [\"#304758\"],\n                            fontFamily: 'Helvetica, Arial, sans-serif',\n                            fontWeight: 'bold',\n                            color: '#000',\n                        },\n                        value: {\n                            show: true,\n                            fontSize: '15px',\n                            colors: [\"#304758\"],\n                            fontFamily: 'Helvetica, Arial, sans-serif',\n                            fontWeight: 'bold',\n                            color: '#000',\n                            formatter: function (val, opts) {\n                                let index = opts.globals.series.indexOf(parseFloat(val));\n                                return val\n                                    + ' - '\n                                    + parseFloat(opts.globals.seriesPercent[index]).toFixed(2)\n                                    + '%';\n                            },\n                        },\n                    },\n\n                }\n            }\n        }\n    });\n\n    const [viewPercent, setViewPercent] = useState(false);\n    const [selected, setSelected] = useState(props.options[0]);\n\n    function handleSelectChange(value) {\n        props.onSelect(props.id, value);\n        setSelected(value);\n    }\n\n    function changeView() {\n        setViewPercent(!viewPercent);\n    }\n\n    function verifyEmptyData(data) {\n        for (const item of data) {\n            if (item > 0 || item != \"0\") return true;\n        }\n\n        return false;\n    }\n\n    useEffect(() => {\n        setPieSeries(() => {\n            if (props.y.length > 0) {\n                if (typeof props.y[0] == 'number') {\n                    return props.y;\n                }\n                else {\n                    return props.y.map(item => parseFloat(item));\n                }\n            }\n        });\n        setPieOptions(prevPieOptions => {\n            return {\n                ...prevPieOptions,\n                labels: props.x,\n            };\n        });\n\n\n        setSeries(prevSeries => {\n            return [{\n                ...prevSeries[0],\n                data: props.y,\n            }];\n        });\n        setOptions(prevOptions => {\n            const xaxis = prevOptions.xaxis;\n\n            return {\n                ...prevOptions,\n                xaxis: {\n                    ...xaxis,\n                    categories: props.x,\n                },\n            }\n        });\n    }, [props.y, props.x, viewPercent]);\n\n    return (\n        <div id={props.id} className=\"container-chart\">\n            {!props.loading ? (\n                <>\n                    <div>\n                        {props.viewPercent ? (\n                            <label>\n                                <Switch\n                                    aria-label=\"Percentual\"\n                                    size=\"small\"\n                                    onChange={changeView}\n                                    checked={viewPercent}\n                                    color=\"primary\"\n                                />\n                                <span>Percentual</span>\n                            </label>\n                        ) : (\n                            <div></div>\n                        )}\n                        <select\n                            className=\"select-year\"\n                            onChange={(e) => handleSelectChange(e.target.value)}\n                            value={selected}\n                        >\n                            {(props.options || []).map((option, index) => {\n                                return (<option key={index}>{option}</option>);\n                            })}\n                        </select>\n                    </div>\n                    {verifyEmptyData(props.y) ? (\n                        !viewPercent ? (\n                            <Chart\n                                id={props.type}\n                                className={props.type}\n                                options={options}\n                                series={series}\n                                type={props.type}\n                                height={450}\n                            />\n                        ) : (\n                            <Chart\n                                id='donut'\n                                className='donut'\n                                options={pieOptions}\n                                series={pieSeries}\n                                type='donut'\n                                height={450}\n                            />\n                        )\n                    ) : (\n                        <NoDataMessage />\n                    )}\n                </>\n            ) : (\n                <div className=\"box-spinner\">\n                    <Spinner />\n                </div>\n            )}\n\n        </div>\n    );\n};","/home/yasmin/Área de Trabalho/Frontend/src/components/LineChartBySchool/LineChartBySchool.jsx",["106","107","108","109","110"],[],"import React from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { Spinner } from '../../components/Spinner';\nimport Select, { createFilter } from 'react-select';\nimport CustomOption from \"../Options/CustomOption\";\nimport Chart from 'react-apexcharts';\nimport './styles.css';\nimport apisaber from \"../../services/apisaber\";\nimport { NoDataMessage } from \"../NoDataMessage\";\n\nexport const LineChartBySchool = (props) => {\n    const [data, setData] = useState([]);\n    const [selected, setSelected] = useState({\n        value: '',\n        label: '',\n    });\n\n    const [series, setSeries] = useState([{\n        name: props.name,\n        data: props.y,\n    }]);\n\n    const [options, setOptions] = useState({\n        chart: {\n            height: 350,\n            type: 'line', //props.type,\n            zoom: {\n                enabled: false\n            },\n        },\n        dataLabels: {\n            enabled: false\n        },\n        stroke: {\n            curve: 'straight'\n        },\n        colors: ['#A0D995'],\n        title: {\n            text: props.title,\n            align: 'center',\n        },\n        markers: {\n            size: 8,\n        },\n        grid: {\n            row: {\n                colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n                opacity: 0.5,\n            },\n        },\n        xaxis: {\n            categories: ['2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021'],\n        }\n    });\n\n    function handleSelectChange(item) {\n        if (!item) {\n            props.onChange(props.id, data[0].value);\n            setSelected({\n                value: data[0].value,\n                label: data[0].label,\n            });\n\n            return;\n        }\n        props.onChange(props.id, item.value);\n        setSelected(item);\n    };\n\n    function verifyEmptyData(data) {\n        for (const item of data) {\n            if (item > 0 || item != \"0\") return true;\n        }\n\n        return false;\n    }\n\n    useEffect(() => {\n        if (data.length === 0 && props.useSelect) {\n            switch (props.by) {\n                case 'school':\n                    apisaber.get(`/enrollments/get-schools/?name=${selected.value}`).then(response => {\n                        setData(response.data);\n                        setSelected({\n                            value: response.data[0].value,\n                            label: response.data[0].label,\n                        });\n                        console.log(response.data[0].value, response.data[0].label);\n                    }).catch(error => console.log(error));\n\n                    break;\n                case 'gre':\n                    apisaber.get(\"/enrollments/get-gres\").then(response => {\n                        setData(response.data);\n                        setSelected({\n                            value: response.data[0].value,\n                            label: response.data[0].label,\n                        });\n                    }).catch(error => console.log(error));\n\n                    break;\n                case 'size':\n                    apisaber.get(\"/enrollments/get-sizes\").then(response => {\n                        setData(response.data);\n                        setSelected({\n                            value: response.data[0].value,\n                            label: response.data[0].label,\n                        });\n                    }).catch(error => console.log(error));\n\n                    break;\n                default:\n                    break;\n            }\n        }\n        setSeries(prevSeries => {\n            return [{\n                ...prevSeries[0],\n                data: props.y,\n            }];\n        });\n\n        setOptions(prevOptions => {\n            return {\n                ...prevOptions,\n                xaxis: {\n                    categories: props.x,\n                },\n            };\n        });\n    }, [\n        props.x,\n        props.y,\n        data.length,\n        options.xaxis.categories,\n        props.useSelect,\n        selected.value\n    ]);\n\n    useEffect(() => {\n        if (data.length != 0 && props.by == 'school') {\n            apisaber.get(`/enrollments/get-schools/?name=${''}&type=${props.administrationType}`).then(response => {\n                setData(response.data);\n                console.log(response.data)\n                setSelected({\n                    value: response.data[0].value,\n                    label: response.data[0].label,\n                });\n            }).catch(error => console.log(error));\n        }\n    }, [props.administrationType])\n\n    return (\n        <div id={props.id} className=\"container-line-chart\">\n            {!props.loading  ? (\n                <div className=\"container-select-chart\">\n                    <div className=\"select\">\n                        {props.useSelect && (\n                            <Select\n                                className=\"basic-single\"\n                                classNamePrefix=\"custom-select\"\n                                isClearable={true}\n                                isSearchable={true}\n                                value={selected}\n                                options={data}\n                                components={{ Option: CustomOption }}\n                                filterOption={createFilter({ ignoreAccents: false })}\n                                onChange={value => handleSelectChange(value)}\n                            />\n                        )}\n                        <div />\n                    </div>\n                    {verifyEmptyData(props.y) ? (\n                        <Chart\n                        className=\"chart\"\n                        options={options}\n                        series={series}\n                        type={props.type}\n                        height={350}\n                    />\n                    ) : (\n                        <NoDataMessage />\n                    )}\n                </div>\n            ) : (\n                <div className=\"box-spinner-line-chart\">\n                    <Spinner />\n                </div>\n            )}\n        </div>\n    );\n}","/home/yasmin/Área de Trabalho/Frontend/src/components/Options/CustomOption.jsx",[],[],"/home/yasmin/Área de Trabalho/Frontend/src/components/ChartBySchool/ChartBySchool.jsx",["111"],[],"import React from \"react\"\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { Spinner } from '../Spinner';\nimport Chart from 'react-apexcharts';\nimport Select, { createFilter } from 'react-select';\nimport CustomOption from \"../Options/CustomOption\";\nimport apisaber from \"../../services/apisaber\";\n\nimport './styles.css';\nimport { NoDataMessage } from \"../NoDataMessage\";\n\nexport const ChartBySchool = (props) => {\n    const [data, setData] = useState([]);\n    const [selected, setSelected] = useState({\n        value: '',\n        label: '',\n    });\n    const [series, setSeries] = useState([{\n        name: props.name,\n        data: props.y,\n    }]);\n    const [options, setOptions] = useState({\n        chart: {\n            type: props.type,\n            height: 450,\n        },\n        plotOptions: {\n            bar: {\n                barHeight: '100%',\n                distributed: true,\n                horizontal: true,\n                dataLabels: {\n                    position: 'bottom'\n                },\n            }\n        },\n        colors: [\n            '#E5BEDD', '#FFA8B8', '#DCD9F8',\n            '#F7D8C3', '#FFC8C3', '#BCCEF4',\n            '#B5DCF9', '#A9E5E3', '#A2EDCE',\n            '#A0D995', '#C5D084', '#D2C797',\n            '#FAE187', '#E8BA86', '#D3BEAD',\n            '#8CC2C2'\n        ],\n        title: {\n            text: props.title,\n            align: 'center',\n            floating: true,\n            margin: 20,\n        },\n        dataLabels: {\n            enabled: true,\n            textAnchor: 'start',\n            style: {\n                colors: ['#000']\n            },\n            formatter: function (val, opt) {\n                return opt.w.globals.labels[opt.dataPointIndex] + \":  \" + val.toLocaleString('pt-BR', { minimumFractionDigits: 0 })\n            },\n            offsetX: 0,\n            dropShadow: {\n                enabled: false\n            }\n        },\n        stroke: {\n            width: 1,\n            colors: ['#fff']\n        },\n        yaxis: {\n            labels: {\n                show: false,\n            },\n        },\n        xaxis: {\n            categories: props.x,\n            labels: {\n                rotate: -60,\n                rotateAlways: false,\n                style: {\n                    fontSize: '10px',\n                    colors: [\"#304758\"],\n                    fontFamily: 'Helvetica, Arial, sans-serif',\n                    fontWeight: 'bold',\n                },\n            },\n            style: {\n                marginBottom: '50px'\n            },\n        },\n        fill: {\n            opacity: 1\n        },\n        legend: {\n            show: false,\n        },\n        tooltip: {\n            theme: 'dark',\n            x: {\n                show: false,\n            },\n            y: {\n                title: {\n                    formatter: function (val, opt) {\n                        return val + ':';\n                    }\n                },\n                formatter: function (val) {\n                    return typeof val === \"number\" ? val.toFixed(0) : val;\n                },\n            }\n        }\n    });\n\n    \n    function handleSelectChange(item) {\n        if (!item) {\n            props.onChange(props.id, data[0].value);\n            setSelected({\n                value: data[0].value,\n                label: data[0].label,\n            });\n\n            return;\n        }\n        props.onChange(props.id, item.value);\n        setSelected(item);\n    };\n\n    function verifyEmptyData(data) {\n        for (const item of data) {\n            if (item > 0 || item != \"0\") return true;\n        }\n\n        return false;\n    }\n\n    useEffect(() => {\n        if (data.length === 0 && props.useSelect) {\n            apisaber.get(`/schools/get-all-integral-schools-that-were-regular/?type=${props.administrationType}`).then(response => {\n                setData(response.data);\n                setSelected({\n                    value: response.data[0].value,\n                    label: response.data[0].label,\n                });\n                console.log(response.data[0].value, response.data[0].label);\n            }).catch(error => console.log(error));\n        }\n\n        setSeries(prevSeries => {\n            return [{\n                ...prevSeries[0],\n                data: props.y,\n            }];\n        });\n        setOptions(prevOptions => {\n            const xaxis = prevOptions.xaxis;\n\n            return {\n                ...prevOptions,\n                xaxis: {\n                    ...xaxis,\n                    categories: props.x,\n                },\n            }\n        });\n    }, [\n        props.x,\n        props.y,\n        props.administrationType,\n        data.length,\n        options.xaxis.categories,\n        props.useSelect,\n        selected.value\n    ]);\n\n    return (\n        <div id={props.id} className=\"container-line-chart\">\n            {!props.loading  ? (\n                <div className=\"container-select-chart\">\n                    <div className=\"select\">\n                        {props.useSelect && (\n                            <Select\n                                className=\"basic-single\"\n                                classNamePrefix=\"custom-select\"\n                                isClearable={true}\n                                isSearchable={true}\n                                value={selected}\n                                options={data}\n                                components={{ Option: CustomOption }}\n                                filterOption={createFilter({ ignoreAccents: false })}\n                                onChange={value => handleSelectChange(value)}\n                            />\n                        )}\n                        <div />\n                    </div>\n                    {verifyEmptyData(props.y) ? (\n                        <Chart\n                            className=\"chart\"\n                            options={options}\n                            series={series}\n                            type={props.type}\n                            height={350}\n                        />\n                    ) : (\n                        <NoDataMessage />\n                    )}\n                </div>\n            ) : (\n                <div className=\"box-spinner-line-chart\">\n                    <Spinner />\n                </div>\n            )}\n        </div>\n    );\n};","/home/yasmin/Área de Trabalho/Frontend/src/components/Footer/index.js",[],[],"/home/yasmin/Área de Trabalho/Frontend/src/components/Datatable/index.jsx",["112"],[],"import React, { useState } from 'react';\n\nimport { DataGrid } from '@material-ui/data-grid';\nimport { CustomPagination } from './footer'\n\nimport { Spinner } from '../Spinner';\nimport { CSVLink } from 'react-csv';\nimport 'jspdf-autotable';\n// import { DownloadButton } from '../DownloadButton/DownloadButton';\n\nimport './styles.css';\nimport { NoDataMessage } from '../NoDataMessage';\n\n/** props\n * \n * title\n * infos\n * rows\n * columns\n * head\n * downloadCsv\n * downloadPdf\n * loading\n * \n */\n\nconst Tabela = (props) => {\n\n  return (\n    <div id=\"datatable\">\n      {props.infos.length > 0 ? (\n        <div className='content-table'>\n          <div className='header-table'>\n            <div className=\"download-area\">\n              Download\n              <CSVLink data={props.downloadCsv()} filename={'escolas.csv'}>\n                <button variant='outlined'>\n                  CSV\n                </button>\n              </CSVLink>\n\n              <button variant='outlined' onClick={props.downloadPdf}>\n                PDF\n              </button>\n\n              {props.loading && (<Spinner className=\"loading-buttons\" />)}\n            </div>\n\n            <h1>{props.title}</h1>\n          </div>\n\n          <DataGrid\n            rows={props.rows}\n            columns={props.columns}\n            autoPageSize\n            pagination\n            components={{\n              pagination: CustomPagination,\n              // Header: () => <DownloadButton schoolsInfos={schoolsInfos} />\n            }}\n          />\n        </div>\n      ) : (\n        <NoDataMessage />\n      )}\n    </div>\n  );\n};\n\nexport default Tabela;\n","/home/yasmin/Área de Trabalho/Frontend/src/components/Header/index.jsx",["113"],["114","115"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./styles.css\";\n\nconst Header = () =>  {\n    return (\n        <header className=\"header\">\n            <div className=\"header-top\">\n                <div className=\"wrapper header-wrapper left\">\n                    <div className=\"header-end top\">\n                        {/* <a href=\"#\">Educasenso</a> */}\n                        {/* <a href=\"#\">Saber</a> */}\n                        {/* <a href=\"#\">Ajuda</a> */}\n                        {/* <a href=\"#\">Novidades</a> */}\n                        <a href=\"#\" className=\"button\">Sair</a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"header-bottom\">\n                <div className=\"wrapper header-wrapper\">\n                    <div className=\"header-middle\">\n                        <a href=\"#\" className=\"brand\"><img src=\"./assets/img/logo-saber.png\" alt=\"logo saber\"></img></a>\n                    </div>\n                    <div className=\"header-start\">\n                        <nav className=\"nav\">\n                            <button className=\"nav-toggle\" aria-expanded=\"false\" type=\"button\">\n                                menu\n                            </button>\n                            <ul className=\"nav-wrapper\">\n                                <li className=\"nav-item\"><Link to='/'>Escolas</Link></li>\n                                <li className=\"nav-item\"><Link to='/students'>Alunos</Link></li>\n                                <li className=\"nav-item\"><Link to='/professional'>Profissionais</Link></li>\n                                {/* <li className=\"nav-item\"><a href=\"#\">Relatórios</a></li> */}\n                                {/* <li className=\"nav-item\"><a href=\"#\">Aquisição de Materiais</a></li> */}\n                            </ul>\n                        </nav>\n                    </div>\n\n                    {/* <div className=\"header-end bottom\">\n                        <div className=\"search\">\n                            <button className=\"search-toggle\" aria-label=\"Open search\">\n                                Pesquisar\n                            </button>\n                            <form className=\"search__form\" action=\"\">\n                                <label className=\"sr-only\" htmlFor=\"search\">Pesquisar</label>\n                                <input type=\"search\" name=\"\" id=\"search\" placeholder=\"O que você procura?\" />\n                            </form>\n                        </div>\n                    </div> */}\n                </div>\n            </div>\n        </header>\n    );\n}\n\nexport default Header;","/home/yasmin/Área de Trabalho/Frontend/src/components/PlotlyMapBox/index.jsx",["116"],[],"import React from \"react\";\nimport 'plotly.js';\nimport Plotly from 'react-plotly.js';\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { Spinner } from \"../Spinner\";\nimport './styles.css';\nimport { NoDataMessage } from \"../NoDataMessage\";\n\nconst PlotlyMapBox = (props) => {\n    const [data, setData] = useState();\n    const [config, setConfig] = useState();\n    const [layout, setLayout] = useState();\n\n    function verifyEmptyData(data) {\n        for (const item of data) {\n            let value = parseInt(item.data);\n            if (value > 0 || value != \"0\") return true;\n        }\n\n        return false;\n    }\n\n    useEffect(() => {\n        let lon = [];\n        let lat = [];\n        let z = [];\n    \n        props.locations.forEach(school => {\n            lon.push(parseFloat(school.longitude));\n            lat.push(parseFloat(school.latitude));\n            z.push(parseInt(school.data));\n        });\n\n        setData([{\n            lon: lon, lat: lat, radius: 10,\n            z: z,\n            type: \"densitymapbox\",\n            coloraxis: 'coloraxis', zmin: 0, zmax: 10000,\n            // hoverinfo: 'skip'\n        }]);\n\n        setLayout({\n            mapbox: {\n                center: { lon: -37.2779, lat: -7.02556 },\n                style: \"outdoors\",\n                zoom: 6,\n            },\n            // width: 1000,\n            coloraxis: { colorscale: \"Viridis\" },\n            title: {\n                text: `<b>${props.title}</b>`,\n                font: {\n                    family: 'Helvetica, Arial, sans-serif',\n                    size: 18,\n                    color: '#000000'\n                }\n            },\n            margin: { t: 30, b: 30 }\n        });\n\n        setConfig({\n            mapboxAccessToken: \"pk.eyJ1IjoiYW5uaWViZWx0cmFvIiwiYSI6ImNrajdpZGlhODF1aTkzMG5wcjJrN2w0dWsifQ.w5XFiBxyFEbkQwRtekWV7Q\",\n            responsive: true \n        });\n\n    }, [props.locations, props.title]);\n\n    return (\n        <div id=\"plotly\">\n            { props.locations.length > 0 ? (\n                verifyEmptyData(props.locations) ? (\n                    <Plotly\n                    data={data}\n                    layout={layout}\n                    config={config}\n                    style={{ width: '100%', height: '100%' }}\n                />\n                ) : (\n                    <NoDataMessage />\n                )\n            ) : (\n                <Spinner className=\"spinner-plotly\" />\n            )}\n        </div>\n    );\n};\n\nexport default PlotlyMapBox;","/home/yasmin/Área de Trabalho/Frontend/src/components/Datatable/footer.jsx",[],[],"/home/yasmin/Área de Trabalho/Frontend/src/components/NoDataMessage/index.jsx",["117"],[],"import React from \"react\";\nimport NoDataImage from '../../assets/no-data.png';\n\nimport './styles.css';\n\nexport const NoDataMessage = () => {\n    return (\n       <div className=\"title-nocontent\">\n           <h1>Nenhum dado encontrado</h1>\n           <img src={NoDataImage}></img>\n       </div> \n    );\n}","/home/yasmin/Área de Trabalho/Frontend/src/components/Spinner/index.jsx",[],[],{"ruleId":"118","severity":1,"message":"119","line":487,"column":6,"nodeType":"120","endLine":487,"endColumn":34,"suggestions":"121"},{"ruleId":"118","severity":1,"message":"122","line":374,"column":6,"nodeType":"120","endLine":374,"endColumn":34,"suggestions":"123"},{"ruleId":"118","severity":1,"message":"124","line":270,"column":8,"nodeType":"120","endLine":270,"endColumn":36,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":210,"column":34,"nodeType":"128","messageId":"129","endLine":210,"endColumn":36},{"ruleId":"126","severity":1,"message":"127","line":73,"column":34,"nodeType":"128","messageId":"129","endLine":73,"endColumn":36},{"ruleId":"118","severity":1,"message":"130","line":132,"column":8,"nodeType":"120","endLine":139,"endColumn":6,"suggestions":"131"},{"ruleId":"126","severity":1,"message":"127","line":142,"column":25,"nodeType":"128","messageId":"129","endLine":142,"endColumn":27},{"ruleId":"126","severity":1,"message":"132","line":142,"column":42,"nodeType":"128","messageId":"129","endLine":142,"endColumn":44},{"ruleId":"118","severity":1,"message":"133","line":152,"column":8,"nodeType":"120","endLine":152,"endColumn":34,"suggestions":"134"},{"ruleId":"126","severity":1,"message":"127","line":132,"column":34,"nodeType":"128","messageId":"129","endLine":132,"endColumn":36},{"ruleId":"135","severity":1,"message":"136","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":25},{"ruleId":"135","severity":1,"message":"139","line":2,"column":17,"nodeType":"137","messageId":"138","endLine":2,"endColumn":26},{"ruleId":"140","severity":1,"message":"141","line":16,"column":25,"nodeType":"142","endLine":16,"endColumn":56,"suppressions":"143"},{"ruleId":"140","severity":1,"message":"141","line":23,"column":25,"nodeType":"142","endLine":23,"endColumn":55,"suppressions":"144"},{"ruleId":"126","severity":1,"message":"127","line":18,"column":36,"nodeType":"128","messageId":"129","endLine":18,"endColumn":38},{"ruleId":"145","severity":1,"message":"146","line":10,"column":12,"nodeType":"142","endLine":10,"endColumn":35},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'averageIntSchoolEvasion', 'averagesPerGre', 'averagesPersize', 'enrollmentsCG', 'enrollmentsInYears', 'enrollmentsJP', 'enrollmentsPerGre', 'enrollmentsPerSize', 'highestEnrollments', 'schoolsInYearsPerGre', 'schoolsInYearsPerSize', 'schoolsPerGre', 'schoolsPerSize', and 'totalEnrollmentsInYears'. Either include them or remove the dependency array. You can also do a functional update 'setHighestEnrollments(h => ...)' if you only need 'highestEnrollments' in the 'setHighestEnrollments' call.","ArrayExpression",["147"],"React Hook useEffect has missing dependencies: 'averagesPerGre', 'averagesPersize', 'enrollmentsCG', 'enrollmentsJP', 'enrollmentsPerGre', 'enrollmentsPerSize', 'highestEnrollments', 'regularSchoolsInYears', 'schoolsInYearsPerGre', 'schoolsInYearsPerSize', 'schoolsPerGre', 'schoolsPerSize', and 'totalEnrollmentsInYears'. Either include them or remove the dependency array. You can also do a functional update 'setHighestEnrollments(h => ...)' if you only need 'highestEnrollments' in the 'setHighestEnrollments' call.",["148"],"React Hook useEffect has missing dependencies: 'censoEJAFundamentalComparison', 'censoEJAMedioComparison', 'censoEarlyFundamentalComparison', 'censoInfantilComparison', 'censoIntegralComparison', 'censoLateFundamentalComparison', 'censoMedioComparison', 'earlyFundamentalInYears', 'ejaRetention', 'firstMedioInYears', 'fundamentalRetention', 'integralInYears', 'lateFundamentalInYears', 'medioRetention', 'secondMedioInYears', 'studentEJA', 'studentRetention', and 'thirdMedioInYears'. Either include them or remove the dependency array. You can also do a functional update 'setStudentRetention(s => ...)' if you only need 'studentRetention' in the 'setStudentRetention' call.",["149"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'props.by'. Either include it or remove the dependency array.",["150"],"Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'data.length' and 'props.by'. Either include them or remove the dependency array.",["151"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",["152"],["153"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"kind":"164","justification":"165"},{"kind":"164","justification":"165"},"Update the dependencies array to be: [averageIntSchoolEvasion, averagesPerGre, averagesPersize, enrollmentsCG, enrollmentsInYears, enrollmentsJP, enrollmentsPerGre, enrollmentsPerSize, highestEnrollments, schoolsInYearsPerGre, schoolsInYearsPerSize, schoolsPerGre, schoolsPerSize, selectedAdministrationType, totalEnrollmentsInYears]",{"range":"166","text":"167"},"Update the dependencies array to be: [averagesPerGre, averagesPersize, enrollmentsCG, enrollmentsJP, enrollmentsPerGre, enrollmentsPerSize, highestEnrollments, regularSchoolsInYears, schoolsInYearsPerGre, schoolsInYearsPerSize, schoolsPerGre, schoolsPerSize, selectedAdministrationType, totalEnrollmentsInYears]",{"range":"168","text":"169"},"Update the dependencies array to be: [censoEJAFundamentalComparison, censoEJAMedioComparison, censoEarlyFundamentalComparison, censoInfantilComparison, censoIntegralComparison, censoLateFundamentalComparison, censoMedioComparison, earlyFundamentalInYears, ejaRetention, firstMedioInYears, fundamentalRetention, integralInYears, lateFundamentalInYears, medioRetention, secondMedioInYears, selectedAdministrationType, studentEJA, studentRetention, thirdMedioInYears]",{"range":"170","text":"171"},"Update the dependencies array to be: [props.x, props.y, data.length, options.xaxis.categories, props.useSelect, selected.value, props.by]",{"range":"172","text":"173"},"Update the dependencies array to be: [data.length, props.administrationType, props.by]",{"range":"174","text":"175"},"directive","",[19934,19962],"[averageIntSchoolEvasion, averagesPerGre, averagesPersize, enrollmentsCG, enrollmentsInYears, enrollmentsJP, enrollmentsPerGre, enrollmentsPerSize, highestEnrollments, schoolsInYearsPerGre, schoolsInYearsPerSize, schoolsPerGre, schoolsPerSize, selectedAdministrationType, totalEnrollmentsInYears]",[15141,15169],"[averagesPerGre, averagesPersize, enrollmentsCG, enrollmentsJP, enrollmentsPerGre, enrollmentsPerSize, highestEnrollments, regularSchoolsInYears, schoolsInYearsPerGre, schoolsInYearsPerSize, schoolsPerGre, schoolsPerSize, selectedAdministrationType, totalEnrollmentsInYears]",[13819,13847],"[censoEJAFundamentalComparison, censoEJAMedioComparison, censoEarlyFundamentalComparison, censoInfantilComparison, censoIntegralComparison, censoLateFundamentalComparison, censoMedioComparison, earlyFundamentalInYears, ejaRetention, firstMedioInYears, fundamentalRetention, integralInYears, lateFundamentalInYears, medioRetention, secondMedioInYears, selectedAdministrationType, studentEJA, studentRetention, thirdMedioInYears]",[3949,4093],"[props.x, props.y, data.length, options.xaxis.categories, props.useSelect, selected.value, props.by]",[4595,4621],"[data.length, props.administrationType, props.by]"]